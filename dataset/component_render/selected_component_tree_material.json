{
  "components": [
    {
      "name": "tabs",
      "introduction": [
        "# Tabs\n\n<p class=\"description\">Tabs make it easy to explore and switch between different views.</p>\n\nTabs organize and allow navigation between groups of content that are related and at the same level of hierarchy."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nTabs are implemented using a collection of related components:\n\n- `<Tab />` - the tab element itself. Clicking on a tab displays its corresponding panel.\n- `<Tabs />` - the container that houses the tabs. Responsible for handling focus and keyboard navigation between tabs."
          ],
          "code_path": [
            "BasicTabs.js"
          ],
          "children": []
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Experimental API",
          "introduction": [
            "Experimental API\n\n`@mui/lab` offers utility components that inject props to implement accessible tabs\nfollowing [WAI-ARIA Authoring Practices](https://www.w3.org/WAI/ARIA/apg/patterns/tabs/):\n\n- `<TabList />` - the container that houses the tabs. Responsible for handling focus and keyboard navigation between tabs.\n- `<TabPanel />` - the card that hosts the content associated with a tab.\n- `<TabContext />` - the top-level component that wraps the Tab List and Tab Panel components."
          ],
          "code_path": [
            "LabTabs.js"
          ],
          "children": []
        },
        {
          "name": "Wrapped labels",
          "introduction": [
            "Wrapped labels\n\nLong labels will automatically wrap on tabs.\nIf the label is too long for the tab, it will overflow, and the text will not be visible."
          ],
          "code_path": [
            "TabsWrappedLabel.js"
          ],
          "children": []
        },
        {
          "name": "Colored tab",
          "introduction": [
            "Colored tab"
          ],
          "code_path": [
            "ColorTabs.js"
          ],
          "children": []
        },
        {
          "name": "Disabled tab",
          "introduction": [
            "Disabled tab\n\nA tab can be disabled by setting the `disabled` prop."
          ],
          "code_path": [
            "DisabledTabs.js"
          ],
          "children": []
        },
        {
          "name": "Fixed tabs",
          "introduction": [
            "Fixed tabs\n\nFixed tabs should be used with a limited number of tabs, and when a consistent placement will aid muscle memory."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Full width",
              "introduction": [
                "Full width\n\nThe `variant=\"fullWidth\"` prop should be used for smaller views."
              ],
              "code_path": [
                "FullWidthTabs.js"
              ],
              "children": []
            },
            {
              "name": "Centered",
              "introduction": [
                "Centered\n\nThe `centered` prop should be used for larger views."
              ],
              "code_path": [
                "CenteredTabs.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Scrollable tabs",
          "introduction": [
            "Scrollable tabs"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Automatic scroll buttons",
              "introduction": [
                "Automatic scroll buttons\n\nUse the `variant=\"scrollable\"` and `scrollButtons=\"auto\"` props to display left and right scroll buttons on desktop that are hidden on mobile:"
              ],
              "code_path": [
                "ScrollableTabsButtonAuto.js"
              ],
              "children": []
            },
            {
              "name": "Forced scroll buttons",
              "introduction": [
                "Forced scroll buttons\n\nApply `scrollButtons={true}` and the `allowScrollButtonsMobile` prop to display the left and right scroll buttons on all viewports:",
                "If you want to make sure the buttons are always visible, you should customize the opacity.\n\n```css\n.MuiTabs-scrollButtons.Mui-disabled {\n  opacity: 0.3;\n}\n```"
              ],
              "code_path": [
                "ScrollableTabsButtonForce.js",
                "ScrollableTabsButtonVisible.js"
              ],
              "children": []
            },
            {
              "name": "Prevent scroll buttons",
              "introduction": [
                "Prevent scroll buttons\n\nLeft and right scroll buttons are never be presented with `scrollButtons={false}`.\nAll scrolling must be initiated through user agent scrolling mechanisms (for example left/right swipe, shift mouse wheel, etc.)"
              ],
              "code_path": [
                "ScrollableTabsButtonPrevent.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).",
            "🎨 If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/tabs-introduction--docs)."
          ],
          "code_path": [
            "CustomizedTabs.js",
            null
          ],
          "children": []
        },
        {
          "name": "Vertical tabs",
          "introduction": [
            "Vertical tabs\n\nTo make vertical tabs instead of default horizontal ones, there is `orientation=\"vertical\"`:",
            "Note that you can restore the scrollbar with `visibleScrollbar`."
          ],
          "code_path": [
            "VerticalTabs.js",
            null
          ],
          "children": []
        },
        {
          "name": "Nav tabs",
          "introduction": [
            "Nav tabs\n\nBy default, tabs use a `button` element, but you can provide your custom tag or component. Here's an example of implementing tabbed navigation:"
          ],
          "code_path": [
            "NavTabs.js"
          ],
          "children": [
            {
              "name": "Third-party routing library",
              "introduction": [
                "Third-party routing library\n\nOne frequent use case is to perform navigation on the client only, without an HTTP round-trip to the server.\nThe `Tab` component provides the `component` prop to handle this use case.\nHere is a [more detailed guide](/material-ui/integrations/routing/#tabs)."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Icon tabs",
          "introduction": [
            "Icon tabs\n\nTab labels may be either all icons or all text.",
            ""
          ],
          "code_path": [
            "IconTabs.js",
            "IconLabelTabs.js"
          ],
          "children": []
        },
        {
          "name": "Icon position",
          "introduction": [
            "Icon position\n\nBy default, the icon is positioned at the `top` of a tab. Other supported positions are `start`, `end`, `bottom`."
          ],
          "code_path": [
            "IconPositionTabs.js"
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/tabs/)\n\nThe following steps are needed in order to provide necessary information for assistive technologies:\n\n1. Label `Tabs` via `aria-label` or `aria-labelledby`.\n2. `Tab`s need to be connected to their\n   corresponding `[role=\"tabpanel\"]` by setting the correct `id`, `aria-controls` and `aria-labelledby`.\n\nAn example for the current implementation can be found in the demos on this page. We've also published [an experimental API](#experimental-api) in `@mui/lab` that does not require\nextra work."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Keyboard navigation",
              "introduction": [
                "Keyboard navigation\n\nThe components implement keyboard navigation using the \"manual activation\" behavior.\nIf you want to switch to the \"selection automatically follows focus\" behavior you have to pass `selectionFollowsFocus` to the `Tabs` component.\nThe WAI-ARIA authoring practices have a detailed guide on [how to decide when to make selection automatically follow focus](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#x6-4-deciding-when-to-make-selection-automatically-follow-focus)."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Demo",
                  "introduction": [
                    "Demo\n\nThe following two demos only differ in their keyboard navigation behavior.\nFocus a tab and navigate with arrow keys to notice the difference, for example <kbd class=\"key\">Arrow Left</kbd>.\n\n```jsx\n/* Tabs where selection follows focus */\n<Tabs selectionFollowsFocus />\n```",
                    "```jsx\n/* Tabs where each tab needs to be selected manually */\n<Tabs />\n```"
                  ],
                  "code_path": [
                    "AccessibleTabs1.js",
                    "AccessibleTabs2.js"
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "bottom-navigation",
      "introduction": [
        "# Bottom Navigation\n\n<p class=\"description\">The Bottom Navigation bar allows movement between primary destinations in an app.</p>\n\nBottom navigation bars display three to five destinations at the bottom of a screen. Each destination is represented by an icon and an optional text label. When a bottom navigation icon is tapped, the user is taken to the top-level navigation destination associated with that icon."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Bottom navigation",
          "introduction": [
            "Bottom navigation\n\nWhen there are only **three** actions, display both icons and text labels at all times."
          ],
          "code_path": [
            "SimpleBottomNavigation.js"
          ],
          "children": []
        },
        {
          "name": "Bottom navigation with no label",
          "introduction": [
            "Bottom navigation with no label\n\nIf there are **four** or **five** actions, display inactive views as icons only."
          ],
          "code_path": [
            "LabelBottomNavigation.js"
          ],
          "children": []
        },
        {
          "name": "Fixed positioning",
          "introduction": [
            "Fixed positioning\n\nThis demo keeps bottom navigation fixed to the bottom, no matter the amount of content on-screen."
          ],
          "code_path": [
            "FixedBottomNavigation.js"
          ],
          "children": []
        },
        {
          "name": "Third-party routing library",
          "introduction": [
            "Third-party routing library\n\nOne frequent use case is to perform navigation on the client only, without an HTTP round-trip to the server.\nThe `BottomNavigationAction` component provides the `component` prop to handle this use case.\nHere is a [more detailed guide](/material-ui/integrations/routing/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "pagination",
      "introduction": [
        "# Pagination\n\n<p class=\"description\">The Pagination component enables the user to select a specific page from a range of pages.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic pagination",
          "introduction": [
            "Basic pagination"
          ],
          "code_path": [
            "BasicPagination.js"
          ],
          "children": []
        },
        {
          "name": "Outlined pagination",
          "introduction": [
            "Outlined pagination"
          ],
          "code_path": [
            "PaginationOutlined.js"
          ],
          "children": []
        },
        {
          "name": "Rounded pagination",
          "introduction": [
            "Rounded pagination"
          ],
          "code_path": [
            "PaginationRounded.js"
          ],
          "children": []
        },
        {
          "name": "Pagination size",
          "introduction": [
            "Pagination size"
          ],
          "code_path": [
            "PaginationSize.js"
          ],
          "children": []
        },
        {
          "name": "Buttons",
          "introduction": [
            "Buttons\n\nYou can optionally enable first-page and last-page buttons, or disable the previous-page and next-page buttons."
          ],
          "code_path": [
            "PaginationButtons.js"
          ],
          "children": []
        },
        {
          "name": "Custom icons",
          "introduction": [
            "Custom icons\n\nIt's possible to customize the control icons."
          ],
          "code_path": [
            "CustomIcons.js"
          ],
          "children": []
        },
        {
          "name": "Pagination ranges",
          "introduction": [
            "Pagination ranges\n\nYou can specify how many digits to display either side of current page with the `siblingCount` prop, and adjacent to the start and end page number with the `boundaryCount` prop."
          ],
          "code_path": [
            "PaginationRanges.js"
          ],
          "children": []
        },
        {
          "name": "Controlled pagination",
          "introduction": [
            "Controlled pagination"
          ],
          "code_path": [
            "PaginationControlled.js"
          ],
          "children": []
        },
        {
          "name": "Router integration",
          "introduction": [
            "Router integration"
          ],
          "code_path": [
            "PaginationLink.js"
          ],
          "children": []
        },
        {
          "name": "`usePagination`",
          "introduction": [
            "`usePagination`\n\nFor advanced customization use cases, a headless `usePagination()` hook is exposed.\nIt accepts almost the same options as the Pagination component minus all the props\nrelated to the rendering of JSX.\nThe Pagination component is built on this hook.\n\n```jsx\nimport usePagination from '@mui/material/usePagination';\n```"
          ],
          "code_path": [
            "UsePagination.js"
          ],
          "children": []
        },
        {
          "name": "Table pagination",
          "introduction": [
            "Table pagination\n\nThe `Pagination` component was designed to paginate a list of arbitrary items when infinite loading isn't used.\nIt's preferred in contexts where SEO is important, for instance, a blog.\n\nFor the pagination of a large set of tabular data, you should use the `TablePagination` component.",
            ":::warning\nNote that the `Pagination` page prop starts at 1 to match the requirement of including the value in the URL, while the `TablePagination` page prop starts at 0 to match the requirement of zero-based JavaScript arrays that come with rendering a lot of tabular data.\n:::\n\nYou can learn more about this use case in the [table section](/material-ui/react-table/#custom-pagination-options) of the documentation."
          ],
          "code_path": [
            "TablePaginationDemo.js",
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "ARIA",
              "introduction": [
                "ARIA\n\nThe root node has a role of \"navigation\" and aria-label \"pagination navigation\" by default. The page items have an aria-label that identifies the purpose of the item (\"go to first page\", \"go to previous page\", \"go to page 1\" etc.).\nYou can override these using the `getItemAriaLabel` prop."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Keyboard",
              "introduction": [
                "Keyboard\n\nThe pagination items are in tab order, with a tabindex of \"0\"."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "rating",
      "introduction": [
        "# Rating\n\n<p class=\"description\">Ratings provide insight regarding others' opinions and experiences, and can allow the user to submit a rating of their own.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic rating",
          "introduction": [
            "Basic rating"
          ],
          "code_path": [
            "BasicRating.js"
          ],
          "children": []
        },
        {
          "name": "Rating precision",
          "introduction": [
            "Rating precision\n\nThe rating can display any float number with the `value` prop.\nUse the `precision` prop to define the minimum increment value change allowed."
          ],
          "code_path": [
            "HalfRating.js"
          ],
          "children": []
        },
        {
          "name": "Hover feedback",
          "introduction": [
            "Hover feedback\n\nYou can display a label on hover to help the user pick the correct rating value.\nThe demo uses the `onChangeActive` prop."
          ],
          "code_path": [
            "HoverRating.js"
          ],
          "children": []
        },
        {
          "name": "Sizes",
          "introduction": [
            "Sizes\n\nFor larger or smaller ratings use the `size` prop."
          ],
          "code_path": [
            "RatingSize.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedRating.js"
          ],
          "children": []
        },
        {
          "name": "Radio group",
          "introduction": [
            "Radio group\n\nThe rating is implemented with a radio group, set `highlightSelectedOnly` to restore the natural behavior."
          ],
          "code_path": [
            "RadioGroupRating.js"
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n([WAI tutorial](https://www.w3.org/WAI/tutorials/forms/custom-controls/#a-star-rating))\n\nThe accessibility of this component relies on:\n\n- A radio group with its fields visually hidden.\n  It contains six radio buttons, one for each star, and another for 0 stars that is checked by default. Be sure to provide a value for the `name` prop that is unique to the parent form.\n- Labels for the radio buttons containing actual text (\"1 Star\", \"2 Stars\", …).\n  Be sure to provide a suitable function to the `getLabelText` prop when the page is in a language other than English. You can use the [included locales](/material-ui/guides/localization/), or provide your own.\n- A visually distinct appearance for the rating icons.\n  By default, the rating component uses both a difference of color and shape (filled and empty icons) to indicate the value. In the event that you are using color as the only means to indicate the value, the information should also be also displayed as text, as in this demo. This is important to match [success Criterion 1.4.1](https://www.w3.org/TR/WCAG21/#use-of-color) of WCAG2.1."
          ],
          "code_path": [
            "TextRating.js"
          ],
          "children": [
            {
              "name": "ARIA",
              "introduction": [
                "ARIA\n\nThe read only rating has a role of \"img\", and an aria-label that describes the displayed rating."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Keyboard",
              "introduction": [
                "Keyboard\n\nBecause the rating component uses radio buttons, keyboard interaction follows the native browser behavior. Tab will focus the current rating, and cursor keys control the selected rating.\n\nThe read only rating is not focusable."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "switches",
      "introduction": [
        "# Switch\n\n<p class=\"description\">Switches toggle the state of a single setting on or off.</p>\n\nSwitches are the preferred way to adjust settings on mobile.\nThe option that the switch controls, as well as the state it's in,\nshould be made clear from the corresponding inline label."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic switches",
          "introduction": [
            "Basic switches"
          ],
          "code_path": [
            "BasicSwitches.js"
          ],
          "children": []
        },
        {
          "name": "Label",
          "introduction": [
            "Label\n\nYou can provide a label to the `Switch` thanks to the `FormControlLabel` component."
          ],
          "code_path": [
            "SwitchLabels.js"
          ],
          "children": []
        },
        {
          "name": "Size",
          "introduction": [
            "Size\n\nUse the `size` prop to change the size of the switch."
          ],
          "code_path": [
            "SwitchesSize.js"
          ],
          "children": []
        },
        {
          "name": "Color",
          "introduction": [
            "Color"
          ],
          "code_path": [
            "ColorSwitches.js"
          ],
          "children": []
        },
        {
          "name": "Controlled",
          "introduction": [
            "Controlled\n\nYou can control the switch with the `checked` and `onChange` props:"
          ],
          "code_path": [
            "ControlledSwitches.js"
          ],
          "children": []
        },
        {
          "name": "Switches with FormGroup",
          "introduction": [
            "Switches with FormGroup\n\n`FormGroup` is a helpful wrapper used to group selection controls components that provides an easier API.\nHowever, you are encouraged to use [Checkboxes](/material-ui/react-checkbox/) instead if multiple related controls are required. (See: [When to use](#when-to-use))."
          ],
          "code_path": [
            "SwitchesGroup.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).",
            "🎨 If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/switch-introduction--docs)."
          ],
          "code_path": [
            "CustomizedSwitches.js",
            null
          ],
          "children": []
        },
        {
          "name": "Label placement",
          "introduction": [
            "Label placement\n\nYou can change the placement of the label:"
          ],
          "code_path": [
            "FormControlLabelPosition.js"
          ],
          "children": []
        },
        {
          "name": "When to use",
          "introduction": [
            "When to use\n\n- [Checkboxes vs. Switches](https://uxplanet.org/checkbox-vs-toggle-switch-7fc6e83f10b8)"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n- It will render an element with the `checkbox` role not `switch` role since this\n  role isn't widely supported yet. Please test first if assistive technology of your\n  target audience supports this role properly. Then you can change the role with\n  `<Switch inputProps={{ role: 'switch' }}>`\n- All form controls should have labels, and this includes radio buttons, checkboxes, and switches. In most cases, this is done by using the `<label>` element ([FormControlLabel](/material-ui/api/form-control-label/)).\n- When a label can't be used, it's necessary to add an attribute directly to the input component.\n  In this case, you can apply the additional attribute (for example `aria-label`, `aria-labelledby`, `title`) via the `inputProps` prop.\n\n```jsx\n<Switch value=\"checkedA\" inputProps={{ 'aria-label': 'Switch A' }} />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "autocomplete",
      "introduction": [
        "# Autocomplete\n\n<p class=\"description\">The autocomplete is a normal text input enhanced by a panel of suggested options.</p>\n\nThe widget is useful for setting the value of a single-line textbox in one of two types of scenarios:\n\n1. The value for the textbox must be chosen from a predefined set of allowed values, for example a location field must contain a valid location name: [combo box](#combo-box).\n2. The textbox may contain any arbitrary value, but it is advantageous to suggest possible values to the user, for example a search field may suggest similar or previous searches to save the user time: [free solo](#free-solo).\n\nIt's meant to be an improved version of the \"react-select\" and \"downshift\" packages."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Combo box",
          "introduction": [
            "Combo box\n\nThe value must be chosen from a predefined set of allowed values."
          ],
          "code_path": [
            "ComboBox.js"
          ],
          "children": [
            {
              "name": "Options structure",
              "introduction": [
                "Options structure\n\nBy default, the component accepts the following options structures:\n\n```ts\ninterface AutocompleteOption {\n  label: string;\n}\n// or\ntype AutocompleteOption = string;\n```\n\nfor instance:\n\n```js\nconst options = [\n  { label: 'The Godfather', id: 1 },\n  { label: 'Pulp Fiction', id: 2 },\n];\n// or\nconst options = ['The Godfather', 'Pulp Fiction'];\n```\n\nHowever, you can use different structures by providing a `getOptionLabel` prop.\n\nIf your options are objects, you must provide the `isOptionEqualToValue` prop to ensure correct selection and highlighting. By default, it uses strict equality to compare options with the current value."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Playground",
              "introduction": [
                "Playground\n\nEach of the following examples demonstrates one feature of the Autocomplete component."
              ],
              "code_path": [
                "Playground.js"
              ],
              "children": []
            },
            {
              "name": "Country select",
              "introduction": [
                "Country select\n\nChoose one of the 248 countries."
              ],
              "code_path": [
                "CountrySelect.js"
              ],
              "children": []
            },
            {
              "name": "Controlled states",
              "introduction": [
                "Controlled states\n\nThe component has two states that can be controlled:\n\n1. the \"value\" state with the `value`/`onChange` props combination. This state represents the value selected by the user, for instance when pressing <kbd class=\"key\">Enter</kbd>.\n2. the \"input value\" state with the `inputValue`/`onInputChange` props combination. This state represents the value displayed in the textbox.\n\nThese two states are isolated, and should be controlled independently.\n\n:::info\n\n- A component is **controlled** when it's managed by its parent using props.\n- A component is **uncontrolled** when it's managed by its own local state.\n\nLearn more about controlled and uncontrolled components in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::",
                ":::warning\n\nIf you control the `value`, make sure it's referentially stable between renders.\nIn other words, the reference to the value shouldn't change if the value itself doesn't change.\n\n```tsx\n// ⚠️ BAD\nreturn <Autocomplete multiple value={allValues.filter((v) => v.selected)} />;\n\n// 👍 GOOD\nconst selectedValues = React.useMemo(\n  () => allValues.filter((v) => v.selected),\n  [allValues],\n);\nreturn <Autocomplete multiple value={selectedValues} />;\n```\n\nIn the first example, `allValues.filter` is called and returns **a new array** every render.\nThe fix includes memoizing the value, so it changes only when needed.\n:::"
              ],
              "code_path": [
                "ControllableStates.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Free solo",
          "introduction": [
            "Free solo\n\nSet `freeSolo` to true so the textbox can contain any arbitrary value."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Search input",
              "introduction": [
                "Search input\n\nThe prop is designed to cover the primary use case of a **search input** with suggestions, for example Google search or react-autowhatever.",
                ":::warning\nBe careful when using the free solo mode with non-string options, as it may cause type mismatch.\n\nThe value created by typing into the textbox is always a string, regardless of the type of the options.\n:::"
              ],
              "code_path": [
                "FreeSolo.js",
                null
              ],
              "children": []
            },
            {
              "name": "Creatable",
              "introduction": [
                "Creatable\n\nIf you intend to use this mode for a [combo box](#combo-box) like experience (an enhanced version of a select element) we recommend setting:\n\n- `selectOnFocus` to help the user clear the selected value.\n- `clearOnBlur` to help the user enter a new value.\n- `handleHomeEndKeys` to move focus inside the popup with the <kbd class=\"key\">Home</kbd> and <kbd class=\"key\">End</kbd> keys.\n- A last option, for instance: `Add \"YOUR SEARCH\"`.",
                "You could also display a dialog when the user wants to add a new value."
              ],
              "code_path": [
                "FreeSoloCreateOption.js",
                "FreeSoloCreateOptionDialog.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Grouped",
          "introduction": [
            "Grouped\n\nYou can group the options with the `groupBy` prop.\nIf you do so, make sure that the options are also sorted with the same dimension that they are grouped by,\notherwise, you will notice duplicate headers.",
            "To control how the groups are rendered, provide a custom `renderGroup` prop.\nThis is a function that accepts an object with two fields:\n\n- `group`—a string representing a group name\n- `children`—a collection of list items that belong to the group\n\nThe following demo shows how to use this prop to define custom markup and override the styles of the default groups:"
          ],
          "code_path": [
            "Grouped.js",
            "RenderGroup.js"
          ],
          "children": []
        },
        {
          "name": "Disabled options",
          "introduction": [
            "Disabled options"
          ],
          "code_path": [
            "DisabledOptions.js"
          ],
          "children": []
        },
        {
          "name": "`useAutocomplete`",
          "introduction": [
            "`useAutocomplete`\n\nFor advanced customization use cases, a headless `useAutocomplete()` hook is exposed.\nIt accepts almost the same options as the Autocomplete component minus all the props\nrelated to the rendering of JSX.\nThe Autocomplete component is built on this hook.\n\n```tsx\nimport { useAutocomplete } from '@mui/base/useAutocomplete';\n```\n\nThe `useAutocomplete` hook is also reexported from @mui/material for convenience and backward compatibility.\n\n```tsx\nimport useAutocomplete from '@mui/material/useAutocomplete';\n```\n\n- 📦 [4.6 kB gzipped](https://bundlephobia.com/package/@mui/material)."
          ],
          "code_path": [
            "UseAutocomplete.js"
          ],
          "children": [
            {
              "name": "Customized hook",
              "introduction": [
                "Customized hook",
                "Head to the [customization](#customization) section for an example with the `Autocomplete` component instead of the hook."
              ],
              "code_path": [
                "CustomizedHook.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Asynchronous requests",
          "introduction": [
            "Asynchronous requests\n\nThe component supports two different asynchronous use-cases:\n\n- [Load on open](#load-on-open): it waits for the component to be interacted with to load the options.\n- [Search as you type](#search-as-you-type): a new request is made for each keystroke."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Load on open",
              "introduction": [
                "Load on open\n\nIt displays a progress state as long as the network request is pending."
              ],
              "code_path": [
                "Asynchronous.js"
              ],
              "children": []
            },
            {
              "name": "Search as you type",
              "introduction": [
                "Search as you type\n\nIf your logic is fetching new options on each keystroke and using the current value of the textbox\nto filter on the server, you may want to consider throttling requests.\n\nAdditionally, you will need to disable the built-in filtering of the `Autocomplete` component by\noverriding the `filterOptions` prop:\n\n```jsx\n<Autocomplete filterOptions={(x) => x} />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Google Maps place",
              "introduction": [
                "Google Maps place\n\nA customized UI for Google Maps Places Autocomplete.\nFor this demo, we need to load the [Google Maps JavaScript](https://developers.google.com/maps/documentation/javascript/overview) and [Google Places](https://developers.google.com/maps/documentation/places/web-service/overview) API.\n\n:::info\nThe following demo relies on [autosuggest-highlight](https://github.com/moroshko/autosuggest-highlight), a small (1 kB) utility for highlighting text in autosuggest and autocomplete components.\n:::",
                ":::error\nBefore you can start using the Google Maps JavaScript API and Places API, you need to get your own [API key](https://developers.google.com/maps/documentation/javascript/get-api-key).\n:::"
              ],
              "code_path": [
                "GoogleMaps.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Multiple values",
          "introduction": [
            "Multiple values\n\nAlso known as tags, the user is allowed to enter more than one value."
          ],
          "code_path": [
            "Tags.js"
          ],
          "children": [
            {
              "name": "Fixed options",
              "introduction": [
                "Fixed options\n\nIn the event that you need to lock certain tags so that they can't be removed, you can set the chips disabled."
              ],
              "code_path": [
                "FixedTags.js"
              ],
              "children": []
            },
            {
              "name": "Checkboxes",
              "introduction": [
                "Checkboxes"
              ],
              "code_path": [
                "CheckboxesTags.js"
              ],
              "children": []
            },
            {
              "name": "Limit tags",
              "introduction": [
                "Limit tags\n\nYou can use the `limitTags` prop to limit the number of displayed options when not focused."
              ],
              "code_path": [
                "LimitTags.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Sizes",
          "introduction": [
            "Sizes\n\nFancy smaller inputs? Use the `size` prop."
          ],
          "code_path": [
            "Sizes.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Custom input",
              "introduction": [
                "Custom input\n\nThe `renderInput` prop allows you to customize the rendered input.\nThe first argument of this render prop contains props that you need to forward.\nPay specific attention to the `ref` and `inputProps` keys.\n\n:::warning\nIf you're using a custom input component inside the Autocomplete, make sure that you forward the ref to the underlying DOM element.\n:::"
              ],
              "code_path": [
                "CustomInputAutocomplete.js"
              ],
              "children": []
            },
            {
              "name": "Globally Customized Options",
              "introduction": [
                "Globally Customized Options\n\nTo globally customize the Autocomplete options for all components in your app,\nyou can use the [theme default props](/material-ui/customization/theme-components/#theme-default-props) and set the `renderOption` property in the `defaultProps` key.\nThe `renderOption` property takes the `ownerState` as the fourth parameter, which includes props and internal component state.\nTo display the label, you can use the `getOptionLabel` prop from the `ownerState`.\nThis approach enables different options for each Autocomplete component while keeping the options styling consistent."
              ],
              "code_path": [
                "GloballyCustomizedOptions.js"
              ],
              "children": []
            },
            {
              "name": "GitHub's picker",
              "introduction": [
                "GitHub's picker\n\nThis demo reproduces GitHub's label picker:",
                "Head to the [Customized hook](#customized-hook) section for a customization example with the `useAutocomplete` hook instead of the component."
              ],
              "code_path": [
                "GitHubLabel.js",
                null
              ],
              "children": []
            },
            {
              "name": "Hint",
              "introduction": [
                "Hint\n\nThe following demo shows how to add a hint feature to the Autocomplete:"
              ],
              "code_path": [
                "AutocompleteHint.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Highlights",
          "introduction": [
            "Highlights\n\nThe following demo relies on [autosuggest-highlight](https://github.com/moroshko/autosuggest-highlight), a small (1 kB) utility for highlighting text in autosuggest and autocomplete components."
          ],
          "code_path": [
            "Highlights.js"
          ],
          "children": []
        },
        {
          "name": "Custom filter",
          "introduction": [
            "Custom filter\n\nThe component exposes a factory to create a filter method that can be provided to the `filterOptions` prop.\nYou can use it to change the default option filter behavior.\n\n```js\nimport { createFilterOptions } from '@mui/material/Autocomplete';\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "`createFilterOptions(config) => filterOptions`",
              "introduction": [
                "`createFilterOptions(config) => filterOptions`"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Arguments",
                  "introduction": [
                    "Arguments\n\n1. `config` (_object_ [optional]):\n\n- `config.ignoreAccents` (_bool_ [optional]): Defaults to `true`. Remove diacritics.\n- `config.ignoreCase` (_bool_ [optional]): Defaults to `true`. Lowercase everything.\n- `config.limit` (_number_ [optional]): Default to null. Limit the number of suggested options to be shown. For example, if `config.limit` is `100`, only the first `100` matching options are shown. It can be useful if a lot of options match and virtualization wasn't set up.\n- `config.matchFrom` (_'any' | 'start'_ [optional]): Defaults to `'any'`.\n- `config.stringify` (_func_ [optional]): Controls how an option is converted into a string so that it can be matched against the input text fragment.\n- `config.trim` (_bool_ [optional]): Defaults to `false`. Remove trailing spaces."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Returns",
                  "introduction": [
                    "Returns\n\n`filterOptions`: the returned filter method can be provided directly to the `filterOptions` prop of the `Autocomplete` component, or the parameter of the same name for the hook.\n\nIn the following demo, the options need to start with the query prefix:\n\n```jsx\nconst filterOptions = createFilterOptions({\n  matchFrom: 'start',\n  stringify: (option) => option.title,\n});\n\n<Autocomplete filterOptions={filterOptions} />;\n```"
                  ],
                  "code_path": [
                    "Filter.js"
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Advanced",
              "introduction": [
                "Advanced\n\nFor richer filtering mechanisms, like fuzzy matching, it's recommended to look at [match-sorter](https://github.com/kentcdodds/match-sorter). For instance:\n\n```jsx\nimport { matchSorter } from 'match-sorter';\n\nconst filterOptions = (options, { inputValue }) => matchSorter(options, inputValue);\n\n<Autocomplete filterOptions={filterOptions} />;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Virtualization",
          "introduction": [
            "Virtualization\n\nSearch within 10,000 randomly generated options. The list is virtualized thanks to [react-window](https://github.com/bvaughn/react-window)."
          ],
          "code_path": [
            "Virtualize.js"
          ],
          "children": []
        },
        {
          "name": "Events",
          "introduction": [
            "Events\n\nIf you would like to prevent the default key handler behavior, you can set the event's `defaultMuiPrevented` property to `true`:\n\n```jsx\n<Autocomplete\n  onKeyDown={(event) => {\n    if (event.key === 'Enter') {\n      // Prevent's default 'Enter' behavior.\n      event.defaultMuiPrevented = true;\n      // your handler code\n    }\n  }}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "autocomplete/autofill",
              "introduction": [
                "autocomplete/autofill\n\nBrowsers have heuristics to help the user fill in form inputs.\nHowever, this can harm the UX of the component.\n\nBy default, the component disables the input **autocomplete** feature (remembering what the user has typed for a given field in a previous session) with the `autoComplete=\"off\"` attribute.\nGoogle Chrome does not currently support this attribute setting ([Issue 41239842](https://issues.chromium.org/issues/41239842)).\nA possible workaround is to remove the `id` to have the component generate a random one.\n\nIn addition to remembering past entered values, the browser might also propose **autofill** suggestions (saved login, address, or payment details).\nIn the event you want the avoid autofill, you can try the following:\n\n- Name the input without leaking any information the browser can use. For example `id=\"field1\"` instead of `id=\"country\"`. If you leave the id empty, the component uses a random id.\n- Set `autoComplete=\"new-password\"` (some browsers will suggest a strong password for inputs with this attribute setting):\n\n  ```jsx\n  <TextField\n    {...params}\n    inputProps={{\n      ...params.inputProps,\n      autoComplete: 'new-password',\n    }}\n  />\n  ```\n\nRead [the guide on MDN](https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Turning_off_form_autocompletion) for more details."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "iOS VoiceOver",
              "introduction": [
                "iOS VoiceOver\n\nVoiceOver on iOS Safari doesn't support the `aria-owns` attribute very well.\nYou can work around the issue with the `disablePortal` prop."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "ListboxComponent",
              "introduction": [
                "ListboxComponent\n\nIf you provide a custom `ListboxComponent` prop, you need to make sure that the intended scroll container has the `role` attribute set to `listbox`. This ensures the correct behavior of the scroll, for example when using the keyboard to navigate."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/combobox/)\n\nWe encourage the usage of a label for the textbox.\nThe component implements the WAI-ARIA authoring practices."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "lists",
      "introduction": [
        "# Lists\n\n<p class=\"description\">Lists are continuous, vertical indexes of text or images.</p>\n\nLists are a continuous group of text or images. They are composed of items containing primary and supplemental actions, which are represented by icons and text."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nLists present information in a concise, easy-to-follow format through a continuous, vertical index of text or images.\n\nMaterial UI Lists are implemented using a collection of related components:\n\n- List: a wrapper for list items. Renders as a `<ul>` by default.\n- List Item: a common list item. Renders as an `<li>` by default.\n- List Item Button: an action element to be used inside a list item.\n- List Item Icon: an icon to be used inside of a list item.\n- List Item Avatar: an avatar to be used inside of a list item.\n- List Item Text: a container inside a list item, used to display text content.\n- List Divider: a separator between list items.\n- List Subheader: a label for a nested list.",
            "The last item of the previous demo shows how you can render a link:\n\n```jsx\n<ListItemButton component=\"a\" href=\"#simple-list\">\n  <ListItemText primary=\"Spam\" />\n</ListItemButton>\n```\n\nYou can find a [demo with React Router following this section](/material-ui/integrations/routing/#list) of the documentation."
          ],
          "code_path": [
            "BasicList.js",
            null
          ],
          "children": []
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Nested List",
          "introduction": [
            "Nested List"
          ],
          "code_path": [
            "NestedList.js"
          ],
          "children": []
        },
        {
          "name": "Folder List",
          "introduction": [
            "Folder List"
          ],
          "code_path": [
            "FolderList.js"
          ],
          "children": []
        },
        {
          "name": "Interactive",
          "introduction": [
            "Interactive\n\nBelow is an interactive demo that lets you explore the visual results of the different settings:"
          ],
          "code_path": [
            "InteractiveList.js"
          ],
          "children": []
        },
        {
          "name": "Selected ListItem",
          "introduction": [
            "Selected ListItem"
          ],
          "code_path": [
            "SelectedListItem.js"
          ],
          "children": []
        },
        {
          "name": "Align list items",
          "introduction": [
            "Align list items\n\nWhen displaying three lines or more, the avatar is not aligned at the top.\nYou should set the `alignItems=\"flex-start\"` prop to align the avatar at the top, following the Material Design guidelines:"
          ],
          "code_path": [
            "AlignItemsList.js"
          ],
          "children": []
        },
        {
          "name": "List Controls",
          "introduction": [
            "List Controls"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Checkbox",
              "introduction": [
                "Checkbox\n\nA checkbox can either be a primary action or a secondary action.\n\nThe checkbox is the primary action and the state indicator for the list item. The comment button is a secondary action and a separate target.",
                "The checkbox is the secondary action for the list item and a separate target."
              ],
              "code_path": [
                "CheckboxList.js",
                "CheckboxListSecondary.js"
              ],
              "children": []
            },
            {
              "name": "Switch",
              "introduction": [
                "Switch\n\nThe switch is the secondary action and a separate target."
              ],
              "code_path": [
                "SwitchListSecondary.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Sticky subheader",
          "introduction": [
            "Sticky subheader\n\nUpon scrolling, subheaders remain pinned to the top of the screen until pushed off screen by the next subheader.\nThis feature relies on CSS sticky positioning."
          ],
          "code_path": [
            "PinnedSubheaderList.js"
          ],
          "children": []
        },
        {
          "name": "Inset List Item",
          "introduction": [
            "Inset List Item\n\nThe `inset` prop enables a list item that does not have a leading icon or avatar to align correctly with items that do."
          ],
          "code_path": [
            "InsetList.js"
          ],
          "children": []
        },
        {
          "name": "Gutterless list",
          "introduction": [
            "Gutterless list\n\nWhen rendering a list within a component that defines its own gutters, `ListItem` gutters can be disabled with `disableGutters`."
          ],
          "code_path": [
            "GutterlessList.js"
          ],
          "children": []
        },
        {
          "name": "Virtualized List",
          "introduction": [
            "Virtualized List\n\nIn the following example, we demonstrate how to use [react-window](https://github.com/bvaughn/react-window) with the `List` component.\nIt renders 200 rows and can easily handle more.\nVirtualization helps with performance issues.",
            "The use of [react-window](https://github.com/bvaughn/react-window) when possible is encouraged.\nIf this library doesn't cover your use case, you should consider using alternatives like [react-virtuoso](https://github.com/petyosi/react-virtuoso)."
          ],
          "code_path": [
            "VirtualizedList.js",
            null
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the\n[overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedList.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "chips",
      "introduction": [
        "# Chip\n\n<p class=\"description\">Chips are compact elements that represent an input, attribute, or action.</p>\n\nChips allow users to enter information, make selections, filter content, or trigger actions.\n\nWhile included here as a standalone component, the most common use will\nbe in some form of input, so some of the behavior demonstrated here is\nnot shown in context."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic chip",
          "introduction": [
            "Basic chip\n\nThe `Chip` component supports outlined and filled styling."
          ],
          "code_path": [
            "BasicChips.js"
          ],
          "children": []
        },
        {
          "name": "Chip actions",
          "introduction": [
            "Chip actions\n\nYou can use the following actions.\n\n- Chips with the `onClick` prop defined change appearance on focus, hover, and click.\n- Chips with the `onDelete` prop defined will display a delete icon which changes appearance on hover."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Clickable",
              "introduction": [
                "Clickable"
              ],
              "code_path": [
                "ClickableChips.js"
              ],
              "children": []
            },
            {
              "name": "Deletable",
              "introduction": [
                "Deletable"
              ],
              "code_path": [
                "DeletableChips.js"
              ],
              "children": []
            },
            {
              "name": "Clickable and deletable",
              "introduction": [
                "Clickable and deletable"
              ],
              "code_path": [
                "ClickableAndDeletableChips.js"
              ],
              "children": []
            },
            {
              "name": "Clickable link",
              "introduction": [
                "Clickable link"
              ],
              "code_path": [
                "ClickableLinkChips.js"
              ],
              "children": []
            },
            {
              "name": "Custom delete icon",
              "introduction": [
                "Custom delete icon"
              ],
              "code_path": [
                "CustomDeleteIconChips.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Chip adornments",
          "introduction": [
            "Chip adornments\n\nYou can add ornaments to the beginning of the component.\n\nUse the `avatar` prop to add an avatar or use the `icon` prop to add an icon."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Avatar chip",
              "introduction": [
                "Avatar chip"
              ],
              "code_path": [
                "AvatarChips.js"
              ],
              "children": []
            },
            {
              "name": "Icon chip",
              "introduction": [
                "Icon chip"
              ],
              "code_path": [
                "IconChips.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Color chip",
          "introduction": [
            "Color chip\n\nYou can use the `color` prop to define a color from theme palette."
          ],
          "code_path": [
            "ColorChips.js"
          ],
          "children": []
        },
        {
          "name": "Sizes chip",
          "introduction": [
            "Sizes chip\n\nYou can use the `size` prop to define a small Chip."
          ],
          "code_path": [
            "SizesChips.js"
          ],
          "children": []
        },
        {
          "name": "Multiline chip",
          "introduction": [
            "Multiline chip\n\nBy default, Chips displays labels only in a single line.\nTo have them support multiline content, use the `sx` prop to add `height:auto` to the Chip component, and `whiteSpace: normal` to the `label` styles."
          ],
          "code_path": [
            "MultilineChips.js"
          ],
          "children": []
        },
        {
          "name": "Chip array",
          "introduction": [
            "Chip array\n\nAn example of rendering multiple chips from an array of values.\nDeleting a chip removes it from the array. Note that since no\n`onClick` prop is defined, the `Chip` can be focused, but does not\ngain depth while clicked or touched."
          ],
          "code_path": [
            "ChipsArray.js"
          ],
          "children": []
        },
        {
          "name": "Chip playground",
          "introduction": [
            "Chip playground"
          ],
          "code_path": [
            "ChipsPlayground.js"
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nIf the Chip is deletable or clickable then it is a button in tab order. When the Chip is focused (for example when tabbing) releasing (`keyup` event) `Backspace` or `Delete` will call the `onDelete` handler while releasing `Escape` will blur the Chip."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "alert",
      "introduction": [
        "# Alert\n\n<p class=\"description\">Alerts display brief messages for the user without interrupting their use of the app.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nAlerts give users brief and potentially time-sensitive information in an unobtrusive manner.\n\nThe Material UI Alert component includes several props for quickly customizing its styles to provide immediate visual cues about its contents.",
            ":::info\nThis component is no longer documented in the [Material Design guidelines](https://m2.material.io/), but Material UI will continue to support it.\n:::"
          ],
          "code_path": [
            "SimpleAlert.js",
            null
          ],
          "children": [
            {
              "name": "Usage",
              "introduction": [
                "Usage\n\nA key trait of the alert pattern is that [it should not interrupt the user's experience](https://www.w3.org/WAI/ARIA/apg/patterns/alert/) of the app.\nAlerts should not be confused with alert _dialogs_ ([ARIA](https://www.w3.org/WAI/ARIA/apg/patterns/alertdialog/)), which _are_ intended to interrupt the user to obtain a response.\nUse the Material UI [Dialog](/material-ui/react-dialog/) component if you need this behavior."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport Alert from '@mui/material/Alert';\n```\n\nThe Alert component wraps around its content, and stretches to fill its enclosing container."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Severity",
              "introduction": [
                "Severity\n\nThe `severity` prop accepts four values representing different states—`success` (the default), `info`, `warning`, and `error`–with corresponding icon and color combinations for each:"
              ],
              "code_path": [
                "BasicAlerts.js"
              ],
              "children": []
            },
            {
              "name": "Variants",
              "introduction": [
                "Variants\n\nThe Alert component comes with two alternative style options—`filled` and `outlined`—which you can set using the `variant` prop."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Filled",
                  "introduction": [
                    "Filled"
                  ],
                  "code_path": [
                    "FilledAlerts.js"
                  ],
                  "children": []
                },
                {
                  "name": "Outlined",
                  "introduction": [
                    "Outlined",
                    ":::warning\nWhen using an outlined Alert with the [Snackbar](/material-ui/react-snackbar/) component, background content will be visible and bleed through the Alert by default.\nYou can prevent this by adding `bgcolor: 'background.paper'` to [the `sx` prop](/material-ui/customization/how-to-customize/#the-sx-prop) on the Alert component:\n\n```jsx\n<Alert sx={{ bgcolor: 'background.paper' }} />\n```\n\nCheck out the [Snackbar—customization](/material-ui/react-snackbar/#customization) doc for an example of how to use these two components together.\n:::"
                  ],
                  "code_path": [
                    "OutlinedAlerts.js",
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Color",
              "introduction": [
                "Color\n\nUse the `color` prop to override the default color for the specified [`severity`](#severity)—for instance, to apply `warning` colors to a `success` Alert:"
              ],
              "code_path": [
                "ColorAlerts.js"
              ],
              "children": []
            },
            {
              "name": "Actions",
              "introduction": [
                "Actions\n\nAdd an action to your Alert with the `action` prop.\nThis lets you insert any element—an HTML tag, an SVG icon, or a React component such as a Material UI Button—after the Alert's message, justified to the right.\n\nIf you provide an `onClose` callback to the Alert without setting the `action` prop, the component will display a close icon (&#x2715;) by default."
              ],
              "code_path": [
                "ActionAlerts.js"
              ],
              "children": []
            },
            {
              "name": "Icons",
              "introduction": [
                "Icons\n\nUse the `icon` prop to override an Alert's icon.\nAs with the [`action`](#actions) prop, your `icon` can be an HTML element, an SVG icon, or a React component.\nSet this prop to `false` to remove the icon altogether.\n\nIf you need to override all instances of an icon for a given [`severity`](#severity), you can use the `iconMapping` prop instead.\nYou can define this prop globally by customizing your app's theme. See [Theme components—Default props](/material-ui/customization/theme-components/#theme-default-props) for details."
              ],
              "code_path": [
                "IconAlerts.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Titles",
              "introduction": [
                "Titles\n\nTo add a title to an Alert, import the Alert Title component:\n\n```jsx\nimport AlertTitle from '@mui/material/AlertTitle';\n```\n\nYou can nest this component above the message in your Alert for a neatly styled and properly aligned title, as shown below:"
              ],
              "code_path": [
                "DescriptionAlerts.js"
              ],
              "children": []
            },
            {
              "name": "Transitions",
              "introduction": [
                "Transitions\n\nYou can use [Transition components](/material-ui/transitions/) like [Collapse](/material-ui/transitions/#collapse) to add motion to an Alert's entrance and exit."
              ],
              "code_path": [
                "TransitionAlerts.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nHere are some factors to consider to ensure that your Alert is accessible:\n\n- Because alerts are not intended to interfere with the use of the app, your Alert component should _never_ affect the keyboard focus.\n- If an alert contains an action, that action must have a `tabindex` of `0` so it can be reached by keyboard-only users.\n- Essential alerts should not disappear automatically—[timed interactions](https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits-no-exceptions.html) can make your app inaccessible to users who need extra time to understand or locate the alert.\n- Alerts that occur too frequently can [inhibit the usability](https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits-postponed.html) of your app.\n- Dynamically rendered alerts are announced by screen readers; alerts that are already present on the page when it loads are _not_ announced.\n- Color does not add meaning to the UI for users who require assistive technology. You must ensure that any information conveyed through color is also denoted in other ways, such as within the text of the alert itself, or with additional hidden text that's read by screen readers."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Anatomy",
          "introduction": [
            "Anatomy\n\nThe Alert component is composed of a root [Paper](/material-ui/react-paper/) component (which renders as a `<div>`) that houses an icon, a message, and an optional [action](#actions):\n\n```html\n<div class=\"MuiPaper-root MuiAlert-root\" role=\"alert\">\n  <div class=\"MuiAlert-icon\">\n    <!-- svg icon here -->\n  </div>\n  <div class=\"MuiAlert-message\">This is how an Alert renders in the DOM.</div>\n  <div class=\"MuiAlert-action\">\n    <!-- optional action element here -->\n  </div>\n</div>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "snackbars",
      "introduction": [
        "# Snackbar\n\n<p class=\"description\">Snackbars (also known as toasts) are used for brief notifications of processes that have been or will be performed.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThe Snackbar component appears temporarily and floats above the UI to provide users with (non-critical) updates on an app's processes.\nThe demo below, inspired by Google Keep, shows a basic Snackbar with a text element and two actions:"
          ],
          "code_path": [
            "SimpleSnackbar.js"
          ],
          "children": [
            {
              "name": "Usage",
              "introduction": [
                "Usage\n\nSnackbars differ from [Alerts](/material-ui/react-alert/) in that Snackbars have a fixed position and a high z-index, so they're intended to break out of the document flow; Alerts, on the other hand, are usually part of the flow—except when they're [used as children of a Snackbar](#use-with-alerts).\n\nSnackbars also from differ from [Dialogs](/material-ui/react-dialog/) in that Snackbars are not intended to convey _critical_ information or block the user from interacting with the rest of the app; Dialogs, by contrast, require input from the user in order to be dismissed."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Import",
              "introduction": [
                "Import\n\n```jsx\nimport Snackbar from '@mui/material/Snackbar';\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Position",
              "introduction": [
                "Position\n\nUse the `anchorOrigin` prop to control the Snackbar's position on the screen."
              ],
              "code_path": [
                "PositionedSnackbar.js"
              ],
              "children": []
            },
            {
              "name": "Content",
              "introduction": [
                "Content\n\n```jsx\nimport SnackbarContent from '@mui/material/SnackbarContent';\n```\n\nUse the Snackbar Content component to add text and actions to the Snackbar."
              ],
              "code_path": [
                "LongTextSnackbar.js"
              ],
              "children": []
            },
            {
              "name": "Automatic dismiss",
              "introduction": [
                "Automatic dismiss\n\nUse the `autoHideDuration` prop to automatically trigger the Snackbar's `onClose` function after a set period of time (in milliseconds).\n\nMake sure to [provide sufficient time](https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits.html) for the user to process the information displayed on it."
              ],
              "code_path": [
                "AutohideSnackbar.js"
              ],
              "children": []
            },
            {
              "name": "Transitions",
              "introduction": [
                "Transitions\n\nYou can use the `TransitionComponent` prop to change the transition of the Snackbar from [Grow](/material-ui/transitions/#grow) (the default) to others such as [Slide](/material-ui/transitions/#slide)."
              ],
              "code_path": [
                "TransitionsSnackbar.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Use with Alerts",
              "introduction": [
                "Use with Alerts\n\nUse an Alert inside a Snackbar for messages that communicate a certain severity."
              ],
              "code_path": [
                "CustomizedSnackbars.js"
              ],
              "children": []
            },
            {
              "name": "Use with Floating Action Buttons",
              "introduction": [
                "Use with Floating Action Buttons\n\nIf you're using a [Floating Action Button](/material-ui/react-floating-action-button/) on mobile, Material Design recommends positioning snackbars directly above it, as shown in the demo below:"
              ],
              "code_path": [
                "FabIntegrationSnackbar.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Common examples",
          "introduction": [
            "Common examples"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Consecutive Snackbars",
              "introduction": [
                "Consecutive Snackbars\n\nThis demo shows how to display multiple Snackbars without stacking them by using a consecutive animation."
              ],
              "code_path": [
                "ConsecutiveSnackbars.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Supplementary components",
          "introduction": [
            "Supplementary components"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "notistack",
              "introduction": [
                "notistack\n\n![stars](https://img.shields.io/github/stars/iamhosseindhv/notistack.svg?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/notistack.svg)\n\nWith an imperative API, [notistack](https://github.com/iamhosseindhv/notistack) lets you vertically stack multiple Snackbars without having to handle their open and close states.\nEven though this is discouraged in the Material Design guidelines, it is still a common pattern.",
                ":::warning\nNote that notistack prevents Snackbars from being [closed by pressing <kbd class=\"key\">Escape</kbd>](#accessibility).\n:::"
              ],
              "code_path": [
                "IntegrationNotistack.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nThe user should be able to dismiss Snackbars by pressing <kbd class=\"key\">Escape</kbd>. If there are multiple instances appearing at the same time and you want <kbd class=\"key\">Escape</kbd> to dismiss only the oldest one that's currently open, call `event.preventDefault` in the `onClose` prop.\n\n```jsx\nexport default function MyComponent() {\n  const [open, setOpen] = React.useState(true);\n\n  return (\n    <React.Fragment>\n      <Snackbar\n        open={open}\n        onClose={(event, reason) => {\n          // `reason === 'escapeKeyDown'` if `Escape` was pressed\n          setOpen(false);\n          // call `event.preventDefault` to only close one Snackbar at a time.\n        }}\n      />\n      <Snackbar open={open} onClose={() => setOpen(false)} />\n    </React.Fragment>\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Anatomy",
          "introduction": [
            "Anatomy\n\nThe Snackbar component is composed of a root `<div>` that houses interior elements like the Snackbar Content and other optional components (such as buttons or decorators).\n\n```html\n<div role=\"presentation\" class=\"MuiSnackbar-root\">\n  <div class=\"MuiPaper-root MuiSnackbarContent-root\" role=\"alert\">\n    <div class=\"MuiSnackbarContent-message\">\n      <!-- Snackbar content goes here -->\n    </div>\n  </div>\n</div>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Experimental APIs - Toolpad",
          "introduction": [
            "Experimental APIs - Toolpad"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "useNotifications",
              "introduction": [
                "useNotifications\n\nYou can create and manipulate notifications imperatively with the [`useNotifications()`](https://mui.com/toolpad/core/react-use-notifications/) API in `@toolpad/core`. This API provides state management for opening and closing snackbars. It also allows for queueing multiple notifications at once."
              ],
              "code_path": [
                "ToolpadNotificationsNoSnap.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "speed-dial",
      "introduction": [
        "# Speed Dial\n\n<p class=\"description\">When pressed, a floating action button can display three to six related actions in the form of a Speed Dial.</p>\n\nIf more than six actions are needed, something other than a FAB should be used to present them."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic speed dial",
          "introduction": [
            "Basic speed dial\n\nThe floating action button can display related actions."
          ],
          "code_path": [
            "BasicSpeedDial.js"
          ],
          "children": []
        },
        {
          "name": "Playground",
          "introduction": [
            "Playground"
          ],
          "code_path": [
            "PlaygroundSpeedDial.js"
          ],
          "children": []
        },
        {
          "name": "Controlled speed dial",
          "introduction": [
            "Controlled speed dial\n\nThe open state of the component can be controlled with the `open`/`onOpen`/`onClose` props."
          ],
          "code_path": [
            "ControlledOpenSpeedDial.js"
          ],
          "children": []
        },
        {
          "name": "Custom close icon",
          "introduction": [
            "Custom close icon\n\nYou can provide an alternate icon for the closed and open states using the `icon` and `openIcon` props\nof the `SpeedDialIcon` component."
          ],
          "code_path": [
            "OpenIconSpeedDial.js"
          ],
          "children": []
        },
        {
          "name": "Persistent action tooltips",
          "introduction": [
            "Persistent action tooltips\n\nThe SpeedDialActions tooltips can be displayed persistently so that users don't have to long-press to see the tooltip on touch devices.\n\nIt is enabled here across all devices for demo purposes, but in production it could use the `isTouch` logic to conditionally set the prop."
          ],
          "code_path": [
            "SpeedDialTooltipOpen.js"
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "ARIA",
              "introduction": [
                "ARIA"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Required",
                  "introduction": [
                    "Required\n\n- You should provide an `ariaLabel` for the speed dial component.\n- You should provide a `tooltipTitle` for each speed dial action."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Provided",
                  "introduction": [
                    "Provided\n\n- The Fab has `aria-haspopup`, `aria-expanded` and `aria-controls` attributes.\n- The speed dial actions container has `role=\"menu\"` and `aria-orientation` set according to the direction.\n- The speed dial actions have `role=\"menuitem\"`, and an `aria-describedby` attribute that references the associated tooltip."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Keyboard",
              "introduction": [
                "Keyboard\n\n- The speed dial opens on focus.\n- The Space and Enter keys trigger the selected speed dial action, and toggle the speed dial open state.\n- The cursor keys move focus to the next or previous speed dial action. (Note that any cursor direction can be used initially to open the speed dial. This enables the expected behavior for the actual or perceived orientation of the speed dial, for example for a screen reader user who perceives the speed dial as a drop-down menu.)\n- The Escape key closes the speed dial and, if a speed dial action was focused, returns focus to the Fab."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "slider",
      "introduction": [
        "# Slider\n\n<p class=\"description\">Sliders allow users to make selections from a range of values.</p>\n\nSliders reflect a range of values along a bar, from which users may select a single value. They are ideal for adjusting settings such as volume, brightness, or applying image filters."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Continuous sliders",
          "introduction": [
            "Continuous sliders\n\nContinuous sliders allow users to select a value along a subjective range."
          ],
          "code_path": [
            "ContinuousSlider.js"
          ],
          "children": []
        },
        {
          "name": "Sizes",
          "introduction": [
            "Sizes\n\nFor smaller slider, use the prop `size=\"small\"`."
          ],
          "code_path": [
            "SliderSizes.js"
          ],
          "children": []
        },
        {
          "name": "Discrete sliders",
          "introduction": [
            "Discrete sliders\n\nDiscrete sliders can be adjusted to a specific value by referencing its value indicator.\nYou can generate a mark for each step with `marks={true}`."
          ],
          "code_path": [
            "DiscreteSlider.js"
          ],
          "children": [
            {
              "name": "Small steps",
              "introduction": [
                "Small steps\n\nYou can change the default step increment.\nMake sure to adjust the `shiftStep` prop (the granularity with which the slider can step when using Page Up/Down or Shift + Arrow Up/Down) to a value divadable with the `step`."
              ],
              "code_path": [
                "DiscreteSliderSteps.js"
              ],
              "children": []
            },
            {
              "name": "Custom marks",
              "introduction": [
                "Custom marks\n\nYou can have custom marks by providing a rich array to the `marks` prop."
              ],
              "code_path": [
                "DiscreteSliderMarks.js"
              ],
              "children": []
            },
            {
              "name": "Restricted values",
              "introduction": [
                "Restricted values\n\nYou can restrict the selectable values to those provided with the `marks` prop with `step={null}`."
              ],
              "code_path": [
                "DiscreteSliderValues.js"
              ],
              "children": []
            },
            {
              "name": "Label always visible",
              "introduction": [
                "Label always visible\n\nYou can force the thumb label to be always visible with `valueLabelDisplay=\"on\"`."
              ],
              "code_path": [
                "DiscreteSliderLabel.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Range slider",
          "introduction": [
            "Range slider\n\nThe slider can be used to set the start and end of a range by supplying an array of values to the `value` prop."
          ],
          "code_path": [
            "RangeSlider.js"
          ],
          "children": [
            {
              "name": "Minimum distance",
              "introduction": [
                "Minimum distance\n\nYou can enforce a minimum distance between values in the `onChange` event handler.\nBy default, when you move the pointer over a thumb while dragging another thumb, the active thumb will swap to the hovered thumb. You can disable this behavior with the `disableSwap` prop.\nIf you want the range to shift when reaching minimum distance, you can utilize the `activeThumb` parameter in `onChange`."
              ],
              "code_path": [
                "MinimumDistanceSlider.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Slider with input field",
          "introduction": [
            "Slider with input field\n\nIn this example, an input allows a discrete value to be set."
          ],
          "code_path": [
            "InputSlider.js"
          ],
          "children": []
        },
        {
          "name": "Color",
          "introduction": [
            "Color"
          ],
          "code_path": [
            "ColorSlider.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedSlider.js"
          ],
          "children": [
            {
              "name": "Music player",
              "introduction": [
                "Music player"
              ],
              "code_path": [
                "MusicPlayerSlider.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Vertical sliders",
          "introduction": [
            "Vertical sliders\n\nSet the `orientation` prop to `\"vertical\"` to create vertical sliders. The thumb will track vertical movement instead of horizontal movement.",
            ":::warning\nChrome versions below 124 implement `aria-orientation` incorrectly for vertical sliders and expose them as `'horizontal'` in the accessibility tree. ([Chromium issue #40736841](https://issues.chromium.org/issues/40736841))\n\nThe `-webkit-appearance: slider-vertical` CSS property can be used to correct this for these older versions, with the trade-off of causing a console warning in newer Chrome versions:\n\n```css\n.MuiSlider-thumb input {\n  -webkit-appearance: slider-vertical;\n}\n```\n\n:::"
          ],
          "code_path": [
            "VerticalSlider.js",
            null
          ],
          "children": []
        },
        {
          "name": "Marks placement",
          "introduction": [
            "Marks placement\n\nYou can customize your slider by adding and repositioning marks for minimum and maximum values."
          ],
          "code_path": [
            "CustomMarks.js"
          ],
          "children": []
        },
        {
          "name": "Track",
          "introduction": [
            "Track\n\nThe track shows the range available for user selection."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Removed track",
              "introduction": [
                "Removed track\n\nThe track can be turned off with `track={false}`."
              ],
              "code_path": [
                "TrackFalseSlider.js"
              ],
              "children": []
            },
            {
              "name": "Inverted track",
              "introduction": [
                "Inverted track\n\nThe track can be inverted with `track=\"inverted\"`."
              ],
              "code_path": [
                "TrackInvertedSlider.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Non-linear scale",
          "introduction": [
            "Non-linear scale\n\nYou can use the `scale` prop to represent the `value` on a different scale.\n\nIn the following demo, the value _x_ represents the value _2^x_.\nIncreasing _x_ by one increases the represented value by factor _2_."
          ],
          "code_path": [
            "NonLinearSlider.js"
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/slider-multithumb/)\n\nThe component handles most of the work necessary to make it accessible.\nHowever, you need to make sure that:\n\n- Each thumb has a user-friendly label (`aria-label`, `aria-labelledby` or `getAriaLabel` prop).\n- Each thumb has a user-friendly text for its current value.\n  This is not required if the value matches the semantics of the label.\n  You can change the name with the `getAriaValueText` or `aria-valuetext` prop."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "app-bar",
      "introduction": [
        "# App Bar\n\n<p class=\"description\">The App Bar displays information and actions relating to the current screen.</p>\n\nThe top App bar provides content and actions related to the current screen. It's used for branding, screen titles, navigation, and actions.\n\nIt can transform into a contextual action bar or be used as a navbar."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic App bar",
          "introduction": [
            "Basic App bar"
          ],
          "code_path": [
            "ButtonAppBar.js"
          ],
          "children": []
        },
        {
          "name": "App bar with menu",
          "introduction": [
            "App bar with menu"
          ],
          "code_path": [
            "MenuAppBar.js"
          ],
          "children": []
        },
        {
          "name": "App bar with responsive menu",
          "introduction": [
            "App bar with responsive menu"
          ],
          "code_path": [
            "ResponsiveAppBar.js"
          ],
          "children": []
        },
        {
          "name": "App bar with search field",
          "introduction": [
            "App bar with search field\n\nA side searchbar."
          ],
          "code_path": [
            "SearchAppBar.js"
          ],
          "children": []
        },
        {
          "name": "Responsive App bar with Drawer",
          "introduction": [
            "Responsive App bar with Drawer"
          ],
          "code_path": [
            "DrawerAppBar.js"
          ],
          "children": []
        },
        {
          "name": "App bar with a primary search field",
          "introduction": [
            "App bar with a primary search field\n\nA primary searchbar."
          ],
          "code_path": [
            "PrimarySearchAppBar.js"
          ],
          "children": []
        },
        {
          "name": "Dense (desktop only)",
          "introduction": [
            "Dense (desktop only)"
          ],
          "code_path": [
            "DenseAppBar.js"
          ],
          "children": []
        },
        {
          "name": "Prominent",
          "introduction": [
            "Prominent\n\nA prominent app bar."
          ],
          "code_path": [
            "ProminentAppBar.js"
          ],
          "children": []
        },
        {
          "name": "Bottom App bar",
          "introduction": [
            "Bottom App bar"
          ],
          "code_path": [
            "BottomAppBar.js"
          ],
          "children": []
        },
        {
          "name": "Fixed placement",
          "introduction": [
            "Fixed placement\n\nWhen you render the app bar position fixed, the dimension of the element doesn't impact the rest of the page. This can cause some part of your content to be invisible, behind the app bar. Here are 3 possible solutions:\n\n1. You can use `position=\"sticky\"` instead of fixed.\n2. You can render a second `<Toolbar />` component:\n\n```jsx\nfunction App() {\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\">\n        <Toolbar>{/* content */}</Toolbar>\n      </AppBar>\n      <Toolbar />\n    </React.Fragment>\n  );\n}\n```\n\n3. You can use `theme.mixins.toolbar` CSS:\n\n```jsx\nconst Offset = styled('div')(({ theme }) => theme.mixins.toolbar);\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\">\n        <Toolbar>{/* content */}</Toolbar>\n      </AppBar>\n      <Offset />\n    </React.Fragment>\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Scrolling",
          "introduction": [
            "Scrolling\n\nYou can use the `useScrollTrigger()` hook to respond to user scroll actions."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Hide App bar",
              "introduction": [
                "Hide App bar\n\nThe app bar hides on scroll down to leave more space for reading."
              ],
              "code_path": [
                "HideAppBar.js"
              ],
              "children": []
            },
            {
              "name": "Elevate App bar",
              "introduction": [
                "Elevate App bar\n\nThe app bar elevates on scroll to communicate that the user is not at the top of the page."
              ],
              "code_path": [
                "ElevateAppBar.js"
              ],
              "children": []
            },
            {
              "name": "Back to top",
              "introduction": [
                "Back to top\n\nA floating action button appears on scroll to make it easy to get back to the top of the page."
              ],
              "code_path": [
                "BackToTop.js"
              ],
              "children": []
            },
            {
              "name": "`useScrollTrigger([options]) => trigger`",
              "introduction": [
                "`useScrollTrigger([options]) => trigger`"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Arguments",
                  "introduction": [
                    "Arguments\n\n1. `options` (_object_ [optional]):\n\n   - `options.disableHysteresis` (_bool_ [optional]): Defaults to `false`. Disable the hysteresis. Ignore the scroll direction when determining the `trigger` value.\n   - `options.target` (_Node_ [optional]): Defaults to `window`.\n   - `options.threshold` (_number_ [optional]): Defaults to `100`. Change the `trigger` value when the vertical scroll strictly crosses this threshold (exclusive)."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Returns",
                  "introduction": [
                    "Returns\n\n`trigger`: Does the scroll position match the criteria?"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Examples",
                  "introduction": [
                    "Examples\n\n```jsx\nimport useScrollTrigger from '@mui/material/useScrollTrigger';\n\nfunction HideOnScroll(props) {\n  const trigger = useScrollTrigger();\n  return (\n    <Slide in={!trigger}>\n      <div>Hello</div>\n    </Slide>\n  );\n}\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Enable color on dark",
          "introduction": [
            "Enable color on dark\n\nFollowing the [Material Design guidelines](https://m2.material.io/design/color/dark-theme.html), the `color` prop has no effect on the appearance of the app bar in dark mode.\nYou can override this behavior by setting the `enableColorOnDark` prop to `true`."
          ],
          "code_path": [
            "EnableColorOnDarkAppBar.js"
          ],
          "children": []
        },
        {
          "name": "Toolpad (Beta)",
          "introduction": [
            "Toolpad (Beta)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Dashboard Layout",
              "introduction": [
                "Dashboard Layout\n\nThe [DashboardLayout](https://mui.com/toolpad/core/react-dashboard-layout/) component from `@toolpad/core` is the starting point for dashboarding applications. It takes care of application layout, theming, navigation, and more. An example usage of this component:"
              ],
              "code_path": [
                "DashboardLayoutBasic.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "transfer-list",
      "introduction": [
        "# Transfer List\n\n<p class=\"description\">A Transfer List (or \"shuttle\") enables the user to move one or more list items between lists.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic transfer list",
          "introduction": [
            "Basic transfer list\n\nFor completeness, this example includes buttons for \"move all\", but not every transfer list needs these."
          ],
          "code_path": [
            "TransferList.js"
          ],
          "children": []
        },
        {
          "name": "Enhanced transfer list",
          "introduction": [
            "Enhanced transfer list\n\nThis example exchanges the \"move all\" buttons for a \"select all / select none\" checkbox and adds a counter."
          ],
          "code_path": [
            "SelectAllTransferList.js"
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations\n\nThe component comes with a couple of limitations:\n\n- It only works on desktop.\n  If you have a limited amount of options to select, prefer the [Autocomplete](/material-ui/react-autocomplete/#multiple-values) component.\n  If mobile support is important for you, have a look at [#27579](https://github.com/mui/material-ui/issues/27579).\n- There are no high-level components exported from npm. The demos are based on composition.\n  If this is important for you, have a look at [#27579](https://github.com/mui/material-ui/issues/27579)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "checkboxes",
      "introduction": [
        "# Checkbox\n\n<p class=\"description\">Checkboxes allow the user to select one or more items from a set.</p>\n\nCheckboxes can be used to turn an option on or off.\n\nIf you have multiple options appearing in a list,\nyou can preserve space by using checkboxes instead of on/off switches.\nIf you have a single option, avoid using a checkbox and use an on/off switch instead."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic checkboxes",
          "introduction": [
            "Basic checkboxes"
          ],
          "code_path": [
            "Checkboxes.js"
          ],
          "children": []
        },
        {
          "name": "Label",
          "introduction": [
            "Label\n\nYou can provide a label to the `Checkbox` thanks to the `FormControlLabel` component."
          ],
          "code_path": [
            "CheckboxLabels.js"
          ],
          "children": []
        },
        {
          "name": "Size",
          "introduction": [
            "Size\n\nUse the `size` prop or customize the font size of the svg icons to change the size of the checkboxes."
          ],
          "code_path": [
            "SizeCheckboxes.js"
          ],
          "children": []
        },
        {
          "name": "Color",
          "introduction": [
            "Color"
          ],
          "code_path": [
            "ColorCheckboxes.js"
          ],
          "children": []
        },
        {
          "name": "Icon",
          "introduction": [
            "Icon"
          ],
          "code_path": [
            "IconCheckboxes.js"
          ],
          "children": []
        },
        {
          "name": "Controlled",
          "introduction": [
            "Controlled\n\nYou can control the checkbox with the `checked` and `onChange` props:"
          ],
          "code_path": [
            "ControlledCheckbox.js"
          ],
          "children": []
        },
        {
          "name": "Indeterminate",
          "introduction": [
            "Indeterminate\n\nA checkbox input can only have two states in a form: checked or unchecked.\nIt either submits its value or doesn't.\nVisually, there are **three** states a checkbox can be in: checked, unchecked, or indeterminate.\n\nYou can change the indeterminate icon using the `indeterminateIcon` prop.",
            ":::warning\nWhen indeterminate is set, the value of the `checked` prop only impacts the form submitted values.\nIt has no accessibility or UX implications.\n:::"
          ],
          "code_path": [
            "IndeterminateCheckbox.js",
            null
          ],
          "children": []
        },
        {
          "name": "FormGroup",
          "introduction": [
            "FormGroup\n\n`FormGroup` is a helpful wrapper used to group selection control components."
          ],
          "code_path": [
            "CheckboxesGroup.js"
          ],
          "children": []
        },
        {
          "name": "Label placement",
          "introduction": [
            "Label placement\n\nYou can change the placement of the label:"
          ],
          "code_path": [
            "FormControlLabelPosition.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).",
            "🎨 If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/checkbox-introduction--docs)."
          ],
          "code_path": [
            "CustomizedCheckbox.js",
            null
          ],
          "children": []
        },
        {
          "name": "When to use",
          "introduction": [
            "When to use\n\n- [Checkboxes vs. Radio Buttons](https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/)\n- [Checkboxes vs. Switches](https://uxplanet.org/checkbox-vs-toggle-switch-7fc6e83f10b8)"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/)\n\n- All form controls should have labels, and this includes radio buttons, checkboxes, and switches. In most cases, this is done by using the `<label>` element ([FormControlLabel](/material-ui/api/form-control-label/)).\n- When a label can't be used, it's necessary to add an attribute directly to the input component.\n  In this case, you can apply the additional attribute (for example `aria-label`, `aria-labelledby`, `title`) via the `inputProps` prop.\n\n```jsx\n<Checkbox\n  value=\"checkedA\"\n  inputProps={{\n    'aria-label': 'Checkbox A',\n  }}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "table",
      "introduction": [
        "# Table\n\n<p class=\"description\">Tables display sets of data. They can be fully customized.</p>\n\nTables display information in a way that's easy to scan, so that users can look for patterns and insights. They can be embedded in primary content, such as cards. They can include:\n\n- A corresponding visualization\n- Navigation\n- Tools to query and manipulate data"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nTables are implemented using a collection of related components:\n\n- `<TableContainer />`: A wrapper that provides horizontally scrolling behavior for the `<Table />` component.\n- `<Table />`: The main component for the table element. Renders as a `<table>` by default.\n- `<TableHead />`: The container for the header row(s) of `<Table />`. Renders as a `<thead>` by default.\n- `<TableBody />`: The container for the body rows of `<Table />`. Renders as a `<tbody>` by default.\n- `<TableRow />`: A row in a table. Can be used in `<TableHead />`, `<TableBody />`, or `<TableFooter />`. Renders as a `<tr>` by default.\n- `<TableCell />`: A cell in a table. Can be used in `<TableRow />` . Renders as a `<th>` in `<TableHead />` and `<td>` in `<TableBody />` by default.\n- `<TableFooter />`: An optional container for the footer row(s) of the table. Renders as a `<tfoot>` by default.\n- `<TablePagination />`: A component that provides controls for paginating table data. See the ['Sorting & selecting' example](#sorting-amp-selecting) and ['Custom Table Pagination Action' example](#custom-pagination-actions).\n- `<TableSortLabel />`: A component used to display sorting controls for column headers, allowing users to sort data in ascending or descending order. See the ['Sorting & selecting' example](#sorting-amp-selecting)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Basic table",
          "introduction": [
            "Basic table\n\nA simple example with no frills."
          ],
          "code_path": [
            "BasicTable.js"
          ],
          "children": []
        },
        {
          "name": "Data table",
          "introduction": [
            "Data table\n\nThe `Table` component has a close mapping to the native `<table>` elements.\nThis constraint makes building rich data tables challenging.\n\nThe [`DataGrid` component](/x/react-data-grid/) is designed for use-cases that are focused on handling large amounts of tabular data.\nWhile it comes with a more rigid structure, in exchange, you gain more powerful features."
          ],
          "code_path": [
            "DataTable.js"
          ],
          "children": []
        },
        {
          "name": "Dense table",
          "introduction": [
            "Dense table\n\nA simple example of a dense table with no frills."
          ],
          "code_path": [
            "DenseTable.js"
          ],
          "children": []
        },
        {
          "name": "Sorting & selecting",
          "introduction": [
            "Sorting & selecting\n\nThis example demonstrates the use of `Checkbox` and clickable rows for selection, with a custom `Toolbar`. It uses the `TableSortLabel` component to help style column headings.\n\nThe Table has been given a fixed width to demonstrate horizontal scrolling. In order to prevent the pagination controls from scrolling, the TablePagination component is used outside of the Table. (The ['Custom Table Pagination Action' example](#custom-pagination-actions) below shows the pagination within the TableFooter.)"
          ],
          "code_path": [
            "EnhancedTable.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedTables.js"
          ],
          "children": [
            {
              "name": "Custom pagination options",
              "introduction": [
                "Custom pagination options\n\nIt's possible to customize the options shown in the \"Rows per page\" select using the `rowsPerPageOptions` prop.\nYou should either provide an array of:\n\n- **numbers**, each number will be used for the option's label and value.\n\n  ```jsx\n  <TablePagination rowsPerPageOptions={[10, 50]} />\n  ```\n\n- **objects**, the `value` and `label` keys will be used respectively for the value and label of the option (useful for language strings such as 'All').\n\n  ```jsx\n  <TablePagination rowsPerPageOptions={[10, 50, { value: -1, label: 'All' }]} />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Custom pagination actions",
              "introduction": [
                "Custom pagination actions\n\nThe `ActionsComponent` prop of the `TablePagination` component allows the implementation of custom actions."
              ],
              "code_path": [
                "CustomPaginationActionsTable.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Sticky header",
          "introduction": [
            "Sticky header\n\nHere is an example of a table with scrollable rows and fixed column headers.\nIt leverages the `stickyHeader` prop."
          ],
          "code_path": [
            "StickyHeadTable.js"
          ],
          "children": []
        },
        {
          "name": "Column grouping",
          "introduction": [
            "Column grouping\n\nYou can group column headers by rendering multiple table rows inside a table head:\n\n```jsx\n<TableHead>\n  <TableRow />\n  <TableRow />\n</TableHead>\n```"
          ],
          "code_path": [
            "ColumnGroupingTable.js"
          ],
          "children": []
        },
        {
          "name": "Collapsible table",
          "introduction": [
            "Collapsible table\n\nAn example of a table with expandable rows, revealing more information.\nIt utilizes the [`Collapse`](/material-ui/api/collapse/) component."
          ],
          "code_path": [
            "CollapsibleTable.js"
          ],
          "children": []
        },
        {
          "name": "Spanning table",
          "introduction": [
            "Spanning table\n\nA simple example with spanning rows & columns."
          ],
          "code_path": [
            "SpanningTable.js"
          ],
          "children": []
        },
        {
          "name": "Virtualized table",
          "introduction": [
            "Virtualized table\n\nIn the following example, we demonstrate how to use [react-virtuoso](https://github.com/petyosi/react-virtuoso) with the `Table` component.\nIt renders 200 rows and can easily handle more.\nVirtualization helps with performance issues."
          ],
          "code_path": [
            "ReactVirtualizedTable.js"
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI tutorial: <https://www.w3.org/WAI/tutorials/tables/>)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Caption",
              "introduction": [
                "Caption\n\nA caption functions like a heading for a table. Most screen readers announce the content of captions. Captions help users to find a table and understand what it's about and decide if they want to read it."
              ],
              "code_path": [
                "AccessibleTable.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Unstyled",
          "introduction": [
            "Unstyled\n\nIf you would like to use an unstyled Table, you can use the primitive HTML elements and enhance the table with the TablePaginationUnstyled component.\nSee the demos in the [unstyled table pagination docs](/base-ui/react-table-pagination/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "menus",
      "introduction": [
        "# Menu\n\n<p class=\"description\">Menus display a list of choices on temporary surfaces.</p>\n\nA menu displays a list of choices on a temporary surface. It appears when the user interacts with a button, or other control."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nMenus are implemented using a collection of related components:\n\n- Menu: The container/surface of the menu.\n- Menu Item: An option for users to select from the menu.\n- Menu List (optional): Alternative composable container for Menu Items—see [Composition with Menu List](#composition-with-menu-list) for details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Basic menu",
          "introduction": [
            "Basic menu\n\nA basic menu opens over the anchor element by default (this option can be [changed](#menu-positioning) via props). When close to a screen edge, a basic menu vertically realigns to make sure that all menu items are completely visible.\n\nYou should configure the component so that selecting an option immediately confirms it and closes the menu, as shown in the demo below."
          ],
          "code_path": [
            "BasicMenu.js"
          ],
          "children": []
        },
        {
          "name": "Icon menu",
          "introduction": [
            "Icon menu\n\nIn desktop viewport, padding is increased to give more space to the menu."
          ],
          "code_path": [
            "IconMenu.js"
          ],
          "children": []
        },
        {
          "name": "Dense menu",
          "introduction": [
            "Dense menu\n\nFor the menu that has long list and long text, you can use the `dense` prop to reduce the padding and text size."
          ],
          "code_path": [
            "DenseMenu.js"
          ],
          "children": []
        },
        {
          "name": "Selected menu",
          "introduction": [
            "Selected menu\n\nIf used for item selection, when opened, simple menus places the initial focus on the selected menu item.\nThe currently selected menu item is set using the `selected` prop (from [ListItem](/material-ui/api/list-item/)).\nTo use a selected menu item without impacting the initial focus, set the `variant` prop to \"menu\"."
          ],
          "code_path": [
            "SimpleListMenu.js"
          ],
          "children": []
        },
        {
          "name": "Positioned menu",
          "introduction": [
            "Positioned menu\n\nBecause the `Menu` component uses the `Popover` component to position itself, you can use the same [positioning props](/material-ui/react-popover/#anchor-playground) to position it.\nFor instance, you can display the menu on top of the anchor:"
          ],
          "code_path": [
            "PositionedMenu.js"
          ],
          "children": []
        },
        {
          "name": "Composition with Menu List",
          "introduction": [
            "Composition with Menu List\n\nThe Menu component uses the Popover component internally.\nBut you might want to use a different positioning strategy, or prefer not to block scrolling, for example.\n\nThe Menu List component lets you compose your own menu for these kinds of use cases—its primary purpose is to handle focus.\nSee the demo below for an example of composition that uses Menu List and replaces the Menu's default Popover with a Popper component instead:"
          ],
          "code_path": [
            "MenuListComposition.js"
          ],
          "children": []
        },
        {
          "name": "Account menu",
          "introduction": [
            "Account menu\n\n`Menu` content can be mixed with other components like `Avatar`."
          ],
          "code_path": [
            "AccountMenu.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).",
            "The `MenuItem` is a wrapper around `ListItem` with some additional styles.\nYou can use the same list composition features with the `MenuItem` component:\n\n🎨 If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/menu-introduction--docs)."
          ],
          "code_path": [
            "CustomizedMenus.js",
            null
          ],
          "children": []
        },
        {
          "name": "Max height menu",
          "introduction": [
            "Max height menu\n\nIf the height of a menu prevents all menu items from being displayed, the menu can scroll internally."
          ],
          "code_path": [
            "LongMenu.js"
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations\n\nThere is [a flexbox bug](https://issues.chromium.org/issues/40344463) that prevents `text-overflow: ellipsis` from working in a flexbox layout.\nYou can use the `Typography` component with `noWrap` to workaround this issue:"
          ],
          "code_path": [
            "TypographyMenu.js"
          ],
          "children": []
        },
        {
          "name": "Change transition",
          "introduction": [
            "Change transition\n\nUse a different transition."
          ],
          "code_path": [
            "FadeMenu.js"
          ],
          "children": []
        },
        {
          "name": "Context menu",
          "introduction": [
            "Context menu\n\nHere is an example of a context menu. (Right click to open.)"
          ],
          "code_path": [
            "ContextMenu.js"
          ],
          "children": []
        },
        {
          "name": "Supplementary projects",
          "introduction": [
            "Supplementary projects\n\nFor more advanced use cases you might be able to take advantage of:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "material-ui-popup-state",
              "introduction": [
                "material-ui-popup-state\n\n![stars](https://img.shields.io/github/stars/jcoreio/material-ui-popup-state?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/material-ui-popup-state.svg)\n\nThe package [`material-ui-popup-state`](https://github.com/jcoreio/material-ui-popup-state) that takes care of menu state for you in most cases."
              ],
              "code_path": [
                "MenuPopupState.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "dialogs",
      "introduction": [
        "# Dialog\n\n<p class=\"description\">Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.</p>\n\nA Dialog is a type of [modal](/material-ui/react-modal/) window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken.\n\nDialogs are purposefully interruptive, so they should be used sparingly."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nDialogs are implemented using a collection of related components:\n\n- Dialog: the parent component that renders the modal.\n- Dialog Title: a wrapper used for the title of a Dialog.\n- Dialog Actions: an optional container for a Dialog's Buttons.\n- Dialog Content: an optional container for displaying the Dialog's content.\n- Dialog Content Text: a wrapper for text inside of `<DialogContent />`.\n- Slide: optional [Transition](/material-ui/transitions/#slide) used to slide the Dialog in from the edge of the screen."
          ],
          "code_path": [
            "SimpleDialogDemo.js"
          ],
          "children": []
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Alerts",
          "introduction": [
            "Alerts\n\nAlerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation.\n\nMost alerts don't need titles.\nThey summarize a decision in a sentence or two by either:\n\n- Asking a question (for example \"Delete this conversation?\")\n- Making a statement related to the action buttons\n\nUse title bar alerts only for high-risk situations, such as the potential loss of connectivity.\nUsers should be able to understand the choices based on the title and button text alone.\n\nIf a title is required:\n\n- Use a clear question or statement with an explanation in the content area, such as \"Erase USB storage?\".\n- Avoid apologies, ambiguity, or questions, such as \"Warning!\" or \"Are you sure?\""
          ],
          "code_path": [
            "AlertDialog.js"
          ],
          "children": []
        },
        {
          "name": "Transitions",
          "introduction": [
            "Transitions\n\nYou can also swap out the transition, the next example uses `Slide`."
          ],
          "code_path": [
            "AlertDialogSlide.js"
          ],
          "children": []
        },
        {
          "name": "Form dialogs",
          "introduction": [
            "Form dialogs\n\nForm dialogs allow users to fill out form fields within a dialog.\nFor example, if your site prompts for potential subscribers to fill in their email address, they can fill out the email field and touch 'Submit'."
          ],
          "code_path": [
            "FormDialog.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).\n\nThe dialog has a close button added to aid usability."
          ],
          "code_path": [
            "CustomizedDialogs.js"
          ],
          "children": []
        },
        {
          "name": "Full-screen dialogs",
          "introduction": [
            "Full-screen dialogs"
          ],
          "code_path": [
            "FullScreenDialog.js"
          ],
          "children": []
        },
        {
          "name": "Optional sizes",
          "introduction": [
            "Optional sizes\n\nYou can set a dialog maximum width by using the `maxWidth` enumerable in combination with the `fullWidth` boolean.\nWhen the `fullWidth` prop is true, the dialog will adapt based on the `maxWidth` value."
          ],
          "code_path": [
            "MaxWidthDialog.js"
          ],
          "children": []
        },
        {
          "name": "Responsive full-screen",
          "introduction": [
            "Responsive full-screen\n\nYou may make a dialog responsively full screen using [`useMediaQuery`](/material-ui/react-use-media-query/).\n\n```jsx\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n\n  return <Dialog fullScreen={fullScreen} />;\n}\n```"
          ],
          "code_path": [
            "ResponsiveDialog.js"
          ],
          "children": []
        },
        {
          "name": "Confirmation dialogs",
          "introduction": [
            "Confirmation dialogs\n\nConfirmation dialogs require users to explicitly confirm their choice before an option is committed.\nFor example, users can listen to multiple ringtones but only make a final selection upon touching \"OK\".\n\nTouching \"Cancel\" in a confirmation dialog, cancels the action, discards any changes, and closes the dialog."
          ],
          "code_path": [
            "ConfirmationDialog.js"
          ],
          "children": []
        },
        {
          "name": "Non-modal dialog",
          "introduction": [
            "Non-modal dialog\n\nDialogs can also be non-modal, meaning they don't interrupt user interaction behind it.\nVisit [the Nielsen Norman Group article](https://www.nngroup.com/articles/modal-nonmodal-dialog/) for more in-depth guidance about modal vs. non-modal dialog usage.\n\nThe demo below shows a persistent cookie banner, a common non-modal dialog use case."
          ],
          "code_path": [
            "CookiesBanner.js"
          ],
          "children": []
        },
        {
          "name": "Draggable dialog",
          "introduction": [
            "Draggable dialog\n\nYou can create a draggable dialog by using [react-draggable](https://github.com/react-grid-layout/react-draggable).\nTo do so, you can pass the imported `Draggable` component as the `PaperComponent` of the `Dialog` component.\nThis will make the entire dialog draggable."
          ],
          "code_path": [
            "DraggableDialog.js"
          ],
          "children": []
        },
        {
          "name": "Scrolling long content",
          "introduction": [
            "Scrolling long content\n\nWhen dialogs become too long for the user's viewport or device, they scroll.\n\n- `scroll=paper` the content of the dialog scrolls within the paper element.\n- `scroll=body` the content of the dialog scrolls within the body element.\n\nTry the demo below to see what we mean:"
          ],
          "code_path": [
            "ScrollDialog.js"
          ],
          "children": []
        },
        {
          "name": "Performance",
          "introduction": [
            "Performance\n\nFollow the [Modal performance section](/material-ui/react-modal/#performance)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations\n\nFollow the [Modal limitations section](/material-ui/react-modal/#limitations)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Supplementary projects",
          "introduction": [
            "Supplementary projects\n\nFor more advanced use cases you might be able to take advantage of:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "material-ui-confirm",
              "introduction": [
                "material-ui-confirm\n\n![stars](https://img.shields.io/github/stars/jonatanklosko/material-ui-confirm?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/material-ui-confirm.svg)\n\nThe package [`material-ui-confirm`](https://github.com/jonatanklosko/material-ui-confirm/) provides dialogs for confirming user actions without writing boilerplate code."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nFollow the [Modal accessibility section](/material-ui/react-modal/#accessibility)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Toolpad (Beta)",
          "introduction": [
            "Toolpad (Beta)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "useDialogs",
              "introduction": [
                "useDialogs\n\nYou can create and manipulate dialogs imperatively with the [`useDialogs()`](https://mui.com/toolpad/core/react-use-dialogs/) API in `@toolpad/core`. This hook handles\n\n- state management for opening and closing dialogs\n- passing data to dialogs and receiving results back from them\n- stacking multiple dialogs\n- themed, asynchronous versions of `window.alert()`, `window.confirm()` and `window.prompt()`\n\nThe following example demonstrates some of these features:",
                "```tsx\nconst handleDelete = async () => {\n  const id = await dialogs.prompt('Enter the ID to delete', {\n    okText: 'Delete',\n    cancelText: 'Cancel',\n  });\n\n  if (id) {\n    const deleteConfirmed = await dialogs.confirm(\n      `Are you sure you want to delete \"${id}\"?`,\n    );\n    if (deleteConfirmed) {\n      try {\n        setIsDeleting(true);\n        await mockApiDelete(id);\n        dialogs.alert('Deleted!');\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Unknown error';\n        await dialogs.open(MyCustomDialog, { id, error: message });\n      } finally {\n        setIsDeleting(false);\n      }\n    }\n  }\n};\n```"
              ],
              "code_path": [
                "ToolpadDialogsNoSnap.js",
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "steppers",
      "introduction": [
        "# Stepper\n\n<p class=\"description\">Steppers convey progress through numbered steps. It provides a wizard-like workflow.</p>\n\nSteppers display progress through a sequence of logical and numbered steps. They may also be used for navigation.\nSteppers may display a transient feedback message after a step is saved.\n\n- **Types of Steps**: Editable, Non-editable, Mobile, Optional\n- **Types of Steppers**: Horizontal, Vertical, Linear, Non-linear\n\n\n\n:::info\nThis component is no longer documented in the [Material Design guidelines](https://m2.material.io/), but Material UI will continue to support it.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThe Stepper component displays progress through a sequence of logical and numbered steps.\nIt supports horizontal and vertical orientation for desktop and mobile viewports.\n\nSteppers are implemented using a collection of related components:\n\n- Stepper: the container for the steps.\n- Step: an individual step in the sequence.\n- Step Label: a label for a Step.\n- Step Content: optional content for a Step.\n- Step Button: optional button for a Step.\n- Step Icon: optional icon for a Step.\n- Step Connector: optional customized connector between Steps."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Horizontal stepper",
          "introduction": [
            "Horizontal stepper\n\nHorizontal steppers are ideal when the contents of one step depend on an earlier step.\n\nAvoid using long step names in horizontal steppers."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Linear",
              "introduction": [
                "Linear\n\nA linear stepper allows the user to complete the steps in sequence.\n\nThe `Stepper` can be controlled by passing the current step index (zero-based) as the `activeStep` prop. `Stepper` orientation is set using the `orientation` prop.\n\nThis example also shows the use of an optional step by placing the `optional` prop on the second `Step` component. Note that it's up to you to manage when an optional step is skipped. Once you've determined this for a particular step you must set `completed={false}` to signify that even though the active step index has gone beyond the optional step, it's not actually complete."
              ],
              "code_path": [
                "HorizontalLinearStepper.js"
              ],
              "children": []
            },
            {
              "name": "Non-linear",
              "introduction": [
                "Non-linear\n\nNon-linear steppers allow the user to enter a multi-step flow at any point.\n\nThis example is similar to the regular horizontal stepper, except steps are no longer automatically set to `disabled={true}` based on the `activeStep` prop.\n\nThe use of the `StepButton` here demonstrates clickable step labels, as well as setting the `completed`\nflag. However because steps can be accessed in a non-linear fashion, it's up to your own implementation to\ndetermine when all steps are completed (or even if they need to be completed)."
              ],
              "code_path": [
                "HorizontalNonLinearStepper.js"
              ],
              "children": []
            },
            {
              "name": "Alternative label",
              "introduction": [
                "Alternative label\n\nLabels can be placed below the step icon by setting the `alternativeLabel` prop on the `Stepper` component."
              ],
              "code_path": [
                "HorizontalLinearAlternativeLabelStepper.js"
              ],
              "children": []
            },
            {
              "name": "Error step",
              "introduction": [
                "Error step"
              ],
              "code_path": [
                "HorizontalStepperWithError.js"
              ],
              "children": []
            },
            {
              "name": "Customized horizontal stepper",
              "introduction": [
                "Customized horizontal stepper\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
              ],
              "code_path": [
                "CustomizedSteppers.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Vertical stepper",
          "introduction": [
            "Vertical stepper\n\nVertical steppers are designed for narrow screen sizes. They are ideal for mobile. All the features of the horizontal stepper can be implemented."
          ],
          "code_path": [
            "VerticalLinearStepper.js"
          ],
          "children": [
            {
              "name": "Performance",
              "introduction": [
                "Performance\n\nThe content of a step is unmounted when closed.\nIf you need to make the content available to search engines or render expensive component trees inside your modal while optimizing for interaction responsiveness it might be a good idea to keep the step mounted with:\n\n```jsx\n<StepContent TransitionProps={{ unmountOnExit: false }} />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Mobile stepper",
          "introduction": [
            "Mobile stepper\n\nThis component implements a compact stepper suitable for a mobile device. It has more limited functionality than the vertical stepper. See [mobile steps](https://m1.material.io/components/steppers.html#steppers-types-of-steps) for its inspiration.\n\nThe mobile stepper supports three variants to display progress through the available steps: text, dots, and progress."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Text",
              "introduction": [
                "Text\n\nThe current step and total number of steps are displayed as text."
              ],
              "code_path": [
                "TextMobileStepper.js"
              ],
              "children": []
            },
            {
              "name": "Dots",
              "introduction": [
                "Dots\n\nUse dots when the number of steps is small."
              ],
              "code_path": [
                "DotsMobileStepper.js"
              ],
              "children": []
            },
            {
              "name": "Progress",
              "introduction": [
                "Progress\n\nUse a progress bar when there are many steps, or if there are steps that need to be inserted during the process (based on responses to earlier steps)."
              ],
              "code_path": [
                "ProgressMobileStepper.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "drawers",
      "introduction": [
        "# Drawer\n\n<p class=\"description\">The navigation drawers (or \"sidebars\") provide ergonomic access to destinations in a site or app functionality such as switching accounts.</p>\n\nA navigation drawer can either be permanently on-screen or controlled by a navigation menu icon.\n\n[Side sheets](https://m2.material.io/components/sheets-side) are supplementary surfaces primarily used on tablet and desktop."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Temporary drawer",
          "introduction": [
            "Temporary drawer\n\nTemporary navigation drawers can toggle open or closed. Closed by default, the drawer opens temporarily above all other content until a section is selected.\n\nThe Drawer can be cancelled by clicking the overlay or pressing the Esc key.\nIt closes when an item is selected, handled by controlling the `open` prop."
          ],
          "code_path": [
            "TemporaryDrawer.js"
          ],
          "children": [
            {
              "name": "Anchor",
              "introduction": [
                "Anchor\n\nUse the `anchor` prop to specify which side of the screen the Drawer should originate from.\n\nThe default value is `left`."
              ],
              "code_path": [
                "AnchorTemporaryDrawer.js"
              ],
              "children": []
            },
            {
              "name": "Swipeable",
              "introduction": [
                "Swipeable\n\nYou can make the drawer swipeable with the `SwipeableDrawer` component.\n\nThis component comes with a 2 kB gzipped payload overhead.\nSome low-end mobile devices won't be able to follow the fingers at 60 FPS.\nYou can use the `disableBackdropTransition` prop to help.",
                "The following properties are used in this documentation website for optimal usability of the component:\n\n- iOS is hosted on high-end devices.\n  The backdrop transition can be enabled without dropping frames.\n  The performance will be good enough.\n- iOS has a \"swipe to go back\" feature that interferes\n  with the discovery feature, so discovery has to be disabled.\n\n```jsx\nconst iOS =\n  typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n<SwipeableDrawer disableBackdropTransition={!iOS} disableDiscovery={iOS} />;\n```"
              ],
              "code_path": [
                "SwipeableTemporaryDrawer.js",
                null
              ],
              "children": []
            },
            {
              "name": "Swipeable edge",
              "introduction": [
                "Swipeable edge\n\nYou can configure the `SwipeableDrawer` to have a visible edge when closed.\n\nIf you are on a desktop, you can toggle the drawer with the \"OPEN\" button.\nIf you are on mobile, you can open the demo in CodeSandbox (\"edit\" icon) and swipe."
              ],
              "code_path": [
                "SwipeableEdgeDrawer.js"
              ],
              "children": []
            },
            {
              "name": "Keep mounted",
              "introduction": [
                "Keep mounted\n\nThe Modal used internally by the Swipeable Drawer has the `keepMounted` prop set by default.\nThis means that the contents of the drawer are always present in the DOM.\n\nYou can change this default behavior with the `ModalProps` prop, but you may encounter issues with `keepMounted: false` in React 18.\n\n```jsx\n<Drawer\n  variant=\"temporary\"\n  ModalProps={{\n    keepMounted: false,\n  }}\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Responsive drawer",
          "introduction": [
            "Responsive drawer\n\nYou can use the `temporary` variant to display a drawer for small screens and `permanent` for a drawer for wider screens."
          ],
          "code_path": [
            "ResponsiveDrawer.js"
          ],
          "children": []
        },
        {
          "name": "Persistent drawer",
          "introduction": [
            "Persistent drawer\n\nPersistent navigation drawers can toggle open or closed.\nThe drawer sits on the same surface elevation as the content.\nIt is closed by default and opens by selecting the menu icon, and stays open until closed by the user.\nThe state of the drawer is remembered from action to action and session to session.\n\nWhen the drawer is outside of the page grid and opens, the drawer forces other content to change size and adapt to the smaller viewport.\n\nPersistent navigation drawers are acceptable for all sizes larger than mobile.\nThey are not recommended for apps with multiple levels of hierarchy that require using an up arrow for navigation.",
            ""
          ],
          "code_path": [
            "PersistentDrawerLeft.js",
            "PersistentDrawerRight.js"
          ],
          "children": []
        },
        {
          "name": "Mini variant drawer",
          "introduction": [
            "Mini variant drawer\n\nIn this variation, the persistent navigation drawer changes its width.\nIts resting state is as a mini-drawer at the same elevation as the content, clipped by the app bar.\nWhen expanded, it appears as the standard persistent navigation drawer.\n\nThe mini variant is recommended for apps sections that need quick selection access alongside content."
          ],
          "code_path": [
            "MiniDrawer.js"
          ],
          "children": []
        },
        {
          "name": "Permanent drawer",
          "introduction": [
            "Permanent drawer\n\nPermanent navigation drawers are always visible and pinned to the left edge, at the same elevation as the content or background. They cannot be closed.\n\nPermanent navigation drawers are the **recommended default for desktop**."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Full-height navigation",
              "introduction": [
                "Full-height navigation\n\nApps focused on information consumption that use a left-to-right hierarchy.",
                ""
              ],
              "code_path": [
                "PermanentDrawerLeft.js",
                "PermanentDrawerRight.js"
              ],
              "children": []
            },
            {
              "name": "Clipped under the app bar",
              "introduction": [
                "Clipped under the app bar\n\nApps focused on productivity that require balance across the screen."
              ],
              "code_path": [
                "ClippedDrawer.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Toolpad (Beta)",
          "introduction": [
            "Toolpad (Beta)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Dashboard Layout",
              "introduction": [
                "Dashboard Layout\n\nThe [DashboardLayout](https://mui.com/toolpad/core/react-dashboard-layout/) component from `@toolpad/core` is the starting point for dashboarding applications. It takes care of application layout, theming, navigation, and more. An example usage of this component:"
              ],
              "code_path": [
                "../app-bar/DashboardLayoutBasic.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "toggle-button",
      "introduction": [
        "# Toggle Button\n\n<p class=\"description\">A Toggle Button can be used to group related options.</p>\n\nTo emphasize groups of related Toggle buttons,\na group should share a common container.\nThe `ToggleButtonGroup` controls the selected state of its child buttons when given its own `value` prop."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Exclusive selection",
          "introduction": [
            "Exclusive selection\n\nWith exclusive selection, selecting one option deselects any other.\n\nIn this example, text justification toggle buttons present options for left, center, right, and fully justified text (disabled), with only one item available for selection at a time.\n\n**Note**: Exclusive selection does not enforce that a button must be active. For that effect see [enforce value set](#enforce-value-set)."
          ],
          "code_path": [
            "ToggleButtons.js"
          ],
          "children": []
        },
        {
          "name": "Multiple selection",
          "introduction": [
            "Multiple selection\n\nMultiple selection allows for logically-grouped options, like bold, italic, and underline, to have multiple options selected."
          ],
          "code_path": [
            "ToggleButtonsMultiple.js"
          ],
          "children": []
        },
        {
          "name": "Size",
          "introduction": [
            "Size\n\nFor larger or smaller buttons, use the `size` prop."
          ],
          "code_path": [
            "ToggleButtonSizes.js"
          ],
          "children": []
        },
        {
          "name": "Color",
          "introduction": [
            "Color"
          ],
          "code_path": [
            "ColorToggleButton.js"
          ],
          "children": []
        },
        {
          "name": "Vertical buttons",
          "introduction": [
            "Vertical buttons\n\nThe buttons can be stacked vertically with the `orientation` prop set to \"vertical\"."
          ],
          "code_path": [
            "VerticalToggleButtons.js"
          ],
          "children": []
        },
        {
          "name": "Enforce value set",
          "introduction": [
            "Enforce value set\n\nIf you want to enforce that at least one button must be active, you can adapt your handleChange function.\n\n```jsx\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n\nconst handleDevices = (event, newDevices) => {\n  if (newDevices.length) {\n    setDevices(newDevices);\n  }\n};\n```"
          ],
          "code_path": [
            "ToggleButtonNotEmpty.js"
          ],
          "children": []
        },
        {
          "name": "Standalone toggle button",
          "introduction": [
            "Standalone toggle button"
          ],
          "code_path": [
            "StandaloneToggleButton.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedDividers.js"
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "ARIA",
              "introduction": [
                "ARIA\n\n- ToggleButtonGroup has `role=\"group\"`. You should provide an accessible label with `aria-label=\"label\"`, `aria-labelledby=\"id\"` or `<label>`.\n- ToggleButton sets `aria-pressed=\"<bool>\"` according to the button state. You should label each button with `aria-label`."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Keyboard",
              "introduction": [
                "Keyboard\n\nAt present, toggle buttons are in DOM order. Navigate between them with the tab key. The button behavior follows standard keyboard semantics."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    }
  ]
}