{
  "components": [
    {
      "name": "buttons",
      "introduction": [
        "# Button\n\n<p class=\"description\">Buttons allow users to take actions, and make choices, with a single tap.</p>\n\nButtons communicate actions that users can take. They are typically placed throughout your UI, in places like:\n\n- Modal windows\n- Forms\n- Cards\n- Toolbars"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic button",
          "introduction": [
            "Basic button\n\nThe `Button` comes with three variants: text (default), contained, and outlined."
          ],
          "code_path": [
            "BasicButtons.js"
          ],
          "children": [
            {
              "name": "Text button",
              "introduction": [
                "Text button\n\n[Text buttons](https://m2.material.io/components/buttons#text-button)\nare typically used for less-pronounced actions, including those located: in dialogs, in cards.\nIn cards, text buttons help maintain an emphasis on card content."
              ],
              "code_path": [
                "TextButtons.js"
              ],
              "children": []
            },
            {
              "name": "Contained button",
              "introduction": [
                "Contained button\n\n[Contained buttons](https://m2.material.io/components/buttons#contained-button)\nare high-emphasis, distinguished by their use of elevation and fill.\nThey contain actions that are primary to your app.",
                "You can remove the elevation with the `disableElevation` prop."
              ],
              "code_path": [
                "ContainedButtons.js",
                "DisableElevation.js"
              ],
              "children": []
            },
            {
              "name": "Outlined button",
              "introduction": [
                "Outlined button\n\n[Outlined buttons](https://m2.material.io/components/buttons#outlined-button) are medium-emphasis buttons.\nThey contain actions that are important but aren't the primary action in an app.\n\nOutlined buttons are also a lower emphasis alternative to contained buttons,\nor a higher emphasis alternative to text buttons."
              ],
              "code_path": [
                "OutlinedButtons.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Handling clicks",
          "introduction": [
            "Handling clicks\n\nAll components accept an `onClick` handler that is applied to the root DOM element.\n\n```jsx\n<Button\n  onClick={() => {\n    alert('clicked');\n  }}\n>\n  Click me\n</Button>\n```\n\nNote that the documentation [avoids](/material-ui/guides/api/#native-properties) mentioning native props (there are a lot) in the API section of the components."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Color",
          "introduction": [
            "Color",
            "In addition to using the default button colors, you can add custom ones, or disable any you don't need. See the [Adding new colors](/material-ui/customization/palette/#custom-colors) examples for more info."
          ],
          "code_path": [
            "ColorButtons.js",
            null
          ],
          "children": []
        },
        {
          "name": "Sizes",
          "introduction": [
            "Sizes\n\nFor larger or smaller buttons, use the `size` prop."
          ],
          "code_path": [
            "ButtonSizes.js"
          ],
          "children": []
        },
        {
          "name": "Buttons with icons and label",
          "introduction": [
            "Buttons with icons and label\n\nSometimes you might want to have icons for certain buttons to enhance the UX of the application as we recognize logos more easily than plain text. For example, if you have a delete button you can label it with a dustbin icon."
          ],
          "code_path": [
            "IconLabelButtons.js"
          ],
          "children": []
        },
        {
          "name": "Icon button",
          "introduction": [
            "Icon button\n\nIcon buttons are commonly found in app bars and toolbars.\n\nIcons are also appropriate for toggle buttons that allow a single choice to be selected or\ndeselected, such as adding or removing a star to an item."
          ],
          "code_path": [
            "IconButtons.js"
          ],
          "children": [
            {
              "name": "Sizes",
              "introduction": [
                "Sizes\n\nFor larger or smaller icon buttons, use the `size` prop."
              ],
              "code_path": [
                "IconButtonSizes.js"
              ],
              "children": []
            },
            {
              "name": "Colors",
              "introduction": [
                "Colors\n\nUse `color` prop to apply theme color palette to component."
              ],
              "code_path": [
                "IconButtonColors.js"
              ],
              "children": []
            },
            {
              "name": "Loading",
              "introduction": [
                "Loading\n\nStarting from v6.4.0, use `loading` prop to set icon buttons in a loading state and disable interactions."
              ],
              "code_path": [
                "LoadingIconButton.js"
              ],
              "children": []
            },
            {
              "name": "Badge",
              "introduction": [
                "Badge\n\nYou can use the [`Badge`](/material-ui/react-badge/) component to add a badge to an `IconButton`."
              ],
              "code_path": [
                "IconButtonWithBadge.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "File upload",
          "introduction": [
            "File upload\n\nTo create a file upload button, turn the button into a label using `component=\"label\"` and then create a visually-hidden input with type `file`."
          ],
          "code_path": [
            "InputFileUpload.js"
          ],
          "children": []
        },
        {
          "name": "Loading",
          "introduction": [
            "Loading\n\nStarting from v6.4.0, use the `loading` prop to set buttons in a loading state and disable interactions.",
            "Toggle the loading switch to see the transition between the different states.",
            ":::warning\nWhen the `loading` prop is set to `boolean`, the loading wrapper is always present in the DOM to prevent a [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).\n\nThe `loading` value should always be `null` or `boolean`. The pattern below is not recommended as it can cause the Google Translation crash:\n\n```jsx\n<Button {...(isFetching && { loading: true })}> // ‚ùå Don't do this\n```\n\n:::"
          ],
          "code_path": [
            "LoadingButtons.js",
            "LoadingButtonsTransition.js",
            null
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).\n\n{{\"demo\": \"CustomizedButtons.js\", \"defaultCodeOpen\": false}}\n\nüé® If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/button-introduction--docs)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Complex button",
          "introduction": [
            "Complex button\n\nThe Text Buttons, Contained Buttons, Floating Action Buttons and Icon Buttons are built on top of the same component: the `ButtonBase`.\nYou can take advantage of this lower-level component to build custom interactions."
          ],
          "code_path": [
            "ButtonBaseDemo.js"
          ],
          "children": []
        },
        {
          "name": "Third-party routing library",
          "introduction": [
            "Third-party routing library\n\nOne frequent use case is to perform navigation on the client only, without an HTTP round-trip to the server.\nThe `ButtonBase` component provides the `component` prop to handle this use case.\nHere is a [more detailed guide](/material-ui/integrations/routing/#button)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Cursor not-allowed",
              "introduction": [
                "Cursor not-allowed\n\nThe ButtonBase component sets `pointer-events: none;` on disabled buttons, which prevents the appearance of a disabled cursor.\n\nIf you wish to use `not-allowed`, you have two options:\n\n1. **CSS only**. You can remove the pointer-events style on the disabled state of the `<button>` element:\n\n```css\n.MuiButtonBase-root:disabled {\n  cursor: not-allowed;\n  pointer-events: auto;\n}\n```\n\nHowever:\n\n- You should add `pointer-events: none;` back when you need to display [tooltips on disabled elements](/material-ui/react-tooltip/#disabled-elements).\n- The cursor won't change if you render something other than a button element, for instance, a link `<a>` element.\n\n2. **DOM change**. You can wrap the button:\n\n```jsx\n<span style={{ cursor: 'not-allowed' }}>\n  <Button component={Link} disabled>\n    disabled\n  </Button>\n</span>\n```\n\nThis has the advantage of supporting any element, for instance, a link `<a>` element."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "rating",
      "introduction": [
        "# Rating\n\n<p class=\"description\">Ratings provide insight regarding others' opinions and experiences, and can allow the user to submit a rating of their own.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic rating",
          "introduction": [
            "Basic rating"
          ],
          "code_path": [
            "BasicRating.js"
          ],
          "children": []
        },
        {
          "name": "Rating precision",
          "introduction": [
            "Rating precision\n\nThe rating can display any float number with the `value` prop.\nUse the `precision` prop to define the minimum increment value change allowed."
          ],
          "code_path": [
            "HalfRating.js"
          ],
          "children": []
        },
        {
          "name": "Hover feedback",
          "introduction": [
            "Hover feedback\n\nYou can display a label on hover to help the user pick the correct rating value.\nThe demo uses the `onChangeActive` prop."
          ],
          "code_path": [
            "HoverRating.js"
          ],
          "children": []
        },
        {
          "name": "Sizes",
          "introduction": [
            "Sizes\n\nFor larger or smaller ratings use the `size` prop."
          ],
          "code_path": [
            "RatingSize.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedRating.js"
          ],
          "children": []
        },
        {
          "name": "Radio group",
          "introduction": [
            "Radio group\n\nThe rating is implemented with a radio group, set `highlightSelectedOnly` to restore the natural behavior."
          ],
          "code_path": [
            "RadioGroupRating.js"
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n([WAI tutorial](https://www.w3.org/WAI/tutorials/forms/custom-controls/#a-star-rating))\n\nThe accessibility of this component relies on:\n\n- A radio group with its fields visually hidden.\n  It contains six radio buttons, one for each star, and another for 0 stars that is checked by default. Be sure to provide a value for the `name` prop that is unique to the parent form.\n- Labels for the radio buttons containing actual text (\"1 Star\", \"2 Stars\", ‚Ä¶).\n  Be sure to provide a suitable function to the `getLabelText` prop when the page is in a language other than English. You can use the [included locales](/material-ui/guides/localization/), or provide your own.\n- A visually distinct appearance for the rating icons.\n  By default, the rating component uses both a difference of color and shape (filled and empty icons) to indicate the value. In the event that you are using color as the only means to indicate the value, the information should also be also displayed as text, as in this demo. This is important to match [success Criterion 1.4.1](https://www.w3.org/TR/WCAG21/#use-of-color) of WCAG2.1."
          ],
          "code_path": [
            "TextRating.js"
          ],
          "children": [
            {
              "name": "ARIA",
              "introduction": [
                "ARIA\n\nThe read only rating has a role of \"img\", and an aria-label that describes the displayed rating."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Keyboard",
              "introduction": [
                "Keyboard\n\nBecause the rating component uses radio buttons, keyboard interaction follows the native browser behavior. Tab will focus the current rating, and cursor keys control the selected rating.\n\nThe read only rating is not focusable."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "bottom-navigation",
      "introduction": [
        "# Bottom Navigation\n\n<p class=\"description\">The Bottom Navigation bar allows movement between primary destinations in an app.</p>\n\nBottom navigation bars display three to five destinations at the bottom of a screen. Each destination is represented by an icon and an optional text label. When a bottom navigation icon is tapped, the user is taken to the top-level navigation destination associated with that icon."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Bottom navigation",
          "introduction": [
            "Bottom navigation\n\nWhen there are only **three** actions, display both icons and text labels at all times.\n\n{{\"demo\": \"SimpleBottomNavigation.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Bottom navigation with no label",
          "introduction": [
            "Bottom navigation with no label\n\nIf there are **four** or **five** actions, display inactive views as icons only.\n\n{{\"demo\": \"LabelBottomNavigation.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Fixed positioning",
          "introduction": [
            "Fixed positioning\n\nThis demo keeps bottom navigation fixed to the bottom, no matter the amount of content on-screen.\n\n{{\"demo\": \"FixedBottomNavigation.js\", \"bg\": true, \"iframe\": true, \"maxWidth\": 600}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Third-party routing library",
          "introduction": [
            "Third-party routing library\n\nOne frequent use case is to perform navigation on the client only, without an HTTP round-trip to the server.\nThe `BottomNavigationAction` component provides the `component` prop to handle this use case.\nHere is a [more detailed guide](/material-ui/integrations/routing/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "backdrop",
      "introduction": [
        "# Backdrop\n\n<p class=\"description\">The Backdrop component narrows the user's focus to a particular element on the screen.</p>\n\nThe Backdrop signals a state change within the application and can be used for creating loaders, dialogs, and more.\nIn its simplest form, the Backdrop component will add a dimmed layer over your application."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Example",
          "introduction": [
            "Example\n\nThe demo below shows a basic Backdrop with a Circular Progress component in the foreground to indicate a loading state.\nAfter clicking **Show Backdrop**, you can click anywhere on the page to close it."
          ],
          "code_path": [
            "SimpleBackdrop.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "about-the-lab",
      "introduction": [
        "# About the lab\n\n<p class=\"description\">This package hosts the incubator components that are not yet ready to move to the core.</p>\n\nThe main difference between the lab and the core is how the components are versioned. Having a separate lab package allows us to release breaking changes when necessary while the core package follows a [slower-moving policy](https://mui.com/versions/#release-frequency).\n\nAs developers use and test the components and report issues, the maintainers learn more about shortcomings of the components: missing features, accessibility issues, bugs, API design, etc. The older and more used a component is, the less likely it is that new issues will be found and subsequently need to introduce breaking changes.\n\nFor a component to be ready to move to the core, the following criteria are considered:\n\n- It needs to be **used**. We use Google Analytics in the documentation (among other metrics) to evaluate the usage of each component. A lab component with low usage either means that it isn't fully working yet, or that there is low demand for it.\n- It needs to match the **code quality** of the core components. It doesn't have to be perfect to be part of the core, but the component should be reliable enough that developers can depend on it.\n  - Each component needs **type definitions**. It is not currently required that a lab component is typed, but it would need to be typed to move to the core.\n  - Requires good **test coverage**. Some of the lab components don't currently have comprehensive tests.\n- Can it be used as **leverage** to incentivize users to upgrade to the latest major release? The less fragmented the community is, the better.\n- It needs to have a low probability of a **breaking change** in the short/medium future. For instance, if it needs a new feature that will likely require a breaking change, it may be preferable to delay its promotion to the core."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Installation",
          "introduction": [
            "Installation\n\nTo install and save in your `package.json` dependencies, run one of the following commands:\n\n<!-- #default-branch-switch -->\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/lab @mui/material\n```\n\n```bash pnpm\npnpm add @mui/lab @mui/material\n```\n\n```bash yarn\nyarn add @mui/lab @mui/material\n```\n\n</codeblock>\n\nNote that the lab has a peer dependency on the Material¬†UI components."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "TypeScript",
          "introduction": [
            "TypeScript\n\nIn order to benefit from the [CSS overrides](/material-ui/customization/theme-components/#theme-style-overrides) and [default prop customization](/material-ui/customization/theme-components/#theme-default-props) with the theme, TypeScript users need to import the following types. Internally, it uses [module augmentation](/material-ui/guides/typescript/#customization-of-theme) to extend the default theme structure with the extension components available in the lab.\n\n```tsx\nimport type {} from '@mui/lab/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    MuiTimeline: {\n      styleOverrides: {\n        root: {\n          backgroundColor: 'red',\n        },\n      },\n    },\n  },\n});\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "grid",
      "introduction": [
        "# Grid\n\n<p class=\"description\">The Material Design responsive layout grid adapts to screen size and orientation, ensuring consistency across layouts.</p>\n\nThe [grid](https://m2.material.io/design/layout/responsive-layout-grid.html) creates visual consistency between layouts while allowing flexibility across a wide variety of designs.\nMaterial Design's responsive UI is based on a 12-column grid layout.\n\n\n\n:::warning\nThe `Grid` component shouldn't be confused with a data grid; it is closer to a layout grid. For a data grid head to [the `DataGrid` component](/x/react-data-grid/).\n:::\n\n:::warning\nThe `Grid` component has been deprecated. Please use [Grid v2](/material-ui/react-grid2/) instead. See how to migrate in the [Grid v2 migration guide](/material-ui/migration/migration-grid-v2/) and [Material¬†UI v6 upgrade guide](/material-ui/migration/upgrade-to-v6/).\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "How it works",
          "introduction": [
            "How it works\n\nThe grid system is implemented with the `Grid` component:\n\n- It uses [CSS's Flexible Box module](https://www.w3.org/TR/css-flexbox-1/) for high flexibility.\n- There are two types of layout: _containers_ and _items_.\n- Item widths are set in percentages, so they're always fluid and sized relative to their parent element.\n- Items have padding to create the spacing between individual items.\n- There are five grid breakpoints: xs, sm, md, lg, and xl.\n- Integer values can be given to each breakpoint, indicating how many of the 12 available columns are occupied by the component when the viewport width satisfies the [breakpoint constraints](/material-ui/customization/breakpoints/#default-breakpoints).\n\nIf you are **new to or unfamiliar with flexbox**, we encourage you to read this [CSS-Tricks flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) guide."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Fluid grids",
          "introduction": [
            "Fluid grids\n\nFluid grids use columns that scale and resize content. A fluid grid's layout can use breakpoints to determine if the layout needs to change dramatically."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Basic grid",
              "introduction": [
                "Basic grid\n\nColumn widths are integer values between 1 and 12; they apply at any breakpoint and indicate how many columns are occupied by the component.\n\nA value passed to any given breakpoint also applies to all wider breakpoints (if they have no values explicitly defined).\nFor example, `xs={12}` sizes a component to occupy the full width of its parent container, regardless of the viewport size.\n\n{{\"demo\": \"BasicGrid.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Grid with multiple breakpoints",
              "introduction": [
                "Grid with multiple breakpoints\n\nComponents may have multiple widths defined, causing the layout to change at the defined breakpoint. Width values given to larger breakpoints override those given to smaller breakpoints.\n\nFor example, `xs={12} sm={6}` sizes a component to occupy half of the viewport width (6 columns) when viewport width is [600 or more pixels](/material-ui/customization/breakpoints/#default-breakpoints). For smaller viewports, the component fills all 12 available columns.\n\n{{\"demo\": \"FullWidthGrid.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Spacing",
          "introduction": [
            "Spacing\n\nTo control space between children, use the `spacing` prop.\nThe spacing value can be any positive number, including decimals and any string.\nThe prop is converted into a CSS property using the [`theme.spacing()`](/material-ui/customization/spacing/) helper.\n\n{{\"demo\": \"SpacingGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Row & column spacing",
              "introduction": [
                "Row & column spacing\n\nThe `rowSpacing` and `columnSpacing` props allow for specifying the row and column gaps independently.\nIt's similar to the `row-gap` and `column-gap` properties of [CSS Grid](/system/grid/#row-gap-amp-column-gap).\n\n{{\"demo\": \"RowAndColumnSpacing.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Responsive values",
          "introduction": [
            "Responsive values\n\nYou can switch the props' value based on the active breakpoint.\nFor instance, we can implement the [\"recommended\"](https://m2.material.io/design/layout/responsive-layout-grid.html) responsive layout grid of Material Design.\n\n{{\"demo\": \"ResponsiveGrid.js\", \"bg\": true}}\n\nResponsive values is supported by:\n\n- `columns`\n- `columnSpacing`\n- `direction`\n- `rowSpacing`\n- `spacing`\n- all the [other props](#system-props) of MUI¬†System\n\n:::warning\nWhen using a responsive `columns` prop, each grid item needs its corresponding breakpoint.\nFor instance, this is not working. The grid item misses the value for `md`:\n\n```jsx\n<Grid container columns={{ xs: 4, md: 12 }}>\n  <Grid item xs={2} />\n</Grid>\n```\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Interactive",
          "introduction": [
            "Interactive\n\nBelow is an interactive demo that lets you explore the visual results of the different settings:\n\n{{\"demo\": \"InteractiveGrid.js\", \"hideToolbar\": true, \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Auto-layout",
          "introduction": [
            "Auto-layout\n\nThe Auto-layout makes the _items_ equitably share the available space.\nThat also means you can set the width of one _item_ and the others will automatically resize around it.\n\n{{\"demo\": \"AutoGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Variable width content",
              "introduction": [
                "Variable width content\n\nSet one of the size breakpoint props to `\"auto\"` instead of `true` / a `number` to size\na column based on the natural width of its content.\n\n{{\"demo\": \"VariableWidthGrid.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Complex Grid",
          "introduction": [
            "Complex Grid\n\nThe following demo doesn't follow the Material Design guidelines, but illustrates how the grid can be used to build complex layouts.\n\n{{\"demo\": \"ComplexGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Nested Grid",
          "introduction": [
            "Nested Grid\n\nThe `container` and `item` props are two independent booleans; they can be combined to allow a Grid component to be both a flex container and child.\n\n:::info\nA flex **container** is the box generated by an element with a computed display of `flex` or `inline-flex`. In-flow children of a flex container are called flex **items** and are laid out using the flex layout model.\n:::\n\nhttps://www.w3.org/TR/css-flexbox-1/#box-model\n\n{{\"demo\": \"NestedGrid.js\", \"bg\": true}}\n\n‚ö†Ô∏è Defining an explicit width to a Grid element that is flex container, flex item, and has spacing at the same time leads to unexpected behavior, avoid doing it:\n\n```jsx\n<Grid spacing={1} container item xs={12}>\n```\n\nIf you need to do such, remove one of the props."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Columns",
          "introduction": [
            "Columns\n\nYou can change the default number of columns (12) with the `columns` prop.\n\n{{\"demo\": \"ColumnsGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Negative margin",
              "introduction": [
                "Negative margin\n\nThe spacing between items is implemented with a negative margin. This might lead to unexpected behaviors. For instance, to apply a background color, you need to apply `display: flex;` to the parent."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "white-space: nowrap",
              "introduction": [
                "white-space: nowrap\n\nThe initial setting on flex items is `min-width: auto`.\nThis causes a positioning conflict when children use `white-space: nowrap;`.\nYou can reproduce the issue with:\n\n```jsx\n<Grid item xs>\n  <Typography noWrap>\n```\n\nIn order for the item to stay within the container you need to set `min-width: 0`.\nIn practice, you can set the `zeroMinWidth` prop:\n\n```jsx\n<Grid item xs zeroMinWidth>\n  <Typography noWrap>\n```\n\n{{\"demo\": \"AutoGridNoWrap.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "direction: column | column-reverse",
              "introduction": [
                "direction: column | column-reverse\n\nThe `xs`, `sm`, `md`, `lg`, and `xl` props are **not supported** within `direction=\"column\"` and `direction=\"column-reverse\"` containers.\n\nThey define the number of grids the component will use for a given breakpoint. They are intended to control **width** using `flex-basis` in `row` containers but they will impact height in `column` containers.\nIf used, these props may have undesirable effects on the height of the `Grid` item elements."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "CSS Grid Layout",
          "introduction": [
            "CSS Grid Layout\n\nThe `Grid` component is using CSS flexbox internally.\nBut as seen below, you can easily use [MUI¬†System](/system/grid/) and CSS Grid to layout your pages.\n\n{{\"demo\": \"CSSGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "System props",
          "introduction": [
            "System props\n\n:::info\nSystem props are deprecated and will be removed in the next major release. Please use the `sx` prop instead.\n\n```diff\n- <Grid item p={2} />\n+ <Grid item sx={{ p: 2 }} />\n```\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "badges",
      "introduction": [
        "# Badge\n\n<p class=\"description\">Badge generates a small badge to the top-right of its child(ren).</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic badge",
          "introduction": [
            "Basic badge\n\nExamples of badges containing text, using primary and secondary colors. The badge is applied to its children."
          ],
          "code_path": [
            "SimpleBadge.js"
          ],
          "children": []
        },
        {
          "name": "Color",
          "introduction": [
            "Color\n\nUse `color` prop to apply theme palette to component."
          ],
          "code_path": [
            "ColorBadge.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedBadges.js"
          ],
          "children": []
        },
        {
          "name": "Badge visibility",
          "introduction": [
            "Badge visibility\n\nThe visibility of badges can be controlled using the `invisible` prop.",
            "The badge hides automatically when `badgeContent` is zero. You can override this with the `showZero` prop."
          ],
          "code_path": [
            "BadgeVisibility.js",
            "ShowZeroBadge.js"
          ],
          "children": []
        },
        {
          "name": "Maximum value",
          "introduction": [
            "Maximum value\n\nYou can use the `max` prop to cap the value of the badge content."
          ],
          "code_path": [
            "BadgeMax.js"
          ],
          "children": []
        },
        {
          "name": "Dot badge",
          "introduction": [
            "Dot badge\n\nThe `dot` prop changes a badge into a small dot. This can be used as a notification that something has changed without giving a count."
          ],
          "code_path": [
            "DotBadge.js"
          ],
          "children": []
        },
        {
          "name": "Badge overlap",
          "introduction": [
            "Badge overlap\n\nYou can use the `overlap` prop to place the badge relative to the corner of the wrapped element."
          ],
          "code_path": [
            "BadgeOverlap.js"
          ],
          "children": []
        },
        {
          "name": "Badge alignment",
          "introduction": [
            "Badge alignment\n\nYou can use the `anchorOrigin` prop to move the badge to any corner of the wrapped element.\n\n{{\"demo\": \"BadgeAlignment.js\", \"hideToolbar\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nYou can't rely on the content of the badge to be announced correctly.\nYou should provide a full description, for instance, with `aria-label`:"
          ],
          "code_path": [
            "AccessibleBadges.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "lists",
      "introduction": [
        "# Lists\n\n<p class=\"description\">Lists are continuous, vertical indexes of text or images.</p>\n\nLists are a continuous group of text or images. They are composed of items containing primary and supplemental actions, which are represented by icons and text."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nLists present information in a concise, easy-to-follow format through a continuous, vertical index of text or images.\n\nMaterial¬†UI Lists are implemented using a collection of related components:\n\n- List: a wrapper for list items. Renders as a `<ul>` by default.\n- List Item: a common list item. Renders as an `<li>` by default.\n- List Item Button: an action element to be used inside a list item.\n- List Item Icon: an icon to be used inside of a list item.\n- List Item Avatar: an avatar to be used inside of a list item.\n- List Item Text: a container inside a list item, used to display text content.\n- List Divider: a separator between list items.\n- List Subheader: a label for a nested list.\n\n{{\"demo\": \"BasicList.js\", \"bg\": true}}\n\nThe last item of the previous demo shows how you can render a link:\n\n```jsx\n<ListItemButton component=\"a\" href=\"#simple-list\">\n  <ListItemText primary=\"Spam\" />\n</ListItemButton>\n```\n\nYou can find a [demo with React Router following this section](/material-ui/integrations/routing/#list) of the documentation."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Nested List",
          "introduction": [
            "Nested List\n\n{{\"demo\": \"NestedList.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Folder List",
          "introduction": [
            "Folder List\n\n{{\"demo\": \"FolderList.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Interactive",
          "introduction": [
            "Interactive\n\nBelow is an interactive demo that lets you explore the visual results of the different settings:\n\n{{\"demo\": \"InteractiveList.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Selected ListItem",
          "introduction": [
            "Selected ListItem\n\n{{\"demo\": \"SelectedListItem.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Align list items",
          "introduction": [
            "Align list items\n\nWhen displaying three lines or more, the avatar is not aligned at the top.\nYou should set the `alignItems=\"flex-start\"` prop to align the avatar at the top, following the Material Design guidelines:\n\n{{\"demo\": \"AlignItemsList.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "List Controls",
          "introduction": [
            "List Controls"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Checkbox",
              "introduction": [
                "Checkbox\n\nA checkbox can either be a primary action or a secondary action.\n\nThe checkbox is the primary action and the state indicator for the list item. The comment button is a secondary action and a separate target.\n\n{{\"demo\": \"CheckboxList.js\", \"bg\": true}}\n\nThe checkbox is the secondary action for the list item and a separate target.\n\n{{\"demo\": \"CheckboxListSecondary.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Switch",
              "introduction": [
                "Switch\n\nThe switch is the secondary action and a separate target.\n\n{{\"demo\": \"SwitchListSecondary.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Sticky subheader",
          "introduction": [
            "Sticky subheader\n\nUpon scrolling, subheaders remain pinned to the top of the screen until pushed off screen by the next subheader.\nThis feature relies on CSS sticky positioning.\n\n{{\"demo\": \"PinnedSubheaderList.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Inset List Item",
          "introduction": [
            "Inset List Item\n\nThe `inset` prop enables a list item that does not have a leading icon or avatar to align correctly with items that do.\n\n{{\"demo\": \"InsetList.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Gutterless list",
          "introduction": [
            "Gutterless list\n\nWhen rendering a list within a component that defines its own gutters, `ListItem` gutters can be disabled with `disableGutters`.\n\n{{\"demo\": \"GutterlessList.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Virtualized List",
          "introduction": [
            "Virtualized List\n\nIn the following example, we demonstrate how to use [react-window](https://github.com/bvaughn/react-window) with the `List` component.\nIt renders 200 rows and can easily handle more.\nVirtualization helps with performance issues.\n\n{{\"demo\": \"VirtualizedList.js\", \"bg\": true}}\n\nThe use of [react-window](https://github.com/bvaughn/react-window) when possible is encouraged.\nIf this library doesn't cover your use case, you should consider using alternatives like [react-virtuoso](https://github.com/petyosi/react-virtuoso)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the\n[overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedList.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "grid2",
      "introduction": [
        "# Grid version 2\n\n<p class=\"description\">The responsive layout grid adapts to screen size and orientation, ensuring consistency across layouts.</p>\n\nThe `Grid` component works well for a layout with a known number of columns.\nThe columns can be configured with multiple breakpoints to specify the column span of each child."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "How it works",
          "introduction": [
            "How it works\n\nThe grid system is implemented with the `Grid` component:\n\n- It uses [CSS Flexbox](https://www.w3.org/TR/css-flexbox-1/) (rather than CSS Grid) for high flexibility.\n- The grid is always a flex item. Use the `container` prop to add a flex container.\n- Item widths are set in percentages, so they're always fluid and sized relative to their parent element.\n- There are five default grid breakpoints: xs, sm, md, lg, and xl. If you need custom breakpoints, check out [custom breakpoints grid](#custom-breakpoints).\n- You can give integer values for each breakpoint, to indicate how many of the 12 available columns are occupied by the component when the viewport width satisfies the [breakpoint constraints](/material-ui/customization/breakpoints/#default-breakpoints).\n- It uses [the `gap` CSS property](https://developer.mozilla.org/en-US/docs/Web/CSS/gap) to add spacing between items.\n- It does _not_ support row spanning. Children elements cannot span multiple rows. We recommend using [CSS Grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout) if you need this functionality.\n- It does _not_ automatically place children. It will try to fit the children one by one, and if there is not enough space, the rest of the children will start on the next line, and so on. If you need auto-placement, we recommend using [CSS Grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Auto-placement_in_grid_layout) instead.\n\n:::warning\nThe `Grid` component is a _layout_ grid, not a _data_ grid.\nIf you need a data grid, check out [the MUI¬†X `DataGrid` component](/x/react-data-grid/).\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Fluid grids",
          "introduction": [
            "Fluid grids\n\nFluid grids use columns that scale and resize content. A fluid grid's layout can use breakpoints to determine if the layout needs to change dramatically."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Basic grid",
              "introduction": [
                "Basic grid\n\nIn order to create a grid layout, you need a container.\nUse the `container` prop to create a grid container that wraps the grid items (the `Grid` is always an item).\n\nColumn widths are integer values between 1 and 12.\nFor example, an item with `size={6}` occupies half of the grid container's width.\n\n{{\"demo\": \"BasicGrid.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Multiple breakpoints",
              "introduction": [
                "Multiple breakpoints\n\nItems may have multiple widths defined, causing the layout to change at the defined breakpoint.\nWidth values apply to all wider breakpoints, and larger breakpoints override those given to smaller breakpoints.\n\nFor example, a component with `size={{ xs: 12, sm: 6 }}` occupies the entire viewport width when the viewport is [less than 600 pixels wide](/material-ui/customization/breakpoints/#default-breakpoints).\nWhen the viewport grows beyond this size, the component occupies half of the total width‚Äîsix columns rather than 12.\n\n{{\"demo\": \"FullWidthGrid.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Spacing",
          "introduction": [
            "Spacing\n\nUse the `spacing` prop to control the space between children.\nThe spacing value can be any positive number (including decimals) or a string.\nThe prop is converted into a CSS property using the [`theme.spacing()`](/material-ui/customization/spacing/) helper.\n\nThe following demo illustrates the use of the `spacing` prop:\n\n{{\"demo\": \"SpacingGrid.js\", \"bg\": true, \"hideToolbar\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Row and column spacing",
              "introduction": [
                "Row and column spacing\n\nThe `rowSpacing` and `columnSpacing` props let you specify row and column gaps independently of one another.\nThey behave similarly to the `row-gap` and `column-gap` properties of [CSS Grid](/system/grid/#row-gap-amp-column-gap).\n\n{{\"demo\": \"RowAndColumnSpacing.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Responsive values",
          "introduction": [
            "Responsive values\n\nYou can set prop values to change when a given breakpoint is active.\nFor instance, we can implement Material Design's [recommended](https://m2.material.io/design/layout/responsive-layout-grid.html) responsive layout grid, as seen in the following demo:\n\n{{\"demo\": \"ResponsiveGrid.js\", \"bg\": true}}\n\nResponsive values are supported by:\n\n- `size`\n- `columns`\n- `columnSpacing`\n- `direction`\n- `rowSpacing`\n- `spacing`\n- `offset`"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Interactive",
          "introduction": [
            "Interactive\n\nBelow is an interactive demo that lets you explore the visual results of the different settings:\n\n{{\"demo\": \"InteractiveGrid.js\", \"hideToolbar\": true, \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Auto-layout",
          "introduction": [
            "Auto-layout\n\nThe auto-layout feature gives equal space to all items present.\nWhen you set the width of one item, the others will automatically resize to match it.\n\n{{\"demo\": \"AutoGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Variable width content",
              "introduction": [
                "Variable width content\n\nWhen a breakpoint's value is given as `\"auto\"`, then a column's size will automatically adjust to match the width of its content.\nThe demo below shows how this works:\n\n{{\"demo\": \"VariableWidthGrid.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Nested grid",
          "introduction": [
            "Nested grid\n\nThe grid container that renders as a **direct child** inside another grid container is a nested grid that inherits its [`columns`](#columns) and [`spacing`](#spacing) from the top level.\nIt will also inherit the props of the top-level grid if it receives those props.\n\n:::success\n\nNote that a nested grid container should be a direct child of another grid container. If there are non-grid elements in between, the grid container will start as the new root container.\n\n```js\n<Grid container>\n  <Grid container> // A nested grid container that inherits columns and spacing from above.\n    <div>\n      <Grid container> // A new root grid container with its own variables scope.\n```\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Inheriting spacing",
              "introduction": [
                "Inheriting spacing\n\nA nested grid container inherits the row and column spacing from its parent unless the `spacing` prop is specified to the instance.\n\n{{\"demo\": \"NestedGrid.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Inheriting columns",
              "introduction": [
                "Inheriting columns\n\nA nested grid container inherits the columns from its parent unless the `columns` prop is specified to the instance.\n\n{{\"demo\": \"NestedGridColumns.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Columns",
          "introduction": [
            "Columns\n\nUse the `columns` prop to change the default number of columns (12) in the grid, as shown below:\n\n{{\"demo\": \"ColumnsGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Offset",
          "introduction": [
            "Offset\n\nThe `offset` prop pushes an item to the right side of the grid.\nThis props accepts:\n\n- numbers‚Äîfor example, `offset={{ md: 2 }}` pushes an item two columns to the right when the viewport size is equal to or greater than the `md` breakpoint.\n- `\"auto\"`‚Äîthis pushes the item to the far right side of the grid container.\n\nThe demo below illustrates how to use the offset props:\n\n{{\"demo\": \"OffsetGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Custom breakpoints",
          "introduction": [
            "Custom breakpoints\n\nIf you specify custom breakpoints in the theme, you can use those names as grid item props in responsive values:\n\n```js\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\nfunction Demo() {\n  return (\n    <ThemeProvider\n      theme={createTheme({\n        breakpoints: {\n          values: {\n            laptop: 1024,\n            tablet: 640,\n            mobile: 0,\n            desktop: 1280,\n          },\n        },\n      })}\n    >\n      <Grid container spacing={{ mobile: 1, tablet: 2, laptop: 3 }}>\n        {Array.from(Array(4)).map((_, index) => (\n          <Grid key={index} size={{ mobile: 6, tablet: 4, laptop: 3 }}>\n            <div>{index + 1}</div>\n          </Grid>\n        ))}\n      </Grid>\n    </ThemeProvider>\n  );\n}\n```\n\n:::info\nCustom breakpoints affect all [responsive values](#responsive-values).\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "TypeScript",
              "introduction": [
                "TypeScript\n\nYou have to set module augmentation on the theme breakpoints interface.\n\n```ts\ndeclare module '@mui/system' {\n  interface BreakpointOverrides {\n    // Your custom breakpoints\n    laptop: true;\n    tablet: true;\n    mobile: true;\n    desktop: true;\n    // Remove default breakpoints\n    xs: false;\n    sm: false;\n    md: false;\n    lg: false;\n    xl: false;\n  }\n}\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Centered elements",
              "introduction": [
                "Centered elements\n\nTo center a grid item's content, specify `display=\"flex\"` directly on the item.\nThen use `justifyContent` and/or `alignItems` to adjust the position of the content, as shown below:\n\n{{\"demo\": \"CenteredElementGrid.js\", \"bg\": true}}\n\n:::warning\nUsing the `container` prop does not work in this situation because the grid container is designed exclusively to wrap grid items.\nIt cannot wrap other elements.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Full border",
              "introduction": [
                "Full border"
              ],
              "code_path": [
                "FullBorderedGrid.js"
              ],
              "children": []
            },
            {
              "name": "Half border",
              "introduction": [
                "Half border"
              ],
              "code_path": [
                "HalfBorderedGrid.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Column direction and reversing",
              "introduction": [
                "Column direction and reversing\n\nThe `size` and `offset` props are _not_ supported within containers that use `direction=\"column\"` or `direction=\"column-reverse\"`.\n\nSize and offset props define the number of columns the component will use for a given breakpoint.\nThey are intended to control the width using `flex-basis` in `row` containers, but they will impact the height in `column` containers.\nIf used, these props may have undesirable effects on the height of the `Grid` item elements."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "breadcrumbs",
      "introduction": [
        "# Breadcrumbs\n\n<p class=\"description\">A breadcrumbs is a list of links that help visualize a page's location within a site's hierarchical structure, it allows navigation up to any of the ancestors.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic breadcrumbs",
          "introduction": [
            "Basic breadcrumbs"
          ],
          "code_path": [
            "BasicBreadcrumbs.js"
          ],
          "children": []
        },
        {
          "name": "Active last breadcrumb",
          "introduction": [
            "Active last breadcrumb\n\nKeep the last breadcrumb interactive."
          ],
          "code_path": [
            "ActiveLastBreadcrumb.js"
          ],
          "children": []
        },
        {
          "name": "Custom separator",
          "introduction": [
            "Custom separator\n\nIn the following examples, we are using two string separators and an SVG icon."
          ],
          "code_path": [
            "CustomSeparator.js"
          ],
          "children": []
        },
        {
          "name": "Breadcrumbs with icons",
          "introduction": [
            "Breadcrumbs with icons"
          ],
          "code_path": [
            "IconBreadcrumbs.js"
          ],
          "children": []
        },
        {
          "name": "Collapsed breadcrumbs",
          "introduction": [
            "Collapsed breadcrumbs"
          ],
          "code_path": [
            "CollapsedBreadcrumbs.js"
          ],
          "children": []
        },
        {
          "name": "Condensed with menu",
          "introduction": [
            "Condensed with menu\n\nAs an alternative, consider adding a Menu component to display the condensed links in a dropdown list:"
          ],
          "code_path": [
            "CondensedWithMenu.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedBreadcrumbs.js"
          ],
          "children": []
        },
        {
          "name": "Integration with react-router",
          "introduction": [
            "Integration with react-router\n\n{{\"demo\": \"RouterBreadcrumbs.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/breadcrumb/)\n\nBe sure to add a `aria-label` description on the `Breadcrumbs` component.\n\nThe accessibility of this component relies on:\n\n- The set of links is structured using an ordered list (`<ol>` element).\n- To prevent screen reader announcement of the visual separators between links, they are hidden with `aria-hidden`.\n- A nav element labeled with `aria-label` identifies the structure as a breadcrumb trail and makes it a navigation landmark so that it is easy to locate."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Toolpad (Beta)",
          "introduction": [
            "Toolpad (Beta)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Page Container",
              "introduction": [
                "Page Container\n\nThe [PageContainer](https://mui.com/toolpad/core/react-page-container/) component in `@toolpad/core` is the ideal wrapper for the content of your dashboard. It makes the Material¬†UI Container navigation-aware and extends it with page title, breadcrumbs, actions, and more.\n\n{{\"demo\": \"PageContainerBasic.js\", \"height\": 400, \"bg\": \"inline\", \"defaultExpanded\": false}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "progress",
      "introduction": [
        "# Progress\n\n<p class=\"description\">Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process.</p>\n\nProgress indicators inform users about the status of ongoing processes, such as loading an app, submitting a form, or saving updates.\n\n- **Determinate** indicators display how long an operation will take.\n- **Indeterminate** indicators visualize an unspecified wait time.\n\nThe animations of the components rely on CSS as much as possible to work even before the JavaScript is loaded."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Circular",
          "introduction": [
            "Circular"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Circular indeterminate",
              "introduction": [
                "Circular indeterminate"
              ],
              "code_path": [
                "CircularIndeterminate.js"
              ],
              "children": []
            },
            {
              "name": "Circular color",
              "introduction": [
                "Circular color"
              ],
              "code_path": [
                "CircularColor.js"
              ],
              "children": []
            },
            {
              "name": "Circular size",
              "introduction": [
                "Circular size"
              ],
              "code_path": [
                "CircularSize.js"
              ],
              "children": []
            },
            {
              "name": "Circular determinate",
              "introduction": [
                "Circular determinate"
              ],
              "code_path": [
                "CircularDeterminate.js"
              ],
              "children": []
            },
            {
              "name": "Interactive integration",
              "introduction": [
                "Interactive integration"
              ],
              "code_path": [
                "CircularIntegration.js"
              ],
              "children": []
            },
            {
              "name": "Circular with label",
              "introduction": [
                "Circular with label"
              ],
              "code_path": [
                "CircularWithValueLabel.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Linear",
          "introduction": [
            "Linear"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Linear indeterminate",
              "introduction": [
                "Linear indeterminate"
              ],
              "code_path": [
                "LinearIndeterminate.js"
              ],
              "children": []
            },
            {
              "name": "Linear color",
              "introduction": [
                "Linear color"
              ],
              "code_path": [
                "LinearColor.js"
              ],
              "children": []
            },
            {
              "name": "Linear determinate",
              "introduction": [
                "Linear determinate"
              ],
              "code_path": [
                "LinearDeterminate.js"
              ],
              "children": []
            },
            {
              "name": "Linear buffer",
              "introduction": [
                "Linear buffer"
              ],
              "code_path": [
                "LinearBuffer.js"
              ],
              "children": []
            },
            {
              "name": "Linear with label",
              "introduction": [
                "Linear with label"
              ],
              "code_path": [
                "LinearWithValueLabel.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Non-standard ranges",
          "introduction": [
            "Non-standard ranges\n\nThe progress components accept a value in the range 0 - 100. This simplifies things for screen-reader users, where these are the default min / max values. Sometimes, however, you might be working with a data source where the values fall outside this range. Here's how you can easily transform a value in any range to a scale of 0 - 100:\n\n```jsx\n// MIN = Minimum expected value\n// MAX = Maximum expected value\n// Function to normalise the values (MIN / MAX could be integrated)\nconst normalise = (value) => ((value - MIN) * 100) / (MAX - MIN);\n\n// Example component that utilizes the `normalise` function at the point of render.\nfunction Progress(props) {\n  return (\n    <React.Fragment>\n      <CircularProgress variant=\"determinate\" value={normalise(props.value)} />\n      <LinearProgress variant=\"determinate\" value={normalise(props.value)} />\n    </React.Fragment>\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).\n\n{{\"demo\": \"CustomizedProgressBars.js\", \"defaultCodeOpen\": false}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Delaying appearance",
          "introduction": [
            "Delaying appearance\n\nThere are [3 important limits](https://www.nngroup.com/articles/response-times-3-important-limits/) to know around response time.\nThe ripple effect of the `ButtonBase` component ensures that the user feels that the UI is reacting instantaneously.\nNormally, no special feedback is necessary during delays of more than 0.1 but less than 1.0 second.\nAfter 1.0 second, you can display a loader to keep user's flow of thought uninterrupted."
          ],
          "code_path": [
            "DelayingAppearance.js"
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "High CPU load",
              "introduction": [
                "High CPU load\n\nUnder heavy load, you might lose the stroke dash animation or see random `CircularProgress` ring widths.\nYou should run processor intensive operations in a web worker or by batch in order not to block the main rendering thread.\n\n<video autoplay muted loop playsinline width=\"1082\" height=\"158\" style=\"width: 541px;\">\n  <source src=\"/static/material-ui/react-components/progress-heavy-load.mp4\" type=\"video/mp4\" />\n</video>\n\nWhen it's not possible, you can leverage the `disableShrink` prop to mitigate the issue.\nSee [this issue](https://github.com/mui/material-ui/issues/10327)."
              ],
              "code_path": [
                "CircularUnderLoad.js"
              ],
              "children": []
            },
            {
              "name": "High frequency updates",
              "introduction": [
                "High frequency updates\n\nThe `LinearProgress` uses a transition on the CSS transform property to provide a smooth update between different values.\nThe default transition duration is 200ms.\nIn the event a parent component updates the `value` prop too quickly, you will at least experience a 200ms delay between the re-render and the progress bar fully updated.\n\nIf you need to perform 30 re-renders per second or more, we recommend disabling the transition:\n\n```css\n.MuiLinearProgress-bar {\n  transition: none;\n}\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "snackbars",
      "introduction": [
        "# Snackbar\n\n<p class=\"description\">Snackbars (also known as toasts) are used for brief notifications of processes that have been or will be performed.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThe Snackbar component appears temporarily and floats above the UI to provide users with (non-critical) updates on an app's processes.\nThe demo below, inspired by Google Keep, shows a basic Snackbar with a text element and two actions:"
          ],
          "code_path": [
            "SimpleSnackbar.js"
          ],
          "children": [
            {
              "name": "Usage",
              "introduction": [
                "Usage\n\nSnackbars differ from [Alerts](/material-ui/react-alert/) in that Snackbars have a fixed position and a high z-index, so they're intended to break out of the document flow; Alerts, on the other hand, are usually part of the flow‚Äîexcept when they're [used as children of a Snackbar](#use-with-alerts).\n\nSnackbars also from differ from [Dialogs](/material-ui/react-dialog/) in that Snackbars are not intended to convey _critical_ information or block the user from interacting with the rest of the app; Dialogs, by contrast, require input from the user in order to be dismissed."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Import",
              "introduction": [
                "Import\n\n```jsx\nimport Snackbar from '@mui/material/Snackbar';\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Position",
              "introduction": [
                "Position\n\nUse the `anchorOrigin` prop to control the Snackbar's position on the screen."
              ],
              "code_path": [
                "PositionedSnackbar.js"
              ],
              "children": []
            },
            {
              "name": "Content",
              "introduction": [
                "Content\n\n```jsx\nimport SnackbarContent from '@mui/material/SnackbarContent';\n```\n\nUse the Snackbar Content component to add text and actions to the Snackbar."
              ],
              "code_path": [
                "LongTextSnackbar.js"
              ],
              "children": []
            },
            {
              "name": "Automatic dismiss",
              "introduction": [
                "Automatic dismiss\n\nUse the `autoHideDuration` prop to automatically trigger the Snackbar's `onClose` function after a set period of time (in milliseconds).\n\nMake sure to [provide sufficient time](https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits.html) for the user to process the information displayed on it."
              ],
              "code_path": [
                "AutohideSnackbar.js"
              ],
              "children": []
            },
            {
              "name": "Transitions",
              "introduction": [
                "Transitions\n\nYou can use the `TransitionComponent` prop to change the transition of the Snackbar from [Grow](/material-ui/transitions/#grow) (the default) to others such as [Slide](/material-ui/transitions/#slide)."
              ],
              "code_path": [
                "TransitionsSnackbar.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Use with Alerts",
              "introduction": [
                "Use with Alerts\n\nUse an Alert inside a Snackbar for messages that communicate a certain severity."
              ],
              "code_path": [
                "CustomizedSnackbars.js"
              ],
              "children": []
            },
            {
              "name": "Use with Floating Action Buttons",
              "introduction": [
                "Use with Floating Action Buttons\n\nIf you're using a [Floating Action Button](/material-ui/react-floating-action-button/) on mobile, Material Design recommends positioning snackbars directly above it, as shown in the demo below:\n\n{{\"demo\": \"FabIntegrationSnackbar.js\", \"iframe\": true, \"maxWidth\": 400}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Common examples",
          "introduction": [
            "Common examples"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Consecutive Snackbars",
              "introduction": [
                "Consecutive Snackbars\n\nThis demo shows how to display multiple Snackbars without stacking them by using a consecutive animation."
              ],
              "code_path": [
                "ConsecutiveSnackbars.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Supplementary components",
          "introduction": [
            "Supplementary components"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "notistack",
              "introduction": [
                "notistack\n\n![stars](https://img.shields.io/github/stars/iamhosseindhv/notistack.svg?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/notistack.svg)\n\nWith an imperative API, [notistack](https://github.com/iamhosseindhv/notistack) lets you vertically stack multiple Snackbars without having to handle their open and close states.\nEven though this is discouraged in the Material Design guidelines, it is still a common pattern.\n\n{{\"demo\": \"IntegrationNotistack.js\", \"defaultCodeOpen\": false}}\n\n:::warning\nNote that notistack prevents Snackbars from being [closed by pressing <kbd class=\"key\">Escape</kbd>](#accessibility).\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nThe user should be able to dismiss Snackbars by pressing <kbd class=\"key\">Escape</kbd>. If there are multiple instances appearing at the same time and you want <kbd class=\"key\">Escape</kbd> to dismiss only the oldest one that's currently open, call `event.preventDefault` in the `onClose` prop.\n\n```jsx\nexport default function MyComponent() {\n  const [open, setOpen] = React.useState(true);\n\n  return (\n    <React.Fragment>\n      <Snackbar\n        open={open}\n        onClose={(event, reason) => {\n          // `reason === 'escapeKeyDown'` if `Escape` was pressed\n          setOpen(false);\n          // call `event.preventDefault` to only close one Snackbar at a time.\n        }}\n      />\n      <Snackbar open={open} onClose={() => setOpen(false)} />\n    </React.Fragment>\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Anatomy",
          "introduction": [
            "Anatomy\n\nThe Snackbar component is composed of a root `<div>` that houses interior elements like the Snackbar Content and other optional components (such as buttons or decorators).\n\n```html\n<div role=\"presentation\" class=\"MuiSnackbar-root\">\n  <div class=\"MuiPaper-root MuiSnackbarContent-root\" role=\"alert\">\n    <div class=\"MuiSnackbarContent-message\">\n      <!-- Snackbar content goes here -->\n    </div>\n  </div>\n</div>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Experimental APIs - Toolpad",
          "introduction": [
            "Experimental APIs - Toolpad"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "useNotifications",
              "introduction": [
                "useNotifications\n\nYou can create and manipulate notifications imperatively with the [`useNotifications()`](https://mui.com/toolpad/core/react-use-notifications/) API in `@toolpad/core`. This API provides state management for opening and closing snackbars. It also allows for queueing multiple notifications at once.\n\n{{\"demo\": \"ToolpadNotificationsNoSnap.js\", \"defaultCodeOpen\": false}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "container",
      "introduction": [
        "# Container\n\n<p class=\"description\">The container centers your content horizontally. It's the most basic layout element.</p>\n\nWhile containers can be nested, most layouts do not require a nested container."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Fluid",
          "introduction": [
            "Fluid\n\nA fluid container width is bounded by the `maxWidth` prop value.\n\n{{\"demo\": \"SimpleContainer.js\", \"iframe\": true, \"defaultCodeOpen\": false}}\n\n```jsx\n<Container maxWidth=\"sm\">\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Fixed",
          "introduction": [
            "Fixed\n\nIf you prefer to design for a fixed set of sizes instead of trying to accommodate a fully fluid viewport, you can set the `fixed` prop.\nThe max-width matches the min-width of the current breakpoint.\n\n{{\"demo\": \"FixedContainer.js\", \"iframe\": true, \"defaultCodeOpen\": false}}\n\n```jsx\n<Container fixed>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Toolpad (Beta)",
          "introduction": [
            "Toolpad (Beta)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Page Container",
              "introduction": [
                "Page Container\n\nThe [PageContainer](https://mui.com/toolpad/core/react-page-container/) component in `@toolpad/core` is the ideal wrapper for the content of your dashboard. It makes the Material¬†UI Container navigation-aware and extends it with page title, breadcrumbs, actions, and more.\n\n{{\"demo\": \"../breadcrumbs/PageContainerBasic.js\", \"height\": 400, \"bg\": \"inline\", \"defaultExpanded\": false}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "selects",
      "introduction": [
        "# Select\n\n<p class=\"description\">Select components are used for collecting user provided information from a list of options.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic select",
          "introduction": [
            "Basic select\n\nMenus are positioned under their emitting elements, unless they are close to the bottom of the viewport."
          ],
          "code_path": [
            "BasicSelect.js"
          ],
          "children": []
        },
        {
          "name": "Advanced features",
          "introduction": [
            "Advanced features\n\nThe Select component is meant to be interchangeable with a native `<select>` element.\n\nIf you are looking for more advanced features, like combobox, multiselect, autocomplete, async or creatable support, head to the [`Autocomplete` component](/material-ui/react-autocomplete/).\nIt's meant to be an improved version of the \"react-select\" and \"downshift\" packages."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Props",
          "introduction": [
            "Props\n\nThe Select component is implemented as a custom `<input>` element of the [InputBase](/material-ui/api/input-base/).\nIt extends the [text field components](/material-ui/react-text-field/) subcomponents, either the [OutlinedInput](/material-ui/api/outlined-input/), [Input](/material-ui/api/input/), or [FilledInput](/material-ui/api/filled-input/), depending on the variant selected.\nIt shares the same styles and many of the same props. Refer to the respective component's API page for details.\n\n:::warning\nUnlike input components, the `placeholder` prop is not available in Select. To add a placeholder, refer to the [placeholder](#placeholder) section below.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Filled and standard variants",
              "introduction": [
                "Filled and standard variants"
              ],
              "code_path": [
                "SelectVariants.js"
              ],
              "children": []
            },
            {
              "name": "Labels and helper text",
              "introduction": [
                "Labels and helper text",
                ":::warning\nNote that when using FormControl with the outlined variant of the Select, you need to provide a label in two places: in the InputLabel component and in the `label` prop of the Select component (see the above demo).\n:::"
              ],
              "code_path": [
                "SelectLabels.js",
                null
              ],
              "children": []
            },
            {
              "name": "Auto width",
              "introduction": [
                "Auto width"
              ],
              "code_path": [
                "SelectAutoWidth.js"
              ],
              "children": []
            },
            {
              "name": "Small Size",
              "introduction": [
                "Small Size"
              ],
              "code_path": [
                "SelectSmall.js"
              ],
              "children": []
            },
            {
              "name": "Other props",
              "introduction": [
                "Other props"
              ],
              "code_path": [
                "SelectOtherProps.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Native select",
          "introduction": [
            "Native select\n\nAs the user experience can be improved on mobile using the native select of the platform,\nwe allow such pattern."
          ],
          "code_path": [
            "NativeSelectDemo.js"
          ],
          "children": []
        },
        {
          "name": "TextField",
          "introduction": [
            "TextField\n\nThe `TextField` wrapper component is a complete form control including a label, input and help text.\nYou can find an example with the select mode [in this section](/material-ui/react-text-field/#select)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).\n\nThe first step is to style the `InputBase` component.\nOnce it's styled, you can either use it directly as a text field or provide it to the select `input` prop to have a `select` field.\nNotice that the `\"standard\"` variant is easier to customize, since it does not wrap the contents in a `fieldset`/`legend` markup.",
            "üé® If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/select-introduction--docs)."
          ],
          "code_path": [
            "CustomizedSelects.js",
            null
          ],
          "children": []
        },
        {
          "name": "Multiple select",
          "introduction": [
            "Multiple select\n\nThe `Select` component can handle multiple selections.\nIt's enabled with the `multiple` prop.\n\nLike with the single selection, you can pull out the new value by accessing `event.target.value` in the `onChange` callback. It's always an array."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Default",
              "introduction": [
                "Default"
              ],
              "code_path": [
                "MultipleSelect.js"
              ],
              "children": []
            },
            {
              "name": "Checkmarks",
              "introduction": [
                "Checkmarks"
              ],
              "code_path": [
                "MultipleSelectCheckmarks.js"
              ],
              "children": []
            },
            {
              "name": "Chip",
              "introduction": [
                "Chip"
              ],
              "code_path": [
                "MultipleSelectChip.js"
              ],
              "children": []
            },
            {
              "name": "Placeholder",
              "introduction": [
                "Placeholder"
              ],
              "code_path": [
                "MultipleSelectPlaceholder.js"
              ],
              "children": []
            },
            {
              "name": "Native",
              "introduction": [
                "Native"
              ],
              "code_path": [
                "MultipleSelectNative.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Controlling the open state",
          "introduction": [
            "Controlling the open state\n\nYou can control the open state of the select with the `open` prop. Alternatively, it is also possible to set the initial (uncontrolled) open state of the component with the `defaultOpen` prop.\n\n:::info\n\n- A component is **controlled** when it's managed by its parent using props.\n- A component is **uncontrolled** when it's managed by its own local state.\n\nLearn more about controlled and uncontrolled components in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "ControlledOpenSelect.js"
          ],
          "children": []
        },
        {
          "name": "With a dialog",
          "introduction": [
            "With a dialog\n\nWhile it's discouraged by the Material Design guidelines, you can use a select inside a dialog."
          ],
          "code_path": [
            "DialogSelect.js"
          ],
          "children": []
        },
        {
          "name": "Grouping",
          "introduction": [
            "Grouping\n\nDisplay categories with the `ListSubheader` component or the native `<optgroup>` element.",
            ":::warning\nIf you wish to wrap the ListSubheader in a custom component, you'll have to annotate it so Material¬†UI can handle it properly when determining focusable elements.\n\nYou have two options for solving this:\nOption 1: Define a static boolean field called `muiSkipListHighlight` on your component function, and set it to `true`:\n\n```tsx\nfunction MyListSubheader(props: ListSubheaderProps) {\n  return <ListSubheader {...props} />;\n}\n\nMyListSubheader.muiSkipListHighlight = true;\nexport default MyListSubheader;\n\n// elsewhere:\n\nreturn (\n  <Select>\n    <MyListSubheader>Group 1</MyListSubheader>\n    <MenuItem value={1}>Option 1</MenuItem>\n    <MenuItem value={2}>Option 2</MenuItem>\n    <MyListSubheader>Group 2</MyListSubheader>\n    <MenuItem value={3}>Option 3</MenuItem>\n    <MenuItem value={4}>Option 4</MenuItem>\n    {/* ... */}\n  </Select>\n```\n\nOption 2: Place a `muiSkipListHighlight` prop on each instance of your component.\nThe prop doesn't have to be forwarded to the ListSubheader, nor present in the underlying DOM element.\nIt just has to be placed on a component that's used as a subheader.\n\n```tsx\nexport default function MyListSubheader(\n  props: ListSubheaderProps & { muiSkipListHighlight: boolean },\n) {\n  const { muiSkipListHighlight, ...other } = props;\n  return <ListSubheader {...other} />;\n}\n\n// elsewhere:\n\nreturn (\n  <Select>\n    <MyListSubheader muiSkipListHighlight>Group 1</MyListSubheader>\n    <MenuItem value={1}>Option 1</MenuItem>\n    <MenuItem value={2}>Option 2</MenuItem>\n    <MyListSubheader muiSkipListHighlight>Group 2</MyListSubheader>\n    <MenuItem value={3}>Option 3</MenuItem>\n    <MenuItem value={4}>Option 4</MenuItem>\n    {/* ... */}\n  </Select>\n);\n```\n\nWe recommend the first option as it doesn't require updating all the usage sites of the component.\n\nKeep in mind this is **only necessary** if you wrap the ListSubheader in a custom component.\nIf you use the ListSubheader directly, **no additional code is required**.\n:::"
          ],
          "code_path": [
            "GroupedSelect.js",
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nTo properly label your `Select` input you need an extra element with an `id` that contains a label.\nThat `id` needs to match the `labelId` of the `Select`, for example:\n\n```jsx\n<InputLabel id=\"label\">Age</InputLabel>\n<Select labelId=\"label\" id=\"select\" value=\"20\">\n  <MenuItem value=\"10\">Ten</MenuItem>\n  <MenuItem value=\"20\">Twenty</MenuItem>\n</Select>\n```\n\nAlternatively a `TextField` with an `id` and `label` creates the proper markup and\nids for you:\n\n```jsx\n<TextField id=\"select\" label=\"Age\" value=\"20\" select>\n  <MenuItem value=\"10\">Ten</MenuItem>\n  <MenuItem value=\"20\">Twenty</MenuItem>\n</TextField>\n```\n\nFor a [native select](#native-select), you should mention a label by giving the value of the `id` attribute of the select element to the `InputLabel`'s `htmlFor` attribute:\n\n```jsx\n<InputLabel htmlFor=\"select\">Age</InputLabel>\n<NativeSelect id=\"select\">\n  <option value=\"10\">Ten</option>\n  <option value=\"20\">Twenty</option>\n</NativeSelect>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "dialogs",
      "introduction": [
        "# Dialog\n\n<p class=\"description\">Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.</p>\n\nA Dialog is a type of [modal](/material-ui/react-modal/) window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken.\n\nDialogs are purposefully interruptive, so they should be used sparingly."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nDialogs are implemented using a collection of related components:\n\n- Dialog: the parent component that renders the modal.\n- Dialog Title: a wrapper used for the title of a Dialog.\n- Dialog Actions: an optional container for a Dialog's Buttons.\n- Dialog Content: an optional container for displaying the Dialog's content.\n- Dialog Content Text: a wrapper for text inside of `<DialogContent />`.\n- Slide: optional [Transition](/material-ui/transitions/#slide) used to slide the Dialog in from the edge of the screen."
          ],
          "code_path": [
            "SimpleDialogDemo.js"
          ],
          "children": []
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Alerts",
          "introduction": [
            "Alerts\n\nAlerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation.\n\nMost alerts don't need titles.\nThey summarize a decision in a sentence or two by either:\n\n- Asking a question (for example \"Delete this conversation?\")\n- Making a statement related to the action buttons\n\nUse title bar alerts only for high-risk situations, such as the potential loss of connectivity.\nUsers should be able to understand the choices based on the title and button text alone.\n\nIf a title is required:\n\n- Use a clear question or statement with an explanation in the content area, such as \"Erase USB storage?\".\n- Avoid apologies, ambiguity, or questions, such as \"Warning!\" or \"Are you sure?\""
          ],
          "code_path": [
            "AlertDialog.js"
          ],
          "children": []
        },
        {
          "name": "Transitions",
          "introduction": [
            "Transitions\n\nYou can also swap out the transition, the next example uses `Slide`."
          ],
          "code_path": [
            "AlertDialogSlide.js"
          ],
          "children": []
        },
        {
          "name": "Form dialogs",
          "introduction": [
            "Form dialogs\n\nForm dialogs allow users to fill out form fields within a dialog.\nFor example, if your site prompts for potential subscribers to fill in their email address, they can fill out the email field and touch 'Submit'."
          ],
          "code_path": [
            "FormDialog.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).\n\nThe dialog has a close button added to aid usability."
          ],
          "code_path": [
            "CustomizedDialogs.js"
          ],
          "children": []
        },
        {
          "name": "Full-screen dialogs",
          "introduction": [
            "Full-screen dialogs"
          ],
          "code_path": [
            "FullScreenDialog.js"
          ],
          "children": []
        },
        {
          "name": "Optional sizes",
          "introduction": [
            "Optional sizes\n\nYou can set a dialog maximum width by using the `maxWidth` enumerable in combination with the `fullWidth` boolean.\nWhen the `fullWidth` prop is true, the dialog will adapt based on the `maxWidth` value."
          ],
          "code_path": [
            "MaxWidthDialog.js"
          ],
          "children": []
        },
        {
          "name": "Responsive full-screen",
          "introduction": [
            "Responsive full-screen\n\nYou may make a dialog responsively full screen using [`useMediaQuery`](/material-ui/react-use-media-query/).\n\n```jsx\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n\n  return <Dialog fullScreen={fullScreen} />;\n}\n```"
          ],
          "code_path": [
            "ResponsiveDialog.js"
          ],
          "children": []
        },
        {
          "name": "Confirmation dialogs",
          "introduction": [
            "Confirmation dialogs\n\nConfirmation dialogs require users to explicitly confirm their choice before an option is committed.\nFor example, users can listen to multiple ringtones but only make a final selection upon touching \"OK\".\n\nTouching \"Cancel\" in a confirmation dialog, cancels the action, discards any changes, and closes the dialog."
          ],
          "code_path": [
            "ConfirmationDialog.js"
          ],
          "children": []
        },
        {
          "name": "Non-modal dialog",
          "introduction": [
            "Non-modal dialog\n\nDialogs can also be non-modal, meaning they don't interrupt user interaction behind it.\nVisit [the Nielsen Norman Group article](https://www.nngroup.com/articles/modal-nonmodal-dialog/) for more in-depth guidance about modal vs. non-modal dialog usage.\n\nThe demo below shows a persistent cookie banner, a common non-modal dialog use case.\n\n{{\"demo\": \"CookiesBanner.js\", \"iframe\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Draggable dialog",
          "introduction": [
            "Draggable dialog\n\nYou can create a draggable dialog by using [react-draggable](https://github.com/react-grid-layout/react-draggable).\nTo do so, you can pass the imported `Draggable` component as the `PaperComponent` of the `Dialog` component.\nThis will make the entire dialog draggable."
          ],
          "code_path": [
            "DraggableDialog.js"
          ],
          "children": []
        },
        {
          "name": "Scrolling long content",
          "introduction": [
            "Scrolling long content\n\nWhen dialogs become too long for the user's viewport or device, they scroll.\n\n- `scroll=paper` the content of the dialog scrolls within the paper element.\n- `scroll=body` the content of the dialog scrolls within the body element.\n\nTry the demo below to see what we mean:"
          ],
          "code_path": [
            "ScrollDialog.js"
          ],
          "children": []
        },
        {
          "name": "Performance",
          "introduction": [
            "Performance\n\nFollow the [Modal performance section](/material-ui/react-modal/#performance)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations\n\nFollow the [Modal limitations section](/material-ui/react-modal/#limitations)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Supplementary projects",
          "introduction": [
            "Supplementary projects\n\nFor more advanced use cases you might be able to take advantage of:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "material-ui-confirm",
              "introduction": [
                "material-ui-confirm\n\n![stars](https://img.shields.io/github/stars/jonatanklosko/material-ui-confirm?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/material-ui-confirm.svg)\n\nThe package [`material-ui-confirm`](https://github.com/jonatanklosko/material-ui-confirm/) provides dialogs for confirming user actions without writing boilerplate code."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nFollow the [Modal accessibility section](/material-ui/react-modal/#accessibility)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Toolpad (Beta)",
          "introduction": [
            "Toolpad (Beta)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "useDialogs",
              "introduction": [
                "useDialogs\n\nYou can create and manipulate dialogs imperatively with the [`useDialogs()`](https://mui.com/toolpad/core/react-use-dialogs/) API in `@toolpad/core`. This hook handles\n\n- state management for opening and closing dialogs\n- passing data to dialogs and receiving results back from them\n- stacking multiple dialogs\n- themed, asynchronous versions of `window.alert()`, `window.confirm()` and `window.prompt()`\n\nThe following example demonstrates some of these features:\n\n{{\"demo\": \"ToolpadDialogsNoSnap.js\", \"defaultCodeOpen\": false}}\n\n```tsx\nconst handleDelete = async () => {\n  const id = await dialogs.prompt('Enter the ID to delete', {\n    okText: 'Delete',\n    cancelText: 'Cancel',\n  });\n\n  if (id) {\n    const deleteConfirmed = await dialogs.confirm(\n      `Are you sure you want to delete \"${id}\"?`,\n    );\n    if (deleteConfirmed) {\n      try {\n        setIsDeleting(true);\n        await mockApiDelete(id);\n        dialogs.alert('Deleted!');\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Unknown error';\n        await dialogs.open(MyCustomDialog, { id, error: message });\n      } finally {\n        setIsDeleting(false);\n      }\n    }\n  }\n};\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "chips",
      "introduction": [
        "# Chip\n\n<p class=\"description\">Chips are compact elements that represent an input, attribute, or action.</p>\n\nChips allow users to enter information, make selections, filter content, or trigger actions.\n\nWhile included here as a standalone component, the most common use will\nbe in some form of input, so some of the behavior demonstrated here is\nnot shown in context."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic chip",
          "introduction": [
            "Basic chip\n\nThe `Chip` component supports outlined and filled styling."
          ],
          "code_path": [
            "BasicChips.js"
          ],
          "children": []
        },
        {
          "name": "Chip actions",
          "introduction": [
            "Chip actions\n\nYou can use the following actions.\n\n- Chips with the `onClick` prop defined change appearance on focus, hover, and click.\n- Chips with the `onDelete` prop defined will display a delete icon which changes appearance on hover."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Clickable",
              "introduction": [
                "Clickable"
              ],
              "code_path": [
                "ClickableChips.js"
              ],
              "children": []
            },
            {
              "name": "Deletable",
              "introduction": [
                "Deletable"
              ],
              "code_path": [
                "DeletableChips.js"
              ],
              "children": []
            },
            {
              "name": "Clickable and deletable",
              "introduction": [
                "Clickable and deletable"
              ],
              "code_path": [
                "ClickableAndDeletableChips.js"
              ],
              "children": []
            },
            {
              "name": "Clickable link",
              "introduction": [
                "Clickable link"
              ],
              "code_path": [
                "ClickableLinkChips.js"
              ],
              "children": []
            },
            {
              "name": "Custom delete icon",
              "introduction": [
                "Custom delete icon"
              ],
              "code_path": [
                "CustomDeleteIconChips.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Chip adornments",
          "introduction": [
            "Chip adornments\n\nYou can add ornaments to the beginning of the component.\n\nUse the `avatar` prop to add an avatar or use the `icon` prop to add an icon."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Avatar chip",
              "introduction": [
                "Avatar chip"
              ],
              "code_path": [
                "AvatarChips.js"
              ],
              "children": []
            },
            {
              "name": "Icon chip",
              "introduction": [
                "Icon chip"
              ],
              "code_path": [
                "IconChips.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Color chip",
          "introduction": [
            "Color chip\n\nYou can use the `color` prop to define a color from theme palette."
          ],
          "code_path": [
            "ColorChips.js"
          ],
          "children": []
        },
        {
          "name": "Sizes chip",
          "introduction": [
            "Sizes chip\n\nYou can use the `size` prop to define a small Chip."
          ],
          "code_path": [
            "SizesChips.js"
          ],
          "children": []
        },
        {
          "name": "Multiline chip",
          "introduction": [
            "Multiline chip\n\nBy default, Chips displays labels only in a single line.\nTo have them support multiline content, use the `sx` prop to add `height:auto` to the Chip component, and `whiteSpace: normal` to the `label` styles."
          ],
          "code_path": [
            "MultilineChips.js"
          ],
          "children": []
        },
        {
          "name": "Chip array",
          "introduction": [
            "Chip array\n\nAn example of rendering multiple chips from an array of values.\nDeleting a chip removes it from the array. Note that since no\n`onClick` prop is defined, the `Chip` can be focused, but does not\ngain depth while clicked or touched."
          ],
          "code_path": [
            "ChipsArray.js"
          ],
          "children": []
        },
        {
          "name": "Chip playground",
          "introduction": [
            "Chip playground\n\n{{\"demo\": \"ChipsPlayground.js\", \"hideToolbar\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nIf the Chip is deletable or clickable then it is a button in tab order. When the Chip is focused (for example when tabbing) releasing (`keyup` event) `Backspace` or `Delete` will call the `onDelete` handler while releasing `Escape` will blur the Chip."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "modal",
      "introduction": [
        "# Modal\n\n<p class=\"description\">The modal component provides a solid foundation for creating dialogs, popovers, lightboxes, or whatever else.</p>\n\nThe component renders its `children` node in front of a backdrop component.\nThe `Modal` offers important features:\n\n- üíÑ Manages modal stacking when one-at-a-time just isn't enough.\n- üîê Creates a backdrop, for disabling interaction below the modal.\n- üîê It disables scrolling of the page content while open.\n- ‚ôøÔ∏è It properly manages focus; moving to the modal content,\n  and keeping it there until the modal is closed.\n- ‚ôøÔ∏è Adds the appropriate ARIA roles automatically.\n\n\n\n:::info\nThe term \"modal\" is sometimes used to mean \"dialog\", but this is a misnomer.\nA modal window describes parts of a UI.\nAn element is considered modal if [it blocks interaction with the rest of the application](https://en.wikipedia.org/wiki/Modal_window).\n:::\n\nIf you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/react-dialog/) component rather than directly using Modal.\nModal is a lower-level construct that is leveraged by the following components:\n\n- [Dialog](/material-ui/react-dialog/)\n- [Drawer](/material-ui/react-drawer/)\n- [Menu](/material-ui/react-menu/)\n- [Popover](/material-ui/react-popover/)"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic modal",
          "introduction": [
            "Basic modal",
            "Notice that you can disable the outline (often blue or gold) with the `outline: 0` CSS property."
          ],
          "code_path": [
            "BasicModal.js",
            null
          ],
          "children": []
        },
        {
          "name": "Nested modal",
          "introduction": [
            "Nested modal\n\nModals can be nested, for example a select within a dialog, but stacking of more than two modals, or any two modals with a backdrop is discouraged."
          ],
          "code_path": [
            "NestedModal.js"
          ],
          "children": []
        },
        {
          "name": "Transitions",
          "introduction": [
            "Transitions\n\nThe open/close state of the modal can be animated with a transition component.\nThis component should respect the following conditions:\n\n- Be a direct child descendent of the modal.\n- Have an `in` prop. This corresponds to the open/close state.\n- Call the `onEnter` callback prop when the enter transition starts.\n- Call the `onExited` callback prop when the exit transition is completed.\n  These two callbacks allow the modal to unmount the child content when closed and fully transitioned.\n\nModal has built-in support for [react-transition-group](https://github.com/reactjs/react-transition-group).",
            "Alternatively, you can use [react-spring](https://github.com/pmndrs/react-spring)."
          ],
          "code_path": [
            "TransitionsModal.js",
            "SpringModal.js"
          ],
          "children": []
        },
        {
          "name": "Performance",
          "introduction": [
            "Performance\n\nThe content of modal is unmounted when closed.\nIf you need to make the content available to search engines or render expensive component trees inside your modal while optimizing for interaction responsiveness\nit might be a good idea to change this default behavior by enabling the `keepMounted` prop:\n\n```jsx\n<Modal keepMounted />\n```\n\n{{\"demo\": \"KeepMountedModal.js\", \"defaultCodeOpen\": false}}\n\nAs with any performance optimization, this is not a silver bullet.\nBe sure to identify bottlenecks first, and then try out these optimization strategies."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Server-side modal",
          "introduction": [
            "Server-side modal\n\nReact [doesn't support](https://github.com/facebook/react/issues/13097) the [`createPortal()`](https://react.dev/reference/react-dom/createPortal) API on the server.\nIn order to display the modal, you need to disable the portal feature with the `disablePortal` prop:"
          ],
          "code_path": [
            "ServerModal.js"
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Focus trap",
              "introduction": [
                "Focus trap\n\nThe modal moves the focus back to the body of the component if the focus tries to escape it.\n\nThis is done for accessibility purposes. However, it might create issues.\nIn the event the users need to interact with another part of the page, for example with a chatbot window, you can disable the behavior:\n\n```jsx\n<Modal disableEnforceFocus />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/)\n\n- Be sure to add `aria-labelledby=\"id...\"`, referencing the modal title, to the `Modal`.\n  Additionally, you may give a description of your modal with the `aria-describedby=\"id...\"` prop on the `Modal`.\n\n  ```jsx\n  <Modal aria-labelledby=\"modal-title\" aria-describedby=\"modal-description\">\n    <h2 id=\"modal-title\">My Title</h2>\n    <p id=\"modal-description\">My Description</p>\n  </Modal>\n  ```\n\n- The [WAI-ARIA Authoring Practices](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/examples/dialog/) can help you set the initial focus on the most relevant element, based on your modal content.\n- Keep in mind that a \"modal window\" overlays on either the primary window or another modal window. Windows under a modal are **inert**. That is, users cannot interact with content outside an active modal window. This might create [conflicting behaviors](#focus-trap)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "floating-action-button",
      "introduction": [
        "# Floating Action Button\n\n<p class=\"description\">A Floating Action Button (FAB) performs the primary, or most common, action on a screen.</p>\n\nA floating action button appears in front of all screen content, typically as a circular shape with an icon in its center.\nFABs come in two types: regular, and extended.\n\nOnly use a FAB if it is the most suitable way to present a screen's primary action.\nOnly one component is recommended per screen to represent the most common action."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic FAB",
          "introduction": [
            "Basic FAB"
          ],
          "code_path": [
            "FloatingActionButtons.js"
          ],
          "children": []
        },
        {
          "name": "Size",
          "introduction": [
            "Size\n\nBy default, the size is `large`. Use the `size` prop for smaller floating action buttons.",
            ""
          ],
          "code_path": [
            "FloatingActionButtonSize.js",
            "FloatingActionButtonExtendedSize.js"
          ],
          "children": []
        },
        {
          "name": "Animation",
          "introduction": [
            "Animation\n\nThe floating action button animates onto the screen as an expanding piece of material, by default.\n\nA floating action button that spans multiple lateral screens (such as tabbed screens) should briefly disappear,\nthen reappear if its action changes.\n\nThe Zoom transition can be used to achieve this. Note that since both the exiting and entering\nanimations are triggered at the same time, we use `enterDelay` to allow the outgoing Floating Action Button's\nanimation to finish before the new one enters.\n\n{{\"demo\": \"FloatingActionButtonZoom.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "masonry",
      "introduction": [
        "# Masonry\n\n<p class=\"description\">Masonry lays out contents of varying dimensions as blocks of the same width and different height with configurable gaps.</p>\n\nMasonry maintains a list of content blocks with a consistent width but different height.\nThe contents are ordered by row.\nIf a row is already filled with the specified number of columns, the next item starts another row, and it is added to the shortest column in order to optimize the use of space."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic masonry",
          "introduction": [
            "Basic masonry\n\nA simple example of a `Masonry`. `Masonry` is a container for one or more items. It can receive any element including `<div />` and `<img />`.\n\n{{\"demo\": \"BasicMasonry.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Image masonry",
          "introduction": [
            "Image masonry\n\nThis example demonstrates the use of `Masonry` for images. `Masonry` orders its children by row.\nIf you'd like to order images by column, check out [ImageList](/material-ui/react-image-list/#masonry-image-list).\n\n{{\"demo\": \"ImageMasonry.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Items with variable height",
          "introduction": [
            "Items with variable height\n\nThis example demonstrates the use of `Masonry` for items with variable height.\nItems can move to other columns in order to abide by the rule that items are always added to the shortest column and hence optimize the use of space.\n\n{{\"demo\": \"MasonryWithVariableHeightItems.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Columns",
          "introduction": [
            "Columns\n\nThis example demonstrates the use of the `columns` to configure the number of columns of a `Masonry`.\n\n{{\"demo\": \"FixedColumns.js\", \"bg\": true}}\n\n`columns` accepts responsive values:\n\n{{\"demo\": \"ResponsiveColumns.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Spacing",
          "introduction": [
            "Spacing\n\nThis example demonstrates the use of the `spacing` to configure the spacing between items.\nIt is important to note that the value provided to the `spacing` prop is multiplied by the theme's spacing field.\n\n{{\"demo\": \"FixedSpacing.js\", \"bg\": true}}\n\n`spacing` accepts responsive values:\n\n{{\"demo\": \"ResponsiveSpacing.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Sequential",
          "introduction": [
            "Sequential\n\nThis example demonstrates the use of the `sequential` to configure the sequential order.\nWith `sequential` enabled, items are added in order from left to right rather than adding to the shortest column.\n\n{{\"demo\": \"Sequential.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Server-side rendering",
          "introduction": [
            "Server-side rendering\n\nThis example demonstrates the use of the `defaultHeight`, `defaultColumns` and `defaultSpacing`, which are used to\nsupport server-side rendering.\n\n:::info\n`defaultHeight` should be large enough to render all rows. Also, it is worth mentioning that items are not added to the shortest column in case of server-side rendering.\n:::\n\n{{\"demo\": \"SSRMasonry.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "portal",
      "introduction": [
        "# Portal\n\n<p class=\"description\">The Portal component lets you render its children into a DOM node that exists outside of the Portal's own DOM hierarchy.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "This document has moved",
          "introduction": [
            "This document has moved\n\n:::warning\nPlease refer to the [Portal](/base-ui/react-portal/) component page in the Base¬†UI docs for demos and details on usage.\n\nPortal is a part of the standalone [Base¬†UI](/base-ui/) component library.\nIt is currently re-exported from `@mui/material` for your convenience, but it will be removed from this package in a future major version after Base¬†UI gets a stable release.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "links",
      "introduction": [
        "# Links\n\n<p class=\"description\">The Link component allows you to easily customize anchor elements with your theme colors and typography styles.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic links",
          "introduction": [
            "Basic links\n\nThe Link component is built on top of the [Typography](/material-ui/api/typography/) component, meaning that you can use its props.",
            "However, the Link component has some different default props than the Typography component:\n\n- `color=\"primary\"` as the link needs to stand out.\n- `variant=\"inherit\"` as the link will, most of the time, be used as a child of a Typography component."
          ],
          "code_path": [
            "Links.js",
            null
          ],
          "children": []
        },
        {
          "name": "Underline",
          "introduction": [
            "Underline\n\nThe `underline` prop can be used to set the underline behavior. The default is `always`."
          ],
          "code_path": [
            "UnderlineLink.js"
          ],
          "children": []
        },
        {
          "name": "Security",
          "introduction": [
            "Security\n\nWhen you use `target=\"_blank\"` with Links, it is [recommended](https://developers.google.com/web/tools/lighthouse/audits/noopener) to always set `rel=\"noopener\"` or `rel=\"noreferrer\"` when linking to third party content.\n\n- `rel=\"noopener\"` prevents the new page from being able to access the `window.opener` property and ensures it runs in a separate process.\n  Without this, the target page can potentially redirect your page to a malicious URL.\n- `rel=\"noreferrer\"` has the same effect, but also prevents the _Referer_ header from being sent to the new page.\n  ‚ö†Ô∏è Removing the referrer header will affect analytics."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Third-party routing library",
          "introduction": [
            "Third-party routing library\n\nOne frequent use case is to perform navigation on the client only, without an HTTP round-trip to the server.\nThe `Link` component provides the `component` prop to handle this use case.\nHere is a [more detailed guide](/material-ui/integrations/routing/#link)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/link/)\n\n- When providing the content for the link, avoid generic descriptions like \"click here\" or \"go to\".\n  Instead, use [specific descriptions](https://developers.google.com/web/tools/lighthouse/audits/descriptive-link-text).\n- For the best user experience, links should stand out from the text on the page. For instance, you can keep the default `underline=\"always\"` behavior.\n- If a link doesn't have a meaningful href, [it should be rendered using a `<button>` element](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md).\n  The demo below illustrates how to properly link with a `<button>`:"
          ],
          "code_path": [
            "ButtonLink.js"
          ],
          "children": [
            {
              "name": "Keyboard accessibility",
              "introduction": [
                "Keyboard accessibility\n\n- Interactive elements should receive focus in a coherent order when the user presses the <kbd class=\"key\">Tab</kbd> key.\n- Users should be able to open a link by pressing <kbd class=\"key\">Enter</kbd>."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Screen reader accessibility",
              "introduction": [
                "Screen reader accessibility\n\n- When a link receives focus, screen readers should announce a descriptive link name.\n  If the link opens in a new window or browser tab, add an [`aria-label`](https://www.w3.org/WAI/WCAG22/Techniques/aria/ARIA8) to inform screen reader users‚Äîfor example, _\"To learn more, visit the About page which opens in a new window.\"_"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "popper",
      "introduction": [
        "# Popper\n\n<p class=\"description\">A Popper can be used to display some content on top of another. It's an alternative to react-popper.</p>\n\nSome important features of the Popper component:\n\n- üï∑ Popper relies on the 3rd party library ([Popper.js](https://popper.js.org/)) for perfect positioning.\n- üíÑ It's an alternative API to react-popper. It aims for simplicity.\n- Its child element is a [Base¬†UI Portal](/base-ui/react-portal/) on the body of the document to avoid rendering problems.\n  You can disable this behavior with `disablePortal`.\n- The scroll isn't blocked like with the [Popover](/material-ui/react-popover/) component.\n  The placement of the popper updates with the available area in the viewport.\n- Clicking away does not hide the Popper component.\n  If you need this behavior, you can use the [Base¬†UI Click-Away Listener](/base-ui/react-click-away-listener/) - see the example in the [menu documentation section](/material-ui/react-menu/#composition-with-menu-list).\n- The `anchorEl` is passed as the reference object to create a new `Popper.js` instance."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic Popper",
          "introduction": [
            "Basic Popper"
          ],
          "code_path": [
            "SimplePopper.js"
          ],
          "children": []
        },
        {
          "name": "Transitions",
          "introduction": [
            "Transitions\n\nThe open/close state of the popper can be animated with a render prop child and a transition component.\nThis component should respect the following conditions:\n\n- Be a direct child descendent of the popper.\n- Call the `onEnter` callback prop when the enter transition starts.\n- Call the `onExited` callback prop when the exit transition is completed.\n  These two callbacks allow the popper to unmount the child content when closed and fully transitioned.\n\nPopper has built-in support for [react-transition-group](https://github.com/reactjs/react-transition-group).",
            "Alternatively, you can use [react-spring](https://github.com/pmndrs/react-spring)."
          ],
          "code_path": [
            "TransitionsPopper.js",
            "SpringPopper.js"
          ],
          "children": []
        },
        {
          "name": "Positioned popper",
          "introduction": [
            "Positioned popper"
          ],
          "code_path": [
            "PositionedPopper.js"
          ],
          "children": []
        },
        {
          "name": "Scroll playground",
          "introduction": [
            "Scroll playground\n\n{{\"demo\": \"ScrollPlayground.js\", \"hideToolbar\": true, \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Virtual element",
          "introduction": [
            "Virtual element\n\nThe value of the `anchorEl` prop can be a reference to a fake DOM element.\nYou need to create an object shaped like the [`VirtualElement`](https://popper.js.org/docs/v2/virtual-elements/).\n\nHighlight part of the text to see the popper:"
          ],
          "code_path": [
            "VirtualElementPopper.js"
          ],
          "children": []
        },
        {
          "name": "Supplementary projects",
          "introduction": [
            "Supplementary projects\n\nFor more advanced use cases you might be able to take advantage of:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "material-ui-popup-state",
              "introduction": [
                "material-ui-popup-state\n\n![stars](https://img.shields.io/github/stars/jcoreio/material-ui-popup-state?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/material-ui-popup-state.svg)\n\nThe package [`material-ui-popup-state`](https://github.com/jcoreio/material-ui-popup-state) that takes care of popper state for you in most cases."
              ],
              "code_path": [
                "PopperPopupState.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "paper",
      "introduction": [
        "# Paper\n\n<p class=\"description\">The Paper component is a container for displaying content on an elevated surface.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nIn Material Design, surface components and shadow styles are heavily influenced by their real-world physical counterparts.\n\nMaterial¬†UI implements this concept with the Paper component, a container-like surface that features the [`elevation`](#elevation) prop for pulling box-shadow values from the theme.\n\n:::success\nThe Paper component is ideally suited for designs that follow [Material Design's elevation system](https://m2.material.io/design/environment/elevation.html#elevation-in-material-design), which is meant to replicate how light casts shadows in the physical world.\n\nIf you just need a generic container, you may prefer to use the [Box](/material-ui/react-box/) or [Container](/material-ui/react-container/) components.\n:::\n\n{{\"demo\": \"SimplePaper.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Component",
          "introduction": [
            "Component\n\n```jsx\nimport Paper from '@mui/material/Paper';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Elevation",
              "introduction": [
                "Elevation\n\nUse the `elevation` prop to establish hierarchy through the use of shadows.\nThe Paper component's default elevation level is `1`.\nThe prop accepts values from `0` to `24`.\nThe higher the number, the further away the Paper appears to be from its background.\n\nIn dark mode, increasing the elevation also makes the background color lighter.\nThis is done by applying a semi-transparent gradient with the `background-image` CSS property.\n\n:::warning\nThe aforementioned dark mode behavior can lead to confusion when overriding the Paper component, because changing the `background-color` property won't affect the lighter shading.\nTo override it, you must either use a new background value, or customize the values for both `background-color` and `background-image`.\n:::\n\n{{\"demo\": \"Elevation.js\", \"bg\": \"outlined\"}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Variants",
              "introduction": [
                "Variants\n\nSet the `variant` prop to `\"outlined\"` for a flat, outlined Paper with no shadows:\n\n{{\"demo\": \"Variants.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Corners",
              "introduction": [
                "Corners\n\nThe Paper component features rounded corners by default.\nAdd the `square` prop for square corners:\n\n{{\"demo\": \"SquareCorners.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Anatomy",
          "introduction": [
            "Anatomy\n\nThe Paper component is composed of a single root `<div>` that wraps around its contents:\n\n```html\n<div class=\"MuiPaper-root\">\n  <!-- Paper contents -->\n</div>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "autocomplete",
      "introduction": [
        "# Autocomplete\n\n<p class=\"description\">The autocomplete is a normal text input enhanced by a panel of suggested options.</p>\n\nThe widget is useful for setting the value of a single-line textbox in one of two types of scenarios:\n\n1. The value for the textbox must be chosen from a predefined set of allowed values, for example a location field must contain a valid location name: [combo box](#combo-box).\n2. The textbox may contain any arbitrary value, but it is advantageous to suggest possible values to the user, for example a search field may suggest similar or previous searches to save the user time: [free solo](#free-solo).\n\nIt's meant to be an improved version of the \"react-select\" and \"downshift\" packages."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Combo box",
          "introduction": [
            "Combo box\n\nThe value must be chosen from a predefined set of allowed values."
          ],
          "code_path": [
            "ComboBox.js"
          ],
          "children": [
            {
              "name": "Options structure",
              "introduction": [
                "Options structure\n\nBy default, the component accepts the following options structures:\n\n```ts\ninterface AutocompleteOption {\n  label: string;\n}\n// or\ntype AutocompleteOption = string;\n```\n\nfor instance:\n\n```js\nconst options = [\n  { label: 'The Godfather', id: 1 },\n  { label: 'Pulp Fiction', id: 2 },\n];\n// or\nconst options = ['The Godfather', 'Pulp Fiction'];\n```\n\nHowever, you can use different structures by providing a `getOptionLabel` prop.\n\nIf your options are objects, you must provide the `isOptionEqualToValue` prop to ensure correct selection and highlighting. By default, it uses strict equality to compare options with the current value."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Playground",
              "introduction": [
                "Playground\n\nEach of the following examples demonstrates one feature of the Autocomplete component."
              ],
              "code_path": [
                "Playground.js"
              ],
              "children": []
            },
            {
              "name": "Country select",
              "introduction": [
                "Country select\n\nChoose one of the 248 countries."
              ],
              "code_path": [
                "CountrySelect.js"
              ],
              "children": []
            },
            {
              "name": "Controlled states",
              "introduction": [
                "Controlled states\n\nThe component has two states that can be controlled:\n\n1. the \"value\" state with the `value`/`onChange` props combination. This state represents the value selected by the user, for instance when pressing <kbd class=\"key\">Enter</kbd>.\n2. the \"input value\" state with the `inputValue`/`onInputChange` props combination. This state represents the value displayed in the textbox.\n\nThese two states are isolated, and should be controlled independently.\n\n:::info\n\n- A component is **controlled** when it's managed by its parent using props.\n- A component is **uncontrolled** when it's managed by its own local state.\n\nLearn more about controlled and uncontrolled components in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::",
                ":::warning\n\nIf you control the `value`, make sure it's referentially stable between renders.\nIn other words, the reference to the value shouldn't change if the value itself doesn't change.\n\n```tsx\n// ‚ö†Ô∏è BAD\nreturn <Autocomplete multiple value={allValues.filter((v) => v.selected)} />;\n\n// üëç GOOD\nconst selectedValues = React.useMemo(\n  () => allValues.filter((v) => v.selected),\n  [allValues],\n);\nreturn <Autocomplete multiple value={selectedValues} />;\n```\n\nIn the first example, `allValues.filter` is called and returns **a new array** every render.\nThe fix includes memoizing the value, so it changes only when needed.\n:::"
              ],
              "code_path": [
                "ControllableStates.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Free solo",
          "introduction": [
            "Free solo\n\nSet `freeSolo` to true so the textbox can contain any arbitrary value."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Search input",
              "introduction": [
                "Search input\n\nThe prop is designed to cover the primary use case of a **search input** with suggestions, for example Google search or react-autowhatever.",
                ":::warning\nBe careful when using the free solo mode with non-string options, as it may cause type mismatch.\n\nThe value created by typing into the textbox is always a string, regardless of the type of the options.\n:::"
              ],
              "code_path": [
                "FreeSolo.js",
                null
              ],
              "children": []
            },
            {
              "name": "Creatable",
              "introduction": [
                "Creatable\n\nIf you intend to use this mode for a [combo box](#combo-box) like experience (an enhanced version of a select element) we recommend setting:\n\n- `selectOnFocus` to help the user clear the selected value.\n- `clearOnBlur` to help the user enter a new value.\n- `handleHomeEndKeys` to move focus inside the popup with the <kbd class=\"key\">Home</kbd> and <kbd class=\"key\">End</kbd> keys.\n- A last option, for instance: `Add \"YOUR SEARCH\"`.",
                "You could also display a dialog when the user wants to add a new value."
              ],
              "code_path": [
                "FreeSoloCreateOption.js",
                "FreeSoloCreateOptionDialog.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Grouped",
          "introduction": [
            "Grouped\n\nYou can group the options with the `groupBy` prop.\nIf you do so, make sure that the options are also sorted with the same dimension that they are grouped by,\notherwise, you will notice duplicate headers.",
            "To control how the groups are rendered, provide a custom `renderGroup` prop.\nThis is a function that accepts an object with two fields:\n\n- `group`‚Äîa string representing a group name\n- `children`‚Äîa collection of list items that belong to the group\n\nThe following demo shows how to use this prop to define custom markup and override the styles of the default groups:"
          ],
          "code_path": [
            "Grouped.js",
            "RenderGroup.js"
          ],
          "children": []
        },
        {
          "name": "Disabled options",
          "introduction": [
            "Disabled options"
          ],
          "code_path": [
            "DisabledOptions.js"
          ],
          "children": []
        },
        {
          "name": "`useAutocomplete`",
          "introduction": [
            "`useAutocomplete`\n\nFor advanced customization use cases, a headless `useAutocomplete()` hook is exposed.\nIt accepts almost the same options as the Autocomplete component minus all the props\nrelated to the rendering of JSX.\nThe Autocomplete component is built on this hook.\n\n```tsx\nimport { useAutocomplete } from '@mui/base/useAutocomplete';\n```\n\nThe `useAutocomplete` hook is also reexported from @mui/material for convenience and backward compatibility.\n\n```tsx\nimport useAutocomplete from '@mui/material/useAutocomplete';\n```\n\n- üì¶ [4.6 kB gzipped](https://bundlephobia.com/package/@mui/material).\n\n{{\"demo\": \"UseAutocomplete.js\", \"defaultCodeOpen\": false}}"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Customized hook",
              "introduction": [
                "Customized hook",
                "Head to the [customization](#customization) section for an example with the `Autocomplete` component instead of the hook."
              ],
              "code_path": [
                "CustomizedHook.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Asynchronous requests",
          "introduction": [
            "Asynchronous requests\n\nThe component supports two different asynchronous use-cases:\n\n- [Load on open](#load-on-open): it waits for the component to be interacted with to load the options.\n- [Search as you type](#search-as-you-type): a new request is made for each keystroke."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Load on open",
              "introduction": [
                "Load on open\n\nIt displays a progress state as long as the network request is pending."
              ],
              "code_path": [
                "Asynchronous.js"
              ],
              "children": []
            },
            {
              "name": "Search as you type",
              "introduction": [
                "Search as you type\n\nIf your logic is fetching new options on each keystroke and using the current value of the textbox\nto filter on the server, you may want to consider throttling requests.\n\nAdditionally, you will need to disable the built-in filtering of the `Autocomplete` component by\noverriding the `filterOptions` prop:\n\n```jsx\n<Autocomplete filterOptions={(x) => x} />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Google Maps place",
              "introduction": [
                "Google Maps place\n\nA customized UI for Google Maps Places Autocomplete.\nFor this demo, we need to load the [Google Maps JavaScript](https://developers.google.com/maps/documentation/javascript/overview) and [Google Places](https://developers.google.com/maps/documentation/places/web-service/overview) API.\n\n:::info\nThe following demo relies on [autosuggest-highlight](https://github.com/moroshko/autosuggest-highlight), a small (1 kB) utility for highlighting text in autosuggest and autocomplete components.\n:::",
                ":::error\nBefore you can start using the Google Maps JavaScript API and Places API, you need to get your own [API key](https://developers.google.com/maps/documentation/javascript/get-api-key).\n:::"
              ],
              "code_path": [
                "GoogleMaps.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Multiple values",
          "introduction": [
            "Multiple values\n\nAlso known as tags, the user is allowed to enter more than one value."
          ],
          "code_path": [
            "Tags.js"
          ],
          "children": [
            {
              "name": "Fixed options",
              "introduction": [
                "Fixed options\n\nIn the event that you need to lock certain tags so that they can't be removed, you can set the chips disabled."
              ],
              "code_path": [
                "FixedTags.js"
              ],
              "children": []
            },
            {
              "name": "Checkboxes",
              "introduction": [
                "Checkboxes"
              ],
              "code_path": [
                "CheckboxesTags.js"
              ],
              "children": []
            },
            {
              "name": "Limit tags",
              "introduction": [
                "Limit tags\n\nYou can use the `limitTags` prop to limit the number of displayed options when not focused."
              ],
              "code_path": [
                "LimitTags.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Sizes",
          "introduction": [
            "Sizes\n\nFancy smaller inputs? Use the `size` prop."
          ],
          "code_path": [
            "Sizes.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Custom input",
              "introduction": [
                "Custom input\n\nThe `renderInput` prop allows you to customize the rendered input.\nThe first argument of this render prop contains props that you need to forward.\nPay specific attention to the `ref` and `inputProps` keys.\n\n:::warning\nIf you're using a custom input component inside the Autocomplete, make sure that you forward the ref to the underlying DOM element.\n:::"
              ],
              "code_path": [
                "CustomInputAutocomplete.js"
              ],
              "children": []
            },
            {
              "name": "Globally Customized Options",
              "introduction": [
                "Globally Customized Options\n\nTo globally customize the Autocomplete options for all components in your app,\nyou can use the [theme default props](/material-ui/customization/theme-components/#theme-default-props) and set the `renderOption` property in the `defaultProps` key.\nThe `renderOption` property takes the `ownerState` as the fourth parameter, which includes props and internal component state.\nTo display the label, you can use the `getOptionLabel` prop from the `ownerState`.\nThis approach enables different options for each Autocomplete component while keeping the options styling consistent."
              ],
              "code_path": [
                "GloballyCustomizedOptions.js"
              ],
              "children": []
            },
            {
              "name": "GitHub's picker",
              "introduction": [
                "GitHub's picker\n\nThis demo reproduces GitHub's label picker:",
                "Head to the [Customized hook](#customized-hook) section for a customization example with the `useAutocomplete` hook instead of the component."
              ],
              "code_path": [
                "GitHubLabel.js",
                null
              ],
              "children": []
            },
            {
              "name": "Hint",
              "introduction": [
                "Hint\n\nThe following demo shows how to add a hint feature to the Autocomplete:"
              ],
              "code_path": [
                "AutocompleteHint.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Highlights",
          "introduction": [
            "Highlights\n\nThe following demo relies on [autosuggest-highlight](https://github.com/moroshko/autosuggest-highlight), a small (1 kB) utility for highlighting text in autosuggest and autocomplete components."
          ],
          "code_path": [
            "Highlights.js"
          ],
          "children": []
        },
        {
          "name": "Custom filter",
          "introduction": [
            "Custom filter\n\nThe component exposes a factory to create a filter method that can be provided to the `filterOptions` prop.\nYou can use it to change the default option filter behavior.\n\n```js\nimport { createFilterOptions } from '@mui/material/Autocomplete';\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "`createFilterOptions(config) => filterOptions`",
              "introduction": [
                "`createFilterOptions(config) => filterOptions`"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Arguments",
                  "introduction": [
                    "Arguments\n\n1. `config` (_object_ [optional]):\n\n- `config.ignoreAccents` (_bool_ [optional]): Defaults to `true`. Remove diacritics.\n- `config.ignoreCase` (_bool_ [optional]): Defaults to `true`. Lowercase everything.\n- `config.limit` (_number_ [optional]): Default to null. Limit the number of suggested options to be shown. For example, if `config.limit` is `100`, only the first `100` matching options are shown. It can be useful if a lot of options match and virtualization wasn't set up.\n- `config.matchFrom` (_'any' | 'start'_ [optional]): Defaults to `'any'`.\n- `config.stringify` (_func_ [optional]): Controls how an option is converted into a string so that it can be matched against the input text fragment.\n- `config.trim` (_bool_ [optional]): Defaults to `false`. Remove trailing spaces."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Returns",
                  "introduction": [
                    "Returns\n\n`filterOptions`: the returned filter method can be provided directly to the `filterOptions` prop of the `Autocomplete` component, or the parameter of the same name for the hook.\n\nIn the following demo, the options need to start with the query prefix:\n\n```jsx\nconst filterOptions = createFilterOptions({\n  matchFrom: 'start',\n  stringify: (option) => option.title,\n});\n\n<Autocomplete filterOptions={filterOptions} />;\n```\n\n{{\"demo\": \"Filter.js\", \"defaultCodeOpen\": false}}"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Advanced",
              "introduction": [
                "Advanced\n\nFor richer filtering mechanisms, like fuzzy matching, it's recommended to look at [match-sorter](https://github.com/kentcdodds/match-sorter). For instance:\n\n```jsx\nimport { matchSorter } from 'match-sorter';\n\nconst filterOptions = (options, { inputValue }) => matchSorter(options, inputValue);\n\n<Autocomplete filterOptions={filterOptions} />;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Virtualization",
          "introduction": [
            "Virtualization\n\nSearch within 10,000 randomly generated options. The list is virtualized thanks to [react-window](https://github.com/bvaughn/react-window)."
          ],
          "code_path": [
            "Virtualize.js"
          ],
          "children": []
        },
        {
          "name": "Events",
          "introduction": [
            "Events\n\nIf you would like to prevent the default key handler behavior, you can set the event's `defaultMuiPrevented` property to `true`:\n\n```jsx\n<Autocomplete\n  onKeyDown={(event) => {\n    if (event.key === 'Enter') {\n      // Prevent's default 'Enter' behavior.\n      event.defaultMuiPrevented = true;\n      // your handler code\n    }\n  }}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "autocomplete/autofill",
              "introduction": [
                "autocomplete/autofill\n\nBrowsers have heuristics to help the user fill in form inputs.\nHowever, this can harm the UX of the component.\n\nBy default, the component disables the input **autocomplete** feature (remembering what the user has typed for a given field in a previous session) with the `autoComplete=\"off\"` attribute.\nGoogle Chrome does not currently support this attribute setting ([Issue 41239842](https://issues.chromium.org/issues/41239842)).\nA possible workaround is to remove the `id` to have the component generate a random one.\n\nIn addition to remembering past entered values, the browser might also propose **autofill** suggestions (saved login, address, or payment details).\nIn the event you want the avoid autofill, you can try the following:\n\n- Name the input without leaking any information the browser can use. For example `id=\"field1\"` instead of `id=\"country\"`. If you leave the id empty, the component uses a random id.\n- Set `autoComplete=\"new-password\"` (some browsers will suggest a strong password for inputs with this attribute setting):\n\n  ```jsx\n  <TextField\n    {...params}\n    inputProps={{\n      ...params.inputProps,\n      autoComplete: 'new-password',\n    }}\n  />\n  ```\n\nRead [the guide on MDN](https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Turning_off_form_autocompletion) for more details."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "iOS VoiceOver",
              "introduction": [
                "iOS VoiceOver\n\nVoiceOver on iOS Safari doesn't support the `aria-owns` attribute very well.\nYou can work around the issue with the `disablePortal` prop."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "ListboxComponent",
              "introduction": [
                "ListboxComponent\n\nIf you provide a custom `ListboxComponent` prop, you need to make sure that the intended scroll container has the `role` attribute set to `listbox`. This ensures the correct behavior of the scroll, for example when using the keyboard to navigate."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/combobox/)\n\nWe encourage the usage of a label for the textbox.\nThe component implements the WAI-ARIA authoring practices."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "image-list",
      "introduction": [
        "# Image List\n\n<p class=\"description\">The Image List displays a collection of images in an organized grid.</p>\n\nImage lists represent a collection of items in a repeated pattern. They help improve the visual comprehension of the content they hold."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Standard image list",
          "introduction": [
            "Standard image list\n\nStandard image lists are best for items of equal importance. They have a uniform container size, ratio, and spacing."
          ],
          "code_path": [
            "StandardImageList.js"
          ],
          "children": []
        },
        {
          "name": "Quilted image list",
          "introduction": [
            "Quilted image list\n\nQuilted image lists emphasize certain items over others in a collection. They create hierarchy using varied container sizes and ratios."
          ],
          "code_path": [
            "QuiltedImageList.js"
          ],
          "children": []
        },
        {
          "name": "Woven image list",
          "introduction": [
            "Woven image list\n\nWoven image lists use alternating container ratios to create a rhythmic layout. A woven image list is best for browsing peer content."
          ],
          "code_path": [
            "WovenImageList.js"
          ],
          "children": []
        },
        {
          "name": "Masonry image list",
          "introduction": [
            "Masonry image list\n\nMasonry image lists use dynamically sized container heights that reflect the aspect ratio of each image. This image list is best used for browsing uncropped peer content."
          ],
          "code_path": [
            "MasonryImageList.js"
          ],
          "children": []
        },
        {
          "name": "Image list with title bars",
          "introduction": [
            "Image list with title bars\n\nThis example demonstrates the use of the `ImageListItemBar` to add an overlay to each item.\nThe overlay can accommodate a `title`, `subtitle` and secondary action - in this example an `IconButton`."
          ],
          "code_path": [
            "TitlebarImageList.js"
          ],
          "children": [
            {
              "name": "Title bar below image (standard)",
              "introduction": [
                "Title bar below image (standard)\n\nThe title bar can be placed below the image."
              ],
              "code_path": [
                "TitlebarBelowImageList.js"
              ],
              "children": []
            },
            {
              "name": "Title bar below image (masonry)",
              "introduction": [
                "Title bar below image (masonry)"
              ],
              "code_path": [
                "TitlebarBelowMasonryImageList.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Custom image list",
          "introduction": [
            "Custom image list\n\nIn this example the items have a customized titlebar, positioned at the top and with a custom gradient `titleBackground`.\nThe secondary action `IconButton` is positioned on the left. The `gap` prop is used to adjust the gap between items.\n\n{{\"demo\": \"CustomImageList.js\", \"defaultCodeOpen\": false}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "pagination",
      "introduction": [
        "# Pagination\n\n<p class=\"description\">The Pagination component enables the user to select a specific page from a range of pages.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic pagination",
          "introduction": [
            "Basic pagination"
          ],
          "code_path": [
            "BasicPagination.js"
          ],
          "children": []
        },
        {
          "name": "Outlined pagination",
          "introduction": [
            "Outlined pagination"
          ],
          "code_path": [
            "PaginationOutlined.js"
          ],
          "children": []
        },
        {
          "name": "Rounded pagination",
          "introduction": [
            "Rounded pagination"
          ],
          "code_path": [
            "PaginationRounded.js"
          ],
          "children": []
        },
        {
          "name": "Pagination size",
          "introduction": [
            "Pagination size"
          ],
          "code_path": [
            "PaginationSize.js"
          ],
          "children": []
        },
        {
          "name": "Buttons",
          "introduction": [
            "Buttons\n\nYou can optionally enable first-page and last-page buttons, or disable the previous-page and next-page buttons."
          ],
          "code_path": [
            "PaginationButtons.js"
          ],
          "children": []
        },
        {
          "name": "Custom icons",
          "introduction": [
            "Custom icons\n\nIt's possible to customize the control icons."
          ],
          "code_path": [
            "CustomIcons.js"
          ],
          "children": []
        },
        {
          "name": "Pagination ranges",
          "introduction": [
            "Pagination ranges\n\nYou can specify how many digits to display either side of current page with the `siblingCount` prop, and adjacent to the start and end page number with the `boundaryCount` prop."
          ],
          "code_path": [
            "PaginationRanges.js"
          ],
          "children": []
        },
        {
          "name": "Controlled pagination",
          "introduction": [
            "Controlled pagination"
          ],
          "code_path": [
            "PaginationControlled.js"
          ],
          "children": []
        },
        {
          "name": "Router integration",
          "introduction": [
            "Router integration"
          ],
          "code_path": [
            "PaginationLink.js"
          ],
          "children": []
        },
        {
          "name": "`usePagination`",
          "introduction": [
            "`usePagination`\n\nFor advanced customization use cases, a headless `usePagination()` hook is exposed.\nIt accepts almost the same options as the Pagination component minus all the props\nrelated to the rendering of JSX.\nThe Pagination component is built on this hook.\n\n```jsx\nimport usePagination from '@mui/material/usePagination';\n```"
          ],
          "code_path": [
            "UsePagination.js"
          ],
          "children": []
        },
        {
          "name": "Table pagination",
          "introduction": [
            "Table pagination\n\nThe `Pagination` component was designed to paginate a list of arbitrary items when infinite loading isn't used.\nIt's preferred in contexts where SEO is important, for instance, a blog.\n\nFor the pagination of a large set of tabular data, you should use the `TablePagination` component.",
            ":::warning\nNote that the `Pagination` page prop starts at 1 to match the requirement of including the value in the URL, while the `TablePagination` page prop starts at 0 to match the requirement of zero-based JavaScript arrays that come with rendering a lot of tabular data.\n:::\n\nYou can learn more about this use case in the [table section](/material-ui/react-table/#custom-pagination-options) of the documentation."
          ],
          "code_path": [
            "TablePaginationDemo.js",
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "ARIA",
              "introduction": [
                "ARIA\n\nThe root node has a role of \"navigation\" and aria-label \"pagination navigation\" by default. The page items have an aria-label that identifies the purpose of the item (\"go to first page\", \"go to previous page\", \"go to page 1\" etc.).\nYou can override these using the `getItemAriaLabel` prop."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Keyboard",
              "introduction": [
                "Keyboard\n\nThe pagination items are in tab order, with a tabindex of \"0\"."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "alert",
      "introduction": [
        "# Alert\n\n<p class=\"description\">Alerts display brief messages for the user without interrupting their use of the app.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nAlerts give users brief and potentially time-sensitive information in an unobtrusive manner.\n\nThe Material¬†UI Alert component includes several props for quickly customizing its styles to provide immediate visual cues about its contents.",
            ":::info\nThis component is no longer documented in the [Material Design guidelines](https://m2.material.io/), but Material¬†UI will continue to support it.\n:::"
          ],
          "code_path": [
            "SimpleAlert.js",
            null
          ],
          "children": [
            {
              "name": "Usage",
              "introduction": [
                "Usage\n\nA key trait of the alert pattern is that [it should not interrupt the user's experience](https://www.w3.org/WAI/ARIA/apg/patterns/alert/) of the app.\nAlerts should not be confused with alert _dialogs_ ([ARIA](https://www.w3.org/WAI/ARIA/apg/patterns/alertdialog/)), which _are_ intended to interrupt the user to obtain a response.\nUse the Material¬†UI [Dialog](/material-ui/react-dialog/) component if you need this behavior."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport Alert from '@mui/material/Alert';\n```\n\nThe Alert component wraps around its content, and stretches to fill its enclosing container."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Severity",
              "introduction": [
                "Severity\n\nThe `severity` prop accepts four values representing different states‚Äî`success` (the default), `info`, `warning`, and `error`‚Äìwith corresponding icon and color combinations for each:"
              ],
              "code_path": [
                "BasicAlerts.js"
              ],
              "children": []
            },
            {
              "name": "Variants",
              "introduction": [
                "Variants\n\nThe Alert component comes with two alternative style options‚Äî`filled` and `outlined`‚Äîwhich you can set using the `variant` prop."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Filled",
                  "introduction": [
                    "Filled"
                  ],
                  "code_path": [
                    "FilledAlerts.js"
                  ],
                  "children": []
                },
                {
                  "name": "Outlined",
                  "introduction": [
                    "Outlined",
                    ":::warning\nWhen using an outlined Alert with the [Snackbar](/material-ui/react-snackbar/) component, background content will be visible and bleed through the Alert by default.\nYou can prevent this by adding `bgcolor: 'background.paper'` to [the `sx` prop](/material-ui/customization/how-to-customize/#the-sx-prop) on the Alert component:\n\n```jsx\n<Alert sx={{ bgcolor: 'background.paper' }} />\n```\n\nCheck out the [Snackbar‚Äîcustomization](/material-ui/react-snackbar/#customization) doc for an example of how to use these two components together.\n:::"
                  ],
                  "code_path": [
                    "OutlinedAlerts.js",
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Color",
              "introduction": [
                "Color\n\nUse the `color` prop to override the default color for the specified [`severity`](#severity)‚Äîfor instance, to apply `warning` colors to a `success` Alert:"
              ],
              "code_path": [
                "ColorAlerts.js"
              ],
              "children": []
            },
            {
              "name": "Actions",
              "introduction": [
                "Actions\n\nAdd an action to your Alert with the `action` prop.\nThis lets you insert any element‚Äîan HTML tag, an SVG icon, or a React component such as a Material¬†UI Button‚Äîafter the Alert's message, justified to the right.\n\nIf you provide an `onClose` callback to the Alert without setting the `action` prop, the component will display a close icon (&#x2715;) by default."
              ],
              "code_path": [
                "ActionAlerts.js"
              ],
              "children": []
            },
            {
              "name": "Icons",
              "introduction": [
                "Icons\n\nUse the `icon` prop to override an Alert's icon.\nAs with the [`action`](#actions) prop, your `icon` can be an HTML element, an SVG icon, or a React component.\nSet this prop to `false` to remove the icon altogether.\n\nIf you need to override all instances of an icon for a given [`severity`](#severity), you can use the `iconMapping` prop instead.\nYou can define this prop globally by customizing your app's theme. See [Theme components‚ÄîDefault props](/material-ui/customization/theme-components/#theme-default-props) for details."
              ],
              "code_path": [
                "IconAlerts.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Titles",
              "introduction": [
                "Titles\n\nTo add a title to an Alert, import the Alert Title component:\n\n```jsx\nimport AlertTitle from '@mui/material/AlertTitle';\n```\n\nYou can nest this component above the message in your Alert for a neatly styled and properly aligned title, as shown below:"
              ],
              "code_path": [
                "DescriptionAlerts.js"
              ],
              "children": []
            },
            {
              "name": "Transitions",
              "introduction": [
                "Transitions\n\nYou can use [Transition components](/material-ui/transitions/) like [Collapse](/material-ui/transitions/#collapse) to add motion to an Alert's entrance and exit."
              ],
              "code_path": [
                "TransitionAlerts.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nHere are some factors to consider to ensure that your Alert is accessible:\n\n- Because alerts are not intended to interfere with the use of the app, your Alert component should _never_ affect the keyboard focus.\n- If an alert contains an action, that action must have a `tabindex` of `0` so it can be reached by keyboard-only users.\n- Essential alerts should not disappear automatically‚Äî[timed interactions](https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits-no-exceptions.html) can make your app inaccessible to users who need extra time to understand or locate the alert.\n- Alerts that occur too frequently can [inhibit the usability](https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits-postponed.html) of your app.\n- Dynamically rendered alerts are announced by screen readers; alerts that are already present on the page when it loads are _not_ announced.\n- Color does not add meaning to the UI for users who require assistive technology. You must ensure that any information conveyed through color is also denoted in other ways, such as within the text of the alert itself, or with additional hidden text that's read by screen readers."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Anatomy",
          "introduction": [
            "Anatomy\n\nThe Alert component is composed of a root [Paper](/material-ui/react-paper/) component (which renders as a `<div>`) that houses an icon, a message, and an optional [action](#actions):\n\n```html\n<div class=\"MuiPaper-root MuiAlert-root\" role=\"alert\">\n  <div class=\"MuiAlert-icon\">\n    <!-- svg icon here -->\n  </div>\n  <div class=\"MuiAlert-message\">This is how an Alert renders in the DOM.</div>\n  <div class=\"MuiAlert-action\">\n    <!-- optional action element here -->\n  </div>\n</div>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "click-away-listener",
      "introduction": [
        "# Click-Away Listener\n\n<p class=\"description\">The Click-Away Listener component detects when a click event happens outside of its child element.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "This document has moved",
          "introduction": [
            "This document has moved\n\n:::warning\nPlease refer to the [Click-Away Listener](/base-ui/react-click-away-listener/) component page in the Base¬†UI docs for demos and details on usage.\n\nClick-Away Listener is a part of the standalone [Base¬†UI](/base-ui/) component library.\nIt is currently re-exported from `@mui/material` for your convenience, but it will be removed from this package in a future major version after Base¬†UI gets a stable release.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "no-ssr",
      "introduction": [
        "# No SSR\n\n<p class=\"description\">The No-SSR component defers the rendering of children components from the server to the client.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "This document has moved",
          "introduction": [
            "This document has moved\n\n:::warning\nPlease refer to the [No-SSR](/base-ui/react-no-ssr/) component page in the Base¬†UI docs for demos and details on usage.\n\nNo-SSR is a part of the standalone [Base¬†UI](/base-ui/) component library.\nIt is currently re-exported from `@mui/material` for your convenience, but it will be removed from this package in a future major version after Base¬†UI gets a stable release.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "hidden",
      "introduction": [
        "# Hidden\n\n:::error\nThe Hidden component was deprecated in Material¬†UI v5.\nTo learn more, see [the Hidden section](/material-ui/migration/v5-component-changes/#hidden) of the migration docs.\n:::\n\n<p class=\"description\"></p>"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "icons",
      "introduction": [
        "# Icons\n\n<p class=\"description\">Guidance and suggestions for using icons with Material¬†UI.</p>\n\nMaterial¬†UI provides icon support in three ways:\n\n1. With [Material Icons](#material-svg-icons) exported as React components (SVG icons).\n1. With the [SvgIcon](#svgicon) component, a React wrapper for custom SVG icons.\n1. With the [Icon](#icon-font-icons) component, a React wrapper for custom font icons."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Material SVG icons",
          "introduction": [
            "Material SVG icons\n\nGoogle has created over 2,100 official [Material icons](https://fonts.google.com/icons?icon.set=Material+Icons), each in five different \"themes\" (see below).\nFor each SVG icon, we export the respective React component from the `@mui/icons-material` package.\nYou can [search the full list of these icons](/material-ui/material-icons/)."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Installation",
              "introduction": [
                "Installation\n\nRun one of the following commands to install it and save it to your `package.json` dependencies:\n\n<!-- #default-branch-switch -->\n\n<codeblock storageKey=\"package-manager\">\n```bash npm\nnpm install @mui/icons-material\n```\n\n```bash pnpm\npnpm add @mui/icons-material\n```\n\n```bash yarn\nyarn add @mui/icons-material\n```\n\n</codeblock>\n\nThese components use the Material¬†UI `SvgIcon` component to render the SVG path for each icon, and so have a peer-dependency on `@mui/material`.\n\nIf you aren't already using Material¬†UI in your project, you can add it following the [installation guide](/material-ui/getting-started/installation/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Usage",
              "introduction": [
                "Usage\n\nImport icons using one of these two options:\n\n- Option 1:\n\n  ```jsx\n  import AccessAlarmIcon from '@mui/icons-material/AccessAlarm';\n  import ThreeDRotation from '@mui/icons-material/ThreeDRotation';\n  ```\n\n- Option 2:\n\n  ```jsx\n  import { AccessAlarm, ThreeDRotation } from '@mui/icons-material';\n  ```\n\nThe safest for bundle size is Option 1, but some developers prefer Option 2.\nMake sure you follow the [minimizing bundle size guide](/material-ui/guides/minimizing-bundle-size/#option-two-use-a-babel-plugin) before using the second approach.\n\nEach Material icon also has a \"theme\": Filled (default), Outlined, Rounded, Two-tone, and Sharp. To import the icon component with a theme other than the default, append the theme name to the icon name. For example `@mui/icons-material/Delete` icon with:\n\n- Filled theme (default) is exported as `@mui/icons-material/Delete`,\n- Outlined theme is exported as `@mui/icons-material/DeleteOutlined`,\n- Rounded theme is exported as `@mui/icons-material/DeleteRounded`,\n- Twotone theme is exported as `@mui/icons-material/DeleteTwoTone`,\n- Sharp theme is exported as `@mui/icons-material/DeleteSharp`.\n\n:::warning\nThe Material Design guidelines name the icons using \"snake_case\" naming (for example `delete_forever`, `add_a_photo`), while `@mui/icons-material` exports the respective icons using \"PascalCase\" naming (for example `DeleteForever`, `AddAPhoto`). There are three exceptions to this naming rule: `3d_rotation` exported as `ThreeDRotation`, `4k` exported as `FourK`, and `360` exported as `ThreeSixty`.\n:::"
              ],
              "code_path": [
                "SvgMaterialIcons.js"
              ],
              "children": []
            },
            {
              "name": "Testing",
              "introduction": [
                "Testing\n\nFor testing purposes, each icon exposed from `@mui/icons-material` has a `data-testid` attribute with the name of the icon. For instance:\n\n```jsx\nimport DeleteIcon from '@mui/icons-material/Delete';\n```\n\nhas the following attribute once mounted:\n\n```html\n<svg data-testid=\"DeleteIcon\"></svg>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "SvgIcon",
          "introduction": [
            "SvgIcon\n\nIf you need a custom SVG icon (not available in the [Material Icons](/material-ui/material-icons/)) you can use the `SvgIcon` wrapper.\nThis component extends the native `<svg>` element:\n\n- It comes with built-in accessibility.\n- SVG elements should be scaled for a 24x24px viewport so that the resulting icon can be used as is, or included as a child for other Material¬†UI components that use icons.\n  This can be customized with the `viewBox` attribute.\n  To inherit the `viewBox` value from the original image, the `inheritViewBox` prop can be used.\n- By default, the component inherits the current color. Optionally, you can apply one of the theme colors using the `color` prop.\n- It supports `<svg>` element as a child so you can copy and paste your SVG directly to `SvgIcon` component."
          ],
          "code_path": [
            "SvgIconChildren.js"
          ],
          "children": [
            {
              "name": "Color",
              "introduction": [
                "Color"
              ],
              "code_path": [
                "SvgIconsColor.js"
              ],
              "children": []
            },
            {
              "name": "Size",
              "introduction": [
                "Size"
              ],
              "code_path": [
                "SvgIconsSize.js"
              ],
              "children": []
            },
            {
              "name": "Component prop",
              "introduction": [
                "Component prop\n\nYou can use the `SvgIcon` wrapper even if your icons are saved in the `.svg` format.\n[svgr](https://github.com/gregberge/svgr) has loaders to import SVG files and use them as React components. For example, with webpack:\n\n```jsx\n// webpack.config.js\n{\n  test: /\\.svg$/,\n  use: ['@svgr/webpack'],\n}\n\n// \nimport { ReactComponent as StarIcon } from './star.svg';\n\n<SvgIcon component={StarIcon} inheritViewBox />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "createSvgIcon",
              "introduction": [
                "createSvgIcon\n\nThe `createSvgIcon` utility component is used to create the [Material Icons](#material-icons). It can be used to wrap an `<svg>` element or an SVG path which is passed as a child to the [`SvgIcon`](#svgicon) component.\n\n```jsx\nconst HomeIcon = createSvgIcon(\n  <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />,\n  'Home',\n);\n\n// or with custom SVG\nconst PlusIcon = createSvgIcon(\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    strokeWidth={1.5}\n    stroke=\"currentColor\"\n    className=\"h-6 w-6\"\n  >\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n  </svg>,\n  'Plus',\n);\n```"
              ],
              "code_path": [
                "CreateSvgIcon.js"
              ],
              "children": []
            },
            {
              "name": "Font Awesome",
              "introduction": [
                "Font Awesome\n\nIf you find that there are layout issues when using FontAwesomeIcon from `@fortawesome/react-fontawesome`, you can try passing the Font Awesome SVG data directly to SvgIcon.\n\nBelow is a comparison of the `FontAwesomeIcon` component and a wrapped `SvgIcon` component.",
                "FontAwesomeIcon's `fullWidth` prop can also be used to approximate the correct dimensions, but it isn't perfect."
              ],
              "code_path": [
                "FontAwesomeSvgIconDemo.js",
                null
              ],
              "children": []
            },
            {
              "name": "Other libraries",
              "introduction": [
                "Other libraries"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "MDI",
                  "introduction": [
                    "MDI\n\n[materialdesignicons.com](https://pictogrammers.com/library/mdi/) provides over 2,000 icons.\nFor the wanted icon, copy the SVG `path` they provide, and use it as the child of the `SvgIcon` component, or with `createSvgIcon()`.\n\nNote: [mdi-material-ui](https://github.com/TeamWertarbyte/mdi-material-ui) has already wrapped each of these SVG icons with the `SvgIcon` component, so you don't have to do it yourself."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Icon (Font icons)",
          "introduction": [
            "Icon (Font icons)\n\nThe `Icon` component will display an icon from any icon font that supports ligatures.\nAs a prerequisite, you must include one, such as the\n[Material Icons font](https://google.github.io/material-design-icons/#icon-font-for-the-web) in your project.\nTo use an icon simply wrap the icon name (font ligature) with the `Icon` component,\nfor example:\n\n```jsx\nimport Icon from '@mui/material/Icon';\n\n<Icon>star</Icon>;\n```\n\nBy default, an Icon will inherit the current text color.\nOptionally, you can set the icon color using one of the theme color properties: `primary`, `secondary`, `action`, `error` & `disabled`."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Font Material Icons",
              "introduction": [
                "Font Material Icons\n\n`Icon` will by default set the correct base class name for the Material Icons font (filled variant).\nAll you need to do is load the font, for instance, via Google Web Fonts:\n\n```html\n<link\n  rel=\"stylesheet\"\n  href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n/>\n```"
              ],
              "code_path": [
                "Icons.js"
              ],
              "children": []
            },
            {
              "name": "Custom font",
              "introduction": [
                "Custom font\n\nFor other fonts, you can customize the baseline class name using the `baseClassName` prop.\nFor instance, you can display two-tone icons with Material Design:\n\n```jsx\nimport Icon from '@mui/material/Icon';\n\n<link\n  rel=\"stylesheet\"\n  href=\"https://fonts.googleapis.com/css?family=Material+Icons+Two+Tone\"\n  // Import the two tones MD variant                           ^^^^^^^^\n/>;\n```"
              ],
              "code_path": [
                "TwoToneIcons.js"
              ],
              "children": [
                {
                  "name": "Global base class name",
                  "introduction": [
                    "Global base class name\n\nModifying the `baseClassName` prop for each component usage is repetitive.\nYou can change the default prop globally with the theme\n\n```js\nconst theme = createTheme({\n  components: {\n    MuiIcon: {\n      defaultProps: {\n        // Replace the `material-icons` default value.\n        baseClassName: 'material-icons-two-tone',\n      },\n    },\n  },\n});\n```\n\nThen, you can use the two-tone font directly:\n\n```jsx\n<Icon>add_circle</Icon>\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Font Awesome",
              "introduction": [
                "Font Awesome\n\n[Font Awesome](https://fontawesome.com/icons) can be used with the `Icon` component as follows:",
                "Note that the Font Awesome icons weren't designed like the Material Icons (compare the two previous demos).\nThe fa icons are cropped to use all the space available. You can adjust for this with a global override:\n\n```js\nconst theme = createTheme({\n  components: {\n    MuiIcon: {\n      styleOverrides: {\n        root: {\n          // Match 24px = 3 * 2 + 1.125 * 16\n          boxSizing: 'content-box',\n          padding: 3,\n          fontSize: '1.125rem',\n        },\n      },\n    },\n  },\n});\n```"
              ],
              "code_path": [
                "FontAwesomeIcon.js",
                "FontAwesomeIconSize.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Font vs. SVGs: Which approach to use?",
          "introduction": [
            "Font vs. SVGs: Which approach to use?\n\nBoth approaches work fine, however, there are some subtle differences, especially in terms of performance and rendering quality.\nWhenever possible SVG is preferred as it allows code splitting, supports more icons, and renders faster and better.\n\nFor more details, take a look at [why GitHub migrated from font icons to SVG icons](https://github.blog/engineering/delivering-octicons-with-svg/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nIcons can convey all sorts of meaningful information, so it's important to ensure they are accessible where appropriate.\nThere are two use cases you'll want to consider:\n\n- **Decorative icons** that are only being used for visual or branding reinforcement.\n  If they were removed from the page, users would still understand and be able to use your page.\n- **Semantic icons** are ones that you're using to convey meaning, rather than just pure decoration.\n  This includes icons without text next to them that are used as interactive controls ‚Äî buttons, form elements, toggles, etc."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Decorative icons",
              "introduction": [
                "Decorative icons\n\nIf your icons are purely decorative, you're already done!\nThe `aria-hidden=true` attribute is added so that your icons are properly accessible (invisible)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Semantic icons",
              "introduction": [
                "Semantic icons"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Semantic SVG icons",
                  "introduction": [
                    "Semantic SVG icons\n\nYou should include the `titleAccess` prop with a meaningful value.\nThe `role=\"img\"` attribute and the `<title>` element are added so that your icons are correctly accessible.\n\nIn the case of focusable interactive elements, for example when used with an icon button, you can use the `aria-label` prop:\n\n```jsx\nimport IconButton from '@mui/material/IconButton';\nimport SvgIcon from '@mui/material/SvgIcon';\n\n// ...\n\n<IconButton aria-label=\"delete\">\n  <SvgIcon>\n    <path d=\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\" />\n  </SvgIcon>\n</IconButton>;\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Semantic font icons",
                  "introduction": [
                    "Semantic font icons\n\nYou need to provide a text alternative that is only visible to assistive technologies.\n\n```jsx\nimport Box from '@mui/material/Box';\nimport Icon from '@mui/material/Icon';\nimport { visuallyHidden } from '@mui/utils';\n\n// ...\n\n<Icon>add_circle</Icon>\n<Box component=\"span\" sx={visuallyHidden}>Create a user</Box>\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Reference",
                  "introduction": [
                    "Reference\n\n- https://www.tpgi.com/using-aria-enhance-svg-accessibility/"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "drawers",
      "introduction": [
        "# Drawer\n\n<p class=\"description\">The navigation drawers (or \"sidebars\") provide ergonomic access to destinations in a site or app functionality such as switching accounts.</p>\n\nA navigation drawer can either be permanently on-screen or controlled by a navigation menu icon.\n\n[Side sheets](https://m2.material.io/components/sheets-side) are supplementary surfaces primarily used on tablet and desktop."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Temporary drawer",
          "introduction": [
            "Temporary drawer\n\nTemporary navigation drawers can toggle open or closed. Closed by default, the drawer opens temporarily above all other content until a section is selected.\n\nThe Drawer can be cancelled by clicking the overlay or pressing the Esc key.\nIt closes when an item is selected, handled by controlling the `open` prop."
          ],
          "code_path": [
            "TemporaryDrawer.js"
          ],
          "children": [
            {
              "name": "Anchor",
              "introduction": [
                "Anchor\n\nUse the `anchor` prop to specify which side of the screen the Drawer should originate from.\n\nThe default value is `left`."
              ],
              "code_path": [
                "AnchorTemporaryDrawer.js"
              ],
              "children": []
            },
            {
              "name": "Swipeable",
              "introduction": [
                "Swipeable\n\nYou can make the drawer swipeable with the `SwipeableDrawer` component.\n\nThis component comes with a 2 kB gzipped payload overhead.\nSome low-end mobile devices won't be able to follow the fingers at 60 FPS.\nYou can use the `disableBackdropTransition` prop to help.",
                "The following properties are used in this documentation website for optimal usability of the component:\n\n- iOS is hosted on high-end devices.\n  The backdrop transition can be enabled without dropping frames.\n  The performance will be good enough.\n- iOS has a \"swipe to go back\" feature that interferes\n  with the discovery feature, so discovery has to be disabled.\n\n```jsx\nconst iOS =\n  typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n<SwipeableDrawer disableBackdropTransition={!iOS} disableDiscovery={iOS} />;\n```"
              ],
              "code_path": [
                "SwipeableTemporaryDrawer.js",
                null
              ],
              "children": []
            },
            {
              "name": "Swipeable edge",
              "introduction": [
                "Swipeable edge\n\nYou can configure the `SwipeableDrawer` to have a visible edge when closed.\n\nIf you are on a desktop, you can toggle the drawer with the \"OPEN\" button.\nIf you are on mobile, you can open the demo in CodeSandbox (\"edit\" icon) and swipe.\n\n{{\"demo\": \"SwipeableEdgeDrawer.js\", \"iframe\": true, \"disableLiveEdit\": true, \"height\": 400, \"maxWidth\": 300}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Keep mounted",
              "introduction": [
                "Keep mounted\n\nThe Modal used internally by the Swipeable Drawer has the `keepMounted` prop set by default.\nThis means that the contents of the drawer are always present in the DOM.\n\nYou can change this default behavior with the `ModalProps` prop, but you may encounter issues with `keepMounted: false` in React 18.\n\n```jsx\n<Drawer\n  variant=\"temporary\"\n  ModalProps={{\n    keepMounted: false,\n  }}\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Responsive drawer",
          "introduction": [
            "Responsive drawer\n\nYou can use the `temporary` variant to display a drawer for small screens and `permanent` for a drawer for wider screens.\n\n{{\"demo\": \"ResponsiveDrawer.js\", \"iframe\": true, \"disableLiveEdit\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Persistent drawer",
          "introduction": [
            "Persistent drawer\n\nPersistent navigation drawers can toggle open or closed.\nThe drawer sits on the same surface elevation as the content.\nIt is closed by default and opens by selecting the menu icon, and stays open until closed by the user.\nThe state of the drawer is remembered from action to action and session to session.\n\nWhen the drawer is outside of the page grid and opens, the drawer forces other content to change size and adapt to the smaller viewport.\n\nPersistent navigation drawers are acceptable for all sizes larger than mobile.\nThey are not recommended for apps with multiple levels of hierarchy that require using an up arrow for navigation.\n\n{{\"demo\": \"PersistentDrawerLeft.js\", \"iframe\": true}}\n\n{{\"demo\": \"PersistentDrawerRight.js\", \"iframe\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Mini variant drawer",
          "introduction": [
            "Mini variant drawer\n\nIn this variation, the persistent navigation drawer changes its width.\nIts resting state is as a mini-drawer at the same elevation as the content, clipped by the app bar.\nWhen expanded, it appears as the standard persistent navigation drawer.\n\nThe mini variant is recommended for apps sections that need quick selection access alongside content.\n\n{{\"demo\": \"MiniDrawer.js\", \"iframe\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Permanent drawer",
          "introduction": [
            "Permanent drawer\n\nPermanent navigation drawers are always visible and pinned to the left edge, at the same elevation as the content or background. They cannot be closed.\n\nPermanent navigation drawers are the **recommended default for desktop**."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Full-height navigation",
              "introduction": [
                "Full-height navigation\n\nApps focused on information consumption that use a left-to-right hierarchy.\n\n{{\"demo\": \"PermanentDrawerLeft.js\", \"iframe\": true}}\n\n{{\"demo\": \"PermanentDrawerRight.js\", \"iframe\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Clipped under the app bar",
              "introduction": [
                "Clipped under the app bar\n\nApps focused on productivity that require balance across the screen.\n\n{{\"demo\": \"ClippedDrawer.js\", \"iframe\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Toolpad (Beta)",
          "introduction": [
            "Toolpad (Beta)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Dashboard Layout",
              "introduction": [
                "Dashboard Layout\n\nThe [DashboardLayout](https://mui.com/toolpad/core/react-dashboard-layout/) component from `@toolpad/core` is the starting point for dashboarding applications. It takes care of application layout, theming, navigation, and more. An example usage of this component:\n\n{{\"demo\": \"../app-bar/DashboardLayoutBasic.js\", \"height\": 400, \"iframe\": true, \"bg\": \"inline\", \"defaultExpanded\": false}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "checkboxes",
      "introduction": [
        "# Checkbox\n\n<p class=\"description\">Checkboxes allow the user to select one or more items from a set.</p>\n\nCheckboxes can be used to turn an option on or off.\n\nIf you have multiple options appearing in a list,\nyou can preserve space by using checkboxes instead of on/off switches.\nIf you have a single option, avoid using a checkbox and use an on/off switch instead."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic checkboxes",
          "introduction": [
            "Basic checkboxes"
          ],
          "code_path": [
            "Checkboxes.js"
          ],
          "children": []
        },
        {
          "name": "Label",
          "introduction": [
            "Label\n\nYou can provide a label to the `Checkbox` thanks to the `FormControlLabel` component."
          ],
          "code_path": [
            "CheckboxLabels.js"
          ],
          "children": []
        },
        {
          "name": "Size",
          "introduction": [
            "Size\n\nUse the `size` prop or customize the font size of the svg icons to change the size of the checkboxes."
          ],
          "code_path": [
            "SizeCheckboxes.js"
          ],
          "children": []
        },
        {
          "name": "Color",
          "introduction": [
            "Color"
          ],
          "code_path": [
            "ColorCheckboxes.js"
          ],
          "children": []
        },
        {
          "name": "Icon",
          "introduction": [
            "Icon"
          ],
          "code_path": [
            "IconCheckboxes.js"
          ],
          "children": []
        },
        {
          "name": "Controlled",
          "introduction": [
            "Controlled\n\nYou can control the checkbox with the `checked` and `onChange` props:"
          ],
          "code_path": [
            "ControlledCheckbox.js"
          ],
          "children": []
        },
        {
          "name": "Indeterminate",
          "introduction": [
            "Indeterminate\n\nA checkbox input can only have two states in a form: checked or unchecked.\nIt either submits its value or doesn't.\nVisually, there are **three** states a checkbox can be in: checked, unchecked, or indeterminate.\n\nYou can change the indeterminate icon using the `indeterminateIcon` prop.",
            ":::warning\nWhen indeterminate is set, the value of the `checked` prop only impacts the form submitted values.\nIt has no accessibility or UX implications.\n:::"
          ],
          "code_path": [
            "IndeterminateCheckbox.js",
            null
          ],
          "children": []
        },
        {
          "name": "FormGroup",
          "introduction": [
            "FormGroup\n\n`FormGroup` is a helpful wrapper used to group selection control components."
          ],
          "code_path": [
            "CheckboxesGroup.js"
          ],
          "children": []
        },
        {
          "name": "Label placement",
          "introduction": [
            "Label placement\n\nYou can change the placement of the label:"
          ],
          "code_path": [
            "FormControlLabelPosition.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).",
            "üé® If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/checkbox-introduction--docs)."
          ],
          "code_path": [
            "CustomizedCheckbox.js",
            null
          ],
          "children": []
        },
        {
          "name": "When to use",
          "introduction": [
            "When to use\n\n- [Checkboxes vs. Radio Buttons](https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/)\n- [Checkboxes vs. Switches](https://uxplanet.org/checkbox-vs-toggle-switch-7fc6e83f10b8)"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/)\n\n- All form controls should have labels, and this includes radio buttons, checkboxes, and switches. In most cases, this is done by using the `<label>` element ([FormControlLabel](/material-ui/api/form-control-label/)).\n- When a label can't be used, it's necessary to add an attribute directly to the input component.\n  In this case, you can apply the additional attribute (for example `aria-label`, `aria-labelledby`, `title`) via the `inputProps` prop.\n\n```jsx\n<Checkbox\n  value=\"checkedA\"\n  inputProps={{\n    'aria-label': 'Checkbox A',\n  }}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "cards",
      "introduction": [
        "# Card\n\n<p class=\"description\">Cards contain content and actions about a single subject.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nCards are surfaces that display content and actions on a single topic.\nThe Material¬†UI Card component includes several complementary utility components to handle various use cases:\n\n- Card: a surface-level container for grouping related components.\n- Card Content: the wrapper for the Card content.\n- Card Header: an optional wrapper for the Card header.\n- Card Media: an optional container for displaying images, videos, etc.\n- Card Actions: an optional wrapper that groups a set of buttons.\n- Card Action Area: an optional wrapper that allows users to interact with the specified area of the Card.\n\n{{\"demo\": \"BasicCard.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\n```\n\n:::success\nAlthough cards can support multiple actions, UI controls, and an overflow menu, use restraint and remember that cards are meant to be entry points to more complex and detailed information.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Outlined Card",
              "introduction": [
                "Outlined Card\n\nSet `variant=\"outlined\"` to render an outlined card.\n\n{{\"demo\": \"OutlinedCard.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Complex Interaction",
          "introduction": [
            "Complex Interaction\n\nOn desktop, card content can expand. (Click the downward chevron to view the recipe.)\n\n{{\"demo\": \"RecipeReviewCard.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Media",
          "introduction": [
            "Media\n\nExample of a card using an image to reinforce the content.\n\n{{\"demo\": \"MediaCard.js\", \"bg\": true}}\n\nBy default, we use the combination of a `<div>` element and a _background image_ to display the media. It can be problematic in some situations, for example, you might want to display a video or a responsive image. Use the `component` prop for these use cases:\n\n{{\"demo\": \"ImgMediaCard.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Primary action",
          "introduction": [
            "Primary action\n\nOften a card allow users to interact with the entirety of its surface to trigger its main action, be it an expansion, a link to another screen or some other behavior. The action area of the card can be specified by wrapping its contents in a `CardActionArea` component.\n\n{{\"demo\": \"ActionAreaCard.js\", \"bg\": true}}\n\nA card can also offer supplemental actions which should stand detached from the main action area in order to avoid event overlap.\n\n{{\"demo\": \"MultiActionAreaCard.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "UI Controls",
          "introduction": [
            "UI Controls\n\nSupplemental actions within the card are explicitly called out using icons, text, and UI controls, typically placed at the bottom of the card.\n\nHere's an example of a media control card.\n\n{{\"demo\": \"MediaControlCard.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Active state styles",
          "introduction": [
            "Active state styles\n\nTo customize a Card's styles when it's in an active state, you can attach a `data-active` attribute to the Card Action Area component and apply styles with the `&[data-active]` selector, as shown below:\n\n{{\"demo\": \"SelectActionCard.js\", \"bg\": true}}\n\nüé® If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/card-introduction--docs)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "slider",
      "introduction": [
        "# Slider\n\n<p class=\"description\">Sliders allow users to make selections from a range of values.</p>\n\nSliders reflect a range of values along a bar, from which users may select a single value. They are ideal for adjusting settings such as volume, brightness, or applying image filters."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Continuous sliders",
          "introduction": [
            "Continuous sliders\n\nContinuous sliders allow users to select a value along a subjective range."
          ],
          "code_path": [
            "ContinuousSlider.js"
          ],
          "children": []
        },
        {
          "name": "Sizes",
          "introduction": [
            "Sizes\n\nFor smaller slider, use the prop `size=\"small\"`."
          ],
          "code_path": [
            "SliderSizes.js"
          ],
          "children": []
        },
        {
          "name": "Discrete sliders",
          "introduction": [
            "Discrete sliders\n\nDiscrete sliders can be adjusted to a specific value by referencing its value indicator.\nYou can generate a mark for each step with `marks={true}`."
          ],
          "code_path": [
            "DiscreteSlider.js"
          ],
          "children": [
            {
              "name": "Small steps",
              "introduction": [
                "Small steps\n\nYou can change the default step increment.\nMake sure to adjust the `shiftStep` prop (the granularity with which the slider can step when using Page Up/Down or Shift + Arrow Up/Down) to a value divadable with the `step`."
              ],
              "code_path": [
                "DiscreteSliderSteps.js"
              ],
              "children": []
            },
            {
              "name": "Custom marks",
              "introduction": [
                "Custom marks\n\nYou can have custom marks by providing a rich array to the `marks` prop."
              ],
              "code_path": [
                "DiscreteSliderMarks.js"
              ],
              "children": []
            },
            {
              "name": "Restricted values",
              "introduction": [
                "Restricted values\n\nYou can restrict the selectable values to those provided with the `marks` prop with `step={null}`."
              ],
              "code_path": [
                "DiscreteSliderValues.js"
              ],
              "children": []
            },
            {
              "name": "Label always visible",
              "introduction": [
                "Label always visible\n\nYou can force the thumb label to be always visible with `valueLabelDisplay=\"on\"`."
              ],
              "code_path": [
                "DiscreteSliderLabel.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Range slider",
          "introduction": [
            "Range slider\n\nThe slider can be used to set the start and end of a range by supplying an array of values to the `value` prop."
          ],
          "code_path": [
            "RangeSlider.js"
          ],
          "children": [
            {
              "name": "Minimum distance",
              "introduction": [
                "Minimum distance\n\nYou can enforce a minimum distance between values in the `onChange` event handler.\nBy default, when you move the pointer over a thumb while dragging another thumb, the active thumb will swap to the hovered thumb. You can disable this behavior with the `disableSwap` prop.\nIf you want the range to shift when reaching minimum distance, you can utilize the `activeThumb` parameter in `onChange`."
              ],
              "code_path": [
                "MinimumDistanceSlider.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Slider with input field",
          "introduction": [
            "Slider with input field\n\nIn this example, an input allows a discrete value to be set."
          ],
          "code_path": [
            "InputSlider.js"
          ],
          "children": []
        },
        {
          "name": "Color",
          "introduction": [
            "Color"
          ],
          "code_path": [
            "ColorSlider.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedSlider.js"
          ],
          "children": [
            {
              "name": "Music player",
              "introduction": [
                "Music player\n\n{{\"demo\": \"MusicPlayerSlider.js\", \"bg\": \"inline\"}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Vertical sliders",
          "introduction": [
            "Vertical sliders\n\nSet the `orientation` prop to `\"vertical\"` to create vertical sliders. The thumb will track vertical movement instead of horizontal movement.",
            ":::warning\nChrome versions below 124 implement `aria-orientation` incorrectly for vertical sliders and expose them as `'horizontal'` in the accessibility tree. ([Chromium issue #40736841](https://issues.chromium.org/issues/40736841))\n\nThe `-webkit-appearance: slider-vertical` CSS property can be used to correct this for these older versions, with the trade-off of causing a console warning in newer Chrome versions:\n\n```css\n.MuiSlider-thumb input {\n  -webkit-appearance: slider-vertical;\n}\n```\n\n:::"
          ],
          "code_path": [
            "VerticalSlider.js",
            null
          ],
          "children": []
        },
        {
          "name": "Marks placement",
          "introduction": [
            "Marks placement\n\nYou can customize your slider by adding and repositioning marks for minimum and maximum values."
          ],
          "code_path": [
            "CustomMarks.js"
          ],
          "children": []
        },
        {
          "name": "Track",
          "introduction": [
            "Track\n\nThe track shows the range available for user selection."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Removed track",
              "introduction": [
                "Removed track\n\nThe track can be turned off with `track={false}`."
              ],
              "code_path": [
                "TrackFalseSlider.js"
              ],
              "children": []
            },
            {
              "name": "Inverted track",
              "introduction": [
                "Inverted track\n\nThe track can be inverted with `track=\"inverted\"`."
              ],
              "code_path": [
                "TrackInvertedSlider.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Non-linear scale",
          "introduction": [
            "Non-linear scale\n\nYou can use the `scale` prop to represent the `value` on a different scale.\n\nIn the following demo, the value _x_ represents the value _2^x_.\nIncreasing _x_ by one increases the represented value by factor _2_."
          ],
          "code_path": [
            "NonLinearSlider.js"
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/slider-multithumb/)\n\nThe component handles most of the work necessary to make it accessible.\nHowever, you need to make sure that:\n\n- Each thumb has a user-friendly label (`aria-label`, `aria-labelledby` or `getAriaLabel` prop).\n- Each thumb has a user-friendly text for its current value.\n  This is not required if the value matches the semantics of the label.\n  You can change the name with the `getAriaValueText` or `aria-valuetext` prop."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "avatars",
      "introduction": [
        "# Avatar\n\n<p class=\"description\">Avatars are found throughout material design with uses in everything from tables to dialog menus.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Image avatars",
          "introduction": [
            "Image avatars\n\nImage avatars can be created by passing standard `img` props `src` or `srcSet` to the component."
          ],
          "code_path": [
            "ImageAvatars.js"
          ],
          "children": []
        },
        {
          "name": "Letter avatars",
          "introduction": [
            "Letter avatars\n\nAvatars containing simple characters can be created by passing a string as `children`.",
            "You can use different background colors for the avatar.\nThe following demo generates the color based on the name of the person."
          ],
          "code_path": [
            "LetterAvatars.js",
            "BackgroundLetterAvatars.js"
          ],
          "children": []
        },
        {
          "name": "Sizes",
          "introduction": [
            "Sizes\n\nYou can change the size of the avatar with the `height` and `width` CSS properties."
          ],
          "code_path": [
            "SizeAvatars.js"
          ],
          "children": []
        },
        {
          "name": "Icon avatars",
          "introduction": [
            "Icon avatars\n\nIcon avatars are created by passing an icon as `children`."
          ],
          "code_path": [
            "IconAvatars.js"
          ],
          "children": []
        },
        {
          "name": "Variants",
          "introduction": [
            "Variants\n\nIf you need square or rounded avatars, use the `variant` prop."
          ],
          "code_path": [
            "VariantAvatars.js"
          ],
          "children": []
        },
        {
          "name": "Fallbacks",
          "introduction": [
            "Fallbacks\n\nIf there is an error loading the avatar image, the component falls back to an alternative in the following order:\n\n- the provided children\n- the first letter of the `alt` text\n- a generic avatar icon"
          ],
          "code_path": [
            "FallbackAvatars.js"
          ],
          "children": []
        },
        {
          "name": "Grouped",
          "introduction": [
            "Grouped\n\n`AvatarGroup` renders its children as a stack. Use the `max` prop to limit the number of avatars."
          ],
          "code_path": [
            "GroupAvatars.js"
          ],
          "children": [
            {
              "name": "Total avatars",
              "introduction": [
                "Total avatars\n\nIf you need to control the total number of avatars not shown, you can use the `total` prop."
              ],
              "code_path": [
                "TotalAvatars.js"
              ],
              "children": []
            },
            {
              "name": "Custom surplus",
              "introduction": [
                "Custom surplus\n\nSet the `renderSurplus` prop as a callback to customize the surplus avatar. The callback will receive the surplus number as an argument based on the children and the `max` prop, and should return a `React.ReactNode`.\n\nThe `renderSurplus` prop is useful when you need to render the surplus based on the data sent from the server."
              ],
              "code_path": [
                "CustomSurplusAvatars.js"
              ],
              "children": []
            },
            {
              "name": "Spacing",
              "introduction": [
                "Spacing\n\nYou can change the spacing between avatars using the `spacing` prop. You can use one of the presets (`\"medium\"`, the default, or `\"small\"`) or set a custom numeric value."
              ],
              "code_path": [
                "Spacing.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "With badge",
          "introduction": [
            "With badge"
          ],
          "code_path": [
            "BadgeAvatars.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "popover",
      "introduction": [
        "# Popover\n\n<p class=\"description\">A Popover can be used to display some content on top of another.</p>\n\nThings to know when using the `Popover` component:\n\n- The component is built on top of the [`Modal`](/material-ui/react-modal/) component.\n- The scroll and click away are blocked unlike with the [`Popper`](/material-ui/react-popper/) component."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic Popover",
          "introduction": [
            "Basic Popover"
          ],
          "code_path": [
            "BasicPopover.js"
          ],
          "children": []
        },
        {
          "name": "Anchor playground",
          "introduction": [
            "Anchor playground\n\nUse the radio buttons to adjust the `anchorOrigin` and `transformOrigin` positions.\nYou can also set the `anchorReference` to `anchorPosition` or `anchorEl`.\nWhen it is `anchorPosition`, the component will, instead of `anchorEl`,\nrefer to the `anchorPosition` prop which you can adjust to set\nthe position of the popover.\n\n{{\"demo\": \"AnchorPlayground.js\", \"hideToolbar\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Mouse hover interaction",
          "introduction": [
            "Mouse hover interaction\n\nThis demo demonstrates how to use the `Popover` component with `mouseenter` and `mouseleave` events to achieve popover behavior."
          ],
          "code_path": [
            "MouseHoverPopover.js"
          ],
          "children": []
        },
        {
          "name": "Virtual element",
          "introduction": [
            "Virtual element\n\nThe value of the `anchorEl` prop can be a reference to a fake DOM element.\nYou need to provide an object with the following interface:\n\n```ts\ninterface PopoverVirtualElement {\n  nodeType: 1;\n  getBoundingClientRect: () => DOMRect;\n}\n```\n\nHighlight part of the text to see the popover:",
            "For more information on the virtual element's properties, see the following resources:\n\n- [getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect)\n- [DOMRect](https://drafts.fxtf.org/geometry-1/#domrectreadonly)\n- [Node types](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType)\n\n:::warning\nThe usage of a virtual element for the Popover component requires the `nodeType` property.\nThis is different from virtual elements used for the [`Popper`](/material-ui/react-popper/#virtual-element) or [`Tooltip`](/material-ui/react-tooltip/#virtual-element) components, both of which don't require the property.\n:::"
          ],
          "code_path": [
            "VirtualElementPopover.js",
            null
          ],
          "children": []
        },
        {
          "name": "Supplementary projects",
          "introduction": [
            "Supplementary projects\n\nFor more advanced use cases, you might be able to take advantage of:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "material-ui-popup-state",
              "introduction": [
                "material-ui-popup-state\n\n![stars](https://img.shields.io/github/stars/jcoreio/material-ui-popup-state?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/material-ui-popup-state.svg)\n\nThe package [`material-ui-popup-state`](https://github.com/jcoreio/material-ui-popup-state) that takes care of popover state for you in most cases."
              ],
              "code_path": [
                "PopoverPopupState.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "radio-buttons",
      "introduction": [
        "# Radio Group\n\n<p class=\"description\">The Radio Group allows the user to select one option from a set.</p>\n\nUse radio buttons when the user needs to see all available options.\nIf available options can be collapsed, consider using a [Select component](/material-ui/react-select/) because it uses less space.\n\nRadio buttons should have the most commonly used option selected by default."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Radio group",
          "introduction": [
            "Radio group\n\n`RadioGroup` is a helpful wrapper used to group `Radio` components that provides an easier API, and proper keyboard accessibility to the group."
          ],
          "code_path": [
            "RadioButtonsGroup.js"
          ],
          "children": [
            {
              "name": "Direction",
              "introduction": [
                "Direction\n\nTo lay out the buttons horizontally, set the `row` prop:"
              ],
              "code_path": [
                "RowRadioButtonsGroup.js"
              ],
              "children": []
            },
            {
              "name": "Controlled",
              "introduction": [
                "Controlled\n\nYou can control the radio with the `value` and `onChange` props:"
              ],
              "code_path": [
                "ControlledRadioButtonsGroup.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Standalone radio buttons",
          "introduction": [
            "Standalone radio buttons\n\n`Radio` can also be used standalone, without the RadioGroup wrapper."
          ],
          "code_path": [
            "RadioButtons.js"
          ],
          "children": []
        },
        {
          "name": "Size",
          "introduction": [
            "Size\n\nUse the `size` prop or customize the font size of the svg icons to change the size of the radios."
          ],
          "code_path": [
            "SizeRadioButtons.js"
          ],
          "children": []
        },
        {
          "name": "Color",
          "introduction": [
            "Color"
          ],
          "code_path": [
            "ColorRadioButtons.js"
          ],
          "children": []
        },
        {
          "name": "Label placement",
          "introduction": [
            "Label placement\n\nYou can change the placement of the label with the `FormControlLabel` component's `labelPlacement` prop:"
          ],
          "code_path": [
            "FormControlLabelPlacement.js"
          ],
          "children": []
        },
        {
          "name": "Show error",
          "introduction": [
            "Show error\n\nIn general, radio buttons should have a value selected by default. If this is not the case, you can display an error if no value is selected when the form is submitted:"
          ],
          "code_path": [
            "ErrorRadios.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
          ],
          "code_path": [
            "CustomizedRadios.js"
          ],
          "children": []
        },
        {
          "name": "`useRadioGroup`",
          "introduction": [
            "`useRadioGroup`\n\nFor advanced customization use cases, a `useRadioGroup()` hook is exposed.\nIt returns the context value of the parent radio group.\nThe Radio component uses this hook internally."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "API",
              "introduction": [
                "API\n\n```jsx\nimport { useRadioGroup } from '@mui/material/RadioGroup';\n```"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Returns",
                  "introduction": [
                    "Returns\n\n`value` (_object_):\n\n- `value.name` (_string_ [optional]): The name used to reference the value of the control.\n- `value.onChange` (_func_ [optional]): Callback fired when a radio button is selected.\n- `value.value` (_any_ [optional]): Value of the selected radio button."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Example",
                  "introduction": [
                    "Example"
                  ],
                  "code_path": [
                    "UseRadioGroup.js"
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "When to use",
          "introduction": [
            "When to use\n\n- [Checkboxes vs. Radio Buttons](https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/radio/)\n\n- All form controls should have labels, and this includes radio buttons, checkboxes, and switches. In most cases, this is done by using the `<label>` element ([FormControlLabel](/material-ui/api/form-control-label/)).\n\n- When a label can't be used, it's necessary to add an attribute directly to the input component.\n  In this case, you can apply the additional attribute (for example `aria-label`, `aria-labelledby`, `title`) via the `inputProps` property.\n\n```jsx\n<Radio\n  value=\"radioA\"\n  inputProps={{\n    'aria-label': 'Radio A',\n  }}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "box",
      "introduction": [
        "<!-- This page's content is duplicated (with some product-specific details) across the Material¬†UI, Joy¬†UI, and MUI¬†System docs. Any changes should be applied to all three pages at the same time. -->\n\n# Box\n\n<p class=\"description\">The Box component is a generic, theme-aware container with access to CSS utilities from MUI¬†System.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThe Box component is a generic container for grouping other components.\nIt's a fundamental building block when working with Material¬†UI‚Äîyou can think of it as a `<div>` with extra built-in features, like access to your app's theme and the [`sx` prop](/system/getting-started/the-sx-prop/)."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Usage",
              "introduction": [
                "Usage\n\nThe Box component differs from other containers available in Material¬†UI in that its usage is intended to be multipurpose and open-ended, just like a `<div>`.\nComponents like [Container](/material-ui/react-container/), [Stack](/material-ui/react-stack/) and [Paper](/material-ui/react-paper/), by contrast, feature usage-specific props that make them ideal for certain use cases: Container for main layout orientation, Stack for one-dimensional layouts, and Paper for elevated surfaces."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport Box from '@mui/material/Box';\n```\n\nThe Box component renders as a `<div>` by default, but you can swap in any other valid HTML tag or React component using the `component` prop.\nThe demo below replaces the `<div>` with a `<section>` element:\n\n{{\"demo\": \"BoxBasic.js\", \"defaultCodeOpen\": true }}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "With the sx prop",
              "introduction": [
                "With the sx prop\n\nUse the [`sx` prop](/system/getting-started/the-sx-prop/) to quickly customize any Box instance using a superset of CSS that has access to all the style functions and theme-aware properties exposed in the MUI¬†System package.\nThe demo below shows how to apply colors from the theme using this prop:\n\n{{\"demo\": \"BoxSx.js\", \"defaultCodeOpen\": true }}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "With MUI¬†System props",
              "introduction": [
                "With MUI¬†System props\n\n:::info\nSystem props are deprecated and will be removed in the next major release. Please use the `sx` prop instead.\n\n```diff\n- <Box mt={2} />\n+ <Box sx={{ mt: 2 }} />\n```\n\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Anatomy",
          "introduction": [
            "Anatomy\n\nThe Box component is composed of a single root `<div>` element:\n\n```html\n<div className=\"MuiBox-root\">\n  <!-- contents of the Box -->\n</div>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "app-bar",
      "introduction": [
        "# App Bar\n\n<p class=\"description\">The App Bar displays information and actions relating to the current screen.</p>\n\nThe top App bar provides content and actions related to the current screen. It's used for branding, screen titles, navigation, and actions.\n\nIt can transform into a contextual action bar or be used as a navbar."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic App bar",
          "introduction": [
            "Basic App bar\n\n{{\"demo\": \"ButtonAppBar.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "App bar with menu",
          "introduction": [
            "App bar with menu\n\n{{\"demo\": \"MenuAppBar.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "App bar with responsive menu",
          "introduction": [
            "App bar with responsive menu\n\n{{\"demo\": \"ResponsiveAppBar.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "App bar with search field",
          "introduction": [
            "App bar with search field\n\nA side searchbar.\n\n{{\"demo\": \"SearchAppBar.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Responsive App bar with Drawer",
          "introduction": [
            "Responsive App bar with Drawer\n\n{{\"demo\": \"DrawerAppBar.js\", \"bg\": true,\"iframe\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "App bar with a primary search field",
          "introduction": [
            "App bar with a primary search field\n\nA primary searchbar.\n\n{{\"demo\": \"PrimarySearchAppBar.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Dense (desktop only)",
          "introduction": [
            "Dense (desktop only)\n\n{{\"demo\": \"DenseAppBar.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Prominent",
          "introduction": [
            "Prominent\n\nA prominent app bar.\n\n{{\"demo\": \"ProminentAppBar.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Bottom App bar",
          "introduction": [
            "Bottom App bar\n\n{{\"demo\": \"BottomAppBar.js\", \"iframe\": true, \"maxWidth\": 400}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Fixed placement",
          "introduction": [
            "Fixed placement\n\nWhen you render the app bar position fixed, the dimension of the element doesn't impact the rest of the page. This can cause some part of your content to be invisible, behind the app bar. Here are 3 possible solutions:\n\n1. You can use `position=\"sticky\"` instead of fixed.\n2. You can render a second `<Toolbar />` component:\n\n```jsx\nfunction App() {\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\">\n        <Toolbar>{/* content */}</Toolbar>\n      </AppBar>\n      <Toolbar />\n    </React.Fragment>\n  );\n}\n```\n\n3. You can use `theme.mixins.toolbar` CSS:\n\n```jsx\nconst Offset = styled('div')(({ theme }) => theme.mixins.toolbar);\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\">\n        <Toolbar>{/* content */}</Toolbar>\n      </AppBar>\n      <Offset />\n    </React.Fragment>\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Scrolling",
          "introduction": [
            "Scrolling\n\nYou can use the `useScrollTrigger()` hook to respond to user scroll actions."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Hide App bar",
              "introduction": [
                "Hide App bar\n\nThe app bar hides on scroll down to leave more space for reading.\n\n{{\"demo\": \"HideAppBar.js\", \"iframe\": true, \"disableLiveEdit\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Elevate App bar",
              "introduction": [
                "Elevate App bar\n\nThe app bar elevates on scroll to communicate that the user is not at the top of the page.\n\n{{\"demo\": \"ElevateAppBar.js\", \"iframe\": true, \"disableLiveEdit\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Back to top",
              "introduction": [
                "Back to top\n\nA floating action button appears on scroll to make it easy to get back to the top of the page.\n\n{{\"demo\": \"BackToTop.js\", \"iframe\": true, \"disableLiveEdit\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "`useScrollTrigger([options]) => trigger`",
              "introduction": [
                "`useScrollTrigger([options]) => trigger`"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Arguments",
                  "introduction": [
                    "Arguments\n\n1. `options` (_object_ [optional]):\n\n   - `options.disableHysteresis` (_bool_ [optional]): Defaults to `false`. Disable the hysteresis. Ignore the scroll direction when determining the `trigger` value.\n   - `options.target` (_Node_ [optional]): Defaults to `window`.\n   - `options.threshold` (_number_ [optional]): Defaults to `100`. Change the `trigger` value when the vertical scroll strictly crosses this threshold (exclusive)."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Returns",
                  "introduction": [
                    "Returns\n\n`trigger`: Does the scroll position match the criteria?"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Examples",
                  "introduction": [
                    "Examples\n\n```jsx\nimport useScrollTrigger from '@mui/material/useScrollTrigger';\n\nfunction HideOnScroll(props) {\n  const trigger = useScrollTrigger();\n  return (\n    <Slide in={!trigger}>\n      <div>Hello</div>\n    </Slide>\n  );\n}\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Enable color on dark",
          "introduction": [
            "Enable color on dark\n\nFollowing the [Material Design guidelines](https://m2.material.io/design/color/dark-theme.html), the `color` prop has no effect on the appearance of the app bar in dark mode.\nYou can override this behavior by setting the `enableColorOnDark` prop to `true`.\n\n{{\"demo\": \"EnableColorOnDarkAppBar.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Toolpad (Beta)",
          "introduction": [
            "Toolpad (Beta)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Dashboard Layout",
              "introduction": [
                "Dashboard Layout\n\nThe [DashboardLayout](https://mui.com/toolpad/core/react-dashboard-layout/) component from `@toolpad/core` is the starting point for dashboarding applications. It takes care of application layout, theming, navigation, and more. An example usage of this component:\n\n{{\"demo\": \"DashboardLayoutBasic.js\", \"height\": 400, \"iframe\": true, \"defaultExpanded\": false}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "button-group",
      "introduction": [
        "# Button Group\n\n<p class=\"description\">The ButtonGroup component can be used to group related buttons.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic button group",
          "introduction": [
            "Basic button group\n\nThe buttons can be grouped by wrapping them with the `ButtonGroup` component.\nThey need to be immediate children."
          ],
          "code_path": [
            "BasicButtonGroup.js"
          ],
          "children": []
        },
        {
          "name": "Button variants",
          "introduction": [
            "Button variants\n\nAll the standard button variants are supported."
          ],
          "code_path": [
            "VariantButtonGroup.js"
          ],
          "children": []
        },
        {
          "name": "Sizes and colors",
          "introduction": [
            "Sizes and colors\n\nThe `size` and `color` props can be used to control the appearance of the button group."
          ],
          "code_path": [
            "GroupSizesColors.js"
          ],
          "children": []
        },
        {
          "name": "Vertical group",
          "introduction": [
            "Vertical group\n\nThe button group can be displayed vertically using the `orientation` prop."
          ],
          "code_path": [
            "GroupOrientation.js"
          ],
          "children": []
        },
        {
          "name": "Split button",
          "introduction": [
            "Split button\n\n`ButtonGroup` can also be used to create a split button. The dropdown can change the button action (as in this example) or be used to immediately trigger a related action."
          ],
          "code_path": [
            "SplitButton.js"
          ],
          "children": []
        },
        {
          "name": "Disabled elevation",
          "introduction": [
            "Disabled elevation\n\nYou can remove the elevation with the `disableElevation` prop."
          ],
          "code_path": [
            "DisableElevation.js"
          ],
          "children": []
        },
        {
          "name": "Loading",
          "introduction": [
            "Loading\n\nUse the `loading` prop from `Button` to set buttons in a loading state and disable interactions."
          ],
          "code_path": [
            "LoadingButtonGroup.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "accordion",
      "introduction": [
        "# Accordion\n\n<p class=\"description\">The Accordion component lets users show and hide sections of related content on a page.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThe Material¬†UI Accordion component includes several complementary utility components to handle various use cases:\n\n- Accordion: the wrapper for grouping related components.\n- Accordion Summary: the wrapper for the Accordion header, which expands or collapses the content when clicked.\n- Accordion Details: the wrapper for the Accordion content.\n- Accordion Actions: an optional wrapper that groups a set of buttons.\n\n{{\"demo\": \"AccordionUsage.js\", \"bg\": true}}\n\n:::info\nThis component is no longer documented in the [Material Design guidelines](https://m2.material.io/), but Material¬†UI will continue to support it.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Expand icon",
              "introduction": [
                "Expand icon\n\nUse the `expandIcon` prop on the Accordion Summary component to change the expand indicator icon.\nThe component handles the turning upside-down transition automatically.\n\n{{\"demo\": \"AccordionExpandIcon.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Expanded by default",
              "introduction": [
                "Expanded by default\n\nUse the `defaultExpanded` prop on the Accordion component to have it opened by default.\n\n{{\"demo\": \"AccordionExpandDefault.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Transition",
              "introduction": [
                "Transition\n\nUse the `slots.transition` and `slotProps.transition` props to change the Accordion's default transition.\n\n{{\"demo\": \"AccordionTransition.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Disabled item",
              "introduction": [
                "Disabled item\n\nUse the `disabled` prop on the Accordion component to disable interaction and focus.\n\n{{\"demo\": \"DisabledAccordion.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Controlled Accordion",
              "introduction": [
                "Controlled Accordion\n\nThe Accordion component can be controlled or uncontrolled.\n\n{{\"demo\": \"ControlledAccordions.js\", \"bg\": true}}\n\n:::info\n\n- A component is **controlled** when it's managed by its parent using props.\n- A component is **uncontrolled** when it's managed by its own local state.\n\nLearn more about controlled and uncontrolled components in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Only one expanded at a time",
              "introduction": [
                "Only one expanded at a time\n\nUse the `expanded` prop with React's `useState` hook to allow only one Accordion item to be expanded at a time.\nThe demo below also shows a bit of visual customization.\n\n{{\"demo\": \"CustomizedAccordions.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Changing heading level",
              "introduction": [
                "Changing heading level\n\nBy default, the Accordion uses an `h3` element for the heading. You can change the heading element using the `slotProps.heading.component` prop to ensure the correct heading hierarchy in your document.\n\n```jsx\n<Accordion slotProps={{ heading: { component: 'h4' } }}>\n  <AccordionSummary\n    expandIcon={<ExpandMoreIcon />}\n    aria-controls=\"panel1-content\"\n    id=\"panel1-header\"\n  >\n    Accordion\n  </AccordionSummary>\n  <AccordionDetails>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada\n    lacus ex, sit amet blandit leo lobortis eget.\n  </AccordionDetails>\n</Accordion>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Performance",
          "introduction": [
            "Performance\n\nThe Accordion content is mounted by default even if it's not expanded.\nThis default behavior has server-side rendering and SEO in mind.\n\nIf you render the Accordion Details with a big component tree nested inside, or if you have many Accordions, you may want to change this behavior by setting `unmountOnExit` to `true` inside the `slotProps.transition` prop to improve performance:\n\n```jsx\n<Accordion slotProps={{ transition: { unmountOnExit: true } }} />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nThe [WAI-ARIA guidelines for accordions](https://www.w3.org/WAI/ARIA/apg/patterns/accordion/) recommend setting an `id` and `aria-controls`, which in this case would apply to the Accordion Summary component.\nThe Accordion component then derives the necessary `aria-labelledby` and `id` from its content.\n\n```jsx\n<Accordion>\n  <AccordionSummary id=\"panel-header\" aria-controls=\"panel-content\">\n    Header\n  </AccordionSummary>\n  <AccordionDetails>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  </AccordionDetails>\n</Accordion>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Anatomy",
          "introduction": [
            "Anatomy\n\nThe Accordion component consists of a root `<div>` that contains the Accordion Summary, Accordion Details, and optional Accordion Actions for action buttons.\n\n```jsx\n<div class=\"MuiAccordion-root\">\n  <h3 class=\"MuiAccordion-heading\">\n    <button class=\"MuiButtonBase-root MuiAccordionSummary-root\" aria-expanded=\"\">\n      <!-- Accordion summary goes here -->\n    </button>\n  </h3>\n  <div class=\"MuiAccordion-region\" role=\"region\">\n    <div class=\"MuiAccordionDetails-root\">\n      <!-- Accordion content goes here -->\n    </div>\n  </div>\n</div>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "dividers",
      "introduction": [
        "# Divider\n\n<p class=\"description\">The Divider component provides a thin, unobtrusive line for grouping elements to reinforce visual hierarchy.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThe Material¬†UI Divider component renders as a dark gray `<hr>` by default, and features several useful props for quick style adjustments.\n\n{{\"demo\": \"IntroDivider.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport Divider from '@mui/material/Divider';\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Variants",
              "introduction": [
                "Variants\n\nThe Divider component supports three variants: `fullWidth` (default), `inset`, and `middle`.\n\n{{\"demo\": \"DividerVariants.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Orientation",
              "introduction": [
                "Orientation\n\nUse the `orientation` prop to change the Divider from horizontal to vertical. When using vertical orientation, the Divider renders a `<div>` with the corresponding accessibility attributes instead of `<hr>` to adhere to the WAI-ARIA [spec](https://www.w3.org/TR/wai-aria-1.2/#separator).\n\n{{\"demo\": \"VerticalDividers.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Flex item",
              "introduction": [
                "Flex item\n\nUse the `flexItem` prop to display the Divider when it's being used in a flex container.\n\n{{\"demo\": \"FlexDivider.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "With children",
              "introduction": [
                "With children\n\nUse the `textAlign` prop to align elements that are wrapped by the Divider.\n\n{{\"demo\": \"DividerText.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Use with a List",
              "introduction": [
                "Use with a List\n\nWhen using the Divider to separate items in a List, use the `component` prop to render it as an `<li>`‚Äîotherwise it won't be a valid HTML element.\n\n{{\"demo\": \"ListDividers.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Icon grouping",
              "introduction": [
                "Icon grouping\n\nThe demo below shows how to combine the props `variant=\"middle\"` and `orientation=\"vertical\"`.\n\n{{\"demo\": \"VerticalDividerMiddle.js\", \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nDue to its implicit role of `separator`, the Divider, which is a `<hr>` element, will be announced by screen readers as a \"Horziontal Splitter\" (or vertical, if you're using the `orientation` prop).\n\nIf you're using it as a purely stylistic element, we recommend setting `aria-hidden=\"true\"` which will make screen readers bypass it.\n\n```js\n<Divider aria-hidden=\"true\" />\n```\n\nIf you're using the Divider to wrap other elements, such as text or chips, we recommend changing its rendered element to a plain `<div>` using the `component` prop, and setting `role=\"presentation\"`.\nThis ensures that it's not announced by screen readers while still preserving the semantics of the elements inside it.\n\n```js\n<Divider component=\"div\" role=\"presentation\">\n  <Typography>Text element</Typography>\n</Divider>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Anatomy",
          "introduction": [
            "Anatomy\n\nThe Divider component is composed of a root `<hr>`.\n\n```html\n<hr class=\"MuiDivider-root\">\n  <!-- Divider children goes here -->\n</hr>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "skeleton",
      "introduction": [
        "# Skeleton\n\n<p class=\"description\">Display a placeholder preview of your content before the data gets loaded to reduce load-time frustration.</p>\n\nThe data for your components might not be immediately available. You can improve the perceived responsiveness of the page by using skeletons. It feels like things are happening immediately, then the information is incrementally displayed on the screen (Cf. [Avoid The Spinner](https://www.lukew.com/ff/entry.asp?1797))."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Usage",
          "introduction": [
            "Usage\n\nThe component is designed to be used **directly in your components**.\nFor instance:\n\n```jsx\n{\n  item ? (\n    <img\n      style={{\n        width: 210,\n        height: 118,\n      }}\n      alt={item.title}\n      src={item.src}\n    />\n  ) : (\n    <Skeleton variant=\"rectangular\" width={210} height={118} />\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Variants",
          "introduction": [
            "Variants\n\nThe component supports 4 shape variants:\n\n- `text` (default): represents a single line of text (you can adjust the height via font size).\n- `circular`, `rectangular`, and `rounded`: come with different border radius to let you take control of the size."
          ],
          "code_path": [
            "Variants.js"
          ],
          "children": []
        },
        {
          "name": "Animations",
          "introduction": [
            "Animations\n\nBy default, the skeleton pulsates, but you can change the animation to a wave or disable it entirely."
          ],
          "code_path": [
            "Animations.js"
          ],
          "children": [
            {
              "name": "Pulsate example",
              "introduction": [
                "Pulsate example\n\n{{\"demo\": \"YouTube.js\", \"defaultCodeOpen\": false}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Wave example",
              "introduction": [
                "Wave example\n\n{{\"demo\": \"Facebook.js\", \"defaultCodeOpen\": false, \"bg\": true}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Inferring dimensions",
          "introduction": [
            "Inferring dimensions\n\nIn addition to accepting `width` and `height` props, the component can also infer the dimensions.\n\nIt works well when it comes to typography as its height is set using `em` units.\n\n```jsx\n<Typography variant=\"h1\">{loading ? <Skeleton /> : 'h1'}</Typography>\n```\n\n{{\"demo\": \"SkeletonTypography.js\", \"defaultCodeOpen\": false}}\n\nBut when it comes to other components, you may not want to repeat the width and\nheight. In these instances, you can pass `children` and it will\ninfer its width and height from them.\n\n```jsx\nloading ? (\n  <Skeleton variant=\"circular\">\n    <Avatar />\n  </Skeleton>\n) : (\n  <Avatar src={data.avatar} />\n);\n```\n\n{{\"demo\": \"SkeletonChildren.js\", \"defaultCodeOpen\": false}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Color",
          "introduction": [
            "Color\n\nThe color of the component can be customized by changing its `background-color` CSS property.\nThis is especially useful when on a black background (as the skeleton will otherwise be invisible).\n\n{{\"demo\": \"SkeletonColor.js\", \"bg\": \"inline\"}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nSkeleton screens provide an alternative to the traditional spinner method.\nRather than showing an abstract widget, skeleton screens create anticipation of what is to come and reduce cognitive load.\n\nThe background color of the skeleton uses the least amount of luminance to be visible in good conditions (good ambient light, good screen, no visual impairments)."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "ARIA",
              "introduction": [
                "ARIA\n\nNone."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Keyboard",
              "introduction": [
                "Keyboard\n\nThe skeleton is not focusable."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "menus",
      "introduction": [
        "# Menu\n\n<p class=\"description\">Menus display a list of choices on temporary surfaces.</p>\n\nA menu displays a list of choices on a temporary surface. It appears when the user interacts with a button, or other control."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nMenus are implemented using a collection of related components:\n\n- Menu: The container/surface of the menu.\n- Menu Item: An option for users to select from the menu.\n- Menu List (optional): Alternative composable container for Menu Items‚Äîsee [Composition with Menu List](#composition-with-menu-list) for details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Basic menu",
          "introduction": [
            "Basic menu\n\nA basic menu opens over the anchor element by default (this option can be [changed](#menu-positioning) via props). When close to a screen edge, a basic menu vertically realigns to make sure that all menu items are completely visible.\n\nYou should configure the component so that selecting an option immediately confirms it and closes the menu, as shown in the demo below."
          ],
          "code_path": [
            "BasicMenu.js"
          ],
          "children": []
        },
        {
          "name": "Icon menu",
          "introduction": [
            "Icon menu\n\nIn desktop viewport, padding is increased to give more space to the menu.\n\n{{\"demo\": \"IconMenu.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Dense menu",
          "introduction": [
            "Dense menu\n\nFor the menu that has long list and long text, you can use the `dense` prop to reduce the padding and text size.\n\n{{\"demo\": \"DenseMenu.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Selected menu",
          "introduction": [
            "Selected menu\n\nIf used for item selection, when opened, simple menus places the initial focus on the selected menu item.\nThe currently selected menu item is set using the `selected` prop (from [ListItem](/material-ui/api/list-item/)).\nTo use a selected menu item without impacting the initial focus, set the `variant` prop to \"menu\"."
          ],
          "code_path": [
            "SimpleListMenu.js"
          ],
          "children": []
        },
        {
          "name": "Positioned menu",
          "introduction": [
            "Positioned menu\n\nBecause the `Menu` component uses the `Popover` component to position itself, you can use the same [positioning props](/material-ui/react-popover/#anchor-playground) to position it.\nFor instance, you can display the menu on top of the anchor:"
          ],
          "code_path": [
            "PositionedMenu.js"
          ],
          "children": []
        },
        {
          "name": "Composition with Menu List",
          "introduction": [
            "Composition with Menu List\n\nThe Menu component uses the Popover component internally.\nBut you might want to use a different positioning strategy, or prefer not to block scrolling, for example.\n\nThe Menu List component lets you compose your own menu for these kinds of use cases‚Äîits primary purpose is to handle focus.\nSee the demo below for an example of composition that uses Menu List and replaces the Menu's default Popover with a Popper component instead:\n\n{{\"demo\": \"MenuListComposition.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Account menu",
          "introduction": [
            "Account menu\n\n`Menu` content can be mixed with other components like `Avatar`."
          ],
          "code_path": [
            "AccountMenu.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).",
            "The `MenuItem` is a wrapper around `ListItem` with some additional styles.\nYou can use the same list composition features with the `MenuItem` component:\n\nüé® If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/menu-introduction--docs)."
          ],
          "code_path": [
            "CustomizedMenus.js",
            null
          ],
          "children": []
        },
        {
          "name": "Max height menu",
          "introduction": [
            "Max height menu\n\nIf the height of a menu prevents all menu items from being displayed, the menu can scroll internally."
          ],
          "code_path": [
            "LongMenu.js"
          ],
          "children": []
        },
        {
          "name": "Limitations",
          "introduction": [
            "Limitations\n\nThere is [a flexbox bug](https://issues.chromium.org/issues/40344463) that prevents `text-overflow: ellipsis` from working in a flexbox layout.\nYou can use the `Typography` component with `noWrap` to workaround this issue:\n\n{{\"demo\": \"TypographyMenu.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Change transition",
          "introduction": [
            "Change transition\n\nUse a different transition."
          ],
          "code_path": [
            "FadeMenu.js"
          ],
          "children": []
        },
        {
          "name": "Context menu",
          "introduction": [
            "Context menu\n\nHere is an example of a context menu. (Right click to open.)"
          ],
          "code_path": [
            "ContextMenu.js"
          ],
          "children": []
        },
        {
          "name": "Supplementary projects",
          "introduction": [
            "Supplementary projects\n\nFor more advanced use cases you might be able to take advantage of:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "material-ui-popup-state",
              "introduction": [
                "material-ui-popup-state\n\n![stars](https://img.shields.io/github/stars/jcoreio/material-ui-popup-state?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/material-ui-popup-state.svg)\n\nThe package [`material-ui-popup-state`](https://github.com/jcoreio/material-ui-popup-state) that takes care of menu state for you in most cases."
              ],
              "code_path": [
                "MenuPopupState.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "css-baseline",
      "introduction": [
        "# CSS Baseline\n\n<p class=\"description\">The CssBaseline component helps to kickstart an elegant, consistent, and simple baseline to build upon.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Global reset",
          "introduction": [
            "Global reset\n\nYou might be familiar with [normalize.css](https://github.com/necolas/normalize.css), a collection of HTML element and attribute style-normalizations.\n\n```jsx\nimport * as React from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nexport default function MyApp() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      {/* The rest of your application */}\n    </React.Fragment>\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Scoping on children",
          "introduction": [
            "Scoping on children\n\nHowever, you might be progressively migrating a website to Material¬†UI, using a global reset might not be an option.\nIt's possible to apply the baseline only to the children by using the `ScopedCssBaseline` component.\n\n```jsx\nimport * as React from 'react';\nimport ScopedCssBaseline from '@mui/material/ScopedCssBaseline';\nimport MyApp from './MyApp';\n\nexport default function MyApp() {\n  return (\n    <ScopedCssBaseline>\n      {/* The rest of your application */}\n      <MyApp />\n    </ScopedCssBaseline>\n  );\n}\n```\n\n‚ö†Ô∏è Make sure you import `ScopedCssBaseline` first to avoid box-sizing conflicts as in the above example."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Approach",
          "introduction": [
            "Approach"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Page",
              "introduction": [
                "Page\n\nThe `<html>` and `<body>` elements are updated to provide better page-wide defaults. More specifically:\n\n- The margin in all browsers is removed.\n- The default Material Design background color is applied.\n  It's using [`theme.palette.background.default`](/material-ui/customization/default-theme/?expand-path=$.palette.background) for standard devices and a white background for print devices.\n- If `enableColorScheme` is provided to `CssBaseline`, native components color will be set by applying [`color-scheme`](https://web.dev/articles/color-scheme) on `<html>`.\n  The value used is provided by the theme property `theme.palette.mode`."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Layout",
              "introduction": [
                "Layout\n\n- `box-sizing` is set globally on the `<html>` element to `border-box`.\n  Every element‚Äîincluding `*::before` and `*::after` are declared to inherit this property,\n  which ensures that the declared width of the element is never exceeded due to padding or border."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Scrollbars",
              "introduction": [
                "Scrollbars\n\n:::error\nThis API is deprecated.\nConsider using [color-scheme](#color-scheme) instead.\n:::\n\nThe colors of the scrollbars can be customized to improve the contrast (especially on Windows). Add this code to your theme (for dark mode).\n\n```jsx\nimport darkScrollbar from '@mui/material/darkScrollbar';\n\nconst theme = createTheme({\n  components: {\n    MuiCssBaseline: {\n      styleOverrides: (themeParam) => ({\n        body: themeParam.palette.mode === 'dark' ? darkScrollbar() : null,\n      }),\n    },\n  },\n});\n```\n\nBe aware, however, that using this utility (and customizing `-webkit-scrollbar`) forces macOS to always show the scrollbar."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Color scheme",
              "introduction": [
                "Color scheme\n\nThis API is introduced in @mui/material (v5.1.0) for switching between `\"light\"` and `\"dark\"` modes of native components such as scrollbar, using the `color-scheme` CSS property.\nTo enable it, you can set `enableColorScheme=true` as follows:\n\n```jsx\n<CssBaseline enableColorScheme />\n\n// or\n\n<ScopedCssBaseline enableColorScheme >\n  {/* The rest of your application using color-scheme*/}\n</ScopedCssBaseline>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Typography",
              "introduction": [
                "Typography\n\n- No base font-size is declared on the `<html>`, but 16px is assumed (the browser default).\n  You can learn more about the implications of changing the `<html>` default font size in [the theme documentation](/material-ui/customization/typography/#html-font-size) page.\n- Set the `theme.typography.body1` style on the `<body>` element.\n- Set the font-weight to `theme.typography.fontWeightBold` for the `<b>` and `<strong>` elements.\n- Custom font-smoothing is enabled for better display of the Roboto font."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nHead to the [global customization](/material-ui/customization/how-to-customize/#4-global-css-override) section of the documentation to change the output of these components."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "material-icons",
      "introduction": [
        "# Material Icons\n\n<p class=\"description\">2,100+ ready-to-use React Material Icons from the official website.</p>\n\n\n<br/>\n\n[@mui/icons-material](https://www.npmjs.com/package/@mui/icons-material)\nincludes the 2,100+ official [Material Icons](https://fonts.google.com/icons?icon.set=Material+Icons) converted to [`SvgIcon`](/material-ui/api/svg-icon/) components.\nIt depends on `@mui/material`, which requires Emotion packages.\nUse one of the following commands to install it:\n\n<!-- #default-branch-switch -->\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/icons-material @mui/material @emotion/styled @emotion/react\n```\n\n```bash pnpm\npnpm add @mui/icons-material @mui/material @emotion/styled @emotion/react\n```\n\n```bash yarn\nyarn add @mui/icons-material @mui/material @emotion/styled @emotion/react\n```\n\n</codeblock>\n\nSee the [Installation](/material-ui/getting-started/installation/) page for additional docs about how to make sure everything is set up correctly.\n\n:::info\nGoogle also offers [Material Symbols](https://fonts.google.com/icons?icon.set=Material+Symbols) as the successor of Material Icons. `@mui/icons-material` only covers Icons at this time, there are no support for Symbols yet.\n:::\n\n<hr/>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Search Material Icons",
          "introduction": [
            "Search Material Icons\n\nBrowse through the icons below to find the one you need.\nThe search field supports synonyms‚Äîfor example, try searching for \"hamburger\" or \"logout.\"\n\n{{\"demo\": \"SearchIcons.js\", \"hideToolbar\": true, \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    }
  ]
}