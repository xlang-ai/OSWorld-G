{
  "components": [
    {
      "name": "whats-new",
      "introduction": [
        "# What's new in MUI X\n\n<p class=\"description\">Discover all the latest new features and other highlights.</p>\n\n{{\"component\": \"modules/components/WhatsNewLayout.js\"}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "date-pickers->date-time-range-picker",
      "introduction": [
        "# Date Time Range Picker [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">The Date Time Range Picker lets the user select a range of dates with an explicit starting and ending time.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicDateTimeRangePicker.js"
          ],
          "children": []
        },
        {
          "name": "Component composition",
          "introduction": [
            "Component composition\n\nThe component is built using the `MultiInputDateTimeRangeField` for the keyboard editing, the `DateRangeCalendar` for the date view editing and `DigitalClock` for the time view editing.\n\nCheck-out their documentation page for more information:\n\n- [Date Time Range Field](/x/react-date-pickers/date-time-range-field/)\n- [Date Range Calendar](/x/react-date-pickers/date-range-calendar/)\n- [Digital Clock](/x/react-date-pickers/digital-clock/)\n\nYou can check the available props of the combined component on the dedicated [API page](/x/api/date-pickers/date-time-range-picker/#props).\nSome [MultiInputDateTimeRangeField props](/x/api/date-pickers/multi-input-date-time-range-field/#props) are not available on the Picker component, you can use `slotProps.field` to pass them to the field."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DateTimeRangePickerValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Available components",
          "introduction": [
            "Available components\n\nThe component is available in three variants:\n\n- The `DesktopDateTimeRangePicker` component which works best for mouse devices and large screens.\n  It renders the views inside a popover and a field for keyboard editing.\n\n- The `MobileDateTimeRangePicker` component which works best for touch devices and small screens.\n  It renders the view inside a modal and does not allow editing values with the keyboard in the field.\n\n- The `DateTimeRangePicker` component which renders `DesktopDateTimeRangePicker` or `MobileDateTimeRangePicker` depending on the device it runs on.",
            "By default, the `DateTimeRangePicker` component renders the desktop version if the media query [`@media (pointer: fine)`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/pointer) matches.\nThis can be customized with the `desktopModeMediaQuery` prop.\n\n:::warning\nResponsive components can suffer some inconsistencies between testing environments if media query is not supported.\nPlease refer to [this section](/x/react-date-pickers/base-concepts/#testing-caveats) for solutions.\n:::"
          ],
          "code_path": [
            "ResponsiveDateTimeRangePickers.js",
            null
          ],
          "children": []
        },
        {
          "name": "Form props",
          "introduction": [
            "Form props\n\nThe component can be disabled or read-only."
          ],
          "code_path": [
            "FormPropsDateTimeRangePickers.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Render 1 to 3 months",
              "introduction": [
                "Render 1 to 3 months\n\nYou can render up to 3 months at the same time using the `calendars` prop.\n\n:::info\nThis prop will be ignored on the mobile picker.\n:::"
              ],
              "code_path": [
                "DateTimeRangePickerCalendarProp.js"
              ],
              "children": []
            },
            {
              "name": "Use a single input field",
              "introduction": [
                "Use a single input field\n\nYou can pass the `SingleInputDateTimeRangeField` component to the Date Time Range Picker to use it for keyboard editing:",
                ":::info\nYou can find more information in a [dedicated documentation page section](/x/react-date-pickers/custom-field/#use-single-input-fields-on-range-pickers).\n:::"
              ],
              "code_path": [
                "SingleInputDateTimeRangePicker.js",
                null
              ],
              "children": []
            },
            {
              "name": "Customize the field",
              "introduction": [
                "Customize the field\n\nYou can find the documentation in the [Custom field page](/x/react-date-pickers/custom-field/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Change view renderer",
              "introduction": [
                "Change view renderer\n\nYou can pass a different view renderer to the Date Time Range Picker to customize the views."
              ],
              "code_path": [
                "DateTimeRangePickerViewRenderer.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->adapters-locale",
      "introduction": [
        "# Date format and localization\n\n<p class=\"description\">Date and Time Pickers support formats from different locales.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Getting started",
          "introduction": [
            "Getting started\n\nThe default locale of MUI X is English (United States). If you want to use other locales, follow the instructions below.\n\n:::warning\nThis page focuses on date format localization.\nIf you need to translate text inside a component, check out the [Translated components](/x/react-date-pickers/localization/) page.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Set a custom locale",
          "introduction": [
            "Set a custom locale"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "With `dayjs`",
              "introduction": [
                "With `dayjs`\n\nFor `dayjs`, import the locale and then pass its name to `LocalizationProvider`:\n\n```tsx\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport 'dayjs/locale/de';\n\n<LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale=\"de\">\n  {children}\n</LocalizationProvider>;\n```"
              ],
              "code_path": [
                "LocalizationDayjs.js"
              ],
              "children": []
            },
            {
              "name": "With `date-fns`",
              "introduction": [
                "With `date-fns`\n\nFor `date-fns`, import the locale and pass it to `LocalizationProvider`:\n\n:::info\nWe support `date-fns` package v2.x, v3.x, and v4.x major versions.\n\nA single adapter cannot work for all `date-fns` versions, because the way functions are exported has been changed in v3.x.\n\nTo use `date-fns` v2.x, you need to import the adapter from `@mui/x-date-pickers/AdapterDateFnsV2` instead of `@mui/x-date-pickers/AdapterDateFns`.\n:::\n\n```tsx\n// with date-fns v3.x or v4.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n// with date-fns v2.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV2';\n// with date-fns v3.x or v4.x\nimport { de } from 'date-fns/locale/de';\n// with date-fns v2.x\nimport de from 'date-fns/locale/de';\n\n<LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={de}>\n  {children}\n</LocalizationProvider>;\n```"
              ],
              "code_path": [
                "LocalizationDateFns.js"
              ],
              "children": []
            },
            {
              "name": "With `luxon`",
              "introduction": [
                "With `luxon`\n\nFor `luxon`, pass the locale name to `LocalizationProvider`:\n\n```tsx\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\n\n<LocalizationProvider dateAdapter={AdapterLuxon} adapterLocale=\"de\">\n  {children}\n</LocalizationProvider>;\n```",
                ":::warning\n`AdapterLuxon` does not support `Settings.throwOnInvalid = true` [setting](https://moment.github.io/luxon/api-docs/index.html#settingsthrowoninvalid).\n\n👍 Upvote [issue #11853](https://github.com/mui/mui-x/issues/11853) if you need support for it.\n\nDon't hesitate to leave feedback on how you would like the data entry to behave.\n:::"
              ],
              "code_path": [
                "LocalizationLuxon.js",
                null
              ],
              "children": []
            },
            {
              "name": "With `moment`",
              "introduction": [
                "With `moment`\n\nFor `moment`, import the locale and then pass its name to `LocalizationProvider`:\n\n```tsx\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport 'moment/locale/de';\n\n<LocalizationProvider dateAdapter={AdapterMoment} adapterLocale=\"de\">\n  {children}\n</LocalizationProvider>;\n```"
              ],
              "code_path": [
                "LocalizationMoment.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Meridiem — 12h/24h format",
          "introduction": [
            "Meridiem — 12h/24h format\n\nAll the time and datetime components will automatically adjust to the locale's time setting, that is the 12-hour or 24-hour format.\nYou can override the default setting with the `ampm` prop:"
          ],
          "code_path": [
            "AmPMCustomization.js"
          ],
          "children": []
        },
        {
          "name": "Custom formats",
          "introduction": [
            "Custom formats\n\nThe format received by the props described below depends on the date library you are using.\nPlease refer to each library's documentation for the full format table:\n\n- [Day.js](https://day.js.org/docs/display/format)\n- [date-fns](https://date-fns.org/docs/format)\n- [Luxon](https://moment.github.io/luxon/#/formatting?id=table-of-tokens)\n- [Moment.js](https://momentjs.com/docs/#/displaying/format/)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Custom field format",
              "introduction": [
                "Custom field format\n\nThe fields have a default format that depends on the picker being used, the views enabled, and the 12h/24h format.\n\nIf this default format does not suit you, you can customize it using the `format` prop:\n\n:::info\nThis prop is available on all fields and pickers.\n:::",
                ":::info\nYou can control the field format spacing using the [formatDensity](/x/react-date-pickers/custom-field/#change-the-format-density) prop.\n:::"
              ],
              "code_path": [
                "CustomFieldFormat.js",
                null
              ],
              "children": []
            },
            {
              "name": "Field-supported formats",
              "introduction": [
                "Field-supported formats\n\nSome formats might not yet be supported by the fields.\nFor example, they don't support day of the year or quarter.\n\nHere is the list of the currently supported formats:\n\n- The year\n  - ✅ 2-digits values (for example, `23`)\n  - ✅ 4-digits values (for example, `2023`)\n  - ❌ Values with ordinal (for example, `2023th`)\n- The month\n\n  - ✅ 1-based digit (for example, `08`)\n  - ✅ Multi-letter values (for example, `Aug`, `August`)\n  - ❌ 1-letter values (for example, `A`) because several months are represented with the same letter\n\n- The day of the month\n\n  - ✅ 1-based digit values (for example, `24`)\n  - ✅ 1-based digit values with ordinal (for example, `24th`)\n\n- The day of the week\n\n  - ✅ 0-based digit values (for example, `03`)\n  - ✅ 1-based digit values (for example, `04`)\n  - ✅ Multi-letter values (for example, `Tue`, `Tuesday`)\n  - ❌ 1-letter values (for example, `T`) because several days of the week are represented with the same letter\n\n- The hours\n\n  - ✅ 0-based 12-hours values (for example, `03`)\n  - ✅ 0-based 24-hours values (for example, `15`)\n  - ❌ 1-based values (for example, `24` instead of `00`)\n\n- The minutes\n\n- The seconds\n\n- The meridiem\n\nIf you need to use some format that is not yet supported, please [open an issue](https://github.com/mui/mui-x/issues/new/choose) describing what is your exact use case.\nSome new formats might be supported in the future, depending on the complexity of the implementation."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Respect leading zeros in fields",
              "introduction": [
                "Respect leading zeros in fields\n\nBy default, the value rendered in the field always contains digit zeros, even if your format says otherwise.\nYou can force the field to respect your format information by setting the `shouldRespectLeadingZeros` prop to `true`.\n\n:::warning\nWhen `shouldRespectLeadingZeros={true}`, the field will add an invisible character on the sections containing a single digit to make sure `onChange` is fired.\nIf you need to get the clean value from the input, you can remove this character using `input.value.replace(/\\u200e/g, '')`.\n:::\n\n:::warning\nLuxon is not able to respect the leading zeroes when using macro tokens (for example \"DD\"), so `shouldRespectLeadingZeros={true}` might lead to inconsistencies when using `AdapterLuxon`.\n:::"
              ],
              "code_path": [
                "RespectLeadingZerosFieldFormat.js"
              ],
              "children": []
            },
            {
              "name": "Custom field placeholder",
              "introduction": [
                "Custom field placeholder\n\nWhen a section is empty, the fields displays its placeholder instead of an empty value.\nFor example, if you did not fill any value for the `year` section, the field will render the year placeholder.\n\nThese placeholders are based on your current component localization, not on your date localization.",
                "For more information on how to define your component localization, check out the [Translated components](/x/react-date-pickers/localization/) page.\n\n:::warning\nPlaceholders translations depend on locale.\nSome locales might keep using English placeholders, because that format is commonly used in a given locale.\n:::\n\nYou can customize the specific placeholder section translation to your needs.\nAll the available placeholder translation methods and their parameters are available in [the source file](https://github.com/mui/mui-x/blob/HEAD/packages/x-date-pickers/src/locales/utils/pickersLocaleTextApi.ts).\nYou can override them using the `localeText` prop defined on the `LocalizationProvider` or on a specific Picker component if you need more fine-grained control.\n\nA common use case is to change the placeholder of the month section to a short letter form (Jan, Feb, etc.).\nThe default translation implementation might not be what you want, so you can override it:\n\n```tsx\n<LocalizationProvider\n  dateAdapter={AdapterDayjs}\n  localeText={{\n    fieldMonthPlaceholder: (params) =>\n      params.contentType === 'digit' ? 'MM' : params.format,\n  }}\n>\n  <DatePicker />\n</LocalizationProvider>\n```"
              ],
              "code_path": [
                "FieldPlaceholder.js",
                null
              ],
              "children": []
            },
            {
              "name": "Custom toolbar format",
              "introduction": [
                "Custom toolbar format\n\nTo customize the format used in the toolbar, use the `toolbarFormat` prop of the `toolbar` slot.\n\n:::info\nThis prop is available on all pickers.\n:::"
              ],
              "code_path": [
                "CustomToolbarFormat.js"
              ],
              "children": []
            },
            {
              "name": "Custom day of week format",
              "introduction": [
                "Custom day of week format\n\nUse `dayOfWeekFormatter` to customize day names in the calendar header.\nThis prop takes two parameters, `day` (a string with the name of the day) and `date` ( the day in the format of your date library) and returns the formatted string to display.\nThe default formatter only keeps the first letter of the name and capitalises it.\n\n:::warning\nThe first parameter `day` will be removed in v7 in favor of the second parameter `date` for more flexibility.\n:::\n\n:::info\nThis prop is available on all components that render a day calendar, including the Date Calendar as well as all Date Pickers, Date Time Pickers, and Date Range Pickers.\n:::\n\nThe example below adds a dot at the end of each day in the calendar header:"
              ],
              "code_path": [
                "CustomDayOfWeekFormat.js"
              ],
              "children": []
            },
            {
              "name": "Custom calendar header format",
              "introduction": [
                "Custom calendar header format\n\nTo customize the format used on the calendar header, use the `format` prop of the `calendarHeader` slot.\n\n:::info\nThis prop is available on all components that render a day calendar, including the Date Calendar as well as all Date Pickers, Date Time Pickers, and Date Range Pickers.\n:::"
              ],
              "code_path": [
                "CustomCalendarHeaderFormat.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Custom start of week",
          "introduction": [
            "Custom start of week\n\nThe Date and Time Pickers are using the week settings provided by your date libraries.\nEach adapter uses its locale to define the start of the week.\n\nIf the default start of the week defined in your adapter's locale is not the one you want, you can override it as shown in the following examples.\n\n:::warning\nIf you want to update the start of the week after the first render of a component,\nyou will have to manually remount your component to apply the new locale configuration.\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "With `dayjs`",
              "introduction": [
                "With `dayjs`\n\nFor `dayjs`, use the `updateLocale` plugin:\n\n```ts\nimport updateLocale from 'dayjs/plugin/updateLocale';\n\ndayjs.extend(updateLocale);\n\n// Replace \"en\" with the name of the locale you want to update.\ndayjs.updateLocale('en', {\n  // Sunday = 0, Monday = 1.\n  weekStart: 1,\n});\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "With `date-fns`",
              "introduction": [
                "With `date-fns`\n\nFor `date-fns`, override the `options.weekStartsOn` of the used locale:\n\n```ts\nimport { Locale } from 'date-fns';\n// with date-fns v3.x or v4.x\nimport { enUS } from 'date-fns/locale/en-US';\n// with date-fns v2.x\nimport enUS from 'date-fns/locale/en-US';\n\nconst customEnLocale: Locale = {\n  ...enUS,\n  options: {\n    ...enUS.options,\n    // Sunday = 0, Monday = 1.\n    weekStartsOn: 1,\n  },\n};\n\n<LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={customEnLocale}>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "With `luxon`",
              "introduction": [
                "With `luxon`\n\nFor `luxon`, use the `Settings.defaultWeekSettings` object:\n\n```ts\nimport { Settings, Info } from 'luxon';\n\nSettings.defaultWeekSettings = {\n  // Sunday = 7, Monday = 1.\n  firstDay: 1,\n  // Makes sure we don't lose the other information from `defaultWeekSettings`\n  minimalDays: Info.getMinimumDaysInFirstWeek(),\n  weekend: Info.getWeekendWeekdays(),\n};\n```\n\n:::warning\nThe [browser API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo) used by Luxon to determine the start of the week in the current locale is not yet supported by Firefox.\nUsers on this browser will always see Monday as the start of the week.\nIf you want to have the same start of week on all browsers,\nyou will have to manually override the `defaultWeekSettings` to set the `firstDay` corresponding to your locale.\n\nFor example, when using the `en-US` locale:\n\n```ts\nSettings.defaultWeekSettings = {\n  firstDay: 7,\n  minimalDays: Info.getMinimumDaysInFirstWeek(),\n  weekend: Info.getWeekendWeekdays(),\n};\n```\n\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "With `moment`",
              "introduction": [
                "With `moment`\n\nFor `moment`, use the `moment.updateLocale` method:\n\n```ts\nimport moment from 'moment';\n\n// Replace \"en\" with the name of the locale you want to update.\nmoment.updateLocale('en', {\n  week: {\n    // Sunday = 0, Monday = 1.\n    dow: 1,\n  },\n});\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "RTL Support",
          "introduction": [
            "RTL Support\n\nRight-to-left languages such as Arabic, Persian, or Hebrew are supported.\nFollow [this guide](/material-ui/customization/right-to-left/) to use them.\n\nThe example below demonstrates how to use an RTL language (Arabic) with some of the Date and Time Pickers components."
          ],
          "code_path": [
            "PickersRTL.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->custom-layout",
      "introduction": [
        "# Custom layout\n\n<p class=\"description\">The Date and Time Pickers let you reorganize the layout.</p>\n\n:::success\nSee [Common concepts—Slots and subcomponents](/x/common-concepts/custom-components/) to learn how to use slots.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Default layout structure",
          "introduction": [
            "Default layout structure\n\nBy default, pickers are made of 5 subcomponents present in the following order:\n\n- The **toolbar** displaying the selected date. Can be enforced with `slotProps: { toolbar: { hidden: false } }` prop.\n- The **shortcuts** allowing quick selection of some values. Can be added with [`slotProps.shortcuts`](/x/react-date-pickers/shortcuts/#adding-shortcuts)\n- The **content** displaying the current view. Can be a calendar, or a clock.\n- The **tabs** allowing to switch between day and time views in Date Time Pickers. Can be enforced with `slotProps: { tabs: { hidden: false } }` prop.\n- The **action bar** allowing some interactions. Can be added with [`slotProps.actionBar`](/x/react-date-pickers/custom-components/#action-bar) prop.\n\nBy default the `content` and `tabs` are wrapped together in a `contentWrapper` to simplify the layout.\n\nYou can [customize those components](/x/react-date-pickers/custom-components/) individually by using `slots` and `slotProps`."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Orientation",
          "introduction": [
            "Orientation\n\nToggling layout can be achieved by changing `orientation` prop value between `'portrait'` or `'landscape'`.\n\nHere is a demonstration with the 3 main blocks outlined with color borders."
          ],
          "code_path": [
            "LayoutBlocks.js"
          ],
          "children": []
        },
        {
          "name": "Layout structure",
          "introduction": [
            "Layout structure\n\nA `<PickersLayoutRoot />` wraps all the subcomponents to provide the structure.\nBy default it renders a `div` with `display: grid`.\nSuch that all subcomponents are placed in a 3 by 3 [CSS grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout).\n\n```jsx\n<PickersLayoutRoot>\n  {toolbar}\n  {shortcuts}\n  <PickersLayoutContentWrapper>\n    {tabs}\n    {content}\n  </PickersLayoutContentWrapper>\n  {actionBar}\n</PickersLayoutRoot>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "CSS customization",
          "introduction": [
            "CSS customization\n\nTo move an element, you can override its position in the layout with [`gridColumn`](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column) and [`gridRow`](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row) properties.\n\nIn the next example, the action bar is replaced by a list and then placed on the left side of the content.\nIt's achieved by applying the `{ gridColumn: 1, gridRow: 2 }` style.\n\n:::warning\nIf you are using custom components, you should pay attention to `className`.\nTo make CSS selectors work, you can either propagate `className` to the root element like in the demo, or use your own CSS class.\n:::"
          ],
          "code_path": [
            "MovingActions.js"
          ],
          "children": []
        },
        {
          "name": "DOM customization",
          "introduction": [
            "DOM customization\n\nIt's important to note that by modifying the layout with CSS, the new positions can lead to inconsistencies between the visual render and the DOM structure.\nIn the previous demonstration, the tab order is broken because the action bar appears before the calendar, whereas in the DOM the action bar is still after.\n\nTo modify the DOM structure, you can create a custom `Layout` wrapper.\nUse the `usePickerLayout` hook to get the subcomponents React nodes.\nThen you can fully customize the DOM structure.\n\n```jsx\nimport {\n  usePickerLayout,\n  PickersLayoutRoot,\n  pickersLayoutClasses,\n  PickersLayoutContentWrapper,\n} from '@mui/x-date-pickers/PickersLayout';\n\nfunction MyCustomLayout(props) {\n  const { toolbar, tabs, content, actionBar, ownerState } = usePickerLayout(props);\n\n  // Put the action bar before the content\n  return (\n    <PickersLayoutRoot className={pickersLayoutClasses.root} ownerState={ownerState}>\n      {toolbar}\n      {actionBar}\n      <PickersLayoutContentWrapper\n        className={pickersLayoutClasses.contentWrapper}\n        ownerState={ownerState}\n      >\n        {tabs}\n        {content}\n      </PickersLayoutContentWrapper>\n    </PickersLayoutRoot>\n  );\n}\n```\n\n:::info\nThis slot can also be used to add additional information in the layout.\n:::\n\nHere is the complete example with a fix for the tabulation order and an external element added to the layout.\nNotice the use of `pickersLayoutClasses`, `PickersLayoutRoot`, and `PickersLayoutContentWrapper` to avoid rewriting the default CSS."
          ],
          "code_path": [
            "AddComponent.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->date-field",
      "introduction": [
        "# Date Field\n\n<p class=\"description\">The Date Field component lets users select a date with the keyboard.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicDateField.js"
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DateFieldValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Customize the date format",
              "introduction": [
                "Customize the date format",
                ":::info\nSee [Date format and localization—Custom formats](/x/react-date-pickers/adapters-locale/#custom-formats) for more details.\n:::"
              ],
              "code_path": [
                "CustomDateFormat.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->timezone",
      "introduction": [
        "# UTC and timezones\n\n<p class=\"description\">Date and Time Pickers support UTC and timezones.</p>\n\n:::warning\nUTC and timezones support is an ongoing effort.\n\nOnly `AdapterDayjs`, `AdapterLuxon` and `AdapterMoment` are currently compatible with UTC dates and timezones.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Overview",
          "introduction": [
            "Overview\n\nBy default, the components will always use the timezone of your `value` / `defaultValue` prop:",
            "You can use the `timezone` prop to explicitly define the timezone in which the value should be rendered:",
            "This will be needed if the component has no `value` or `defaultValue` to deduct the timezone from it or if you don't want to render the value in its original timezone."
          ],
          "code_path": [
            "BasicValueProp.js",
            "BasicTimezoneProp.js",
            null
          ],
          "children": []
        },
        {
          "name": "Supported timezones",
          "introduction": [
            "Supported timezones\n\n|            Timezone | Description                                                                                                                                                                                                                                                                                                                                                                                                    |\n| : | :- |\n|             `\"UTC\"` | Will use the [Coordinated Universal Time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time)                                                                                                                                                                                                                                                                                                            |\n|         `\"default\"` | Will use the default timezone of your date library, this value can be set using<br/>- [`dayjs.tz.setDefault`](https://day.js.org/docs/en/timezone/set-default-timezone) on dayjs<br/>- [`Settings.defaultZone`](https://moment.github.io/luxon/#/zones?id=changing-the-default-zone) on luxon<br/>- [`moment.tz.setDefault`](https://momentjs.com/timezone/docs/#/using-timezones/default-timezone/) on moment |\n|          `\"system\"` | Will use the system's local timezone                                                                                                                                                                                                                                                                                                                                                                           |\n| IANA standard zones | Example: `\"Europe/Paris\"`, `\"America/New_York\"`<br/>[List of all the IANA zones](https://timezonedb.com/time-zones)                                                                                                                                                                                                                                                                                            |\n|        Fixed offset | Example: `\"UTC+7\"`<br/>**Only available with Luxon**                                                                                                                                                                                                                                                                                                                                                           |"
          ],
          "code_path": [
            "TimezonePlayground.js"
          ],
          "children": []
        },
        {
          "name": "Usage with Day.js",
          "introduction": [
            "Usage with Day.js"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Day.js and UTC",
              "introduction": [
                "Day.js and UTC\n\nBefore using the UTC dates with Day.js, you have to enable the `utc` plugin:\n\n```tsx\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(utc);\n```\n\n:::info\n**How to create a UTC date with Day.js?**\n\nTo create a UTC date, use the `dayjs.utc` method\n\n```tsx\nconst date = dayjs.utc('2022-04-17T15:30');\n```\n\nYou can check out the documentation of the [UTC on Day.js](https://day.js.org/docs/en/plugin/utc) for more details.\n:::\n\nYou can then pass your UTC date to your picker:\n\n```tsx\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\ndayjs.extend(utc);\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DateTimePicker defaultValue={dayjs.utc('2022-04-17T15:30')} />\n    </LocalizationProvider>\n  );\n}\n```"
              ],
              "code_path": [
                "DayjsUTC.js"
              ],
              "children": []
            },
            {
              "name": "Day.js and timezones",
              "introduction": [
                "Day.js and timezones\n\nBefore using the timezone with Day.js, you have to enable both the `utc` and `timezone` plugins:\n\n```tsx\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n```\n\n:::info\n**How to create a date in a specific timezone with Day.js?**\n\nIf your whole application is using dates from the same timezone, set the default zone to your timezone name:\n\n```tsx\nimport { dayjs } from 'dayjs';\n\ndayjs.tz.setDefault('America/New_York');\n\nconst date = dayjs.tz('2022-04-17T15:30');\n```\n\nIf you only want to use dates with this timezone on some parts of your application, pass the timezone as the 2nd parameter of the `dayjs.tz` method:\n\n```tsx\nimport { dayjs } from 'dayjs';\n\nconst date = dayjs.tz('2022-04-17T15:30', 'America/New_York');\n```\n\nYou can check out the documentation of the [timezone on Day.js](https://day.js.org/docs/en/timezone/timezone) for more details.\n:::\n\nYou can then pass your date in the wanted timezone to your picker:\n\n```tsx\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DateTimePicker\n        defaultValue={dayjs.tz('2022-04-17T15:30', 'America/New_York')}\n      />\n    </LocalizationProvider>\n  );\n}\n```",
                ":::info\nPlease check out the documentation of the [dayjs timezone plugin](https://day.js.org/docs/en/timezone/timezone) for more details on how to manipulate the timezones.\n:::"
              ],
              "code_path": [
                "DayjsTimezone.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Usage with Luxon",
          "introduction": [
            "Usage with Luxon"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Luxon and UTC",
              "introduction": [
                "Luxon and UTC\n\n:::info\n**How to create a UTC date with Luxon?**\n\nIf your whole application is using UTC dates, set the default zone to `\"UTC\"`:\n\n```tsx\nimport { DateTime, Settings } from 'luxon';\n\nSettings.defaultZone = 'UTC';\n\nconst date1 = DateTime.fromISO('2022-04-17T15:30');\nconst date2 = DateTime.fromSQL('2022-04-17 15:30:00');\n```\n\nIf you only want to use UTC dates on some parts of your application, create a UTC date using `DateTime.utc` or with the `zone` parameter of Luxon methods:\n\n```tsx\nimport { DateTime } from 'luxon';\n\nconst date1 = DateTime.utc(2022, 4, 17, 15, 30);\nconst date2 = DateTime.fromISO('2022-04-17T15:30', { zone: 'UTC' });\nconst date3 = DateTime.fromSQL('2022-04-17 15:30:00', { zone: 'UTC' });\n```\n\nPlease check out the documentation of the [UTC and timezones on Luxon](https://moment.github.io/luxon/#/zones) for more details.\n:::\n\nYou can then pass your UTC date to your picker:\n\n```tsx\nimport { DateTime } from 'luxon';\n\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterLuxon}>\n      <DateTimePicker\n        defaultValue={DateTime.fromISO('2022-04-17T15:30', { zone: 'UTC' })}\n      />\n    </LocalizationProvider>\n  );\n}\n```"
              ],
              "code_path": [
                "LuxonUTC.js"
              ],
              "children": []
            },
            {
              "name": "Luxon and timezone",
              "introduction": [
                "Luxon and timezone\n\n:::info\n**How to create a date in a specific timezone with Luxon?**\n\nIf your whole application is using dates from the same timezone, set the default zone to your timezone name:\n\n```tsx\nimport { DateTime, Settings } from 'luxon';\n\nSettings.defaultZone = 'America/New_York';\n\nconst date1 = DateTime.fromISO('2022-04-17T15:30');\nconst date2 = DateTime.fromSQL('2022-04-17 15:30:00');\n```\n\nIf you only want to use dates with this timezone on some parts of your application, create a date in this timezone using the `zone` parameter of Luxon methods:\n\n```tsx\nimport { DateTime } from 'luxon';\n\nconst date1 = DateTime.fromISO('2022-04-17T15:30', { zone: 'America/New_York' });\nconst date2 = DateTime.fromSQL('2022-04-17 15:30:00', { zone: 'America/New_York' });\n```\n\nPlease check out the documentation of the [UTC and timezones on Luxon](https://moment.github.io/luxon/#/zones) for more details.\n:::\n\nYou can then pass your date in the wanted timezone to your picker:\n\n```tsx\nimport { DateTime } from 'luxon';\n\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterLuxon}>\n      <DateTimePicker\n        defaultValue={DateTime.fromISO('2022-04-17T15:30', {\n          zone: 'America/New_York',\n        })}\n      />\n    </LocalizationProvider>\n  );\n}\n```",
                ":::info\nPlease check out the documentation of the [UTC and timezones on Luxon](https://moment.github.io/luxon/#/zones) for more details on how to manipulate the timezones.\n:::"
              ],
              "code_path": [
                "LuxonTimezone.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Usage with Moment",
          "introduction": [
            "Usage with Moment"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Moment and UTC",
              "introduction": [
                "Moment and UTC\n\n:::info\n**How to create a UTC date with Moment?**\n\nTo create a UTC date, use the `moment.utc` method\n\n```tsx\nconst date = moment.utc('2022-04-17T15:30');\n```\n\nPlease check out the documentation of the [UTC on Moment](https://momentjs.com/docs/#/parsing/utc/) for more details.\n:::\n\nYou can then pass your UTC date to your picker:\n\n```tsx\nimport moment from 'moment';\n\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterMoment}>\n      <DateTimePicker defaultValue={moment.utc('2022-04-17T15:30')} />\n    </LocalizationProvider>\n  );\n}\n```"
              ],
              "code_path": [
                "MomentUTC.js"
              ],
              "children": []
            },
            {
              "name": "Moment and timezone",
              "introduction": [
                "Moment and timezone\n\nBefore using the timezone with Moment, you have to pass the default export from `moment-timezone` to the `dateLibInstance` prop of `LocalizationProvider`:\n\n```tsx\nimport moment from 'moment-timezone';\n\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\n<LocalizationProvider dateAdapter={AdapterMoment} dateLibInstance={moment}>\n  {children}\n</LocalizationProvider>;\n```\n\n:::info\n**How to create a date in a specific timezone with Moment?**\n\nIf your whole application is using dates from the same timezone, set the default zone to your timezone name:\n\n```tsx\nimport moment from 'moment-timezone';\n\nmoment.tz.setDefault('America/New_York');\n\nconst date = moment('2022-04-17T15:30');\n```\n\nIf you only want to use dates with this timezone on some parts of your application, create a date using the `moment.tz` method:\n\n```tsx\nimport moment from 'moment-timezone';\n\nconst date = moment.tz('2022-04-17T15:30', 'America/New_York');\n```\n\nPlease check out the documentation of the [timezone on Moment](https://momentjs.com/timezone/) for more details.\n:::\n\nYou can then pass your date in the wanted timezone to your picker:\n\n```tsx\nimport moment from 'moment-timezone';\n\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterMoment} dateLibInstance={moment}>\n      <DateTimePicker\n        defaultValue={moment.tz('2022-04-17T15:30', 'America/New_York')}\n      />\n    </LocalizationProvider>\n  );\n}\n```"
              ],
              "code_path": [
                "MomentTimezone.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "More advanced examples",
          "introduction": [
            "More advanced examples\n\n:::info\nThe following examples are all built using `dayjs`.\nYou can achieve the exact same behavior using `luxon` or `moment`,\nplease refer to the sections above to know how to pass a UTC date or a date in a specific timezone to your component.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Store UTC dates but display in system's timezone",
              "introduction": [
                "Store UTC dates but display in system's timezone\n\nThe demo below shows how to store dates in UTC while displaying using the system timezone."
              ],
              "code_path": [
                "StoreUTCButDisplaySystemTimezone.js"
              ],
              "children": []
            },
            {
              "name": "Store UTC dates but display in another timezone",
              "introduction": [
                "Store UTC dates but display in another timezone\n\nThe demo below shows how to store dates in UTC while displaying using the `Pacific/Honolulu` timezone."
              ],
              "code_path": [
                "StoreUTCButDisplayOtherTimezone.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "date-pickers->date-range-picker",
      "introduction": [
        "# Date Range Picker [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">The Date Range Picker lets the user select a range of dates.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicDateRangePicker.js"
          ],
          "children": []
        },
        {
          "name": "Component composition",
          "introduction": [
            "Component composition\n\nThe component is built using the `MultiInputDateRangeField` for the keyboard editing and the `DateRangeCalendar` for the view editing.\n\nCheck-out their documentation page for more information:\n\n- [Date Range Field](/x/react-date-pickers/date-range-field/)\n- [Date Range Calendar](/x/react-date-pickers/date-range-calendar/)\n\nYou can check the available props of the combined component on the dedicated [API page](/x/api/date-pickers/date-range-picker/#props).\nSome [MultiInputDateRangeField props](/x/api/date-pickers/multi-input-date-range-field/#props) are not available on the Picker component, you can use `slotProps.field` to pass them to the field."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DateRangePickerValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Available components",
          "introduction": [
            "Available components\n\nThe component is available in four variants:\n\n- The `DesktopDateRangePicker` component which works best for mouse devices and large screens.\n  It renders the views inside a popover and a field for keyboard editing.\n\n- The `MobileDateRangePicker` component which works best for touch devices and small screens.\n  It renders the view inside a modal and does not allow editing values with the keyboard in the field.\n\n- The `DateRangePicker` component which renders `DesktopDateRangePicker` or `MobileDateRangePicker` depending on the device it runs on.\n\n- The `StaticDateRangePicker` component which renders without the popover/modal and field.",
            "By default, the `DateRangePicker` component renders the desktop version if the media query [`@media (pointer: fine)`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/pointer) matches.\nThis can be customized with the `desktopModeMediaQuery` prop.\n\n:::warning\nResponsive components can suffer some inconsistencies between testing environments if media query is not supported.\nPlease refer to [this section](/x/react-date-pickers/base-concepts/#testing-caveats) for solutions.\n:::"
          ],
          "code_path": [
            "ResponsiveDateRangePickers.js",
            null
          ],
          "children": []
        },
        {
          "name": "Form props",
          "introduction": [
            "Form props\n\nThe component can be disabled or read-only."
          ],
          "code_path": [
            "FormPropsDateRangePickers.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Render 1 to 3 months",
              "introduction": [
                "Render 1 to 3 months\n\nYou can render up to 3 months at the same time using the `calendars` prop.\n\n:::info\nThis prop will be ignored on the mobile picker.\n:::"
              ],
              "code_path": [
                "DateRangePickerCalendarProp.js"
              ],
              "children": []
            },
            {
              "name": "Use a single input field",
              "introduction": [
                "Use a single input field\n\nYou can pass the `SingleInputDateRangeField` component to the Date Range Picker to use it for keyboard editing.\nIn such case the Picker component can pass the `name` prop to the input.",
                ":::info\nYou can find more information in a [dedicated documentation page section](/x/react-date-pickers/custom-field/#use-single-input-fields-on-range-pickers).\n:::"
              ],
              "code_path": [
                "SingleInputDateRangePicker.js",
                null
              ],
              "children": []
            },
            {
              "name": "Add shortcuts",
              "introduction": [
                "Add shortcuts\n\nTo simplify range selection, you can add [shortcuts](/x/react-date-pickers/shortcuts/#range-shortcuts)."
              ],
              "code_path": [
                "BasicRangeShortcuts.js"
              ],
              "children": []
            },
            {
              "name": "Customize the field",
              "introduction": [
                "Customize the field\n\nYou can find the documentation in the [Custom field page](/x/react-date-pickers/custom-field/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Month Range Picker 🚧",
          "introduction": [
            "Month Range Picker 🚧\n\nThe Month Range Picker allows setting a range of months.\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\n👍 Upvote [issue #4995](https://github.com/mui/mui-x/issues/4995) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->experimentation",
      "introduction": [
        "# Date and Time Pickers experimentation\n\n<p class=\"description\">Demos not accessible through the navbar of the doc.</p>"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "date-pickers->playground",
      "introduction": [
        "# Customization playground\n\n<p class=\"description\">Use this playground to experiment with the props that affect the layout of the Date and Time Picker components.</p>"
      ],
      "code_path": [
        "PickersPlaygroundWrapper.js"
      ],
      "children": []
    },
    {
      "name": "date-pickers->digital-clock",
      "introduction": [
        "# Digital Clock\n\n<p class=\"description\">The Digital Clock lets the user select a time without any input or popper / modal.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Description",
          "introduction": [
            "Description\n\nThere are two component versions for different cases. The `DigitalClock` handles selection of a single time instance in one step, just like a `select` component. The `MultiSectionDigitalClock` allows selecting time using separate sections for separate views.\n\nThe `DigitalClock` is more appropriate when there is a limited number of time options needed, while the `MultiSectionDigitalClock` is suited for cases when a more granular time selection is needed."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "DigitalClockBasic.js"
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DigitalClockValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Form props",
          "introduction": [
            "Form props\n\nThe components can be disabled or read-only."
          ],
          "code_path": [
            "DigitalClockFormProps.js"
          ],
          "children": []
        },
        {
          "name": "Views",
          "introduction": [
            "Views\n\nThe `MultiSectionDigitalClock` component can contain three views: `hours`, `minutes`, and `seconds`.\nBy default, only the `hours` and `minutes` views are enabled.\n\nYou can customize the enabled views using the `views` prop.\nViews will appear in the order they're included in the `views` array."
          ],
          "code_path": [
            "DigitalClockViews.js"
          ],
          "children": []
        },
        {
          "name": "12h/24h format",
          "introduction": [
            "12h/24h format\n\nThe components use the hour format of the locale's time setting, that is the 12-hour or 24-hour format.\n\nYou can force a specific format using the `ampm` prop.\n\nYou can find more information about 12h/24h format in the [Date localization page](/x/react-date-pickers/adapters-locale/#meridiem-12h-24h-format)."
          ],
          "code_path": [
            "DigitalClockAmPm.js"
          ],
          "children": []
        },
        {
          "name": "Time steps",
          "introduction": [
            "Time steps\n\nBy default, the components list the time options in the following way:\n\n- `DigitalClock` in `30` minutes intervals;\n- `MultiSectionDigitalClock` component in `5` unit (`minutes` or `seconds`) intervals;\n\nYou can set the desired interval using the `timeStep` and `timeSteps` props.\nThe prop accepts:\n\n- The `DigitalClock` component accepts a `number` value `timeStep` prop;\n- The `MultiSectionDigitalClock` component accepts a `timeSteps` prop with `number` values for `hours`, `minutes`, or `seconds` units;"
          ],
          "code_path": [
            "DigitalClockTimeStep.js"
          ],
          "children": []
        },
        {
          "name": "Skip rendering disabled options",
          "introduction": [
            "Skip rendering disabled options\n\nWith the `skipDisabled` prop, the components don't render options that are not available to the user (for example through `minTime`, `maxTime`, `shouldDisabledTime` etc.).\n\nThe following example combines these properties to customize which options are rendered.\n\n- The first component does not show options before `9:00` (the value of `minTime`).\n- The second one shows options between `09:00` and `13:20` thanks to `shouldDisableTime`."
          ],
          "code_path": [
            "DigitalClockSkipDisabled.js"
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->time-picker",
      "introduction": [
        "# Time Picker\n\n<p class=\"description\">The Time Picker component lets the user select a time.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicTimePicker.js"
          ],
          "children": []
        },
        {
          "name": "Component composition",
          "introduction": [
            "Component composition\n\nThe component is built using the `TimeField` for the keyboard editing, the `DigitalClock` for the desktop view editing, and the `TimeClock` for the mobile view editing.\n\nCheck-out their documentation page for more information:\n\n- [Time Field](/x/react-date-pickers/time-field/)\n- [Digital Clock](/x/react-date-pickers/digital-clock/)\n- [Time Clock](/x/react-date-pickers/time-clock/)\n\nYou can check the available props of the combined component on the dedicated [API page](/x/api/date-pickers/time-picker/#props).\nSome [TimeField props](/x/api/date-pickers/time-field/#props) are not available on the Picker component, you can use `slotProps.field` to pass them to the field."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "TimePickerValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Available components",
          "introduction": [
            "Available components\n\nThe component is available in four variants:\n\n- The `DesktopTimePicker` component which works best for mouse devices and large screens.\n  It renders the views inside a popover and a field for keyboard editing.\n\n- The `MobileTimePicker` component which works best for touch devices and small screens.\n  It renders the view inside a modal and a field for keyboard editing.\n\n- The `TimePicker` component which renders `DesktopTimePicker` or `MobileTimePicker` depending on the device it runs on.\n\n- The `StaticTimePicker` component which renders without the popover/modal and field.",
            "By default, the `TimePicker` component renders the desktop version if the media query [`@media (pointer: fine)`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/pointer) matches.\nThis can be customized with the `desktopModeMediaQuery` prop.\n\n:::warning\nResponsive components can suffer some inconsistencies between testing environments if media query is not supported.\nPlease refer to [this section](/x/react-date-pickers/base-concepts/#testing-caveats) for solutions.\n:::"
          ],
          "code_path": [
            "ResponsiveTimePickers.js",
            null
          ],
          "children": []
        },
        {
          "name": "Form props",
          "introduction": [
            "Form props\n\nThe component can be disabled or read-only."
          ],
          "code_path": [
            "FormPropsTimePickers.js"
          ],
          "children": []
        },
        {
          "name": "Views",
          "introduction": [
            "Views\n\nThe component supports three views: `hours`, `minutes` and `seconds`.\n\nBy default, the `hours` and `minutes` views are enabled.\nUse the `views` prop to change this behavior:",
            "By default, the `MobileTimePicker` component renders the `hours` view on mount.\nUse the `openTo` prop to change this behavior:",
            ":::success\nThe views will appear in the order defined by the `views` array.\nIf the view defined in `openTo` is not the first view, then the views before will not be included in the default flow.\n:::"
          ],
          "code_path": [
            "TimePickerViews.js",
            "TimePickerOpenTo.js",
            null
          ],
          "children": []
        },
        {
          "name": "Landscape orientation",
          "introduction": [
            "Landscape orientation\n\nBy default, the Time Picker component automatically sets the orientation based on the `window.orientation` value.\n\nYou can force a specific orientation using the `orientation` prop.",
            ":::info\nYou can find more information about the layout customization in the [custom layout page](/x/react-date-pickers/custom-layout/).\n:::"
          ],
          "code_path": [
            "StaticTimePickerLandscape.js",
            null
          ],
          "children": []
        },
        {
          "name": "Choose time view renderer",
          "introduction": [
            "Choose time view renderer\n\nYou can use the `viewRenderers` prop to change the view that is used for rendering a view.\nYou might be interested in using the [Time Clock](/x/react-date-pickers/time-clock/) instead of the [Digital Clock](/x/react-date-pickers/digital-clock/) on desktop as well as mobile."
          ],
          "code_path": [
            "TimePickerViewRenderers.js"
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->faq",
      "introduction": [
        "# Frequently asked questions\n\n<p class=\"description\">Can't find what you are looking for? The FAQ section has answers to some of the most frequent questions and challenges.</p>\n\nIf you still have trouble, you can refer to the [support page](/x/introduction/support/)."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "What is the DemoContainer and DemoItem?",
          "introduction": [
            "What is the DemoContainer and DemoItem?\n\nThe `<DemoContainer />` is an internal component used together with the `<DemoItem />` to display multiple components in a consistent layout throughout the demos.\n\nThis helps avoid the repeated use of layout components, such as `<Box />` or `<Stack />`, while keeping the code minimal and clear, and allowing readers to focus on what is important - the demo itself.\n\n:::warning\nYou should never use these components in your application.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Why is the KeyboardDatePicker not supported anymore?",
          "introduction": [
            "Why is the KeyboardDatePicker not supported anymore?\n\nIt has been replaced with the `DatePicker` component, please refer to the [migration documentation](/material-ui/migration/pickers-migration/#imports) for more information.\n\nAll versions of the date and time pickers implement keyboard input for accessibility and also allow editing through the UI. Depending on your use case, you may only need keyboard editing, in which case you can use the date and time field components.\n\nFor instance, `DatePicker` allows for editing both via input and a calendar, while `DateField` only allows for editing via input. You can read more about the different types of components on the [base concepts page](/x/react-date-pickers/base-concepts/#other-components).\n\nFor more information about the fields, you can refer to the [field components page](/x/react-date-pickers/fields/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->custom-field",
      "introduction": [
        "# Custom field\n\n<p class=\"description\">The Date and Time Pickers let you customize the field by passing props or custom components.</p>\n\n:::success\nSee [Common concepts—Slots and subcomponents](/x/common-concepts/custom-components/) to learn how to use slots.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Customize the default field",
          "introduction": [
            "Customize the default field"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Customize the `TextField`",
              "introduction": [
                "Customize the `TextField`\n\nYou can use the `textField` slot to pass custom props to the `TextField`:"
              ],
              "code_path": [
                "TextFieldSlotProps.js"
              ],
              "children": []
            },
            {
              "name": "Customize the separator of multi input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
              "introduction": [
                "Customize the separator of multi input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nYou can use the `fieldSeparator` slot to pass custom props to the `Typography` rendered between the two `TextField`:"
              ],
              "code_path": [
                "MultiInputFieldSeparatorSlotProps.js"
              ],
              "children": []
            },
            {
              "name": "Customize the `start` and `end` fields differently [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
              "introduction": [
                "Customize the `start` and `end` fields differently [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nYou can pass conditional props to the `textField` slot to customize the input styling based on the `position`."
              ],
              "code_path": [
                "MultiInputFieldTextFieldProps.js"
              ],
              "children": []
            },
            {
              "name": "Use single input fields on range pickers [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
              "introduction": [
                "Use single input fields on range pickers [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nYou can pass the single input fields to the range picker to use it for keyboard editing:",
                "If you want to create a wrapper around the field, make sure to set the `fieldType` static property to `'single-input'`.\nOtherwise, the picker won't know your field is a single input one and use the multi input event listeners:",
                "You can manually add an `endAdornment` if you want your range picker to look exactly like on a simple picker:",
                ":::info\nThis adornment is purely decorative, the focus remains on the field when the picker is opened.\n:::"
              ],
              "code_path": [
                "SingleInputDateRangePicker.js",
                "SingleInputDateRangePickerWrapped.js",
                "SingleInputDateRangePickerWithAdornment.js",
                null
              ],
              "children": []
            },
            {
              "name": "Change the separator of range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
              "introduction": [
                "Change the separator of range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nYou can use the `dateSeparator` prop to change the separator rendered between the start and end dates:"
              ],
              "code_path": [
                "RangeFieldDateSeparator.js"
              ],
              "children": []
            },
            {
              "name": "Change the format density",
              "introduction": [
                "Change the format density\n\nYou can control the field format spacing using the `formatDensity` prop.\nSetting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character."
              ],
              "code_path": [
                "FieldFormatDensity.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "With Material UI",
          "introduction": [
            "With Material UI"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Wrapping `PickersTextField`",
              "introduction": [
                "Wrapping `PickersTextField`\n\nYou can import the `PickersTextField` component to create custom wrappers:",
                ":::success\nThis approach is only recommended if you need complex customizations on your `PickersTextField`.\n\nIf you just need to set some default props, you can use [the `slotProps` prop](/x/react-date-pickers/custom-field/#customize-the-textfield).\n:::"
              ],
              "code_path": [
                "MaterialV7FieldWrapped.js",
                null
              ],
              "children": []
            },
            {
              "name": "Using Material `TextField`",
              "introduction": [
                "Using Material `TextField`\n\nPass the `enableAccessibleFieldDOMStructure={false}` to any Field or Picker component to use an `<input />` for the editing instead of the new accessible DOM structure:",
                ":::warning\nThe non-accessible DOM structure will be deprecated in a follow up minor version and remove in `v9.x`.\nIf you are unable to migrate for some reason, please open an issue to describe what is missing from the new DOM structure so that we can improve it before dropping the old one.\n:::"
              ],
              "code_path": [
                "MaterialV6Field.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "With another Design System",
          "introduction": [
            "With another Design System"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Using a custom input",
              "introduction": [
                "Using a custom input\n\n:::warning\nYou will need to use a component that supports the `sx` prop as a wrapper for your input\nto be able to benefit from the **hover** and **focus** behavior of the clear button.\nYou will have access to the `clearable` and `onClear` props using native HTML elements,\nbut the on **focus** and **hover** behavior depends on styles applied via the `sx` prop.\n:::",
                "",
                ""
              ],
              "code_path": [
                "BrowserV7Field.js",
                "BrowserV7SingleInputRangeField.js",
                "BrowserV7MultiInputRangeField.js"
              ],
              "children": []
            },
            {
              "name": "Using Joy UI",
              "introduction": [
                "Using Joy UI\n\nYou can use the [Joy UI](https://mui.com/joy-ui/getting-started/) components instead of the Material UI ones:",
                "",
                "",
                ":::warning\nAll the Joy UI examples use the non-accessible DOM structure.\nThe new accessible DOM structure will become compatible with Joy UI in the future.\n:::"
              ],
              "code_path": [
                "JoyV6Field.js",
                "JoyV6SingleInputRangeField.js",
                "JoyV6MultiInputRangeField.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "With a custom editing experience",
          "introduction": [
            "With a custom editing experience"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Using an Autocomplete",
              "introduction": [
                "Using an Autocomplete\n\nIf your user can only select a value in a small list of available dates, you can replace the field with the [Autocomplete](/material-ui/react-autocomplete/) component to list those dates:"
              ],
              "code_path": [
                "behavior-autocomplete/MaterialDatePicker.js"
              ],
              "children": []
            },
            {
              "name": "Using a masked Text Field",
              "introduction": [
                "Using a masked Text Field\n\nIf you want to use a simple mask approach for the field editing instead of the built-in logic, you can replace the default field with the [TextField](/material-ui/react-text-field/) component using a masked input value built with the [rifm](https://github.com/realadvisor/rifm) package."
              ],
              "code_path": [
                "behavior-masked-text-field/MaskedMaterialTextField.js"
              ],
              "children": []
            },
            {
              "name": "Using a read-only Text Field",
              "introduction": [
                "Using a read-only Text Field\n\nIf you want users to select a value exclusively through the views\nbut you still want the UI to look like a Text Field, you can replace the field with a read-only [Text Field](/material-ui/react-text-field/) component:"
              ],
              "code_path": [
                "behavior-read-only-text-field/MaterialDatePicker.js"
              ],
              "children": []
            },
            {
              "name": "Using a read-only Text Field on mobile",
              "introduction": [
                "Using a read-only Text Field on mobile\n\nIf you want to keep the default behavior on desktop but have a read-only TextField on mobile, you can conditionally render the custom field presented in the previous section:"
              ],
              "code_path": [
                "behavior-read-only-mobile-text-field/MaterialDatePicker.js"
              ],
              "children": []
            },
            {
              "name": "Using a Button",
              "introduction": [
                "Using a Button\n\nIf you want users to select a value exclusively through the views\nand you don't want the UI to look like a Text Field, you can replace the field with the [Button](/material-ui/react-button/) component:",
                "The same logic can be applied to any Range Picker:"
              ],
              "code_path": [
                "behavior-button/MaterialDatePicker.js",
                "behavior-button/MaterialDateRangePicker.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Build your own custom field",
          "introduction": [
            "Build your own custom field\n\n:::success\nThe sections below show how to build a field for your Picker.\nUnlike the field components exposed by `@mui/x-date-pickers` and `@mui/x-date-pickers-pro`, those fields are not suitable for a standalone usage.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Typing",
              "introduction": [
                "Typing\n\nEach Picker component exposes an interface describing the props it passes to its field.\nYou can import it from the same endpoint as the Picker component and use it to type the props of your field:\n\n```tsx\nimport { DatePickerFieldProps } from '@mui/x-date-pickers/DatePicker';\nimport { DateRangePickerFieldProps } from '@mui/x-date-pickers-pro/DateRangePicker';\n\nfunction CustomDateField(props: DatePickerFieldProps) {\n  // Your custom field\n}\n\nfunction CustomDateRangeField(props: DateRangePickerFieldProps) {\n  // Your custom field\n}\n```"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Import",
                  "introduction": [
                    "Import\n\n|       Picker component | Field props interface           |\n| : | :--- |\n|            Date Picker | `import { validateDate } from '@mui/x-date-pickers/validation'`              |\n|            Time Picker | `import { validateTime } from '@mui/x-date-pickers/validation'`              |\n|       Date Time Picker | `import { validateDateTime } from '@mui/x-date-pickers/validation'`          |\n|      Date Range Picker | `import { validateDateRange } from '@mui/x-date-pickers-pro/validation'`     |\n| Date Time Range Picker | `import { validateDateTimeRange } from '@mui/x-date-pickers-pro/validation'` |"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Localized placeholder",
              "introduction": [
                "Localized placeholder\n\nYou can use the `useParsedFormat` to get a clean placeholder.\nThis hook applies two main transformations on the format:\n\n1. It replaces all the localized tokens (for example `L` for a date with `dayjs`) with their expanded value (`DD/MM/YYYY` for the same date with `dayjs`).\n2. It replaces each token with its token from the localization object (for example `YYYY` remains `YYYY` for the English locale but becomes `AAAA` for the French locale).\n\n:::warning\nThe format returned by `useParsedFormat` cannot be parsed by your date library.\n:::\n\n```js\nimport { useParsedFormat } from '@mui/x-date-pickers/hooks';\n\n// Uses the format defined by your Picker\nconst parsedFormat = useParsedFormat();\n\n// Uses the custom format provided\nconst parsedFormat = useParsedFormat({ format: 'MM/DD/YYYY' });\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Spread props to the DOM",
              "introduction": [
                "Spread props to the DOM\n\nThe field receives a lot of props that cannot be forwarded to the DOM element without warnings.\nYou can use the `useSplitFieldProps` hook to get the props that can be forwarded safely to the DOM:\n\n```tsx\nconst { internalProps, forwardedProps } = useSplitFieldProps(\n  // The props received by the field component\n  props,\n  // The value type (\"date\", \"time\" or \"date-time\")\n  'date',\n);\n\nreturn (\n  <TextField {...forwardedProps} value={inputValue} onChange={handleChange}>\n)\n```\n\n:::success\nThe `forwardedProps` contains the `sx` which is specific to MUI.\nYou can omit it if the component your are forwarding the props to does not support this concept:\n\n```jsx\nconst { sx, ...other } = props;\nconst { internalProps, forwardedProps } = useSplitFieldProps(other, 'date');\n\nreturn (\n  <input {...forwardedProps} value={inputValue} onChange={handleChange}>\n)\n```\n\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Pass the field to the Picker",
              "introduction": [
                "Pass the field to the Picker\n\nYou can pass your custom field to your Picker using the `field` slot:\n\n```tsx\nfunction DatePickerWithCustomField() {\n  return (\n    <DatePicker slots={{ field: CustomDateField }}>\n  )\n}\n\n// Also works with the other variants of the component\nfunction DesktopDatePickerWithCustomField() {\n  return (\n    <DesktopDatePicker slots={{ field: CustomDateField }}>\n  )\n}\n\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Full custom example",
              "introduction": [
                "Full custom example\n\nHere is a live demo of the example created in all the previous sections:"
              ],
              "code_path": [
                "behavior-tutorial/MaterialDatePicker.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "date-pickers->lifecycle",
      "introduction": [
        "# Components lifecycle\n\n<p class=\"description\">This page explains when the onChange, onAccept, and onClose callbacks are called.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Lifecycle on simple fields",
          "introduction": [
            "Lifecycle on simple fields\n\n:::info\nThe information below is applicable to standalone fields (when rendering `<DateField />`),\nas well as to pickers for field editing (when rendering `<DatePicker />` and using the input to edit the value).\n:::\n\nThe field components have an internal state controlling the visible value.\n\nIt will only call the `onChange` callback when:\n\n- the user fills one section of an empty field. The value equals `Invalid date`.\n- the user completes all sections of a field. The value reflects the field.\n- the user cleans one section of a completed field. The value equals `Invalid date`.\n- the user cleans all sections of a field. The value equals `null`.\n\nThe example below shows the last value received by `onChange`."
          ],
          "code_path": [
            "LifeCycleDateFieldEmpty.js"
          ],
          "children": []
        },
        {
          "name": "Lifecycle on range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Lifecycle on range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nOn range fields (`SingleInputDateRangeField` / `MultiInputDateRangeField` / ... ),\n`onChange` is called if the date you are modifying is matching one of the conditions above,\nregardless of the other date state.\n\nThe example below shows the last value received by `onChange`.\nNote how changing the value of the start date section will call `onChange` even if the end date is empty or partially filled."
          ],
          "code_path": [
            "LifeCycleDateRangeField.js"
          ],
          "children": []
        },
        {
          "name": "Lifecycle on pickers: \"onClose\"",
          "introduction": [
            "Lifecycle on pickers: \"onClose\""
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "When is \"onClose\" called?",
              "introduction": [
                "When is \"onClose\" called?\n\n:::info\nIn all the below scenarios, the picker closes when `onClose` is called, except if you are controlling the `open` prop.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "When the last view is completed",
                  "introduction": [
                    "When the last view is completed\n\nWhen a selection in the last view is made, `onClose` will be called only if the `closeOnSelect` prop is equal to `true`.\nThe default value of `closeOnSelect` depends on the component:\n\n- Date Picker and Date Range Picker: `true` on desktop and `false` on mobile variants;\n- Time Picker, Date Time Picker, and Date Time Range Picker: `false` on desktop and mobile variants.\n\n  Here are a few examples:\n\n:::info\nThe examples below are using the desktop and mobile variants of the pickers, but the behavior is exactly the same when using the responsive variant (`DatePicker`, `TimePicker`, ...) on a mobile or desktop environment.\n:::\n\n- ```tsx\n  <DesktopDatePicker />\n  ```\n\n  - Default `views` prop: `['year', 'day']`\n  - Default `closeOnSelect` prop: `true`\n\n  **Behavior:** The picker will close when selecting the day.\n\n- ```tsx\n  <DesktopDatePicker closeOnSelect={false} />\n  ```\n\n  - Default `views` prop: `['year', 'day']`\n  - Explicit `closeOnSelect` prop: `false`\n\n  **Behavior:** The picker will not close when selecting a day. The user will have to click on the _OK_ action to close it.\n\n  :::success\n  If you want to set `closeOnSelect` to `false` on a desktop picker, you should consider enabling the action bar to allow the user to validate the value:\n\n  ```tsx\n  <DesktopDatePicker\n    closeOnSelect={false}\n    slotProps={{ actionBar: { actions: ['cancel', 'accept'] } }}\n  />\n  ```\n\n  :::\n\n- ```tsx\n  <MobileDatePicker />\n  ```\n\n  - Default `views` prop: `['year', 'day']`\n  - Default `closeOnSelect` prop: `false`\n\n  **Behavior:** The picker will not close when selecting a day. The user will have to click on the _OK_ action to close it.\n\n- ```tsx\n  <DesktopDatePicker views={['day', 'month', 'year']} />\n  ```\n\n  - Explicit `views` prop: `['day', 'month', 'year']`\n  - Default `closeOnSelect` prop: `true`\n\n  **Behavior:** The picker will close when selecting the year.\n\n- ```tsx\n  <DesktopTimePicker />\n  ```\n\n  - Default `views` prop: `['hours', 'minutes']` (plus a `meridiem` view if the locale is in 12-hours format)\n  - Default `closeOnSelect` prop: `false`\n\n  **Behavior:** The picker will not close when selecting the minutes or meridiem (if a 12-hour clock is used).\n\n:::info\nYou don't have to fill all the views for the picker to close automatically.\nFor example, on the `DatePicker`, the `year` and `month` views are not in the default workflow since they are before the opening view (`day`),\nso the picker will close even if you never went to those views.\n:::"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "When the picker is manually closed",
                  "introduction": [
                    "When the picker is manually closed\n\nPressing <kbd class=\"key\">Escape</kbd> or clicking outside the picker will close the picker."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "When a value is selected using the action bar",
                  "introduction": [
                    "When a value is selected using the action bar\n\nClicking on any built-in button of the action bar will close the picker."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "When a shortcut is picked",
                  "introduction": [
                    "When a shortcut is picked\n\nClicking on a shortcut will close the picker, except if the `changeImportance` property has been set to `\"set\"` instead of the default value `\"accept\"`.\nYou can find more information [in the dedicated doc section](/x/react-date-pickers/shortcuts/#behavior-when-selecting-a-shortcut)."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Lifecycle on pickers: \"onChange\"",
          "introduction": [
            "Lifecycle on pickers: \"onChange\""
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Usage",
              "introduction": [
                "Usage\n\nThe `onChange` callback is called whenever the current value changes.\n\nIf you don't want to listen to the intermediary steps, consider using the [`onAccept` prop](/x/react-date-pickers/lifecycle/#lifecycle-on-pickers-quot-onaccept-quot) instead.\n\n```tsx\n<DatePicker onChange={(value) => setValue(value)} />\n```\n\n:::success\nYou can use the second argument passed to the `onChange` callback to get the validation error associated with the current value:\n\n```tsx\n<DatePicker\n  onChange={(newValue, context) => {\n    setValue(value);\n    if (context.validationError == null) {\n      runSomeLogic();\n    }\n  }}\n/>\n```\n\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "When is \"onChange\" called?",
              "introduction": [
                "When is \"onChange\" called?"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "When the field calls \"onChange\"",
                  "introduction": [
                    "When the field calls \"onChange\"\n\nWhen editing your value through the input(s) of your field, the picker will just re-publish the `onChange` callback.\nTake a look at the [dedicated section](/x/react-date-pickers/lifecycle/#lifecycle-on-simple-fields) for more information."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "When the user interacts with the view",
                  "introduction": [
                    "When the user interacts with the view\n\nIf the component is controlled (i.e: if it has a `value` prop),\nclicking on a value will call `onChange` if the value to publish is different from the current value\n(for example clicking on the already selected day in the `day` view will not call `onChange`).\n\nIf the component is not controlled, the behavior is the same, except if no value has ever been published, in which case clicking on the current value will fire `onChange`\n(for example clicking on the already selected day in the `day` view will call `onChange` if `onChange` has never been called before).\n\nSome views can decide not to call `onChange` for some value modifications.\nThe most common example is the mobile time views (using the [`TimeClock`](/x/react-date-pickers/time-clock/) component).\nThe `onChange` is only fired once when the dragging (touching) of the clock hand ends even though the UI updates on each position change."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "When a value is selected using the action bar",
                  "introduction": [
                    "When a value is selected using the action bar\n\nIf the component is controlled (i.e: if it has a `value` prop),\nclicking on any built-in actions will call `onChange` if the value to publish is different from the current value.\n\nIf the component is not controlled, the behavior is the same, except for the _Clear_, _Today_, and _OK_ actions that will call `onChange` if no value has ever been published, even if the current value equals the value to publish."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "When a shortcut is picked",
                  "introduction": [
                    "When a shortcut is picked\n\nClicking on a shortcut will call `onChange`.\nYou can find more information [in the dedicated doc section](/x/react-date-pickers/shortcuts/#behavior-when-selecting-a-shortcut)."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Lifecycle on pickers: \"onAccept\"",
          "introduction": [
            "Lifecycle on pickers: \"onAccept\""
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Usage",
              "introduction": [
                "Usage\n\nThe `onAccept` callback allows you to get the final value selected by the user without caring about the intermediary steps.\n\n```tsx\n<DatePicker onAccept={(value) => sendValueToServer(value)} />\n```\n\n:::success\nYou can use the second argument passed to the `onAccept` callback to get the validation error associated with the current value:\n\n```tsx\n<DatePicker\n  onAccept={(newValue, context) => {\n    if (context.validationError == null) {\n      runSomeLogic();\n    }\n  }}\n/>\n```\n\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "When is \"onAccept\" called?",
              "introduction": [
                "When is \"onAccept\" called?"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "When the last view is completed",
                  "introduction": [
                    "When the last view is completed\n\nWhen a selection in the last view is made, `onAccept` will be called only if the `closeOnSelect` prop is equal to `true` and the value has been modified since the last time `onAccept` was called.\nThe default value of `closeOnSelect` depends on the component used:\n\n- Date Picker and Date Range Picker: `true` on desktop and `false` on mobile variants;\n- Time Picker, Date Time Picker, and Date Time Range Picker: `false` on desktop and mobile variants.\n\nHere are a few examples:\n\n:::info\nThe examples below are using the desktop and mobile variants of the pickers, but the behavior is exactly the same when using the responsive variant (`DatePicker`, `TimePicker`, ...) on a mobile or desktop environment.\n:::\n\n- ```tsx\n  <DesktopDatePicker />\n  ```\n\n  - Default `views` prop: `['year', 'day']`\n  - Default `closeOnSelect` prop: `true`\n\n  **Behavior:** The picker will call `onAccept` when selecting the day.\n\n- ```tsx\n  <DesktopDatePicker closeOnSelect={false} />\n  ```\n\n  - Default `views` prop: `['year', 'day']`\n  - Explicit `closeOnSelect` prop: `false`\n\n  **Behavior:** The picker will not call `onAccept` when selecting a value.\n\n  :::success\n  If you want to set `closeOnSelect` to `false` on a desktop picker, you should consider enabling the action bar to allow the user to validate the value:\n\n  ```tsx\n  <DesktopDatePicker\n    closeOnSelect={false}\n    slotProps={{ actionBar: { actions: ['cancel', 'accept'] } }}\n  />\n  ```\n\n  :::\n\n- ```tsx\n  <DesktopDatePicker views={['day', 'month', 'year']} />\n  ```\n\n  - Explicit `views` prop: `['day', 'month', 'year']`\n  - Default `closeOnSelect` prop: `true`\n\n  **Behavior:** The picker will call `onAccept` when selecting the year.\n\n- ```tsx\n  <DesktopTimePicker />\n  ```\n\n  - Default `views` prop: `['hours', 'minutes']` (plus a `meridiem` view if the locale is in 12-hours format)\n  - Default `closeOnSelect` prop: `true`\n\n  **Behavior:** The picker will call `onAccept` when selecting the minutes or meridiem (if a 12-hour clock is used)."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "When the picker is manually closed",
                  "introduction": [
                    "When the picker is manually closed\n\nWhen the user presses <kbd class=\"key\">Escape</kbd> or clicks outside the picker, `onAccept` is called with:\n\n- the current value, if the last view has been completed\n- the last accepted value, if the last view has not been completed"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "When a value is selected using the action bar",
                  "introduction": [
                    "When a value is selected using the action bar\n\nIf the component is controlled (i.e: if it has a `value` prop),\nclicking on any built-in actions will call `onAccept` if the value to publish is different from the current value.\n\nIf the component is not controlled, the behavior is the same, except for the _Clear_, _Today_, and _OK_ actions that will call `onAccept` if no value has ever been published, even if the current value equals the value to publish."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "When a shortcut is picked",
                  "introduction": [
                    "When a shortcut is picked\n\nClicking on a shortcut will call `onAccept`, except if the `changeImportance` property has been set to `\"set\"` instead of `\"accept\"`.\nYou can find more information [in the dedicated doc section](/x/react-date-pickers/shortcuts/#behavior-when-selecting-a-shortcut)."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Classic scenarios",
          "introduction": [
            "Classic scenarios"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "\"DatePicker\" on desktop",
              "introduction": [
                "\"DatePicker\" on desktop"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Controlled \"DesktopDatePicker\": basic usage",
                  "introduction": [
                    "Controlled \"DesktopDatePicker\": basic usage\n\n```tsx\n<DesktopDatePicker value={value} onChange={(newValue) => setValue(newValue)} />\n```\n\n**Action n°1:** Opening the picker\n\n- Opens the picker on the `day` view\n\n**Action n°2:** Clicking on a day\n\n- Fires `onClose` (and closes the picker if the `open` prop is not controlled)\n- Fires `onChange` with the selected day (keeps the time of the previous value)\n- Fires `onAccept` with the selected day (keeps the time of the previous value)"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Controlled \"DesktopDatePicker\": picking year, month and day",
                  "introduction": [
                    "Controlled \"DesktopDatePicker\": picking year, month and day\n\n```tsx\n<DesktopDatePicker\n  value={value}\n  onChange={(newValue) => setValue(newValue)}\n  views={['year', 'month', 'day']}\n/>\n```\n\n**Action n°1:** Opening the picker\n\n- Opens the picker on the `day` view\n\n**Action n°2:** Switch to the `year` view on the header\n\n**Action n°3:** Clicking on a year\n\n- Fires `onChange` with the selected year (keeps the month, date and time of the previous value)\n- Moves to the `month` view\n\n**Action n°4:** Clicking on a month\n\n- Fires `onChange` with the selected month (keeps the date and time of the previous value)\n- Moves to the `day` view\n\n**Action n°4:** Clicking on a day\n\n- Fires `onClose` (and closes the picker if the `open` prop is not controlled)\n- Fires `onChange` with the selected day (keeps the time of the previous value)\n- Fires `onAccept` with the selected day (keeps the time of the previous value)"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "\"DatePicker\" on mobile",
              "introduction": [
                "\"DatePicker\" on mobile"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Controlled \"MobileDatePicker\": basic usage",
                  "introduction": [
                    "Controlled \"MobileDatePicker\": basic usage\n\n```tsx\n<MobileDatePicker value={value} onChange={(newValue) => setValue(newValue)} />\n```\n\n**Action n°1:** Opening the picker\n\n- Opens the picker on the `day` view\n\n**Action n°2:** Clicking on a day\n\n- Fires `onChange` with the selected day (keeps the time of the previous value)\n\n**Action n°3:** Clicking on the _OK_ action\n\n- Fires `onClose` (and closes the picker if the `open` prop is not controlled)\n- Fires `onAccept` with the selected day (keeps the time of the previous value)"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Only update for valid values",
          "introduction": [
            "Only update for valid values\n\nThe `onChange` callback receives a 2nd parameter (context object) containing the validation error associated with the current value.\nIf you want to update your state only when the value is valid, you can ignore any `onChange` call with a non-null `validationError`.\n\nIn the example below, `onChange` will only be called if the date is valid and its year is 2022:"
          ],
          "code_path": [
            "LifeCycleIgnoreInvalidValue.js"
          ],
          "children": []
        },
        {
          "name": "Server interaction",
          "introduction": [
            "Server interaction\n\nIf the selected value is used to interact with the server, you might want to avoid sending all the intermediate states.\n\nEspecially if the user is setting the date using the keyboard arrow interaction.\n\nIn such a case, the recommended UI is to add a button for validating the form.\nIf for some reason, you need to send the data to the server without having the user pressing a validation button, you can debounce the `onChange` as follows.\n\nThe following demo shows how to extend the Date Field component by adding an `onAccept` prop, which is a debounced version of `onChange`.\nYou can find more information about the `onAccept` prop [in the dedicated doc section](/x/react-date-pickers/lifecycle/#lifecycle-on-pickers-quot-onaccept-quot)."
          ],
          "code_path": [
            "ServerInteraction.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->custom-components",
      "introduction": [
        "# Custom slots and subcomponents\n\n<p class=\"description\">Learn how to override parts of the Date and Time Pickers.</p>\n\n:::info\nThe components that can be customized are listed under `slots` section in Date and Time Pickers [API Reference](/x/api/date-pickers/).\nFor example, available Date Picker slots can be found [here](/x/api/date-pickers/date-picker/#slots).\n:::\n\n:::success\nSee [Common concepts—Slots and subcomponents](/x/common-concepts/custom-components/) to learn how to use slots.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Action bar",
          "introduction": [
            "Action bar"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Component props",
              "introduction": [
                "Component props\n\nThe action bar is available on all picker components.\nBy default, it contains no action on desktop, and the actions **Cancel** and **Accept** on mobile.\n\nYou can override the actions displayed by passing the `actions` prop to the `actionBar` within `slotProps`, as shown here:\n\n```jsx\n<DatePicker\n  slotProps={{\n    // The actions will be the same between desktop and mobile\n    actionBar: {\n      actions: ['clear'],\n    },\n    // The actions will be different between desktop and mobile\n    actionBar: ({ variant }) => ({\n      actions: variant === 'desktop' ? [] : ['clear'],\n    }),\n  }}\n/>\n```\n\nIn the example below, the action bar contains only one button, which resets the selection to today's date:"
              ],
              "code_path": [
                "ActionBarComponentProps.js"
              ],
              "children": [
                {
                  "name": "Available actions",
                  "introduction": [
                    "Available actions\n\nThe built-in `ActionBar` component supports four different actions:\n\n| Action   | Behavior                                                               |\n| :- | :--- |\n| `accept` | Accept the current value and close the picker view                     |\n| `cancel` | Reset to the last accepted date and close the picker view              |\n| `clear`  | Reset to the empty value and close the picker view                     |\n| `today`  | Reset to today's date (and time if relevant) and close the picker view |"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Component",
              "introduction": [
                "Component\n\nIf you need to customize the date picker beyond the options described above, you can provide a custom component.\nThis can be used in combination with `slotProps`.\n\nIn the example below, the actions are the same as in the section above, but they are rendered inside a menu:"
              ],
              "code_path": [
                "ActionBarComponent.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Tabs",
          "introduction": [
            "Tabs\n\nThe tabs are available on all date time picker components.\nIt allows switching between date and time interfaces."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Component props",
              "introduction": [
                "Component props\n\nYou can override the icons displayed by passing props to the `tabs` within `slotProps`, as shown here:\n\n```jsx\n<DateTimePicker\n  slotProps={{\n    tabs: {\n      dateIcon: <LightModeIcon />,\n      timeIcon: <AcUnitIcon />,\n    },\n  }}\n/>\n```\n\nBy default, the tabs are `hidden` on desktop, and `visible` on mobile.\nThis behavior can be overridden by setting the `hidden` prop:\n\n```jsx\n<DateTimePicker\n  slotProps={{\n    tabs: {\n      hidden: false,\n    },\n  }}\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Component",
              "introduction": [
                "Component\n\nIf you need to customize the date time picker beyond the options described above, you can provide a custom component.\nThis can be used in combination with `slotProps`.\n\nIn the example below, the tabs are using different icons and have an additional component:"
              ],
              "code_path": [
                "Tabs.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Toolbar",
          "introduction": [
            "Toolbar\n\nThe toolbar is available on all date time picker components.\nIt displays the current values and allows to switch between different views."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Component props",
              "introduction": [
                "Component props\n\nYou can customize how the toolbar displays the current value with `toolbarFormat`.\nBy default, empty values are replaced by `__`.\nThis can be modified by using `toolbarPlaceholder` props.\n\nBy default, the toolbar is `hidden` on desktop, and `visible` on mobile.\nThis behavior can be overridden by setting the `hidden` prop:\n\n```jsx\n<DatePicker\n  slotProps={{\n    toolbar: {\n      // Customize value display\n      toolbarFormat: 'YYYY',\n      // Change what is displayed given an empty value\n      toolbarPlaceholder: '??',\n      // Show the toolbar\n      hidden: false,\n    },\n  }}\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Component",
              "introduction": [
                "Component\n\nEach component comes with its own toolbar (`DatePickerToolbar`, `TimePickerToolbar`, and `DateTimePickerToolbar`) that you can reuse and customize."
              ],
              "code_path": [
                "ToolbarComponent.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Calendar header",
          "introduction": [
            "Calendar header\n\nThe calendar header is available on any component that renders a calendar to select a date or a range of dates.\nIt allows the user to navigate through months and to switch to the month and year views when available."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Component props",
              "introduction": [
                "Component props\n\nYou can pass props to the calendar header as shown below:"
              ],
              "code_path": [
                "CalendarHeaderComponentProps.js"
              ],
              "children": []
            },
            {
              "name": "Component",
              "introduction": [
                "Component\n\nYou can pass a custom component to replace the header, as shown below:",
                "When used with a date range component,\nyou receive three additional props to let you handle scenarios where multiple months are rendered:\n\n- `calendars`: The number of calendars rendered\n- `month`: The month used for the header being rendered\n- `monthIndex`: The index of the month used for the header being rendered\n\nThe demo below shows how to navigate the months two by two:"
              ],
              "code_path": [
                "CalendarHeaderComponent.js",
                "CalendarHeaderComponentRange.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Year button",
          "introduction": [
            "Year button\n\nThis button allows users to change the selected year in the `year` view."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Component props",
              "introduction": [
                "Component props\n\nYou can pass props to the year button as shown below:"
              ],
              "code_path": [
                "YearButtonComponentProps.js"
              ],
              "children": []
            },
            {
              "name": "Component",
              "introduction": [
                "Component\n\nYou can pass a custom component to replace the year button, as shown below:"
              ],
              "code_path": [
                "YearButtonComponent.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Month button",
          "introduction": [
            "Month button\n\nThis button allows users to change the selected month in the `month` view.\n\n:::success\nYou can learn more on how to enable the `month` view on the [`DateCalendar` doc page](/x/react-date-pickers/date-calendar/#views).\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Component props",
              "introduction": [
                "Component props\n\nYou can pass props to the month button as shown below:"
              ],
              "code_path": [
                "MonthButtonComponentProps.js"
              ],
              "children": []
            },
            {
              "name": "Component",
              "introduction": [
                "Component\n\nYou can pass a custom component to replace the month button, as shown below:"
              ],
              "code_path": [
                "MonthButtonComponent.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Arrow switcher",
          "introduction": [
            "Arrow switcher\n\nThe following slots let you customize how to render the buttons and icons for an arrow switcher: the component used\nto navigate to the \"Previous\" and \"Next\" steps of the picker: `PreviousIconButton`, `NextIconButton`, `LeftArrowIcon`, `RightArrowIcon`."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Component props",
              "introduction": [
                "Component props\n\nYou can pass props to the icons and buttons as shown below:"
              ],
              "code_path": [
                "ArrowSwitcherComponentProps.js"
              ],
              "children": []
            },
            {
              "name": "Component",
              "introduction": [
                "Component\n\nYou can pass custom components to replace the icons, as shown below:"
              ],
              "code_path": [
                "ArrowSwitcherComponent.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Shortcuts",
          "introduction": [
            "Shortcuts\n\nYou can add shortcuts to every Picker component.\nFor more information, check the [dedicated page](/x/react-date-pickers/shortcuts/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->time-range-picker",
      "introduction": [
        "# Time Range Picker [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')🚧\n\n<p class=\"description\">The Time Range Picker lets the user select a range of time.</p>\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\n👍 Upvote [issue #4460](https://github.com/mui/mui-x/issues/4460) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "date-pickers->date-calendar",
      "introduction": [
        "# Date Calendar\n\n<p class=\"description\">The Date Calendar component lets users select a date without any input or popper / modal.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicDateCalendar.js"
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DateCalendarValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Form props",
          "introduction": [
            "Form props\n\nThe component can be disabled or read-only."
          ],
          "code_path": [
            "DateCalendarFormProps.js"
          ],
          "children": []
        },
        {
          "name": "Views",
          "introduction": [
            "Views\n\nThe component can contain three views: `day`, `month`, and `year`.\nBy default, only the `day` and `year` views are enabled.\n\nYou can customize the enabled views using the `views` prop.\nViews will appear in the order they're included in the `views` array."
          ],
          "code_path": [
            "DateCalendarViews.js"
          ],
          "children": []
        },
        {
          "name": "Choose the initial year / month",
          "introduction": [
            "Choose the initial year / month\n\nIf `value` or `defaultValue` contains a valid date, this date will be used to choose which month to render in the `day` view and which year to render in the `month` view.\nIf both `value` and `defaultValue` contain no valid date, the component will try to find a month and year that satisfies the validation rules.\n\nYou can override this date using the `referenceDate`, in the example below the calendar renders April 2022 even though no date is visually selected:",
            ":::success\nLearn more about the `referenceDate` in the [dedicated doc section](/x/react-date-pickers/base-concepts/#reference-date-when-no-value-is-defined).\n:::"
          ],
          "code_path": [
            "DateCalendarReferenceDate.js",
            null
          ],
          "children": []
        },
        {
          "name": "Month and Year Calendar",
          "introduction": [
            "Month and Year Calendar\n\nIf you only need the `year` view or the `month` view, you can use the `YearCalendar` / `MonthCalendar` components:"
          ],
          "code_path": [
            "YearMonthCalendar.js"
          ],
          "children": [
            {
              "name": "Order of years",
              "introduction": [
                "Order of years\n\nBy default, years are displayed in ascending order, chronologically from the minimum year to the maximum.\nSet the `yearsOrder` prop to `desc` to show the years in descending order."
              ],
              "code_path": [
                "YearsOrderDescendingCalendar.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Day view customization",
          "introduction": [
            "Day view customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Show additional days",
              "introduction": [
                "Show additional days\n\nTo show all days of displayed weeks, including those outside of the current month, use `showDaysOutsideCurrentMonth`.\n\nBy default, only weeks of the current month are displayed, but you can provide a total number of weeks to display with `fixedWeekNumber` prop.\nThis value is usually set to `6` for Gregorian calendars, because month display can vary between 4 and 6 weeks."
              ],
              "code_path": [
                "CustomMonthLayout.js"
              ],
              "children": []
            },
            {
              "name": "Display week number",
              "introduction": [
                "Display week number\n\nTo display week number, use the `displayWeekNumber`.\nYou can customize the calendar week header by using the localization key `localeText.calendarWeekNumberHeaderText`.\nYou can also customize what's rendered as a calendar week number, using a callback for the localization key `localeText.calendarWeekNumberText`."
              ],
              "code_path": [
                "AddWeekNumber.js"
              ],
              "children": []
            },
            {
              "name": "Week picker",
              "introduction": [
                "Week picker\n\nYou can select the whole week using the `day` component slot:"
              ],
              "code_path": [
                "WeekPicker.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Dynamic data",
          "introduction": [
            "Dynamic data\n\nSometimes it may be necessary to display additional info right in the calendar.\nThe following demo shows how to add a badge on some day based on server-side data:"
          ],
          "code_path": [
            "DateCalendarServerRequest.js"
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->time-field",
      "introduction": [
        "# Time Field\n\n<p class=\"description\">The Time Field component lets the user select a time with the keyboard.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicTimeField.js"
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "TimeFieldValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Customize the time format",
              "introduction": [
                "Customize the time format",
                ":::info\nSee [Date format and localization—Custom formats](/x/react-date-pickers/adapters-locale/#custom-formats) for more details.\n:::"
              ],
              "code_path": [
                "CustomTimeFormat.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->date-time-range-field",
      "introduction": [
        "# Date Time Range Field [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">The Date Time Range Field lets the user select a range of dates with an explicit starting and ending time with the keyboard.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage\n\n:::info\nAll the topics covered below are applicable to both `SingleInputDateTimeRangeField` and `MultiInputDateTimeRangeField` unless explicitly mentioned.\n:::\n\nYou can render your Date Time Range Field with either one input using `SingleInputDateTimeRangeField`\nor two inputs using `MultiInputDateTimeRangeField` as show below."
          ],
          "code_path": [
            "BasicDateTimeRangeField.js"
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DateTimeRangeFieldValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->date-range-calendar",
      "introduction": [
        "# Date Range Calendar [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">The Date Range Calendar lets the user select a range of dates without any input or popper / modal.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicDateRangeCalendar.js"
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DateRangeCalendarValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Form props",
          "introduction": [
            "Form props\n\nThe component can be disabled or read-only."
          ],
          "code_path": [
            "DateRangeCalendarFormProps.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Choose the months to render",
              "introduction": [
                "Choose the months to render\n\nYou can render up to 3 months at the same time using the `calendars` prop:",
                "You can choose the position the current month is rendered in using the `currentMonthCalendarPosition` prop.\nThis can be useful when using `disableFuture` to render the current month and the month before instead of the current month and the month after."
              ],
              "code_path": [
                "DateRangeCalendarCalendarsProp.js",
                "DateRangeCalendarCurrentMonthCalendarPositionProp.js"
              ],
              "children": []
            },
            {
              "name": "Custom day rendering",
              "introduction": [
                "Custom day rendering\n\nThe displayed days are customizable with the `Day` component slot.\nYou can take advantage of the [DateRangePickerDay](/x/api/date-pickers/date-range-picker-day/) component."
              ],
              "code_path": [
                "CustomDateRangePickerDay.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->time-range-field",
      "introduction": [
        "# Time Range Field [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">The Time Range Field lets the user select a range of time with the keyboard.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage\n\n:::info\nAll the topics covered below are applicable to both `SingleInputTimeRangeField` and `MultiInputTimeRangeField` unless explicitly mentioned.\n:::\n\nYou can render your Time Range Field with either one input using `SingleInputTimeRangeField`\nor two inputs using `MultiInputTimeRangeField` as show below."
          ],
          "code_path": [
            "BasicTimeRangeField.js"
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "TimeRangeFieldValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->calendar-systems",
      "introduction": [
        "# Calendar systems\n\n<p class=\"description\">Use the Date and Time Pickers with non-Gregorian calendars.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Jalali",
          "introduction": [
            "Jalali\n\nYou can use either the `AdapterDateFnsJalali` adapter, which is based on [date-fns-jalali](https://www.npmjs.com/package/date-fns-jalali),\nor the `AdapterMomentJalaali` adapter, which is based on [moment-jalaali](https://www.npmjs.com/package/moment-jalaali).\n\nThe following demo shows how to use the `date-fns-jalali` adapter:",
            ":::info\nWe support `date-fns-jalali` package v2.x, v3.x, and v4.x major versions.\n\nA single adapter cannot work for all `date-fns-jalali` versions, because the way functions are exported has been changed in v3.x.\n\nTo use `date-fns-jalali` v2.x, you need to import the adapter from `@mui/x-date-pickers/AdapterDateFnsJalaliV2` instead of `@mui/x-date-pickers/AdapterDateFnsJalali`.\n\n```tsx\n// with date-fns-jalali v3.x or v4.x\nimport { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalali';\n// with date-fns-jalali v2.x\nimport { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalaliV2';\n```\n\n:::\n\nThe following demo shows how to use the `moment-jalaali` adapter:"
          ],
          "code_path": [
            "AdapterJalali.js",
            "AdapterMomentJalali.js"
          ],
          "children": []
        },
        {
          "name": "Hijri",
          "introduction": [
            "Hijri\n\nYou can use the `AdapterMomentHijri` adapter, which is based on [moment-hijri](https://www.npmjs.com/package/moment-hijri):",
            ":::error\nThe adapter with `moment-hijri` does not support the new fields components because the date library seems buggy when parsing a month only.\nIf you want to help on the support of hijri calendar, please have a look at [this issue](https://github.com/xsoh/moment-hijri/issues/83).\n\nThe demo is based on the [Custom Field—Using a Button](/x/react-date-pickers/custom-field/#using-a-button) demo to let you pick a value using only the view.\nYou can have a look at the other demos in the [Custom Field—With a custom editing experience](/x/react-date-pickers/custom-field/#with-a-custom-editing-experience) section if you want a different editing experience that works with `AdapterMomentHijri`.\n:::"
          ],
          "code_path": [
            "AdapterHijri.js",
            null
          ],
          "children": []
        },
        {
          "name": "Unsupported libraries",
          "introduction": [
            "Unsupported libraries\n\nIf you need to use a date library that is not supported yet, please [open an issue](https://github.com/mui/mui-x/issues/new/choose) in the MUI X repository."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->getting-started",
      "introduction": [
        "# Date and Time Pickers - Getting started\n\n<p class=\"description\">Install the Date and Time Pickers package and set up your date library to start building.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Installation",
          "introduction": [
            "Installation\n\nInstall the base package (which can either be the free Community version or the paid Pro version) along with a required third-party date library.\nThe Pickers currently support [Day.js](https://day.js.org/), [date-fns](https://date-fns.org/), [Luxon](https://moment.github.io/luxon/#/), and [Moment.js](https://momentjs.com/).\n\nChoose your packages and manager through the toggles below, then run the commands as provided to install:\n\n<!-- #default-branch-switch -->\n\n{{\"component\": \"modules/components/PickersInstallationInstructions.js\"}}\n\n:::success\nNot sure which date library to choose?\nIf you're starting from scratch with no other date libraries in your app, we recommend Day.js because of its small bundle size.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Peer dependencies",
              "introduction": [
                "Peer dependencies"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Material UI",
                  "introduction": [
                    "Material UI\n\nThe Date and Time Pickers have a peer dependency on `@mui/material`.\nIf you're not already using it, install it with the following command:\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n```bash pnpm\npnpm add @mui/material @emotion/react @emotion/styled\n```\n\n```bash yarn\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n</codeblock>"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "React",
                  "introduction": [
                    "React\n\n<!-- #react-peer-version -->\n\n[`react`](https://www.npmjs.com/package/react) and [`react-dom`](https://www.npmjs.com/package/react-dom) are also peer dependencies:\n\n```json\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n},\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Date library adapter setup",
          "introduction": [
            "Date library adapter setup\n\nTo integrate your chosen date library with the Date and Time Pickers, you'll need to plug the corresponding adapter into a `LocalizationProvider` that wraps your Picker components.\n\nAdapters are provided for each of the supported libraries, and all are exported by both `@mui/x-date-pickers` and `@mui/x-date-pickers-pro`—for example,`AdapterDayjs`, which is used throughout this documentation for [Day.js](https://day.js.org/) integration:\n\n```tsx\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { AdapterDayjs } from '@mui/x-date-pickers-pro/AdapterDayjs';\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "LocalizationProvider",
              "introduction": [
                "LocalizationProvider\n\nThe `LocalizationProvider` component is exported by both `@mui/x-date-pickers` and `@mui/x-date-pickers-pro`:\n\n```tsx\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { LocalizationProvider } from '@mui/x-date-pickers-pro/LocalizationProvider';\n```\n\n:::warning\nFor practical purposes, each demo in the documentation has its own `LocalizationProvider` wrapper.\n**We _do not_ recommend reproducing this pattern as-is.**\nFor almost all use cases, you should wrap your entire app with a single `LocalizationProvider` to avoid repeating boilerplate code in multiple places.\n:::\n\n{{\"component\": \"modules/components/PickersRenderingInstructions.js\"}}\n\n:::info\nTo use the Date and Time Pickers with a custom locale, see [Date and format localization](/x/react-date-pickers/adapters-locale/).\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Render your first component",
          "introduction": [
            "Render your first component\n\nTo confirm that everything is set up correctly, try rendering a basic Date Picker component:"
          ],
          "code_path": [
            "FirstComponent.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->date-picker",
      "introduction": [
        "# Date Picker\n\n<p class=\"description\">The Date Picker component lets users select a date.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicDatePicker.js"
          ],
          "children": []
        },
        {
          "name": "Component composition",
          "introduction": [
            "Component composition\n\nThe component is built using the `DateField` for the keyboard editing and the `DateCalendar` for the view editing.\n\nCheck-out their documentation page for more information:\n\n- [Date Field](/x/react-date-pickers/date-field/)\n- [Date Calendar](/x/react-date-pickers/date-calendar/)\n\nYou can check the available props of the combined component on the dedicated [API page](/x/api/date-pickers/date-picker/#props).\nSome [DateField props](/x/api/date-pickers/date-field/#props) are not available on the Picker component, you can use `slotProps.field` to pass them to the field."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DatePickerValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Available components",
          "introduction": [
            "Available components\n\nThe component is available in four variants:\n\n- The `DesktopDatePicker` component which works best for mouse devices and large screens.\n  It renders the views inside a popover and a field for keyboard editing.\n\n- The `MobileDatePicker` component which works best for touch devices and small screens.\n  It renders the view inside a modal and a field for keyboard editing.\n\n- The `DatePicker` component which renders `DesktopDatePicker` or `MobileDatePicker` depending on the device it runs on.\n\n- The `StaticDatePicker` component which renders without the popover/modal and field.",
            "By default, the `DatePicker` component renders the desktop version if the media query [`@media (pointer: fine)`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/pointer) matches.\nThis can be customized with the `desktopModeMediaQuery` prop.\n\n:::warning\nResponsive components can suffer some inconsistencies between testing environments if media query is not supported.\nPlease refer to [this section](/x/react-date-pickers/base-concepts/#testing-caveats) for solutions.\n:::"
          ],
          "code_path": [
            "ResponsiveDatePickers.js",
            null
          ],
          "children": []
        },
        {
          "name": "Form props",
          "introduction": [
            "Form props\n\nThe component can be disabled or read-only."
          ],
          "code_path": [
            "FormPropsDatePickers.js"
          ],
          "children": []
        },
        {
          "name": "Views",
          "introduction": [
            "Views\n\nThe component supports three views: `day`, `month`, and `year`.\n\nBy default, the `day` and `year` views are enabled.\nUse the `views` prop to change this behavior:",
            "By default, the component renders the `day` view on mount.\nUse the `openTo` prop to change this behavior:",
            ":::success\nThe views will appear in the order defined by the `views` array.\nIf the view defined in `openTo` is not the first view, then the views before will not be included in the default flow\n(for example view the default behaviors, the `year` is only accessible when clicking on the toolbar).\n:::"
          ],
          "code_path": [
            "DatePickerViews.js",
            "DatePickerOpenTo.js",
            null
          ],
          "children": []
        },
        {
          "name": "Order of years",
          "introduction": [
            "Order of years\n\nBy default, years are displayed in ascending order, chronologically from the minimum year to the maximum.\nSet the `yearsOrder` prop to `desc` to show the years in descending order."
          ],
          "code_path": [
            "DatePickerYearsOrder.js"
          ],
          "children": []
        },
        {
          "name": "Landscape orientation",
          "introduction": [
            "Landscape orientation\n\nBy default, the Date Picker component automatically sets the orientation based on the `window.orientation` value.\nYou can force a specific orientation using the `orientation` prop:",
            ":::info\nYou can find more information about the layout customization in the [custom layout page](/x/react-date-pickers/custom-layout/).\n:::"
          ],
          "code_path": [
            "StaticDatePickerLandscape.js",
            null
          ],
          "children": []
        },
        {
          "name": "Helper text",
          "introduction": [
            "Helper text\n\nYou can show a helper text with the date format accepted:"
          ],
          "code_path": [
            "HelperText.js"
          ],
          "children": []
        },
        {
          "name": "Clearing the value",
          "introduction": [
            "Clearing the value\n\nYou can enable the clearable behavior:",
            ":::info\nSee [Field components—Clearable behavior](/x/react-date-pickers/fields/#clearable-behavior) for more details.\n:::"
          ],
          "code_path": [
            "ClearableProp.js",
            null
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nYou can check out multiple examples of how to customize the date pickers and their subcomponents."
          ],
          "code_path": [
            "CustomizationExamplesNoSnap.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->shortcuts",
      "introduction": [
        "# Shortcuts\n\n<p class=\"description\">The date picker lets you add custom shortcuts.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Adding shortcuts",
          "introduction": [
            "Adding shortcuts\n\nBy default, pickers use the `PickersShortcuts` component to display shortcuts.\nThis component accepts a `shortcuts` prop as an array of `PickersShortcutsItem`.\nThose items are made of two required attributes:\n\n- `label`: The string displayed on the shortcut chip. This property must be unique.\n- `getValue`: A function that returns the value associated to the shortcut.\n\nYou can use `slotProps.shortcuts` to customize this prop. For example to add a shortcut to Christmas Day, you can do the following:\n\n```jsx\n<DatePicker\n  slotProps={{\n    shortcuts: {\n      items: [\n        {\n          label: 'Christmas',\n          getValue: () => {\n            return dayjs(new Date(2023, 11, 25));\n          },\n        },\n      ],\n    },\n  }}\n/>\n```"
          ],
          "code_path": [
            "BasicShortcuts.js"
          ],
          "children": []
        },
        {
          "name": "Disabled dates",
          "introduction": [
            "Disabled dates\n\nBy default, the shortcuts are disabled if the returned value does not pass validation.\nHere is an example where `minDate` is set to the middle of the year."
          ],
          "code_path": [
            "DisabledDatesShortcuts.js"
          ],
          "children": []
        },
        {
          "name": "Range shortcuts [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Range shortcuts [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nShortcuts on range pickers require `getValue` property to return an array with two values."
          ],
          "code_path": [
            "BasicRangeShortcuts.js"
          ],
          "children": []
        },
        {
          "name": "Advanced shortcuts",
          "introduction": [
            "Advanced shortcuts"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Use validation to get the value",
              "introduction": [
                "Use validation to get the value\n\nThe `getValue` methods receive a `isValid` helper function.\nYou can use it to test if a value is valid or not based on the [validation props](/x/react-date-pickers/validation/).\n\nIn the following demonstration, it is used to get the next available week and weekend."
              ],
              "code_path": [
                "AdvancedRangeShortcuts.js"
              ],
              "children": []
            },
            {
              "name": "Know which shortcut has been selected",
              "introduction": [
                "Know which shortcut has been selected\n\nThe `onChange` callback receives the shortcut as a property of it's second argument.\nYou can use it to know, which shortcut has been chosen:"
              ],
              "code_path": [
                "OnChangeShortcutLabel.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Behavior when selecting a shortcut",
          "introduction": [
            "Behavior when selecting a shortcut\n\nYou can change the behavior when selecting a shortcut using the `changeImportance` property:\n\n- `\"accept\"` (_default value_): fires `onChange`, fires `onAccept` and closes the picker.\n- `\"set\"`: fires `onChange` but do not fire `onAccept` and does not close the picker."
          ],
          "code_path": [
            "ChangeImportance.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nLike other [layout's subcomponent](/x/react-date-pickers/custom-layout/), the shortcuts can be customized.\nHere is an example with horizontal shortcuts."
          ],
          "code_path": [
            "CustomizedRangeShortcuts.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->date-range-field",
      "introduction": [
        "# Date Range Field [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">The Date Range Field lets the user select a date range with the keyboard.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage\n\nYou can render your Date Range Field with either one input using `SingleInputDateRangeField`\nor two inputs using `MultiInputDateRangeField` as show below.\n\n:::info\nAll the topics covered below are applicable to both `SingleInputDateRangeField` and `MultiInputDateRangeField` unless explicitly mentioned.\n:::"
          ],
          "code_path": [
            "BasicDateRangeField.js"
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DateRangeFieldValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->fields",
      "introduction": [
        "# Fields component\n\n<p class=\"description\">The field components let the user input date and time values with a keyboard and refined keyboard navigation.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThe fields are React components that let you enter a date or time with the keyboard, without using any popover or modal UI.\nThey provide refined navigation through arrow keys and support advanced behaviors like localization and validation."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Fields to edit a single element",
              "introduction": [
                "Fields to edit a single element"
              ],
              "code_path": [
                "SingleDateFieldExamples.js"
              ],
              "children": []
            },
            {
              "name": "Fields to edit a range [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
              "introduction": [
                "Fields to edit a range [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nAll fields to edit a range are available in a single input version and in a multi input version."
              ],
              "code_path": [
                "DateRangeFieldExamples.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Advanced",
          "introduction": [
            "Advanced"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "What is a section?",
              "introduction": [
                "What is a section?\n\nIn the field components, the date is divided into several sections, each one responsible for the edition of a date token.\nFor example, if the format passed to the field is `MM/DD/YYYY`, the field will create 3 sections:\n\n- A `month` section for the token `MM`\n- A `day` section for the token `DD`\n- A `year` section for the token `YYYY`\n\nThose sections are independent, pressing <kbd class=\"key\">ArrowUp</kbd> while focusing the `day` section will add one day to the date, but it will never change the month or the year."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Control the selected sections",
              "introduction": [
                "Control the selected sections\n\nUse the `selectedSections` and `onSelectedSectionsChange` props to control which sections are currently being selected.\n\nThis prop accepts the following formats:\n\n1. If a number is provided, the section at this index will be selected.\n2. If `\"all\"` is provided, all the sections will be selected.\n3. If an object with a `startIndex` and `endIndex` fields are provided, the sections between those two indexes will be selected.\n4. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n5. If `null` is provided, no section will be selected\n\n:::warning\nYou need to make sure the input is focused before imperatively updating the selected sections.\n:::"
              ],
              "code_path": [
                "ControlledSelectedSections.js"
              ],
              "children": [
                {
                  "name": "Usage with multi input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
                  "introduction": [
                    "Usage with multi input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nFor multi input range fields, you just have to make sure that the right input is focused before updating the selected section(s).\nOtherwise, the section(s) might be selected on the wrong input."
                  ],
                  "code_path": [
                    "ControlledSelectedSectionsMultiInputRangeField.js"
                  ],
                  "children": []
                },
                {
                  "name": "Usage with single input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
                  "introduction": [
                    "Usage with single input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nFor single input range fields, you won't be able to use the section name to select a single section because each section is present both in the start and in the end date.\nInstead, you can pass the index of the section using the `unstableFieldRef` prop to access the full list of sections:\n\n:::warning\nThe `unstableFieldRef` is not stable yet. More specifically, the shape of the `section` object might be modified in the near future.\nPlease only use it if needed.\n:::"
                  ],
                  "code_path": [
                    "ControlledSelectedSectionsSingleInputRangeField.js"
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Clearable behavior",
              "introduction": [
                "Clearable behavior\n\nYou can use the `clearable` prop to enable the clearing behavior on a field. You can also add an event handler using the `onClear` callback prop.\n\n:::info\nFor **multi-input** range fields the clearable behavior is not supported yet.\n:::",
                "You can also customize the icon you want to be displayed inside the clear `IconButton`."
              ],
              "code_path": [
                "ClearableBehavior.js",
                "CustomizeClearIcon.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "date-pickers->base-concepts",
      "introduction": [
        "# Date and Time Pickers - Base concepts\n\n<p class=\"description\">The Date and Time Pickers expose a lot of components to fit your every need.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Controlled value",
          "introduction": [
            "Controlled value\n\nAll the components have a `value` / `onChange` API to set and control the values:"
          ],
          "code_path": [
            "ControlledComponent.js"
          ],
          "children": []
        },
        {
          "name": "Imports",
          "introduction": [
            "Imports\n\nAll the components exported by `@mui/x-date-pickers` are also exported by `@mui/x-date-pickers-pro` but without the nested imports.\n\nFor example, to use the `DatePicker` component, the following three imports are valid:\n\n```tsx\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { DatePicker } from '@mui/x-date-pickers';\nimport { DatePicker } from '@mui/x-date-pickers-pro';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Date library",
          "introduction": [
            "Date library\n\nThe Date and Time Pickers are focused on UI/UX and, like most other picker components available, require a third-party library to format, parse, and mutate dates.\n\nMUI's components let you choose which library you prefer for this purpose.\nThis gives you the flexibility to implement any date library you may already be using in your application, without adding an extra one to your bundle.\n\nTo achieve this, both `@mui/x-date-pickers` and `@mui/x-date-pickers-pro` export a set of **adapters** that expose the date manipulation libraries under a unified API."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Available libraries",
              "introduction": [
                "Available libraries\n\nThe Date and Time Pickers currently support the following date libraries:\n\n- [Day.js](https://day.js.org/)\n- [date-fns](https://date-fns.org/)\n- [Luxon](https://moment.github.io/luxon/#/)\n- [Moment.js](https://momentjs.com/)\n\n:::info\nIf you are using a non-Gregorian calendar (such as Jalali or Hijri), please refer to the [Support for other calendar systems](/x/react-date-pickers/calendar-systems/) page.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Recommended library",
              "introduction": [
                "Recommended library\n\nIf you are already using one of the libraries listed above in your application, then you can keep using it with the Date and Time Pickers as well.\nThis will avoid bundling two libraries.\n\nIf you don't have your own requirements or don't manipulate dates outside of MUI X components, then the recommendation is to use `dayjs` because it has the smallest impact on your application's bundle size.\n\nHere is the weight added to your gzipped bundle size by each of these libraries when used inside the Date and Time Pickers:\n\n| Library           | Gzipped size |\n| :--: |\n| `dayjs@1.11.5`    |      6.77 kB |\n| `date-fns@2.29.3` |     19.39 kB |\n| `luxon@3.0.4`     |     23.26 kB |\n| `moment@2.29.4`   |     20.78 kB |\n\n:::info\nThe results above were obtained in October 2022 with the latest version of each library.\nThe bundling of the JavaScript modules was done by a Create React App, and no locale was loaded for any of the libraries.\n\nThe results may vary in your application depending on the version of each library, the locale, and the bundler used.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Other components",
          "introduction": [
            "Other components"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Choose interaction style",
              "introduction": [
                "Choose interaction style\n\nDepending on your use case, different interaction styles are preferred.\n\n- For input editing with a popover or modal for mouse interaction, use the _Picker_ components:",
                "- For input-only editing, use the _Field_ components:",
                "- For inline editing, use the _Calendar / Clock_ components:",
                ":::info\nEach _Picker_ is a combination of one _Field_ and one or several _Calendar / Clock_ components.\nFor example, the `DatePicker` is the combination of the `DateField` and the `DateCalendar`.\n\nThe _Calendar / Clock_ components are rendered inside a _Popover_ on desktop and inside a _Modal_ on mobile.\n:::"
              ],
              "code_path": [
                "BasicDatePicker.js",
                "BasicDateField.js",
                "BasicDateCalendar.js",
                null
              ],
              "children": []
            },
            {
              "name": "Date or time editing?",
              "introduction": [
                "Date or time editing?\n\nThe Date and Time Pickers are divided into six families of components.\nThe demo below shows each one of them using their field component:"
              ],
              "code_path": [
                "ComponentFamilies.js"
              ],
              "children": []
            },
            {
              "name": "Responsiveness",
              "introduction": [
                "Responsiveness\n\nEach _Picker_ is available in a responsive, desktop and mobile variant:\n\n- The responsive component (for example `DatePicker`) which renders the desktop component or the mobile one depending on the device it runs on.\n\n- The desktop component (for example `DesktopDatePicker`) which works best for mouse devices and large screens.\n  It renders the views inside a popover and a field for keyboard editing.\n\n- The mobile component (for example `MobileDatePicker`) which works best for touch devices and small screens.\n  It renders the view inside a modal and a field for keyboard editing."
              ],
              "code_path": [
                "ResponsivePickers.js"
              ],
              "children": []
            },
            {
              "name": "Find your component",
              "introduction": [
                "Find your component\n\nThere are many components available, each fitting specific use cases. Use the form below to find the component you need:"
              ],
              "code_path": [
                "ComponentExplorerNoSnap.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Reference date when no value is defined",
          "introduction": [
            "Reference date when no value is defined\n\nIf `value` or `defaultValue` contains a valid date, this date will be used to initialize the rendered component.\n\nIn the demo below, you can see that the calendar is set to April 2022 on mount:",
            "When `value` and `defaultValue` contains no valid date, the component will try to find a reference date that passes the validation to initialize its rendering:",
            "You can override this date using the `referenceDate` prop:",
            "This can also be useful to set the part of the value that will not be selectable in the component.\nFor example, in a Time Picker, it allows you to choose the date of your value:"
          ],
          "code_path": [
            "ReferenceDateUsingValue.js",
            "ReferenceDateDefaultBehavior.js",
            "ReferenceDateExplicitDateTimePicker.js",
            "ReferenceDateExplicitTimePicker.js"
          ],
          "children": []
        },
        {
          "name": "TypeScript",
          "introduction": [
            "TypeScript"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Theme augmentation",
              "introduction": [
                "Theme augmentation\n\nTo benefit from the [CSS overrides](/material-ui/customization/theme-components/#theme-style-overrides) and [default prop customization](/material-ui/customization/theme-components/#theme-default-props) with the theme, TypeScript users need to import the following types.\nInternally, it uses module augmentation to extend the default theme structure.\n\n```tsx\nimport type {} from '@mui/x-date-pickers/themeAugmentation';\nimport type {} from '@mui/x-date-pickers-pro/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    MuiDatePicker: {\n      defaultProps: {\n        displayWeekNumber: true,\n      },\n    },\n    MuiDateRangeCalendar: {\n      styleOverrides: {\n        root: {\n          backgroundColor: '#f0f0f0',\n        },\n      },\n    },\n  },\n});\n```\n\n:::info\nYou don't have to import the theme augmentation from both `@mui/x-date-pickers` and `@mui/x-date-pickers-pro` when using `@mui/x-date-pickers-pro`.\nImporting it from `@mui/x-date-pickers-pro` is enough.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Typing of the date",
              "introduction": [
                "Typing of the date\n\nThe Date and Time Pickers components are compatible with several date libraries\nthat use different formats to represent their dates\n(`Date` object for `date-fns`, `daysjs.Dayjs` object for `days-js`, etc.).\nTo correctly type all the props that are date-related, the adapters override a global type named `PickerValidDate`\nto allow the usage of their own date format.\nThis allows TypeScript to throw an error if you try to pass `value={new Date()}` to a component using `AdapterDayjs` for instance.\n\nIf you are not sure your adapter is set up correctly to infer the type of date-related props, you can import the `PickerValidDate` type and check its current value.\n\nIf its equal to the format used by your date library, then you don't have to do anything:\n\n<img src=\"/static/x/date-pickers/picker-valid-date-configured.png\" alt=\"PickerValidDate correctly configured\" />\n\nIf it's equal to `any`, you can fix it by manually importing the adapter in some file of your project as show below:\n\n<img src=\"/static/x/date-pickers/picker-valid-date-not-configured.png\" alt=\"PickerValidDate not correctly configured\" />\n\n```ts\n// Replace `AdapterDayjs` with the adapter you are using.\nimport type {} from '@mui/x-date-pickers/AdapterDayjs';\n```\n\n:::info\nBefore version 7.19.0, TypeScript was throwing an error such as `DesktopDatePickerProps<Date> error Type 'Date' does not satisfy the constraint 'never'`\nwhen you were not importing the adapter in the same TypeScript project as the rest of your codebase.\n\nThe fix described above should also solve the problem.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Testing caveats",
          "introduction": [
            "Testing caveats"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Responsive components",
              "introduction": [
                "Responsive components\n\n:::info\nSome test environments (for example `jsdom`) do not support media query. In such cases, components will be rendered in desktop mode. To modify this behavior you can fake the `window.matchMedia`.\n:::\n\nBe aware that running tests in headless browsers might not pass the default mediaQuery (`pointer: fine`).\nIn such case you can [force pointer precision](https://github.com/microsoft/playwright/issues/7769#issuecomment-1205106311) via browser flags or preferences."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Field components",
              "introduction": [
                "Field components\n\n:::info\nTo support RTL and some keyboard interactions, field components add some Unicode character that are invisible, but appears in the input value.\n:::\n\nTo add tests about a field value without having to care about those characters, you can remove the specific character before testing the equality.\nHere is an example about how to do it.\n\n```js\n// Helper removing specific characters\nconst cleanText = (string) =>\n  string.replace(/\\u200e|\\u2066|\\u2067|\\u2068|\\u2069/g, '');\n\n// Example of a test using the helper\nexpect(cleanText(input.value)).to.equal('04-17-2022');\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Overriding slots and slot props",
          "introduction": [
            "Overriding slots and slot props\n\nDate and Time Pickers are complex components built using many subcomponents known as **slots**.\nSlots are commonly filled by React components that you can override using the `slots` prop.\nYou can also pass additional props to the available slots using the `slotProps` prop.\nLearn more about the mental model of slots in the Base UI documentation: [Overriding component structure](/base-ui/guides/overriding-component-structure/).\n\nYou can find the list of available slots for each component in its respective [API reference](/x/api/date-pickers/date-picker/#slots) doc.\n\nSome parts of the Pickers' UI are built on several nested slots. For instance, the adornment of the `TextField` on `DatePicker` contains three slots (`inputAdornment`, `openPickerButton`, and `openPickerIcon`) that you can use depending on what you are trying to customize.",
            ":::info\nLearn more about overriding slots in the doc page about [Custom slots and subcomponents](/x/react-date-pickers/custom-components/).\n:::"
          ],
          "code_path": [
            "CustomSlots.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->date-time-field",
      "introduction": [
        "# Date Time Field\n\n<p class=\"description\">The Date Time Field component lets users select a date and a time with the keyboard.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicDateTimeField.js"
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DateTimeFieldValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Customize the date time format",
              "introduction": [
                "Customize the date time format",
                ":::info\nSee [Date format and localization—Custom formats](/x/react-date-pickers/adapters-locale/#custom-formats) for more details.\n:::"
              ],
              "code_path": [
                "CustomDateTimeFormat.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->date-time-picker",
      "introduction": [
        "# Date Time Picker\n\n<p class=\"description\">The Date Time Picker component lets users select a date and time.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicDateTimePicker.js"
          ],
          "children": []
        },
        {
          "name": "Component composition",
          "introduction": [
            "Component composition\n\nThe component is built using the `DateTimeField` for the keyboard editing, the `DateCalendar` for the date view editing, the `DigitalClock` for the desktop view editing, and the `TimeClock` for the mobile time view editing.\n\nCheck-out their documentation page for more information:\n\n- [Date Field](/x/react-date-pickers/date-field/)\n- [Date Calendar](/x/react-date-pickers/date-calendar/)\n- [Digital Clock](/x/react-date-pickers/digital-clock/)\n- [Time Clock](/x/react-date-pickers/time-clock/)\n\nYou can check the available props of the combined component on the dedicated [API page](/x/api/date-pickers/date-time-picker/#props).\nSome [DateTimeField props](/x/api/date-pickers/date-time-field/#props) are not available on the Picker component, you can use `slotProps.field` to pass them to the field."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "DateTimePickerValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Available components",
          "introduction": [
            "Available components\n\nThe component is available in four variants:\n\n- The `DesktopDateTimePicker` component which works best for mouse devices and large screens.\n  It renders the views inside a popover and a field for keyboard editing.\n\n- The `MobileDateTimePicker` component which works best for touch devices and small screens.\n  It renders the view inside a modal and a field for keyboard editing.\n\n- The `DateTimePicker` component which renders `DesktopDateTimePicker` or `MobileDateTimePicker` depending on the device it runs on.\n\n- The `StaticDateTimePicker` component which renders without the popover/modal and field.",
            "By default, the `DateTimePicker` component renders the desktop version if the media query [`@media (pointer: fine)`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/pointer) matches.\nThis can be customized with the `desktopModeMediaQuery` prop.\n\n:::warning\nResponsive components can suffer some inconsistencies between testing environments if media query is not supported.\nPlease refer to [this section](/x/react-date-pickers/base-concepts/#testing-caveats) for solutions.\n:::"
          ],
          "code_path": [
            "ResponsiveDateTimePickers.js",
            null
          ],
          "children": []
        },
        {
          "name": "Form props",
          "introduction": [
            "Form props\n\nThe component can be disabled or read-only."
          ],
          "code_path": [
            "FormPropsDateTimePickers.js"
          ],
          "children": []
        },
        {
          "name": "Views",
          "introduction": [
            "Views\n\nThe component supports six views: `day`, `month`, `year`, `hours`, `minutes` and `seconds`.\n\nBy default, the `year`, `day`, `hours`, and `minutes` views are enabled.\nUse the `views` prop to change this behavior:",
            "By default, the component renders the `day` view on mount.\nUse the `openTo` prop to change this behavior:",
            ":::success\nThe views will appear in the order defined by the `views` array.\nIf the view defined in `openTo` is not the first view, then the views before will not be included in the default flow\n(for example view the default behaviors, the `year` is only accessible when clicking on the toolbar).\n:::"
          ],
          "code_path": [
            "DateTimePickerViews.js",
            "DateTimePickerOpenTo.js",
            null
          ],
          "children": []
        },
        {
          "name": "Landscape orientation",
          "introduction": [
            "Landscape orientation\n\nBy default, the Date Time Picker component automatically sets the orientation based on the `window.orientation` value.\n\nYou can force a specific orientation using the `orientation` prop.",
            ":::info\nYou can find more information about the layout customization in the [custom layout page](/x/react-date-pickers/custom-layout/).\n:::"
          ],
          "code_path": [
            "StaticDateTimePickerLandscape.js",
            null
          ],
          "children": []
        },
        {
          "name": "Choose time view renderer",
          "introduction": [
            "Choose time view renderer\n\nYou can use the `viewRenderers` prop to change the view that is used for rendering a view.\nYou might be interested in using the [Time Clock](/x/react-date-pickers/time-clock/) instead of the [Digital Clock](/x/react-date-pickers/digital-clock/) or removing the time view rendering altogether in favor of only using the field to input the time."
          ],
          "code_path": [
            "DateTimePickerViewRenderers.js"
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->overview",
      "introduction": [
        "{{\"component\": \"modules/components/overview/XLogo.tsx\"}}\n\n# MUI X Date and Time Pickers\n\n<p class=\"description\">A collection of React UI components for selecting dates, times, and ranges. </p>\n\n{{\"component\": \"modules/components/overview/MainDemo.tsx\"}}\n\n{{\"component\": \"modules/components/overview/FeatureHighlight.tsx\"}}\n{{\"component\": \"modules/components/overview/CommunityOrPro.tsx\"}}\n{{\"component\": \"modules/components/overview/Customization.tsx\"}}\n{{\"component\": \"modules/components/overview/Keyboard.tsx\"}}\n{{\"component\": \"modules/components/overview/Internationalization.tsx\"}}\n{{\"component\": \"modules/components/overview/DateLibraries.tsx\"}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "date-pickers->accessibility",
      "introduction": [
        "# Accessibility\n\n<p class=\"description\">Learn how the Date and Time Pickers implement accessibility features and guidelines, including keyboard navigation that follows international standards.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Guidelines",
          "introduction": [
            "Guidelines\n\nCommon conformance guidelines for accessibility include:\n\n- Globally accepted standard: [WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/)\n- US:\n  - [ADA](https://www.ada.gov/) - US Department of Justice\n  - [Section 508](https://www.section508.gov/) - US federal agencies\n- Europe: [EAA](https://employment-social-affairs.ec.europa.eu/policies-and-activities/social-protection-social-inclusion/persons-disabilities/union-equality-strategy-rights-persons-disabilities-2021-2030/european-accessibility-act_en) (European Accessibility Act)\n\nWCAG 2.1 has three levels of conformance: A, AA, and AAA.\nLevel AA exceeds the basic criteria for accessibility and is a common target for most organizations, so this is what we aim to support.\n\nThe WAI-ARIA Authoring Practices includes examples on [Date Picker Dialog](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/examples/datepicker-dialog/) and [Date Picker Spin Button](https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/examples/datepicker-spinbuttons/) patterns, which provide valuable information on how to optimize the accessibility of these components."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Dialog considerations",
              "introduction": [
                "Dialog considerations\n\nBoth `Desktop` and `Mobile` Date and Time Pickers are using `role=\"dialog\"` to display their interactive view parts and thus they should follow [Modal accessibility guidelines](/material-ui/react-modal/#accessibility).\nThis behavior is automated as much as possible, ensuring that the Date and Time Pickers are accessible in most cases.\nA correct `aria-labelledby` value is assigned to the dialog component based on the following rules:\n\n- Use `toolbar` id if the toolbar is visible;\n- Use the id of the input label if the toolbar is hidden;\n\n:::info\nMake sure to provide an `aria-labelledby` prop to `popper` and/or `mobilePaper` slots in case you are using Date and Time Pickers component with **hidden toolbar** and **without a label**.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Screen reader compatibility",
          "introduction": [
            "Screen reader compatibility\n\nDate and Time Pickers use ARIA roles and robust focus management across the interactive elements to convey the necessary information to users, being optimized for use with assistive technologies."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Keyboard support",
          "introduction": [
            "Keyboard support\n\nThe Date and Time Pickers consist of different associations of Field, Calendar, and Clock components.\nEach of these components is designed to respond intuitively to keyboard interactions, providing extensive keyboard navigation support."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Fields",
              "introduction": [
                "Fields\n\nThe following table describes the keyboard support for all [field components](/x/react-date-pickers/fields/):\n\n|                                                                  Keys | Description                                  |\n| --: | :- |\n| <kbd class=\"key\">Arrow Left</kbd>, <kbd class=\"key\">Arrow Right</kbd> | Moves focus among date/time sections         |\n|                                       <kbd class=\"key\">Arrow Up</kbd> | Increases focused section value by 1         |\n|                                     <kbd class=\"key\">Arrow Down</kbd> | Decreases focused section value section by 1 |\n|                                        <kbd class=\"key\">Page Up</kbd> | Increases focused section value section by 5 |\n|                                      <kbd class=\"key\">Page Down</kbd> | Decreases focused section value section by 5 |\n|                                           <kbd class=\"key\">Home</kbd> | Sets focused section to the minimal value    |\n|                                            <kbd class=\"key\">End</kbd> | Sets focused section to the maximal value    |"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Date Calendar",
              "introduction": [
                "Date Calendar\n\nAmong the [available view components](https://mui.com/x/react-date-pickers/date-calendar/#views), `day` is the only one that implements specific keyboard support:\n\n|                             Keys | Description                                                     |\n| -: | :-- |\n|   <kbd class=\"key\">Page Up</kbd> | Moves calendar to next month, keeping focus on the same day     |\n| <kbd class=\"key\">Page Down</kbd> | Moves calendar to previous month, keeping focus on the same day |\n|      <kbd class=\"key\">Home</kbd> | Moves focus to the first day of the week                        |\n|       <kbd class=\"key\">End</kbd> | Moves focus to the last day of the week                         |"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Date Picker",
              "introduction": [
                "Date Picker\n\nThe [Date Picker](/x/react-date-pickers/date-picker/) combines the functionalities of the Date Field and Date Calendar components.\n\nDepending on which component is in focus, the Picker will provide the corresponding keyboard support, either from [Date Field](/x/react-date-pickers/accessibility/#fields) or [Date Calendar](/x/react-date-pickers/accessibility/#date-calendar)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Date Range Calendar",
              "introduction": [
                "Date Range Calendar\n\nThe [Date Range Calendar](/x/react-date-pickers/date-range-calendar/) implements a similar keyboard support as the day view of the [Date Calendar](/x/react-date-pickers/accessibility/#date-calendar) component, with a difference on the navigation among the previous and next months that must be achieved using the arrows in the calendar header.\n\n|                                                                                                                                          Keys | Description                                                   |\n| --: | : |\n| <kbd class=\"key\">Arrow Up</kbd>, <kbd class=\"key\">Arrow Down</kbd>,<br> <kbd class=\"key\">Arrow Left</kbd>, <kbd class=\"key\">Arrow Right</kbd> | Moves focus among the available values                        |\n|                                                                                                                <kbd class=\"key\">Page Up</kbd> | Moves focus to the last day of the month                      |\n|                                                                                                              <kbd class=\"key\">Page Down</kbd> | Moves focus to the first day of the month                     |\n|                                                                                                                   <kbd class=\"key\">Home</kbd> | Moves focus to first day of the week within the current month |\n|                                                                                                                    <kbd class=\"key\">End</kbd> | Moves focus to last day of the week within the current month  |"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Date Range Picker",
              "introduction": [
                "Date Range Picker\n\nWhen interacting with the keyboard, the [Date Range Picker](/x/react-date-pickers/date-range-picker/) keeps the focus on the Field component, thereby offering the same keyboard navigation support as the [Date Range Field](/x/react-date-pickers/accessibility/#fields), having the changes consistently updated on the calendar component."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "date-pickers->time-clock",
      "introduction": [
        "# Time Clock\n\n<p class=\"description\">The Time Clock component lets the user select a time without any input or popper / modal.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            "BasicTimeClock.js"
          ],
          "children": []
        },
        {
          "name": "Uncontrolled vs. controlled value",
          "introduction": [
            "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
            ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "TimeClockValue.js",
            null
          ],
          "children": []
        },
        {
          "name": "Form props",
          "introduction": [
            "Form props\n\nThe component can be disabled or read-only."
          ],
          "code_path": [
            "TimeClockFormProps.js"
          ],
          "children": []
        },
        {
          "name": "Views",
          "introduction": [
            "Views\n\nThe component can contain three views: `hours`, `minutes`, and `seconds`.\nBy default, only the `hours` and `minutes` views are enabled.\n\nYou can customize the enabled views using the `views` prop.\nViews will appear in the order they're included in the `views` array."
          ],
          "code_path": [
            "TimeClockViews.js"
          ],
          "children": []
        },
        {
          "name": "12h/24h format",
          "introduction": [
            "12h/24h format\n\nThe component uses the hour format of the locale's time setting, that is the 12-hour or 24-hour format.\n\nYou can force a specific format using the `ampm` prop.\n\nYou can find more information about 12h/24h format in the [Date localization page](/x/react-date-pickers/adapters-locale/#meridiem-12h-24h-format)."
          ],
          "code_path": [
            "TimeClockAmPm.js"
          ],
          "children": []
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->custom-opening-button",
      "introduction": [
        "# Custom opening button\n\n<p class=\"description\">The date picker lets you customize the button to open the views.</p>\n\n:::success\nSee [Common concepts—Slots and subcomponents](/x/common-concepts/custom-components/) to learn how to use slots.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Set a custom opening icon",
          "introduction": [
            "Set a custom opening icon\n\nIf you want to change the icon opening the picker without changing its behavior, you can use the `openPickerIcon` slot:",
            "You can also change the icon rendered based on the current status of the picker:"
          ],
          "code_path": [
            "CustomOpeningIcon.js",
            "CustomOpeningIconConditional.js"
          ],
          "children": []
        },
        {
          "name": "Pass props to the opening button",
          "introduction": [
            "Pass props to the opening button\n\nIf you want to customize the opening button without redefining its whole behavior, you can use either:\n\n- the `openPickerButton` slot to target the [`IconButton`](/material-ui/api/icon-button/) component.\n- the `inputAdornment` slot to target the [`InputAdornment`](/material-ui/api/input-adornment/) component.",
            ":::warning\nIf you want to track the opening of the picker, you should use the `onOpen` / `onClose` callbacks instead of modifying the opening button:\n\n```tsx\n<DatePicker onOpen={handleOpen} onClose={handleClose} />\n```\n\n:::"
          ],
          "code_path": [
            "CustomPropsOpeningButton.js",
            null
          ],
          "children": []
        },
        {
          "name": "Render the opening button at the start of the input",
          "introduction": [
            "Render the opening button at the start of the input\n\nYou can use the `openPickerButtonPosition` on the `field` slot to position the opening button at the start or the end of the input:"
          ],
          "code_path": [
            "StartEdgeOpeningButton.js"
          ],
          "children": []
        },
        {
          "name": "Add an icon next to the opening button",
          "introduction": [
            "Add an icon next to the opening button\n\nIf you want to add an icon next to the opening button, you can use the `inputAdornment` slot.\nIn the example below, the warning icon will be visible anytime the current value is invalid:",
            "To add the same behavior to a picker that do not have an input adornment (for example Date Range Picker),\nyou need to use the `textField` slot to add one:"
          ],
          "code_path": [
            "AddWarningIconWhenInvalid.js",
            "AddWarningIconWhenInvalidRange.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->validation",
      "introduction": [
        "# Date and Time Pickers - Validation\n\n<p class=\"description\">Add custom validation to user inputs.</p>\n\nAll the date and time pickers have an API for adding validation constraints.\nBy default, they provide visual feedback if the component value doesn't meet the validation criteria.\n\n:::info\nThe validation props are showcased for each type of picker component using the responsive pickers (`DatePicker`, `TimePicker`, `DateTimePicker`, and `DateRangePicker`, etc.).\n\nBut the same props are available on:\n\n- all the other variants of this picker;\n\n  For example, the validation props showcased with `DatePicker` are also available on:\n\n  - `DesktopDatePicker`\n  - `MobileDatePicker`\n  - `StaticDatePicker`\n\n- the field used by this picker;\n\n  For example, the validation props showcased with `DatePicker` are also available on `DateField`.\n\n- the view components;\n\n  For example, the validation props showcased with `TimePicker` are also available on `TimeClock` and `DigitalClock`.\n\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Invalid values feedback",
          "introduction": [
            "Invalid values feedback\n\nOn the field, it enables its error state.",
            "On the calendar and clock views, the invalid values are displayed as disabled to prevent their selection."
          ],
          "code_path": [
            "ValidationBehaviorInput.js",
            "ValidationBehaviorView.js"
          ],
          "children": []
        },
        {
          "name": "Past and future validation",
          "introduction": [
            "Past and future validation\n\nAll pickers support the past and future validation.\n\nThe `disablePast` prop prevents the selection all values before today for date pickers and the selection of all values before the current time for time pickers.\nFor date time pickers, it will combine both.\n\n- On the `day` view, all the days before today won't be selectable.\n- On the `month` and `year` views, all the values ending before today won't be selectable.\n- On the `hours` and `minutes` views, all the values ending before the current time won't be selectable.\n- On the `seconds` view, all the values before the current second won't be selectable.",
            "The `disableFuture` prop prevents the selection all values after today for date pickers and the selection of all values after the current time for time pickers.\nFor date time pickers, it will combine both.\n\n- On the `day` view, all the days after today won't be selectable.\n- On the `month` and `year` views, all the values beginning after today won't be selectable.\n- On the `hours` and `minutes` views, all the values beginning after the current time won't be selectable.\n- On the `seconds` view, all the values after the current second won't be selectable.",
            ":::info\nThe current time is computed during the first render of the `LocalizationProvider`.\nIt will not change during the lifetime of the component.\n:::"
          ],
          "code_path": [
            "DateValidationDisablePast.js",
            "DateValidationDisableFuture.js",
            null
          ],
          "children": []
        },
        {
          "name": "Date validation",
          "introduction": [
            "Date validation\n\nAll the props described below are available on all the components supporting date edition."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Minimum and maximum date",
              "introduction": [
                "Minimum and maximum date\n\nThe `minDate` prop prevents the selection of all values before `props.minDate`.\n\n- On the `day` view, all the days before the `minDate` won't be selectable.\n- On the `month` and `year` views, all the values ending before the `minDate` won't be selectable.",
                ":::info\nThe default value of `minDate` is `1900-01-01`.\n:::\n\nThe `maxDate` prop prevents the selection of all values after `props.maxDate`.\n\n- On the `day` view, all the days after the `maxDate` won't be selectable.\n- On the `month` and `year` views, all the values starting after the `maxDate` won't be selectable.",
                ":::info\nThe default value of `maxDate` is `2099-12-31`.\n:::"
              ],
              "code_path": [
                "DateValidationMinDate.js",
                "DateValidationMaxDate.js",
                null
              ],
              "children": []
            },
            {
              "name": "Disable specific dates",
              "introduction": [
                "Disable specific dates\n\nThe `shouldDisableDate` prop prevents the selection of all dates for which it returns `true`.\n\nIn the example below, the weekends are not selectable:",
                ":::warning\n`shouldDisableDate` only prevents the selection of disabled dates on the `day` view.\nFor performance reasons, when rendering the `month` view, we are not calling the callback for every day of each month to see which one should be disabled (same for the `year` view).\n\nIf you know that all days of some months are disabled, you can provide the [`shouldDisableMonth`](#disable-specific-months) prop to disable them in the `month` view.\nSame with the [`shouldDisableYear`](#disable-specific-years) prop for the `year` view.\n:::\n\n:::success\nPlease note that `shouldDisableDate` will execute on every date rendered in the `day` view. Expensive computations in this validation function can impact performance.\n:::"
              ],
              "code_path": [
                "DateValidationShouldDisableDate.js",
                null
              ],
              "children": [
                {
                  "name": "Disable specific dates in range components [<span class=\"pro-premium\"></span>](/x/introduction/licensing/#pro-plan)",
                  "introduction": [
                    "Disable specific dates in range components [<span class=\"pro-premium\"></span>](/x/introduction/licensing/#pro-plan)\n\nFor components supporting date range edition (`DateRangePicker`, `DateTimeRangePicker`), the `shouldDisableDate` prop receives a second argument to differentiate the start and the end date.\n\nIn the example below, the start date cannot be in the weekend but the end date can."
                  ],
                  "code_path": [
                    "DateRangeValidationShouldDisableDate.js"
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Disable specific months",
              "introduction": [
                "Disable specific months\n\nThe `shouldDisableMonth` prop prevents the selection of all dates in months for which it returns `true`.",
                ":::warning\n`shouldDisableMonth` only prevents the selection of disabled months on the `day` and `month` views.\nFor performance reasons, when rendering the `year` view, we are not calling the callback for every month of each year to see which one should be disabled.\n\nIf you know that all months of some years are disabled, you can provide the [`shouldDisableYear`](#disable-specific-years) prop to disable them in the `year` view.\n:::"
              ],
              "code_path": [
                "DateValidationShouldDisableMonth.js",
                null
              ],
              "children": []
            },
            {
              "name": "Disable specific years",
              "introduction": [
                "Disable specific years\n\nThe `shouldDisableYear` prop prevents the selection of all dates in years for which it returns `true`."
              ],
              "code_path": [
                "DateValidationShouldDisableYear.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Time validation",
          "introduction": [
            "Time validation"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Minimum and maximum time",
              "introduction": [
                "Minimum and maximum time\n\nThe `minTime` prop prevents the selection of all values between midnight and `props.minTime`.",
                "The `maxTime` prop prevents the selection of all values between `props.maxTime` and midnight.",
                ":::info\nThe validation only uses the time part of this prop value. It ignores the day / month / year.\nThe simplest way to use it is to pass today's date and only care about the hour / minute / seconds.\n\nFor example to disable the afternoon in `dayjs` you can pass `dayjs().set('hour', 12).startOf('hour')`.\n:::"
              ],
              "code_path": [
                "TimeValidationMinTime.js",
                "TimeValidationMaxTime.js",
                null
              ],
              "children": []
            },
            {
              "name": "Disable specific time",
              "introduction": [
                "Disable specific time\n\nThe `shouldDisableTime` prop prevents the selection of all values for which it returns `true`.\n\nThis callback receives the current view and the value to be tested:\n\n```tsx\n// Disables the hours between 12 AM and 3 PM.\nshouldDisableTime={(value, view) =>\n  view === 'hours' && value.hour() > 12 && value.hour() < 15\n}\n\n// Disables the last quarter of each hour.\nshouldDisableTime={(value, view) => view === 'minutes' && value.minute() >= 45}\n\n// Disables the second half of each minute.\nshouldDisableTime={(value, view) => view === 'seconds' && value.second() > 30}\n\n// Disable the hours before 10 AM every 3rd day\nshouldDisableTime={(value, view) =>\n  view === 'hours' && value.hour() < 10 && value.date() % 3 === 0\n}\n```\n\nIn the example below, the last quarter of each hour is not selectable."
              ],
              "code_path": [
                "TimeValidationShouldDisableTime.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Date and time validation",
          "introduction": [
            "Date and time validation"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Minimum and maximum date time",
              "introduction": [
                "Minimum and maximum date time\n\nThe `minDateTime` prop prevents the selection of all values before `props.minDateTime`.",
                "The `maxDateTime` prop prevents the selection of all values after `props.maxDateTime`.",
                ":::warning\nIf you want to put time boundaries independent of the date, use the [`time boundaries`](#set-time-boundaries) instead.\n\nFor now, you cannot use `maxDateTime` and `maxTime` together.\n`maxDateTime` will override the `maxTime` behavior, and the same goes for `minDateTime` and `minTime`.\n\n```tsx\n// Disable the values between 6 PM and midnight for every day\n// (tomorrow 5 PM is not disabled).\n<DateTimePicker maxTime={dayjs().set('hour', 18).startOf('hour')} />\n\n// Disable the values after today 6 PM (tomorrow 5 PM is disabled).\n<DateTimePicker maxDateTime={dayjs().set('hour', 18).startOf('hour')} />\n\n// Disable the values between midnight and 6 PM for every day\n// (yesterday 5 PM is not disabled).\n<DateTimePicker minTime={dayjs().set('hour', 18).startOf('hour')} />\n\n// Disable the values before today 6 PM (yesterday 5 PM is disabled).\n<DateTimePicker minDateTime={dayjs().set('hour', 18).startOf('hour')} />\n```\n\n:::"
              ],
              "code_path": [
                "DateTimeValidationMinDateTime.js",
                "DateTimeValidationMaxDateTime.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Show the error",
          "introduction": [
            "Show the error\n\nTo render the current error, you can subscribe to the `onError` callback which is called every time the error changes.\nYou can then use the `helperText` prop of the `TextField` to pass your error message to your input as shown below.\n\nTry to type a date that is inside the first quarter of 2022—the error will go away."
          ],
          "code_path": [
            "RenderErrorUnderField.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "date-pickers->localization",
      "introduction": [
        "# Translated components\n\n<p class=\"description\">Date and Time Pickers support translations between languages.</p>\n\nAs with all MUI X components, you can modify text and translations inside the Date and Time Pickers.\nYou can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-date-pickers/src/locales/utils/pickersLocaleTextApi.ts)\nin the GitHub repository.\n\nThe default locale of MUI X is English (United States). If you want to use other locales, follow the instructions below.\n\n:::warning\nThis page focuses on translating the text inside the Date and Time Pickers.\nIf you need to change the formatting of the text to conform to a given locale, visit the [Date format and localization](/x/react-date-pickers/adapters-locale/) page.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Set translations globally",
          "introduction": [
            "Set translations globally"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Using the theme",
              "introduction": [
                "Using the theme\n\nTo translate all your components from `@mui/x-date-pickers` and `@mui/x-date-pickers-pro`,\nimport the locale from `@mui/x-date-pickers` (see the [list of supported locales below](#supported-locales)).\n\n```jsx\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { deDE } from '@mui/x-date-pickers/locales';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  deDE, // use 'de' locale for UI texts (start, next month, ...)\n);\n\nfunction App({ children }) {\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n}\n```\n\nNote that `createTheme()` accepts any number of arguments.\nIf you are already using the [translations of the core components](/material-ui/guides/localization/#locale-text) or the [translations of the Data Grid](/x/react-data-grid/localization/#locale-text), you can add `deDE` as a new argument.\n\n```jsx\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { deDE as dataGridDeDE } from '@mui/x-data-grid';\nimport { deDE as coreDeDE } from '@mui/material/locale';\nimport { deDE } from '@mui/x-date-pickers/locales';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  deDE, // x-date-pickers translations\n  dataGridDeDE, // x-data-grid translations\n  coreDeDE, // core translations\n);\n\nfunction App({ children }) {\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n}\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Using LocalizationProvider",
              "introduction": [
                "Using LocalizationProvider\n\nIf you want to pass language translations without using `createTheme()` and `ThemeProvider`,\nyou can directly load the language translations from the `@mui/x-date-pickers` or `@mui/x-date-pickers-pro` package and pass them to the `LocalizationProvider`.\n\n```jsx\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { deDE } from '@mui/x-date-pickers/locales';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n<LocalizationProvider\n  localeText={deDE.components.MuiLocalizationProvider.defaultProps.localeText}\n>\n  <DatePicker />\n</LocalizationProvider>;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Set translations locally",
          "introduction": [
            "Set translations locally\n\nYou can also customize the translations of a single component.\n\nIf you want to customize some translations on specific component, you can use the `localeText` prop exposed by all our pickers.\n\n```jsx\n<DatePicker localeText={{ clearButtonLabel: 'Empty' }} />\n```\n\n:::info\nThis method can be combined with the ones shown above.\n\nIf you pass a localization through `LocalizationProvider` or the theme, and you provide translation keys through the `localeText` prop of a picker at the same time, then only the latter translation keys will be overridden.\n\n```tsx\n<LocalizationProvider\n  localeText={{ clearButtonLabel: 'Empty', todayButtonLabel: 'Now' }}\n>\n  <DatePicker\n    // ...other props\n    localeText={{\n      clearButtonLabel: 'Vider',\n    }}\n  />\n</LocalizationProvider>\n```\n\nThis will produce the following result:\n\n- \"Today\" button with text **Now** taken from the Localization Provider's `localeText` prop\n- \"Clear\" button with text **Vider** overridden by the Date Picker's `localeText` prop\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Supported locales",
          "introduction": [
            "Supported locales",
            "You can [find the source](https://github.com/mui/mui-x/tree/HEAD/packages/x-date-pickers/src/locales) in the GitHub repository.\n\nTo create your own translation or to customize the English text, copy this file to your project, make any changes needed and import the locale from there.\nNote that these translations of the date and time picker components depend on the [Localization strategy](/material-ui/guides/localization/) of the whole library."
          ],
          "code_path": [
            "PickersLocalisationTableNoSnap.js",
            null
          ],
          "children": []
        },
        {
          "name": "Access the translations in slots and subcomponents",
          "introduction": [
            "Access the translations in slots and subcomponents\n\nYou can use the `usePickerTranslations` hook to access the translations in your custom components.\n\n```tsx\nimport { usePickerTranslations } from '@mui/x-date-pickers/hooks';\n\nconst translations = usePickerTranslations();\n```\n\n:::info\nSee [Custom slots and subcomponents—Action bar](/x/react-date-pickers/custom-components/#component) for more details.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "introduction->roadmap",
      "introduction": [
        "# Roadmap\n\n<p class=\"description\">Find out about our plans for MUI X.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "MUI X roadmap",
          "introduction": [
            "MUI X roadmap\n\nTo learn more about our plans for MUI X, visit the [public roadmap](https://github.com/orgs/mui/projects/35).\n\n:::warning\nWe operate in a dynamic environment,so things are subject to change.\nThe information provided is intended to outline the general direction, but is for informational purposes only.\n\nWe may decide to add or remove new items at any time, depending on our capability to deliver, while meeting our quality standards.\nThe development, releases, and timing of any features or functionality remains at the sole discretion of MUI.\nThe roadmap does not represent a commitment, obligation, or promise to deliver at any time.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Global roadmap",
          "introduction": [
            "Global roadmap\n\nTo learn more about our plans for MUI in general, visit the:\n\n- [Material UI roadmap](/material-ui/discover-more/roadmap/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "introduction->installation",
      "introduction": [
        "# Installation\n\n<p class=\"description\">Install the necessary packages to start building with MUI X components.</p>\n\nMUI X packages are available through the free MIT-licensed Community plan, or the commercially-licensed Pro and Premium plans.\nSee [the licensing page](/x/introduction/licensing/) for complete details."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Peer dependencies",
          "introduction": [
            "Peer dependencies\n\nMUI X components have a peer dependency on `@mui/material`: the installation [instructions](/material-ui/getting-started/installation/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Components",
          "introduction": [
            "Components\n\nNote that you only need to install the packages corresponding to the components you're using—for example Data Grid users don't need to install the Date and Time Pickers.\n\n{{\"component\": \"modules/components/InstallationGrid.js\"}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "introduction->support",
      "introduction": [
        "# Support\n\n<p class=\"description\">Learn how to get support for MUI X components, including feature requests, bug fixes, and technical support from the team.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "GitHub",
          "introduction": [
            "GitHub\n\nWe use GitHub issues as a bug and feature request tracker.\n\nIf you think you've found a bug, or you have a new feature idea:\n\n1. Please start by [making sure it hasn't already been reported or fixed](https://github.com/mui/mui-x/issues?q=is%3Aissue).\n   You can search through existing issues and pull requests to see if someone has reported one similar to yours.\n2. Then, if no duplicates exist, [open an issue](https://github.com/mui/mui-x/issues/new/choose) in the MUI X repository."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "New issue guidelines",
              "introduction": [
                "New issue guidelines\n\n- Please follow one the issue templates provided on GitHub.\n- Please begin the title with \"[component-name]\" (if relevant), and use a succinct description that helps others find similar issues.\n  - ❌ _\"It doesn't work\"_\n  - ✅ _\"[button] Add support for {{new feature}}\"_\n- Please don't group multiple topics in one issue.\n- Please don't comment \"+1\" on an issue. It spams the maintainers and doesn't help move the issue forward. Use GitHub reactions instead (👍)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Bug reproductions",
              "introduction": [
                "Bug reproductions\n\nWe require bug reports to be accompanied by a **minimal reproduction**.\nIt significantly increases the odds of fixing the problem.\nYou have a few possible options to provide it:"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Use the live editors",
                  "introduction": [
                    "Use the live editors\n\nYou can browse the documentation, find an example close to your use case, and then open it in a live editor:\n\n<a href=\"/x/react-date-pickers/getting-started/#render-your-first-component\">\n<span class=\"only-light-mode\">\n<img src=\"/static/docs-infra/forking-an-example.png\" alt=\"Forking an example\" loading=\"lazy\" width=\"1628\" height=\"700\" style=\"display: block; max-width: 774px;\">\n</span>\n<span class=\"only-dark-mode\">\n<img src=\"/static/docs-infra/forking-an-example-dark.png\" alt=\"Forking an example\" loading=\"lazy\" width=\"1628\" height=\"700\" style=\"display: block; max-width: 774px;\">\n</span>\n</a>\n\n- [Data Grid](/x/react-data-grid/#mit-license-free-forever)\n- [Date Pickers](/x/react-date-pickers/getting-started/#render-your-first-component)\n- [Charts](/x/react-charts/getting-started/#self-contained-charts)\n- [Tree View](/x/react-tree-view/#simple-tree-view)"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Use starter templates",
                  "introduction": [
                    "Use starter templates\n\nYou can use a starter template to build a reproduction case with:\n\n<!-- #default-branch-switch -->\n\n- A minimal Data Grid [TypeScript template](https://stackblitz.com/github/mui/mui-x/tree/master/bug-reproductions/x-data-grid?file=src/index.tsx)\n- A plain React [JavaScript](https://stackblitz.com/github/stackblitz/starters/tree/main/react) or [TypeScript](https://stackblitz.com/github/stackblitz/starters/tree/main/react-ts) template"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Stack Overflow",
          "introduction": [
            "Stack Overflow\n\nWe use Stack Overflow for how-to questions. Answers are crowdsourced from expert developers in the MUI X community as well as MUI X maintainers.\n\nYou can search through existing questions and answers to see if someone has asked a similar question using one of [these tags](https://stackoverflow.com/questions/tagged/mui-x+or+mui-x-charts+or+mui-x-data-grid+or+mui-x-date-picker):\n\n- mui-x\n- mui-x-data-grid\n- mui-x-date-picker\n- mui-x-charts\n\nIf you cannot find your answer, [ask a new question](https://stackoverflow.com/questions/ask?tags=reactjs%20mui-x) using the relevant tags."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Technical support",
          "introduction": [
            "Technical support\n\n:::info\nThe technical support covers only MUI X components.\n:::\n\nWhen purchasing a MUI X Pro or Premium license you get access to technical support until the end of your active license.\nSupport is available on multiple channels, but the recommended channels are:\n\n- GitHub: You can [open a new issue](https://github.com/mui/mui-x/issues/new/choose) and leave your Order ID (or Support key), so we can prioritize accordingly.\n- Email: If you need to share **private information** you can [submit a request](https://support.mui.com/hc/en-us/requests/new?tf_360023797420=mui_x) or send an email to [x@mui.com](mailto:x@mui.com).\n\nIncluding your Order ID (or Support key) in the issue helps us prioritize the issues based on the following support levels:\n\n1. MUI X Pro: maintainers give these issues more attention than the ones from the community.\n2. MUI X Premium: The same as MUI X Pro, but with higher priority.\n3. MUI X Priority Support add-on (coming soon): Provides a 24h SLA for the first answer."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Long-term support (LTS)",
          "introduction": [
            "Long-term support (LTS)\n\nBug fixes, performance enhancements, and other improvements are delivered in new releases.\nHowever, we remain committed to providing security updates and addressing regressions for the immediate predecessor of the current major version.\n\nThis includes issues introduced by external sources, like browser upgrades or changes to upstream dependencies."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Supported versions",
              "introduction": [
                "Supported versions\n\n| MUI X version | Release    | Supported                                                           |\n| : | :--- |\n|        ^8.0.0 | March 2025 | 🚧 Pre release (Continuous support)                                 |\n|        ^7.0.0 | 2024-03-23 | ✅ Current stable major (Continuous support)                        |\n|        ^6.0.0 | 2023-03-03 | ⚠️ Long-term support (Support for security issues and regressions). |\n|        ^5.0.0 | 2021-11-23 | ❌                                                                  |\n|        ^4.0.0 | 2021-09-28 | ❌                                                                  |"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Community",
          "introduction": [
            "Community"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Social media",
              "introduction": [
                "Social media\n\nThe MUI X community is active on both [X/Twitter](https://x.com/MUI_hq) and [LinkedIn](https://www.linkedin.com/company/mui/).\nThese are great platforms to share what you're working on and connect with other developers."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Discord",
              "introduction": [
                "Discord\n\nWe have a [Discord Server](https://mui.com/r/discord/) to bring the MUI X community together.\nOur tools are used by thousands of developers and teams all around the world, many of whom actively engage with the community.\n\nYou can join Discord to engage in lively discussions, share your projects, and interact with developers just like you from all around the world. We'd love for you to join us!\n\n:::warning\nHow-to questions are not accepted on Discord, they should be asked on [Stack Overflow](#stack-overflow).\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Custom work",
          "introduction": [
            "Custom work\n\nIf your team gets stuck and needs help getting unblocked, MUI X's engineers may be available on a contract basis.\n\nKeep in mind that the work must be directly related to MUI X's products—we don't accept general web development or React work.\n\nOur contracting price starts at $200/hour or $1,500/day.\n\n[Send us an email](mailto:custom-work@mui.com) summarizing of your needs, and we'll let you know whether we can help (or else try to suggest alternatives)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "introduction->licensing",
      "introduction": [
        "# Licensing\n\n<p class=\"description\">MUI X is an open-core, MIT-licensed library. Purchase a commercial license for advanced features and support.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "MIT vs. commercial licenses",
          "introduction": [
            "MIT vs. commercial licenses\n\nThe MUI X team has been building MIT-licensed React components since 2014, starting with Material UI, and we're committed to the continued advancement of our open-source libraries.\nAnything we release under an MIT license will remain MIT-licensed forever.\nLearn more about [our stewardship ethos](https://mui-org.notion.site/Stewardship-542a2226043d4f4a96dfb429d16cf5bd).\n\nWe offer commercial licenses to developers who need the most advanced components and features that can't reasonably be maintained by the open-source community alone.\nThese licenses make it possible for us to support a full-time staff of engineers.\n\nRest assured that when we release features commercially, it's only because we believe you won't find a better MIT-licensed alternative anywhere else.\n\nSee the [Pricing page](https://mui.com/r/x-get-license/) for a detailed feature comparison."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Plans",
          "introduction": [
            "Plans"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Community plan",
              "introduction": [
                "Community plan\n\nThe free Community version of MUI X contains components and features that we believe are maintainable by contributions from the open-source community.\nIt's published under an [MIT license](https://www.tldrlegal.com/license/mit-license) and it's [free forever](https://mui-org.notion.site/Stewardship-542a2226043d4f4a96dfb429d16cf5bd#20f609acab4441cf9346614119fbbac1).\n\n- [`@mui/x-data-grid`](https://www.npmjs.com/package/@mui/x-data-grid)\n- [`@mui/x-date-pickers`](https://www.npmjs.com/package/@mui/x-date-pickers)\n- [`@mui/x-charts`](https://www.npmjs.com/package/@mui/x-charts)\n- [`@mui/x-tree-view`](https://www.npmjs.com/package/@mui/x-tree-view)"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Pro plan <span class=\"plan-pro\"></span>",
              "introduction": [
                "Pro plan <span class=\"plan-pro\"></span>\n\nMUI X Pro expands on the Community version with more advanced features and functionality.\nThe Data Grid Pro comes with multi-filtering, multi-sorting, column resizing, and column pinning; you also gain access to the Date and Time Range Picker components, advanced Charts, and drag-and-drop reordering for the Tree View.\n\nThe Pro version is available under a commercial license—visit the [Pricing page](https://mui.com/r/x-get-license/) for details.\nExclusive features are marked with the <span class=\"plan-pro\" aria-label=\"MUI X Pro plan icon\"></span> icon throughout the documentation.\n\n- [`@mui/x-data-grid-pro`](https://www.npmjs.com/package/@mui/x-data-grid-pro)\n- [`@mui/x-date-pickers-pro`](https://www.npmjs.com/package/@mui/x-date-pickers-pro)\n- [`@mui/x-charts-pro`](https://www.npmjs.com/package/@mui/x-charts-pro)\n- [`@mui/x-tree-view-pro`](https://www.npmjs.com/package/@mui/x-tree-view-pro)"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Premium plan <span class=\"plan-premium\"></span>",
              "introduction": [
                "Premium plan <span class=\"plan-premium\"></span>\n\nMUI X Premium unlocks the most advanced features of the Data Grid, including row grouping and Excel exporting, as well as everything offered in the Pro plan.\n\nThe Premium version is available under a commercial license—visit [the Pricing page](https://mui.com/r/x-get-license/) for details.\nExclusive features are marked with the <span class=\"plan-premium\" aria-label=\"MUI X Premium plan icon\"></span> icon throughout the documentation.\n\n- [`@mui/x-data-grid-premium`](https://www.npmjs.com/package/@mui/x-data-grid-premium)"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Upgrading",
          "introduction": [
            "Upgrading\n\nThe [npm packages](#plans) of any given plan are a **superset** of the packages in the Community version.\nTo upgrade, you must install the respective paid package and replace all imports with the new path.\n\nBelow are upgrading scenarios using the Data Grid as an example:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "From Community to Pro",
              "introduction": [
                "From Community to Pro\n\n`@mui/x-data-grid-pro` is a superset of `@mui/x-data-grid`.\nInstall the Pro package, then update all imports accordingly:\n\n```diff\n-import { DataGrid } from '@mui/x-data-grid';\n+import { DataGridPro } from '@mui/x-data-grid-pro';\n```\n\n:::warning\nThere is an exception to the superset rule: the Data Grid's `pagination` prop default value changes.\nSee [the Pagination page](/x/react-data-grid/pagination/) for details.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "From Pro to Premium",
              "introduction": [
                "From Pro to Premium\n\n`@mui/x-data-grid-premium` is a superset of `@mui/x-data-grid-pro`.\nInstall the Premium package, then update all imports accordingly:\n\n```diff\n-import { DataGridPro } from '@mui/x-data-grid-pro';\n+import { DataGridPremium } from '@mui/x-data-grid-premium';\n```\n\n:::success\nUpgrading from Pro to Premium?\nPlease contact [sales@mui.com](mailto:sales@mui.com?subject=My%20upgrade%20discount%20to%20Premium) to get started.\n\nWe'll provide you with a discount based on the remaining time of your current license term.\n:::\n\nFor more details on how to install each package, visit the [package installation guide](/x/introduction/installation/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Evaluation (trial) licenses",
          "introduction": [
            "Evaluation (trial) licenses\n\nPer the [End User License Agreement](https://mui.com/legal/mui-x-eula/#evaluation-trial-licenses), you can use the Pro and Premium components without a commercial license for 30 days for non-production environments.\nYou can also use it for the development of code not intended for production (for example the reproduction of an issue, doing a benchmark).\n\nYou don't need to contact us to use these components for the above cases.\nYou will need to purchase a commercial license in order to remove the watermarks and console warnings."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "How many developer licenses do I need?",
          "introduction": [
            "How many developer licenses do I need?\n\nThe number of licenses purchased must correspond to the number of concurrent developers contributing changes to the front-end code of the project that uses MUI X Pro or Premium.\n\n- **Example 1.** Company 'A' is developing an application named 'AppA'.\n  The app needs to render 10K rows of data in a table and allow users to group, filter, and sort.\n  The dev team adds MUI X Pro to the project to satisfy this requirement.\n  Five front-end and ten back-end developers are working on 'AppA'.\n  Only one developer is tasked with maintaining the Data Grid, but there are five total developers who work on the front-end.\n  Company 'A' must purchase five licenses.\n\n- **Example 2.** A UI development team at Company 'B' creates its own UI library for internal development that includes MUI X Pro components.\n  The teams working on 'AppY' and 'AppZ' both adopt this new library.\n  'AppY' has five front-end developers, and 'AppZ' has three; additionally, there are two front-end developers on the company's UI development team.\n  Company 'B' must purchase ten licenses.\n\nThis is [the relevant clause in the EULA.](https://mui.com/legal/mui-x-eula/#required-quantity-of-licenses)"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "License key",
          "introduction": [
            "License key\n\nWhen you purchase a commercial license, you'll receive a license key by email.\nThis key removes all watermarks and console warnings.\n\n:::warning\nOrders placed after **May 13, 2022** come with a license key by default that is only compatible with MUI X from `v5.11.0` and upwards.\n\nPlease update your npm package if you're using an earlier version.\n\nIf this isn't possible, please contact sales@mui.com to request a compatible license key.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "How to install the key",
              "introduction": [
                "How to install the key\n\nThe license key depends on a package called `@mui/x-license` that validates whether or not it's active.\nOnce you have your license key, import the `LicenseInfo` method from that package and call the `setLicenseKey()` function:\n\n```jsx\nimport { LicenseInfo } from '@mui/x-license';\n\nLicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n```\n\nYou'll only need to do this once in your app."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Where to install the key",
              "introduction": [
                "Where to install the key\n\nYou must call the `setLicenseKey()` function before React renders the first component in your app.\n\nIts bundle size is relatively small, so it should be fine to call it in all of your bundles, regardless of whether a commercial MUI X component is rendered."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Next.js integration",
          "introduction": [
            "Next.js integration"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Next.js App Router",
              "introduction": [
                "Next.js App Router\n\nWhen using Next.js App Router, you have multiple options to install the license key.\n\n1. If your [`layout.js`](https://nextjs.org/docs/app/api-reference/file-conventions/layout) is using `'use client'`, you can set the license key in it:\n\n```tsx\n'use client';\nimport { LicenseInfo } from '@mui/x-license';\n\nLicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n```\n\n2. Otherwise (**recommended**), you can create a dummy component called `MuiXLicense.tsx`:\n\n```tsx\n'use client';\nimport { LicenseInfo } from '@mui/x-license';\n\nLicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n\nexport default function MuiXLicense() {\n  return null;\n}\n```\n\nAnd render `<MuiXLicense>` in your [`layout.js`](https://nextjs.org/docs/app/api-reference/file-conventions/layout):\n\n```tsx\nimport MuiXLicense from './MuiXLicense';\n\nexport default function RootLayout(props: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {props.children}\n        <MuiXLicense />\n      </body>\n    </html>\n  );\n}\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Next.js Pages Router",
              "introduction": [
                "Next.js Pages Router\n\nWhen using Next.js pages, a great place to call `setLicenseKey` is in [`_app.js`](https://nextjs.org/docs/pages/building-your-application/routing/custom-app).\n\n```tsx\nimport { LicenseInfo } from '@mui/x-license';\n\nLicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n\nexport default function MyApp(props) {\n  const { Component, pageProps } = props;\n  return <Component {...pageProps} />;\n}\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Environment variable with Next.js",
              "introduction": [
                "Environment variable with Next.js\n\n:::info\nWhile we recommend hard-coding the license key in git, you can also use an environment variable to set the license key.\nThis method is required if your codebase is \"source-available\" (to hide the license key), and can be preferred if you want to granularly share the license key with your licensed developers.\n:::\n\nThe license key is validated on the server and client-side so you must expose the environment variable to the browser.\nTo do this, you need to prefix the environment variables with `NEXT_PUBLIC_` as explained in the [Next.js documentation](https://nextjs.org/docs/app/building-your-application/configuring/environment-variables#bundling-environment-variables-for-the-browser):\n\n```tsx\nimport { LicenseInfo } from '@mui/x-license';\n\nLicenseInfo.setLicenseKey(process.env.NEXT_PUBLIC_MUI_X_LICENSE_KEY);\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "What is the key for?",
          "introduction": [
            "What is the key for?\n\nThe license key is meant to help you [stay compliant](https://mui.com/legal/mui-x-eula/#license-key) with the EULA of the commercial licenses.\nWhile each developer needs to be licensed, the license key is set once per project, where the components are used."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "License key security",
          "introduction": [
            "License key security\n\nThe license key is checked without making any network requests—it's designed to be public.\nIt's expected that the license key will be exposed in a JavaScript bundle;\nwe simply ask licensed users not to actively publicize their license key."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Validation failures",
          "introduction": [
            "Validation failures\n\nIf the validation of the license key fails, the component displays a watermark and provides a console warning in both development and production.\nEnd users can still use the component.\n\nHere are the different possible validation errors:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "1. Missing license key",
              "introduction": [
                "1. Missing license key\n\nThis error indicates that your license key is missing. You might not be allowed to use the software.\nThe component will look something like this:\n\n<div class=\"only-light-mode\">\n  <img src=\"/static/x/watermark-light.png\" width=\"1290\" height=\"536\" style=\"width: 645px; margin-bottom: 2rem;\" alt=\"\" loading=\"lazy\">\n</div>\n<div class=\"only-dark-mode\">\n  <img src=\"/static/x/watermark-dark.png\" width=\"1290\" height=\"536\" style=\"width: 645px; margin-bottom: 2rem;\" alt=\"\" loading=\"lazy\">\n</div>\n\nTo solve the issue, you can check the [free trial conditions](#evaluation-trial-licenses), if you are eligible no actions are required.\nIf you are not eligible to the free trial, you need to [purchase a license](https://mui.com/r/x-get-license/) or stop using the software immediately."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "2. Expired package version",
              "introduction": [
                "2. Expired package version\n\nThis error indicates that you have installed a version of MUI X Pro / Premium released after the end of your license term.\nBy default, commercial licenses provide access to new versions released during the first year after the purchase.\n\nTo solve the issue, you can [renew your license](https://mui.com/r/x-get-license/) or install an older version of the npm package that is compatible with your license key.\n\nFor example, if you purchase a one-year license today, you will be able to update to any version—including major versions—released in the next twelve months."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "3. Expired license key",
              "introduction": [
                "3. Expired license key\n\nThis error indicates that your annual license key is expired.\n\nThe annual license works **forever in production** with any version of MUI X Pro / Premium released before your license term ends.\nHowever, when the term ends, you are not allowed to use the current or older versions in **development**.\n\nTo solve the issue, you can [renew your license](https://mui.com/r/x-get-license/) or stop making changes to code depending on MUI X's APIs.\n\n:::warning\nMake sure to set `process.env.NODE_ENV` to `'production'` in your build process to avoid the watermark in production.\nMost bundlers set this environment variable automatically when building for production, but for custom setups, you might need to set it manually.\n\nNote that `NODE_ENV=production` is not MUI X-specific and is a common practice in the JavaScript ecosystem.\nIt allows bundlers and libraries to optimize the output for production and eliminate dead code, so it's worth checking if it's set correctly in your project.\nSee related documentation for [webpack](https://webpack.js.org/guides/production/#specify-the-mode), [Node.js](https://nodejs.org/en/learn/getting-started/nodejs-the-difference-between-development-and-production) and [Next.js](https://nextjs.org/docs/messages/non-standard-node-env) for more information.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "4. License key plan mismatch",
              "introduction": [
                "4. License key plan mismatch\n\nThis error indicates that your use of MUI X is not compatible with the plan of your license key.\nThe feature you are trying to use is not included in the plan of your license key.\nThis happens if you try to use Data Grid Premium with a license key for the Pro plan.\n\nTo solve the issue, you can [upgrade your plan](https://mui.com/r/x-get-license/?scope=premium) from Pro to Premium.\nOr if you didn\\'t intend to use Premium features, you can replace the import of `@mui/x-data-grid-premium` with `@mui/x-data-grid-pro`."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "5. Component not included in your license",
              "introduction": [
                "5. Component not included in your license\n\nThis error indicates that the component you are trying to use is not covered by your current license.\nThis happens if you try to use `ChartsPro` or `TreeViewPro` with a license that does not cover these products.\n\nTo solve the issue, please consider an earlier [renewal](https://mui.com/r/x-get-license/).\n\nYou might be eligible for a discount if you have an active Pro license.\nContact [sales@mui.com](mailto:sales@mui.com?subject=My%20upgrade%20discount) for additional information.\n\nOr if you didn't intend to use the Pro features, you can replace the import of `@mui/x-charts-pro` or `@mui/x-tree-view-pro` with `@mui/x-charts` or `@mui/x-tree-view` respectively."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "6. Invalid license key",
              "introduction": [
                "6. Invalid license key\n\nThis error indicates that your MUI X license key format isn't valid.\nIt could be because the license key is missing a character or has a typo.\n\nTo solve the issue, you need to double-check that `setLicenseKey()` is called with the right argument.\nPlease check the [license key installation](/x/introduction/licensing/#license-key)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "7. Invalid license key (TypeError: extracting license expiry timestamp)",
              "introduction": [
                "7. Invalid license key (TypeError: extracting license expiry timestamp)\n\nThe following JavaScript exception indicates that you may be trying to validate the new license's key format on an older version of the npm package.\n\n:::error\nError extracting license expiry timestamp.\n\nTypeError: Cannot read properties of null (reading '1') at verifyLicense.\n:::\n\nTo solve the issue, you can update MUI X to `v5.11.0` or a later version or contact the support to get a legacy license key."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "introduction->overview",
      "introduction": [
        "# MUI X - Overview\n\n<p class=\"description\">MUI X is a collection of advanced React UI components for complex use cases. Use the native integration with Material UI or extend your design system.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nMUI X is a collection of advanced UI components, including:\n\n- [Data Grid](/x/react-data-grid/)\n- [Date and Time Pickers](/x/react-date-pickers/)\n- [Charts](/x/react-charts/)\n- [Tree View](/x/react-tree-view/)\n\nThese components are significantly more complex than the ones found in our Core libraries.\nThey feature advanced functionality for data-rich applications and a wide range of other use cases.\n\n:::info\nMUI X is **open core**—base components are MIT-licensed, while more advanced features require a Pro or Premium commercial license.\nSee [Licensing](/x/introduction/licensing/) for details.\n\nThroughout the documentation, Pro- and Premium-only features are denoted with the [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan') and [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan') icons, respectively.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Advantages of MUI X",
          "introduction": [
            "Advantages of MUI X\n\n- **Ship faster:** Our team has invested thousands of hours into these components so you don't have to. Get up and running in a fraction of the time it would take to build from scratch.\n- **Expand on the power of Core**: MUI X components work seamlessly with Core libraries like Material UI, delivering more advanced functionality, but can also be used standalone.\n- **Grow with us:** You can start for free with the MIT-licensed packages, and upgrade to Pro or Premium when you need more advanced features or technical support.\n- **Dedicated maintenance:** MUI X is maintained by a full-time staff of engineers, so you can rest assured that any issues will be addressed in a timely manner.\n- **Technical support:** Pro and Premium users get access to technical support from our team as well as priority for bug fixes and feature requests."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "MUI X vs. Core",
          "introduction": [
            "MUI X vs. Core\n\nMUI X is a collection of advanced UI components for complex use cases.\nMost of MUI X's components are available for free, but more advanced features require a Pro or Premium commercial license.\n\nCore focuses on empowering the creation of great design systems with React.\nIt comes with two themes (Material Design and an in-house one).\nIt's about solving design problems.\nIt contains foundational UI component libraries like Material UI and Base UI.\nThese libraries are open source, MIT-licensed, and free forever.\n\nMUI X components are fully compatible with Core.\nMUI X can extend the functionality of UIs built with Material UI or Base UI, but its components can also stand on their own, they can be used with third-parties React component libraries that implement different designs.\n\nYou can find [more details](https://mui-org.notion.site/X-FAQ-c33e9a7eabba4da1ad7f8c04f99044cc#11751b16538c489ba23c5133db1e67b8) about the difference in our handbook."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->bar-demo",
      "introduction": [
        "# Charts - Bar demonstration\n\n<p class=\"description\">This page groups demonstration using bar charts.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "TinyBarChart",
          "introduction": [
            "TinyBarChart"
          ],
          "code_path": [
            "TinyBarChart.js"
          ],
          "children": []
        },
        {
          "name": "SimpleBarChart",
          "introduction": [
            "SimpleBarChart"
          ],
          "code_path": [
            "SimpleBarChart.js"
          ],
          "children": []
        },
        {
          "name": "StackedBarChart",
          "introduction": [
            "StackedBarChart"
          ],
          "code_path": [
            "StackedBarChart.js"
          ],
          "children": []
        },
        {
          "name": "MixedBarChart",
          "introduction": [
            "MixedBarChart"
          ],
          "code_path": [
            "MixedBarChart.js"
          ],
          "children": []
        },
        {
          "name": "PositiveAndNegativeBarChart",
          "introduction": [
            "PositiveAndNegativeBarChart"
          ],
          "code_path": [
            "PositiveAndNegativeBarChart.js"
          ],
          "children": []
        },
        {
          "name": "BarChartStackedBySign",
          "introduction": [
            "BarChartStackedBySign"
          ],
          "code_path": [
            "BarChartStackedBySign.js"
          ],
          "children": []
        },
        {
          "name": "BiaxialBarChart",
          "introduction": [
            "BiaxialBarChart"
          ],
          "code_path": [
            "BiaxialBarChart.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->legend",
      "introduction": [
        "# Charts - Legend\n\n<p class=\"description\">Legend is the UI element mapping symbols and colors to the series' label.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic display",
          "introduction": [
            "Basic display\n\nIn chart components, the legend links series with `label` properties and their color."
          ],
          "code_path": [
            "BasicLegend.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization\n\nThis section explains how to customize the legend using classes and properties."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Dimensions",
              "introduction": [
                "Dimensions\n\nMuch of the customization can be done using CSS properties.\nThere is a main class for the legend container, `.MuiChartsLegend-root`.\nAlternatively the `legendClasses` variable can be used if using CSS-in-JS to target the elements.\n\nEach legend item is composed of two main elements: the `mark` and the `label`.\n\nThe example below explains how it is possible to customize some parts the legend.\nAnd shows how to use both the `legendClasses` variable and the CSS class directly."
              ],
              "code_path": [
                "LegendDimensionNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Position",
              "introduction": [
                "Position\n\nThe legend can either be displayed in a `'vertical'` or `'horizontal'` layout controlled with the `direction` property.\n\nIt can also be moved with the `position: { vertical, horizontal }` property which defines how the legend aligns itself in the parent container.\n\n- `vertical` can be `'top'`, `'middle'`, or `'bottom'`.\n- `horizontal` can be `'left'`, `'middle'`, or `'right'`.\n\nBy default, the legend is placed above the charts.\n\n:::warning\nThe `position` property is only available in the `slotProps`, but not in the `<ChartsLegend />`.\nIn the second case, you are free to place the legend where you want.\n:::"
              ],
              "code_path": [
                "LegendPositionNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Hiding",
              "introduction": [
                "Hiding\n\nYou can hide the legend with the `hideLegend` property of the Chart."
              ],
              "code_path": [
                "HiddenLegend.js"
              ],
              "children": []
            },
            {
              "name": "Label styling",
              "introduction": [
                "Label styling\n\nChanging the `label` style can be done by targeting the root component's font properties.\n\nTo change the `mark` color or shape, the `fill` class is used instead.\nKeep in mind that the `mark` is an SVG element, so the `fill` property is used to change its color."
              ],
              "code_path": [
                "LegendTextStylingNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Change mark shape",
              "introduction": [
                "Change mark shape\n\nTo change the mark shape, you can use the `labelMarkType` property of the series item.\nFor the `pie` series, the `labelMarkType` property is available for each of the pie slices too."
              ],
              "code_path": [
                "LegendMarkTypeNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Scrollable legend",
              "introduction": [
                "Scrollable legend\n\nThe legend can be made scrollable by setting the `overflowY` for vertical legends or `overflowX` for horizontal legends.\nMake sure that the legend container has a fixed height or width to enable scrolling."
              ],
              "code_path": [
                "ScrollableLegend.js"
              ],
              "children": []
            },
            {
              "name": "Custom component",
              "introduction": [
                "Custom component\n\nFor advanced customization, you can create your own legend with `useLegend`.\nThis hook returns the items that the default legend would plot.\nAllowing you to focus on the rendering.\n\nThis demo show how to use it with slots.\nAnother demo in [HTML components docs](/x/react-charts/components/#html-components) shows how to use it with composition."
              ],
              "code_path": [
                "CustomLegend.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Color legend",
          "introduction": [
            "Color legend\n\nTo display legend associated to a [colorMap](https://mui.com/x/react-charts/styling/#values-color), you can use:\n\n- `<ContinuousColorLegend />` if you're using `colorMap.type='continuous'`\n- `<PiecewiseColorLegend />` if you're using `colorMap.type='piecewise'`.\n\nThen it is possible to override the `legend` slot to display the wanted legend, or use the [composition API](https://mui.com/x/react-charts/composition/) to add as many legends as needed."
          ],
          "code_path": [
            "VeryBasicColorLegend.js"
          ],
          "children": [
            {
              "name": "Select data",
              "introduction": [
                "Select data\n\nTo select the color mapping to represent, use the following props:\n\n- `axisDirection` can be `'x'`, `'y'`, or `'z'`. It indicates which axis contain the `colorMap` definition.\n- `axisId` The id of the axis to use in case the selected direction contains multiple ones."
              ],
              "code_path": [
                "BasicColorLegend.js"
              ],
              "children": []
            },
            {
              "name": "Position",
              "introduction": [
                "Position\n\nThis component position is done exactly the same way as the [legend for series](#position)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Label position",
              "introduction": [
                "Label position\n\nThe labels can be positioned in relation to the marks or gradient with the `labelPosition` prop.\nThe values accepted are `'start'`, `'end'` or `'extremes'`.\n\n- With `direction='horizontal'`, using `'start'` places the labels above the visual marker, while `end` places them below.\n- When `direction='vertical'`, is `'start'` or `'end'` the labels are positioned `left` and `right` of the visual markers, respectively.\n- With the `'extremes'` value, the labels are positioned at both the beginning and end of the visual marker."
              ],
              "code_path": [
                "LegendLabelPositions.js"
              ],
              "children": []
            },
            {
              "name": "Continuous color mapping",
              "introduction": [
                "Continuous color mapping\n\nTo modify the shape of the gradient, use the `length` and `thickness` props.\nThe `length` can either be a number (in px) or a percentage string. The `\"100%\"` corresponds to the parent dimension.\n\nTo format labels use the `minLabel`/`maxLabel`.\nThey accept either a string to display.\nOr a function `({value, formattedValue}) => string`.\n\nIt is also possible to reverse the gradient with the `reverse` prop."
              ],
              "code_path": [
                "ContinuousInteractiveDemoNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Piecewise color mapping",
              "introduction": [
                "Piecewise color mapping\n\nThe piecewise Legend is quite similar to the series legend.\nIt accepts the same props for [customization](#dimensions).\n\nTo override labels generated by default, provide a `labelFormatter` prop.\nIt takes the min/max of the piece and returns the label.\n\nValues can be `null` for the first and last pieces.\nAnd returning `null` removes the piece from the legend.\nReturning an empty string removes any label, but still display the `mark`.\n\n```ts\nlabelFormatter = ({ index, length, min, max, formattedMin, formattedMax }) =>\n  string | null;\n```\n\nThe `markType` can be changed with the `markType` prop.\nSince the color values are based on the axis, and not the series, the `markType` has to be set directly on the legend."
              ],
              "code_path": [
                "PiecewiseInteractiveDemoNoSnap.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Click event",
          "introduction": [
            "Click event\n\nYou can pass an `onItemClick` function to the `ChartsLegend` or `PiecewiseColorLegend` components to handle click events.\nThey both provide the following signature.\n\n```js\nconst clickHandler = (\n  event, // The click event.\n  context, // An object that identifies the clicked item.\n  index, // The index of the clicked item.\n) => {};\n```\n\nThe `context` object contains different properties depending on the legend type.\nClick the legend items to see their content."
          ],
          "code_path": [
            "LegendClickNoSnap.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->tooltip",
      "introduction": [
        "# Charts - Tooltip\n\n<p class=\"description\">Tooltip provides extra data on charts item.</p>\n\nIn all charts components, the tooltip is accessible via the slot `tooltip`.\nIf you are using composition, you can use the `<ChartsTooltip />` component."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Tooltip trigger",
          "introduction": [
            "Tooltip trigger\n\nThe Tooltip can be triggered by two kinds of events:\n\n- `'item'`—when the user's mouse hovers over an item on the chart, the tooltip displays data about this specific item.\n- `'axis'`—the user's mouse position is associated with a value of the x-axis. The tooltip displays data about all series at this specific x value.\n- `'none'`—disable the tooltip.\n\nTo pass this trigger attribute to the tooltip use `slotProps.tooltip.trigger`."
          ],
          "code_path": [
            "Interaction.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Formatting",
              "introduction": [
                "Formatting\n\nThe format of data rendered in the tooltip can be modified thanks to the series `valueFormatter` property.\nThe same can be applied to x values when a tooltip is triggered by the `'axis'`.\n\nHere is a demo with:\n\n- The time axis is formatted to only show the year\n- The number values are formatted in U.S. Dollars."
              ],
              "code_path": [
                "Formatting.js"
              ],
              "children": []
            },
            {
              "name": "Advanced formatting",
              "introduction": [
                "Advanced formatting\n\nThe series `valueFormatter` provides a context as its second argument containing a `dataIndex` property which you can use to calculate other data-related values.\n\nIn the demo below you can notice we use `dataIndex` to add each team's rank in the tooltip."
              ],
              "code_path": [
                "SeriesFormatter.js"
              ],
              "children": []
            },
            {
              "name": "Axis formatter",
              "introduction": [
                "Axis formatter\n\nTo modify how data is displayed in the axis use the `valueFormatter` property.\n\nIts second argument is a context that provides a `location` property with either `'tick'` or `'tooltip'`.\n\nIn this demo, you can see:\n\n- The country axis displays only the country code\n- The label displays annotated data `Country: name (code)`"
              ],
              "code_path": [
                "AxisFormatter.js"
              ],
              "children": []
            },
            {
              "name": "Label formatting",
              "introduction": [
                "Label formatting\n\nThe label text inside the tooltip can also be formatted conditionally by providing a function to the series `label` property.\n\n```jsx\n<LineChart\n  // ...\n  series={[\n    {\n      data: [ ... ],\n      label: (location) => location === 'tooltip' ? 'BR' : 'Brazil'\n    }\n  ]}\n/>\n```\n\n:::info\nSee [Label—Conditional formatting](/x/react-charts/label/#conditional-formatting) for more details.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Hiding values",
              "introduction": [
                "Hiding values\n\nYou can hide the axis value with `hideTooltip` in the `xAxis` props.\nIt removes the header showing the x-axis value from the tooltip.\n\n```jsx\n<LineChart\n  // ...\n  xAxis={[{ data: [ ... ], hideTooltip: true }]}\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Overriding content",
              "introduction": [
                "Overriding content\n\nTo override tooltip content, provide a custom component to `slots.tooltip`.\nSome helper are provided, such as:\n\n- `<ChartsTooltipContainer />` which provide a tooltip with built-in open and position management.\n- `useItemTooltip()` which provides all basic information associated to the current item.\n- `useAxisTooltip()` which provides all basic information associated to the current axis.\n\nHere is the basic scheme to follow.\nExamples about helpers are provided in the composition section.\n\n```jsx\nimport { ChartsTooltipContainer } from '@mui/x-charts/ChartsTooltip';\n\nfunction CustomItemTooltipContent() {\n  const tooltipData = useItemTooltip();\n\n  if (!tooltipData) { // No data to display\n    return null;\n  }\n\n  return <div>{/** Your custom content **/}</div>;\n}\n\n<LineChart\n  slots={{ tooltip: CustomItemTooltip }}\n/>\n\n// With composition\n<ChartContainer>\n  // ...\n  <ChartsTooltipContainer trigger=\"item\">\n    <CustomItemTooltipContent />\n  </ChartsTooltipContainer>\n</ChartContainer>\n```\n\n:::warning\nDo not skip ChartsTooltipContainer rendering if the tooltip has no data to display.\nFor example the following code does not work.\n\n```jsx\nif (tooltipData === null) {\n  return null;\n}\n\nreturn (\n  <ChartsTooltipContainer trigger=\"item\">\n    {/** My content **/}\n  </ChartsTooltipContainer>\n);\n```\n\nThe ChartsTooltipContainer must render before the pointer enters the SVG because it uses this event to get the pointer type.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Overriding placement",
              "introduction": [
                "Overriding placement\n\nTo override tooltip placement, override to the tooltip with `slots.tooltip`.\nIf you want to keep the default content, you can place the `ChartsItemTooltipContent` or `ChartsAxisTooltipContent` in your custom tooltip."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Composition",
          "introduction": [
            "Composition\n\nIf you're using composition, by default, the axis listens for mouse events to get its current x/y values.\nIf you don't need it, you can disable those listeners with the `disableAxisListener` prop.\n\nYou need those listeners if you are using [axes highlight](/x/react-charts/highlighting/#highlighting-axis) or you have a tooltip [triggered by axis](/x/react-charts/tooltip/#tooltip-trigger).\n\n```jsx\n<ChartContainer {...} disableAxisListener>\n  {/* ... */}\n</ChartContainer>\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Overriding content",
              "introduction": [
                "Overriding content"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Item Tooltip",
                  "introduction": [
                    "Item Tooltip\n\nYou can create your own tooltip by using `useItemTooltip()`.\nThis hook returns the information about the current item user is interacting with.\nIt contains:\n\n- `identifier`: An object that identify the item. Which often contains its series type, series id, and data index.\n- `color`: The color used to display the item. This includes the impact of [color map](/x/react-charts/styling/#values-color).\n- `label`, `value`, `formattedValue`: Values computed to simplify the tooltip creation.\n\nTo follow the mouse position, you can track pointer events on the SVG thanks to `useSvgRef`."
                  ],
                  "code_path": [
                    "CustomTooltipContent.js"
                  ],
                  "children": []
                },
                {
                  "name": "Axis Tooltip",
                  "introduction": [
                    "Axis Tooltip\n\nLike in previous section, you can create your own tooltip by using `useAxisTooltip()`.\nThis hook returns the information about the current axis user is interacting with and the relevant series.\nIt contains:\n\n- `identifier`: An object that identify the axis. Which often contains its series type, series id, and data index.\n- `color`: The color used to display the item. This includes the impact of [color map](/x/react-charts/styling/#values-color).\n- `label`, `value`, `formattedValue`: Values computed to simplify the tooltip creation.\n\nTo follow the mouse position, you can track pointer events on the SVG thanks to `useSvgRef`."
                  ],
                  "code_path": [
                    "CustomAxisTooltipContent.js"
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Tooltip position",
              "introduction": [
                "Tooltip position\n\nThis demo show example about how to use additional hooks such as `useXAxis()` or `useDrawingArea()` to customize the tooltip position."
              ],
              "code_path": [
                "CustomTooltipPosition.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "charts->sankey",
      "introduction": [
        "# Charts - Sankey [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')🚧\n\n<p class=\"description\">Sankey charts are great for visualizing flows between different elements.</p>\n\n:::warning\nThe Sankey Chart component isn't available yet, but you can upvote [**this GitHub issue**](https://github.com/mui/mui-x/issues/7930) to see it arrive sooner.\n\nDon't hesitate to leave a comment there to influence what gets built.\nEspecially if you already have a use case for this component, or if you're facing a pain point with your current solution.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "charts->areas-demo",
      "introduction": [
        "# Charts - Areas demonstration\n\n<p class=\"description\">This page groups demonstration using area charts.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "SimpleAreaChart",
          "introduction": [
            "SimpleAreaChart"
          ],
          "code_path": [
            "SimpleAreaChart.js"
          ],
          "children": []
        },
        {
          "name": "StackedAreaChart",
          "introduction": [
            "StackedAreaChart"
          ],
          "code_path": [
            "StackedAreaChart.js"
          ],
          "children": []
        },
        {
          "name": "TinyAreaChart",
          "introduction": [
            "TinyAreaChart"
          ],
          "code_path": [
            "TinyAreaChart.js"
          ],
          "children": []
        },
        {
          "name": "PercentAreaChart",
          "introduction": [
            "PercentAreaChart"
          ],
          "code_path": [
            "PercentAreaChart.js"
          ],
          "children": []
        },
        {
          "name": "AreaChartConnectNulls",
          "introduction": [
            "AreaChartConnectNulls"
          ],
          "code_path": [
            "AreaChartConnectNulls.js"
          ],
          "children": []
        },
        {
          "name": "AreaChartFillByValue",
          "introduction": [
            "AreaChartFillByValue\n\nTo display multiple colors in the area you can specify a gradient to fill the area (the same method can be applied on other SVG components).\n\nYou can pass this gradient definition as a children of the `<LineChart />` and use `sx` to override the area `fill` property.\nTo do so you will need to use the [`<linearGradient />`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient) and [`<stop />`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop) SVG elements.\n\nThe first part is to get the SVG total height.\nWhich can be done with the `useDrawingArea()` hook.\nIt's useful to define the `<linearGradient />` as a vector that goes from the top to the bottom of our SVG container.\n\nThen to define where the gradient should switch from one color to another, you can use the `useYScale` hook to get the y coordinate of value 0.\n\n:::info\nThe `<stop />` offset is a ratio of gradient vector.\nThat's why you need to divide the coordinate by the SVG height.\n:::"
          ],
          "code_path": [
            "AreaChartFillByValue.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->highlighting",
      "introduction": [
        "# Charts - Highlighting\n\n<p class=\"description\">Highlighting data offers quick visual feedback for chart users.</p>\n\nIt can be used to emphasize a specific data point or series, or to fade out the rest of the chart.\nAnd it can be controlled by the user or synchronized across multiple charts."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Highlighting",
          "introduction": [
            "Highlighting"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Highlighting axis",
              "introduction": [
                "Highlighting axis\n\nYou can highlight data based on mouse position.\nBy default, those highlights are lines, but it can also be a vertical band if your x-axis use `scaleType: 'band'`.\n\nOn the chart, to customize this behavior, you can use:\n\n```jsx\naxisHighlight={{\n  x: 'line', // Or 'none', or 'band'\n  y: 'line', // Or 'none'\n}}\n```"
              ],
              "code_path": [
                "BandHighlight.js"
              ],
              "children": []
            },
            {
              "name": "Highlighting series",
              "introduction": [
                "Highlighting series\n\nIn parallel with the tooltip, you can highlight and fade elements.\n\nThis kind of interaction is controlled by series properties `highlightScope` which contains two options:\n\n- `highlighted` Indicates which item to highlight. Its value can be\n  - `'none'` Do nothing (default one).\n  - `'item'` Only highlight the item itself.\n  - `'series'` Highlight all items of the series.\n- `faded` Indicates which item to fade (if they are not already highlighted). Its value can be\n  - `'none'` Do nothing (default one).\n  - `'series'` Fade all the items of the series.\n  - `'global'` Fade all the items of the chart."
              ],
              "code_path": [
                "ElementHighlights.js"
              ],
              "children": []
            },
            {
              "name": "Controlled highlight",
              "introduction": [
                "Controlled highlight\n\nThe highlight can be controlled by the user when they set `highlightedItem` and `onHighlightChange`.\n\nYou can set the `highlightedItem` value based on inputs, and sync it when the user hover over an item themselves."
              ],
              "code_path": [
                "ControlledHighlight.js"
              ],
              "children": [
                {
                  "name": "Synchronizing highlights",
                  "introduction": [
                    "Synchronizing highlights\n\nHaving a controlled highlight allows you to control it in multiple charts at the same time.\nYou need to ensure that the `series` has the same `ids` and the data is in the same order."
                  ],
                  "code_path": [
                    "SyncHighlight.js"
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "charts->stacking",
      "introduction": [
        "# Charts - Stacking\n\n<p class=\"description\">Stacking allows displaying the decomposition of values.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\nBar and line charts allow stacking series.\nTo stack series together, you need to pass them a `stack` attribute.\nSeries with the same `stack` value will get stacked together."
          ],
          "code_path": [
            "BasicStacking.js"
          ],
          "children": []
        },
        {
          "name": "Stacking strategy",
          "introduction": [
            "Stacking strategy\n\nBased on D3 [stack orders](https://github.com/d3/d3-shape#stack-orders) and [stack offsets](https://github.com/d3/d3-shape#stack-offsets) you can modify how series are stacked.\n\nTo pass those attributes, use series properties `stackOffset` (default `'diverging'` for bar and `'none'` for line) and `stackOrder` (default `'none'`).\nYou can define them for only one of the series of a stack group."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Stack offset",
              "introduction": [
                "Stack offset\n\nIf you just want to stack values, the `stackOffset` set to `'none'` should do the job.\n\nHowever, with negative values, you should use `'diverging'`.\nOtherwise, the stacked rectangle will overlap.\n\nTo show series evolution relative to other stacked series (instead of their absolute values), you can use `'expand'`.\n\n| Value         | Description                                               |\n| : | :-- |\n| `'none'`      | Set baseline at 0 and stack data on top of each other.    |\n| `'expand'`    | Set baseline at zero and scale data to end up at 1.       |\n| `'diverging'` | Stack positive value above zero and negative value below. |\n\nThe next demonstration allows testing the different `stackOffset` values.\n\nTo see how they interact with a dataset containing negative values, you can toggle \"data has negative values\" switch.\nWhen turned on, the series will have the following composition:\n\n- series A has only positive values.\n- series B has one negative value.\n- series C and D have only negative values."
              ],
              "code_path": [
                "StackOffsetDemo.js"
              ],
              "children": []
            },
            {
              "name": "Stack order",
              "introduction": [
                "Stack order\n\nThe order of stacked data matters for the reading of charts.\nThe evolution of the series at the bottom is the easiest to read since its baseline is 0.\n\nIf you know the data you are displaying, you can use `'none'` which respects the order you defined the series in.\nOtherwise, it might be interesting to order them according to their properties.\n\nWith `'appearance'`, the position of the maximal series value is taken into consideration.\n\nWith `'ascending'` and `'descending'`, the sum of values is taken into consideration.\nWhich corresponds to the area taken by the series on the chart.\n\n| Value          | Description                                                                                                                               |\n| :- | :---- |\n| `'none'`       | Respect the order the series are provided in.                                                                                             |\n| `'reverse'`    | Reverse the order the series are provided in.                                                                                             |\n| `'appearance'` | Sort series by ascending order according to the index of their maximal value. The series with the earliest maximum will be at the bottom. |\n| `'ascending'`  | Sort series by ascending order according to the sum of their values. Series taking the smallest surface will be at the bottom             |\n| `'descending'` | Sort series by descending order according to the sum of their values. Series taking the largest surface will be at the bottom             |\n\nTo experiment with stack orders, here are statistics about the transport used to go to the office depending on the distance between home and office.",
                "With the `'appearance'` order, **walking** will be the first since its maximal percentage is for **0-1km**. And the last one is **common transportation** because its maximum value is at the **>50km** distance.\n\nWith the `'ascending'` order, stacking starts with **bicycles** and **motorbikes** since their values respectively sum to **41.7** and **55.4**.\nThen arrives **walking** (with values sum to **94.1**).\nLastly, comes **common transportation** and **cars** which are visually more important.\n\nThe `'descending'` order is the strict opposite."
              ],
              "code_path": [
                "StackOrderDemo.js",
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "charts->pie-demo",
      "introduction": [
        "# Charts - Pie demonstration\n\n<p class=\"description\">This page groups demonstration using pie charts.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "TwoLevelPieChart",
          "introduction": [
            "TwoLevelPieChart"
          ],
          "code_path": [
            "TwoLevelPieChart.js"
          ],
          "children": []
        },
        {
          "name": "StraightAnglePieChart",
          "introduction": [
            "StraightAnglePieChart"
          ],
          "code_path": [
            "StraightAnglePieChart.js"
          ],
          "children": []
        },
        {
          "name": "TwoSimplePieChart",
          "introduction": [
            "TwoSimplePieChart"
          ],
          "code_path": [
            "TwoSimplePieChart.js"
          ],
          "children": []
        },
        {
          "name": "PieChartWithCustomizedLabel",
          "introduction": [
            "PieChartWithCustomizedLabel"
          ],
          "code_path": [
            "PieChartWithCustomizedLabel.js"
          ],
          "children": []
        },
        {
          "name": "PieChartWithPaddingAngle",
          "introduction": [
            "PieChartWithPaddingAngle"
          ],
          "code_path": [
            "PieChartWithPaddingAngle.js"
          ],
          "children": []
        },
        {
          "name": "PieChartWithCenterLabel",
          "introduction": [
            "PieChartWithCenterLabel"
          ],
          "code_path": [
            "PieChartWithCenterLabel.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->label",
      "introduction": [
        "# Charts - Label\n\n<p class=\"description\">Label is the text reference of a series or data.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic display",
          "introduction": [
            "Basic display\n\nTo set a series' label, you can pass in a `string` as a series' property `label`.\nThe provided label will be visible at different locations such as the legend, or the tooltip.\n\n:::info\nThe Pie chart has some specificity described in its [own section](#pie).\n:::"
          ],
          "code_path": [
            "BasicLabel.js"
          ],
          "children": []
        },
        {
          "name": "Conditional formatting",
          "introduction": [
            "Conditional formatting\n\nThe `label` property also accepts a `function` allowing you to change the label content based on location.\n\nThe function receives `location` as its first argument which can have the following values:\n\n- `'legend'` to format the label in the [Legend](/x/react-charts/legend/)\n- `'tooltip'` to format the label in the [Tooltip](/x/react-charts/tooltip/)"
          ],
          "code_path": [
            "FunctionLabel.js"
          ],
          "children": []
        },
        {
          "name": "Pie",
          "introduction": [
            "Pie\n\nThe [Pie](/x/react-charts/pie/) chart behaves differently due to its nature.\nIt has labels per slice instead of per series.\nIt also has one more place where the label can be rendered.\n\nInstead of receiving the `label` as part of the series.\nIt instead receives it as part of the `data` set inside a series.\n\nIts `location` argument can have the following values:\n\n- `'legend'` to format the label in the [Legend](/x/react-charts/legend/)\n- `'tooltip'` to format the label in the [Tooltip](/x/react-charts/tooltip/)\n- `'arc'` to format the [Arc label](/x/react-charts/pie/#labels) when `arcLabel` is set to `'label'`"
          ],
          "code_path": [
            "PieLabel.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->composition",
      "introduction": [
        "# Chart composition\n\n<p class=\"description\">Creating advanced custom charts.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Overview",
          "introduction": [
            "Overview\n\nThe `@mui/x-charts` follows an architecture based on context providers.\nThe overall idea is to pass your series and axes definitions to special components.\nThis component transforms the data and makes it available to its children, which can be composed.\n\nThere are two main classes of components, which are used to create a chart."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Structural components",
              "introduction": [
                "Structural components\n\nThese are used to define the chart's structure and data."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "The Data Provider and Surface components",
                  "introduction": [
                    "The Data Provider and Surface components\n\nAs the name suggests, the `ChartDataProvider` provides the data to the children components.\nWhile the `ChartsSurface` renders the SVG elements.\n\n```jsx\n<ChartDataProvider\n  // The configuration of the chart\n  series={[{ type: 'bar', data: [100, 200] }]}\n  xAxis={[{ scaleType: 'band', data: ['A', 'B'] }]}\n  width={500}\n  height={300}\n>\n  <ChartsSurface\n    // Ref needs to be directly on the ChartsSurface\n    ref={mySvgRef}\n  >\n    {children}\n  </ChartsSurface>\n</ChartDataProvider>\n```\n\n:::info\nThe demos here are using the `ChartContainer` component.\nTo see demos using the separate `ChartDataProvider` and `ChartsSurface` components, check the [HTML components documentation](/x/react-charts/components/#html-components).\n:::"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "The `ChartContainer` helper",
                  "introduction": [
                    "The `ChartContainer` helper\n\nThis component is a composition of the two previous components.\nIt can be used instead of them when there is no need to customize anything outside the chart's graphical elements.\n\n```jsx\n<ChartContainer\n  // The configuration of the chart\n  series={[{ type: 'bar', data: [100, 200] }]}\n  xAxis={[{ scaleType: 'band', data: ['A', 'B'] }]}\n  width={500}\n  height={300}\n  // Ref is forwarded internally to the ChartsSurface\n  ref={mySvgRef}\n>\n  {children}\n</ChartContainer>\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Graphical components",
              "introduction": [
                "Graphical components\n\nThese are any component that render the graphical elements of the chart.\nThey are the children of the **Structural components** shown above.\nThere are many of them, so they won't all be listed here.\nYou can even [create your own components](/x/react-charts/components/).\n\nSome examples of graphical components are:\n\n- `LinePlot`\n- `BarPlot`\n- `ChartsXAxis`\n- `ChartsLegend`\n- `ChartsTooltip`"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Container options",
          "introduction": [
            "Container options"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Responsive",
              "introduction": [
                "Responsive\n\nThe `<ChartContainer />` is responsive by default. The component automatically adjusts its dimensions to fit the available space defined by the parent element.\n\nTo control the dimensions of the chart, the `width` and `height` props can be provided.\nThe chart then renders with the specified dimensions.\n\n:::warning\nThe parent element must have intrinsic dimensions.\nIf the parent's dimensions rely on its content, the responsive charts will not render.\n:::\n\nThe following demo lets you switch between a chart using defined sizes, `<ChartContainer width={500} height={300} />`, and a chart without any sizes, `<ChartContainer />`, so you can see how they differ."
              ],
              "code_path": [
                "BasicComposition.js"
              ],
              "children": []
            },
            {
              "name": "Properties",
              "introduction": [
                "Properties\n\nThe chart container gets all props that are not specific to a single graphical element.\nThis includes:\n\n- The `xAxis` and `yAxis` props—find more information in the [Axis doc](/x/react-charts/axis/)\n- The `colors` prop as defined in the [color palette page](/x/react-charts/styling/#color-palette)\n- The `series` and `dataset` props"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Series",
                  "introduction": [
                    "Series\n\nThe `series` prop is an array of series definitions.\nYou can find an explanation about each specific series type in their respective docs page: [Line](/x/react-charts/lines/), [Bar](/x/react-charts/bars/), [Pie](/x/react-charts/pie/), and [Scatter](/x/react-charts/scatter/).\n\nWhen using a single Charts component, the library can guess which kind of series you are defining.\nFor example, the Bar Chart component assumes that `series` will be of type `'bar'`.\n\nWith composition, the chart container isn't able to guess the series type, so you must explicitly define it.\n\n```jsx\n<BarChart\n  series={[{\n    data: [1, 2, 3] // No need to specify it is a bar series\n  }]}\n/>\n\n<ChartContainer\n  series={[\n    { data: [1, 2, 3], type: 'bar' }, // This series is for the bar chart\n    { data: [3, 2, 1], type: 'line' } // This series is for the line chart\n  ]}\n>\n  <BarPlot /> {/* Will only display series with type: 'bar' */}\n  <LinePlot /> {/* Will only display series with type: 'line' */}\n</ChartContainer>\n```\n\nThose series can use the `dataset` prop the same way that a single-component chart does—see [Using a dataset](/x/react-charts/bars/#using-a-dataset) in the Bar Chart documentation for more details.\n\nIn the next demo, the chart is made by composing the `<BarPlot />` and `<LinePlot />` components.\nBy modifying the series `type` property, you can switch between rendering a line and a bar.\n\n```jsx\n<ChartContainer\n  series={[\n    { type, data: [1, 2, 3, 2, 1] },\n    { type, data: [4, 3, 1, 3, 4] },\n  ]}\n>\n  <BarPlot />\n  <LinePlot />\n  <ChartsXAxis label=\"X axis\" position=\"bottom\" axisId=\"x-axis-id\" />\n</ChartContainer>\n```"
                  ],
                  "code_path": [
                    "SwitchSeriesType.js"
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Subcomponents",
          "introduction": [
            "Subcomponents\n\n:::info\nThe CSS `z-index` property does not exist on SVG elements.\nElements rendered after overlap on top of elements rendered before.\nThe order of elements in composition is the only way to define how they overlap.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Plotting",
              "introduction": [
                "Plotting\n\nTo display data, you have components named `<XxxPlot />` such as `<LinePlot />`, `<AreaPlot />`, `<MarkPlot />`, `<BarPlot />`, etc."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Clipping",
              "introduction": [
                "Clipping\n\nTo ensure chart elements stay confined to the designated drawing area, use the `ChartsClipPath` component.\nThis component defines a rectangular clip path that acts as a boundary.\n\n1. **Define the Clip Path**: Use `<ChartsClipPath id={clipPathId} />` to establish the clip path for the drawing area. `clipPathId` must be a unique identifier.\n2. **Wrap the Chart**: Enclose the chart elements you want to clip within a `<g>` element. Set the `clipPath` attribute to `url(#${clipPathId})` to reference the previously defined clip path. Example: ``<g clipPath={`url(#${clipPathId})`}>``\n\n```jsx\n<ChartContainer>\n  <g clipPath={`url(#${clipPathId})`}>\n    // The plotting to clip in the drawing area.\n    <ScatterPlot />\n    <LinePlot />\n  </g>\n  <ChartsClipPath id={clipPathId} /> // Defines the clip path of the drawing area.\n</ChartContainer>\n```\n\nThe following demo allows you to toggle clipping for scatter and line plots.\nObserve how line markers extend beyond the clip area, rendering on top of the axes.",
                ":::warning\nThe provided demo is generating a unique ID with `useId()`.\n\n```js\nconst id = useId();\nconst clipPathId = `${id}-clip-path`;\n```\n\nIt's important to generate unique IDs for clip paths, especially when dealing with multiple charts on a page. Assigning a static ID like `\"my-id\"` would lead to conflicts.\n:::"
              ],
              "code_path": [
                "LimitOverflow.js",
                null
              ],
              "children": []
            },
            {
              "name": "Axis",
              "introduction": [
                "Axis\n\nTo add axes, you can use `<ChartsXAxis />` and `<ChartsYAxis />` as defined in the [axis page](/x/react-charts/axis/#composition).\n\nIt takes an `axisId` prop that indicates which axis, defined in the container, should be rendered.\nIf `axisId` is not provided it will pick the first one."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Grid",
              "introduction": [
                "Grid\n\nTo add a grid, you can use the `<ChartsGrid />` component.\n\nSee [Axis—Grid](/x/react-charts/axis/#grid) documentation for more information."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Additional information",
              "introduction": [
                "Additional information\n\nTo add a legend to your chart, you can use `<ChartsLegend />`.\n\nMost of the props are explained in the [legend page](/x/react-charts/legend/).\nThe demos use the `slotProps.legend` object, but with composition, you can pass props directly to `<ChartsLegend />`.\n\n```jsx\n// With single component chart\n<BarChart\n  slotProps={{\n    legend: {\n      direction: 'row',\n    }\n  }}\n/>\n\n// With composition\n<ChartContainer>\n  <ChartsLegend direction=\"row\" />\n</ChartContainer>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Interaction",
              "introduction": [
                "Interaction\n\nYou can also add interactive elements such as `<ChartsAxisHighlight />` and `<ChartsTooltip />`.\n\n:::info\nBy default, the container listens to mouse events to keep track of where the mouse is located on the chart.\n\nIf you are not using the axis highlight or the tooltip, consider disabling this feature with the `disableAxisListener` prop.\n\n```jsx\n<ChartContainer {...} disableAxisListener>\n```\n\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "charts->line-demo",
      "introduction": [
        "# Charts - Line demonstration\n\n<p class=\"description\">This page groups demonstration using line charts.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "SimpleLineChart",
          "introduction": [
            "SimpleLineChart"
          ],
          "code_path": [
            "SimpleLineChart.js"
          ],
          "children": []
        },
        {
          "name": "TinyLineChart",
          "introduction": [
            "TinyLineChart"
          ],
          "code_path": [
            "TinyLineChart.js"
          ],
          "children": []
        },
        {
          "name": "DashedLineChart",
          "introduction": [
            "DashedLineChart"
          ],
          "code_path": [
            "DashedLineChart.js"
          ],
          "children": []
        },
        {
          "name": "BiaxialLineChart",
          "introduction": [
            "BiaxialLineChart"
          ],
          "code_path": [
            "BiaxialLineChart.js"
          ],
          "children": []
        },
        {
          "name": "LineChartWithReferenceLines",
          "introduction": [
            "LineChartWithReferenceLines"
          ],
          "code_path": [
            "LineChartWithReferenceLines.js"
          ],
          "children": []
        },
        {
          "name": "LineChartConnectNulls",
          "introduction": [
            "LineChartConnectNulls"
          ],
          "code_path": [
            "LineChartConnectNulls.js"
          ],
          "children": []
        },
        {
          "name": "Line with forecast",
          "introduction": [
            "Line with forecast\n\nTo show that parts of the data have different meanings, you can render stylised lines for each of them.\n\nIn the following example, the chart shows a dotted line to exemplify that the data is estimated.\nTo do so, the `slots.line` is set with a custom components that render the default line twice.\n\n- The first one is clipped to show known values (from the left of the chart to the limit).\n- The second one is clipped to show predictions (from the limit to the right of the chart) with dash styling."
          ],
          "code_path": [
            "LineWithPrediction.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->pie",
      "introduction": [
        "# Charts - Pie\n\n<p class=\"description\">Pie charts express portions of a whole, using arcs or angles within a circle.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\nTo plot a pie chart, a series must have a data property containing an array of objects.\nThose objects should contain a property `value`.\nThey can also have a `label` property.\n\nIf you plan to update/reorder those data, you should add an `id` property which is used for `key` props."
          ],
          "code_path": [
            "BasicPie.js"
          ],
          "children": []
        },
        {
          "name": "Colors",
          "introduction": [
            "Colors\n\nThe pie colors can be customized in two ways.\n\n1. You can provide a [color palette](/x/react-charts/styling/#color-palette). Each arc of the pie will be colored according to this palette.\n2. You can provide a `color` property in `data` objects which overrides the palette.\n\n```jsx\n<PieChart\n  colors={['red', 'blue', 'green']} // Use palette\n  series={[\n    {\n      data: [\n        { value: 10, color: 'orange' }, // Use color property\n        // ...\n      ],\n    },\n  ]}\n/>\n```"
          ],
          "code_path": [
            "PieColor.js"
          ],
          "children": []
        },
        {
          "name": "Sizing",
          "introduction": [
            "Sizing\n\nPie series shape is described by multiple properties:\n\n- `innerRadius` The radius between the center and the beginning of the arc. The default is set to 0.\n- `outerRadius` The radius between the center and the end of the arc. The default is the largest value available in the drawing area.\n- `arcLabelRadius` The radius between the center and the arc label.\n- `paddingAngle` The angle (in degrees) between two arcs.\n- `cornerRadius` Similar to the CSS `border-radius`.\n- `startAngle`/`endAngle` The angle range of the pie chart. Values are given in degrees.\n- `cx`/`cy` The center of the pie charts. By default the middle of the drawing area.",
            "The following properties accept percentage string (for example `'50%'`).\n\n- `innerRadius`/`outerRadius`/`arcLabelRadius` with `'100%'` equivalent to maximal radius fitting in the drawing area.\n- `cx`, `cy` with `'100%'` equivalent to the drawing area width/height."
          ],
          "code_path": [
            "PieShapeNoSnap.js",
            null
          ],
          "children": []
        },
        {
          "name": "Labels",
          "introduction": [
            "Labels\n\nYou can display labels on the arcs.\nTo do so, the series should get `arcLabel` property.\nIt can either get a function that gets the object associated with the arc and returns the label.\nOr you can pass one of the following values:\n\n- `'value'` display the raw value of the arc.\n- `'formattedValue'` display the returned value of `valueFormatter` for the arc.\n- `'label'` display the `label` property of the arc if provided.\n\nTo avoid displaying labels on small arcs, you can provide `arcLabelMinAngle` property.\nArcs with angles smaller than the value (in deg) will not have labels."
          ],
          "code_path": [
            "PieArcLabel.js"
          ],
          "children": []
        },
        {
          "name": "Highlight",
          "introduction": [
            "Highlight\n\nPie series can get `highlightScope` property to manage element highlighting.\nIts behavior is described in the [dedicated page](/x/react-charts/highlighting/#highlighting-series).\n\nWhen elements are highlighted or faded they can be customized with dedicated CSS classes: `.MuiPieArc-faded` and `.MuiPieArc-highlighted`.\n\nCSS is well suited to modify the `color`, `stroke-width`, or `opacity`.\nHowever, to modify the size of a pie arc, you must use the `highlighted` and `faded` properties, with which you can override any of the properties `innerRadius`, `outerRadius`, and `cornerRadius` when an arc is highlighted or faded.\n\nIf you do not want to provide absolute values, you can use `additionalRadius` which will be added to the `outerRadius`.\nThis value can be negative to reduce arc size."
          ],
          "code_path": [
            "PieActiveArc.js"
          ],
          "children": []
        },
        {
          "name": "Click event",
          "introduction": [
            "Click event\n\nPie Chart provides an `onItemClick` handler for handling clicks on specific pie arcs.\nIt has the following signature.\n\n```js\nconst onItemClick = (\n  event, // The mouse event.\n  params, // An object that identifies the clicked element.\n) => {};\n```"
          ],
          "code_path": [
            "PieClickNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "Animation",
          "introduction": [
            "Animation\n\nTo skip animation at the creation and update of your chart you can use the `skipAnimation` prop.\nWhen set to `true` it skips animation powered by `@react-spring/web`.\n\nCharts containers already use the `useReducedMotion()` from `@react-spring/web` to skip animation [according to user preferences](https://react-spring.dev/docs/utilities/use-reduced-motion#why-is-it-important).\n\n```jsx\n// For a single component chart\n<PieChart skipAnimation />\n\n// For a composed chart\n<ChartContainer>\n  <PiePlot skipAnimation />\n</ChartContainer>\n```"
          ],
          "code_path": [
            "PieAnimation.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->gantt",
      "introduction": [
        "# Charts - Gantt [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')🚧\n\n<p class=\"description\">Gantt charts can illustrate a schedule and the relationships between its various activities.</p>\n\n:::warning\nThe Gantt Chart component isn't available yet, but you can upvote [**this GitHub issue**](https://github.com/mui/mui-x/issues/8732) to see it arrive sooner.\n\nDon't hesitate to leave a comment there to influence what gets built.\nEspecially if you already have a use case for this component, or if you're facing a pain point with your current solution.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "charts->bars",
      "introduction": [
        "# Charts - Bars\n\n<p class=\"description\">Bar charts express quantities through a bar's length, using a common baseline.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\nBar charts series should contain a `data` property containing an array of values.\n\nYou can customize bar ticks with the `xAxis`.\nThis axis might have `scaleType='band'` and its `data` should have the same length as your series."
          ],
          "code_path": [
            "BasicBars.js"
          ],
          "children": [
            {
              "name": "Using a dataset",
              "introduction": [
                "Using a dataset\n\nIf your data is stored in an array of objects, you can use the `dataset` helper prop.\nIt accepts an array of objects such as `dataset={[{x: 1, y: 32}, {x: 2, y: 41}, ...]}`.\n\nYou can reuse this data when defining the series and axis, thanks to the `dataKey` property.\n\nFor example `xAxis={[{ dataKey: 'x'}]}` or `series={[{ dataKey: 'y'}]}`."
              ],
              "code_path": [
                "BarsDataset.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Bar size",
          "introduction": [
            "Bar size\n\nYou can define bar dimensions with `categoryGapRatio` and `barGapRatio` properties.\n\nThe `categoryGapRatio` defines the gap between two categories.\nThe ratio is obtained by dividing the size of the gap by the size of the category (the space used by bars).\n\nThe `barGapRatio` defines the gap between two bars of the same category.\nIt's the size of the gap divided by the size of the bar.\nSo a value of `1` will result in a gap between bars equal to the bar width.\nAnd a value of `-1` will make bars overlap on top of each other."
          ],
          "code_path": [
            "BarGapNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "Stacking",
          "introduction": [
            "Stacking\n\nEach bar series can get a `stack` property expecting a string value.\nSeries with the same `stack` will be stacked on top of each other."
          ],
          "code_path": [
            "StackBars.js"
          ],
          "children": [
            {
              "name": "Stacking strategy",
              "introduction": [
                "Stacking strategy\n\nYou can use the `stackOffset` and `stackOrder` properties to define how the series will be stacked.\n\nBy default, they are stacked in the order you defined them, with positive values stacked above 0 and negative values stacked below 0.\n\nFor more information, see [stacking docs](/x/react-charts/stacking/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Layout",
          "introduction": [
            "Layout"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Bar direction",
              "introduction": [
                "Bar direction\n\nBar charts can be rendered with a horizontal layout by providing the `layout=\"horizontal\"` prop.\nIf you're using [composition](/x/react-charts/composition/), you should set the property `layout: 'horizontal'` to each bar series object."
              ],
              "code_path": [
                "HorizontalBars.js"
              ],
              "children": []
            },
            {
              "name": "Tick placement",
              "introduction": [
                "Tick placement\n\nWhen using a `\"band\"` scale, the axis has some additional customization properties about the tick position.\n\n- `tickPlacement` for the position of ticks\n- `tickLabelPlacement` for the position of the label associated with the tick\n\nYou can test all configuration options in the following demo:"
              ],
              "code_path": [
                "TickPlacementBars.js"
              ],
              "children": []
            },
            {
              "name": "Grid",
              "introduction": [
                "Grid\n\nYou can add a grid in the background of the chart with the `grid` prop.\n\nSee [Axis—Grid](/x/react-charts/axis/#grid) documentation for more information."
              ],
              "code_path": [
                "GridDemo.js"
              ],
              "children": []
            },
            {
              "name": "Color scale",
              "introduction": [
                "Color scale\n\nAs with other charts, you can modify the [series color](/x/react-charts/styling/#colors) either directly, or with the color palette.\n\nYou can also modify the color by using axes `colorMap` which maps values to colors.\nThe bar charts use by priority:\n\n1. The value axis color\n2. The band axis color\n3. The series color\n\nLearn more about the `colorMap` properties in the [Styling docs](/x/react-charts/styling/#values-color)."
              ],
              "code_path": [
                "ColorScale.js"
              ],
              "children": []
            },
            {
              "name": "Border radius",
              "introduction": [
                "Border radius\n\nTo give your bar chart rounded corners, you can change the value of the `borderRadius` property on the [BarChart](/x/api/charts/bar-chart/#bar-chart-prop-slots).\n\nIt works with any positive value and is properly applied to horizontal layouts, stacks, and negative values."
              ],
              "code_path": [
                "BorderRadius.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Labels",
          "introduction": [
            "Labels\n\nYou can display labels on the bars.\nTo do so, the `BarChart` or `BarPlot` accepts a `barLabel` property.\nIt can either get a function that gets the bar item and some context.\nOr you can pass `'value'` to display the raw value of the bar."
          ],
          "code_path": [
            "BarLabel.js"
          ],
          "children": [
            {
              "name": "Custom labels",
              "introduction": [
                "Custom labels\n\nYou can display, change, or hide labels based on conditional logic.\nTo do so, provide a function to the `barLabel`.\nLabels are not displayed if the function returns `null`.\n\nIn the example we display a `'High'` text on values higher than 10, and hide values when the generated bar height is lower than 60px."
              ],
              "code_path": [
                "CustomLabels.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Click event",
          "introduction": [
            "Click event\n\nBar charts provides two click handlers:\n\n- `onItemClick` for click on a specific bar.\n- `onAxisClick` for a click anywhere in the chart\n\nThey both provide the following signature.\n\n```js\nconst clickHandler = (\n  event, // The mouse event.\n  params, // An object that identifies the clicked elements.\n) => {};\n```",
            ":::info\nTheir is a slight difference between the `event` of `onItemClick` and `onAxisClick`:\n\n- For `onItemClick` it's a React synthetic mouse event emitted by the bar component.\n- For `onAxisClick` it's a native mouse event emitted by the svg component.\n\n:::"
          ],
          "code_path": [
            "BarClickNoSnap.js",
            null
          ],
          "children": [
            {
              "name": "Composition",
              "introduction": [
                "Composition\n\nIf you're using composition, you can get those click event as follows.\nNotice that the `onAxisClick` will handle both bar and line series if you mix them.\n\n```jsx\nimport ChartsOnAxisClickHandler from '@mui/x-charts/ChartsOnAxisClickHandler';\n// ...\n\n<ChartContainer>\n  {/* ... */}\n  <ChartsOnAxisClickHandler onAxisClick={onAxisClick} />\n  <BarPlot onItemClick={onItemClick} />\n</ChartContainer>;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Animation",
          "introduction": [
            "Animation\n\nTo skip animation at the creation and update of your chart, you can use the `skipAnimation` prop.\nWhen set to `true` it skips animation powered by `@react-spring/web`.\n\nCharts containers already use the `useReducedMotion()` from `@react-spring/web` to skip animation [according to user preferences](https://react-spring.dev/docs/utilities/use-reduced-motion#why-is-it-important).\n\n```jsx\n// For a single component chart\n<BarChart skipAnimation />\n\n// For a composed chart\n<ChartContainer>\n  <BarPlot skipAnimation />\n</ChartContainer>\n```"
          ],
          "code_path": [
            "BarAnimation.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->components",
      "introduction": [
        "# Charts - Custom components\n\n<p class=\"description\">Creating custom chart components is made easier by hooks.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Interact with dimensions",
          "introduction": [
            "Interact with dimensions"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Drawing area",
              "introduction": [
                "Drawing area\n\nCharts dimensions are defined by a few props:\n\n- `height` and `width` for the `<svg />` size. If not provided, those values are derived from the container.\n- `margin` for adding space between the `<svg />` border and the **drawing area**.\n\nThe term **drawing area** refers to the space available to plot data (scatter points, lines, or pie arcs).\nThe `margin` is used to leave some space for extra elements, such as the axes, the legend, or the title.\n\nYou can use the `useDrawingArea()` hook in the charts subcomponents to get the coordinates of the **drawing area**.\n\n```jsx\nimport { useDrawingArea } from '@mui/x-charts';\n\nconst { left, top, width, height } = useDrawingArea();\n```"
              ],
              "code_path": [
                "BasicScaleDemo.js"
              ],
              "children": []
            },
            {
              "name": "Scales",
              "introduction": [
                "Scales\n\nSome charts, such as line, bar, and scatter do a mapping between their series' data and the SVG coordinates.\n\nFor example, a line chart series with a value of 36,725$ on the 6th of December 2022 could be mapped to coordinates (628, 514).\nThis operation can be reversed.\nCoordinate with x=628 would be associated with the 6th of December 2022 and y=514 would be associated with value 36,725$.\n\nThose mappings depend on the dimensions of the SVG and the drawing area.\nIt also depends on the [axes' properties](/x/react-charts/axis/) such as the scale (linear, log, square root) and min/max values.\n\nAll that data is available in the [`d3-scale` objects](https://github.com/d3/d3-scale).\n\nYou can use `useXScale()` and `useYScale()` to access those scales.\nBoth accept either:\n\n- a number to select the index of the axis to select.\n- a string to select an axis by its id.\n\nThe scale object is generated such that it maps values to SVG coordinates.\nYou don't need extra work to take into account the drawing area."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Value to coordinate",
                  "introduction": [
                    "Value to coordinate\n\nThe `d3-scale` default method maps from values to coordinates.\nFor example, you can get the `x=0` coordinate as follows:\n\n```jsx\nconst xAxisScale = useXScale(); // get the default X scale\nconst xOrigin = xAxisScale(0);\n```"
                  ],
                  "code_path": [
                    "OriginDemo.js"
                  ],
                  "children": []
                },
                {
                  "name": "Coordinate to value",
                  "introduction": [
                    "Coordinate to value\n\nThe `d3-scale` object allows you to convert a coordinate to a data value with the `invert` method.\n\nThe next example contains two lines drawn using different y-axes.\nBy using `invert`, the value associated with the current mouse coordinate `y` can be resolved as follows:\n\n```jsx\n<text>{leftAxisScale.invert(yCoordinate).toFixed(0)}</text>\n```"
                  ],
                  "code_path": [
                    "ScaleDemo.js"
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "HTML components",
          "introduction": [
            "HTML components\n\nWith the introduction of the `ChartDataProvider` in v8, the chart data can be accessed from any component.\nThis allows you to create HTML components that interact with the charts data.\n\nIn the next example, notice that `MyCustomLegend` component displays the series names and colors.\nThis creates an html `table` element, which can be customized in any way.",
            ":::warning\nNote that the HTML components are not part of the SVG hierarchy.\nHence, they should be:\n\n- Outside the `<ChartsSurface />` component to avoid mixing HTML and SVG.\n- Inside the `<ChartDataProvider />` component to get access to the data.\n\n:::"
          ],
          "code_path": [
            "HtmlLegend.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->sparkline",
      "introduction": [
        "# Charts - Sparkline\n\n<p class=\"description\">Sparkline charts can provide an overview of data trends.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\nA sparkline is a small chart drawn without axes or coordinates, that presents the general shape of a variation in a simplified way.\nThe `<SparkLineChart />` requires only the `data` props which is an array of numbers.\nYou can also switch from line to a bar plot with `plotType=\"bar\"`."
          ],
          "code_path": [
            "BasicSparkLine.js"
          ],
          "children": []
        },
        {
          "name": "Line customization",
          "introduction": [
            "Line customization\n\nYou can fill the area below the sparkline curve with the `area` prop.\nTo modify the curve interpolation, use the `curve` prop. Read the full documentation for curves in the [line charts page](/x/react-charts/lines/#interpolation)."
          ],
          "code_path": [
            "AreaSparkLine.js"
          ],
          "children": []
        },
        {
          "name": "Interaction",
          "introduction": [
            "Interaction\n\nCompared to line and bar charts, the sparkline has some additional props to simplify interaction configuration.\nYou can use `showTooltip` and `showHighlight` to display the default tooltip and highlight in your sparkline.\n\nThose are helpers.\nIf you need more advanced customization, you can provide custom props for `tooltip` and `highlight` as described in the [Tooltip page](/x/react-charts/tooltip/)."
          ],
          "code_path": [
            "BasicSparkLineCustomization.js"
          ],
          "children": []
        },
        {
          "name": "Axis management",
          "introduction": [
            "Axis management"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "X-axis data",
              "introduction": [
                "X-axis data\n\nBy default, the sparkline assigns `xAxis` values as an ascending integer sequence starting from 0 (0, 1, 2,...). These values are, in this case, hidden in the tooltip.\nYou can override this behavior if your data are not evenly distributed, or if you need to label them.\n\nTo do so, use the `xAxis` prop.\nNotice that sparkline does not manage multiple axes, so `xAxis` prop takes an axis configuration object.\nWhereas most of the other charts expect an array of axis configuration objects.\n\n```jsx\n<SparkLineChart data={[1, 4, 2, 5, 7, 2, 4, 6]} xAxis={{ scaleType, data }} />\n```"
              ],
              "code_path": [
                "CustomAxis.js"
              ],
              "children": []
            },
            {
              "name": "Y-axis range",
              "introduction": [
                "Y-axis range\n\nYou can fix the y-range of the sparkline by providing `min`/`max` values to the `yAxis` configuration.\n\nThe following demo shows two sparklines, one with small and another with large values.\nThe first row has the default y-axis values, while on the second row a fixed range from `0` to `100` has been set.",
                "You can adjust the y-axis range of a sparkline relatively to its data by using the `domainLimit` option in the `yAxis` configuration.\nSee the [axis docs page](/x/react-charts/axis/#relative-axis-subdomain) for more information.\n\nThe demo below shows different ways to set the y-axis range.\nThey always display the same data, going from -15 to 92, but with different `domainLimit` settings."
              ],
              "code_path": [
                "CustomYAxis.js",
                "CustomDomainYAxis.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "charts->getting-started",
      "introduction": [
        "# Charts - Getting started\n\n<p class=\"description\">Install the MUI X Charts package to start building React data visualization components.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Installation",
          "introduction": [
            "Installation\n\nRun one of the following commands to install the free Community version or the paid Pro version of the MUI X Charts:\n\n<!-- #default-branch-switch -->\n\n{{\"component\": \"modules/components/ChartsInstallationInstructions.js\"}}\n\nThe Charts packages have a peer dependency on `@mui/material`.\nIf you're not already using it, install it with the following command:\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n```bash pnpm\npnpm add @mui/material @emotion/react @emotion/styled\n```\n\n```bash yarn\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n</codeblock>\n\n<!-- #react-peer-version -->\n\n[`react`](https://www.npmjs.com/package/react) and [`react-dom`](https://www.npmjs.com/package/react-dom) are also peer dependencies:\n\n```json\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n},\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Usage with D3",
              "introduction": [
                "Usage with D3\n\nTo help folks using CommonJS, the `@mui/x-charts` package uses a vendored package named `@mui/x-charts-vendor` to access D3 libraries.\nYou can import D3 functions from `@mui/x-charts-vendor/d3-scale`."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Rendering Charts",
          "introduction": [
            "Rendering Charts\n\nMUI X Charts can be rendered as _self-contained_ or _composable_ components.\n[Self-contained components](#self-contained-charts) are simpler to get started with and are recommended for most common use cases; more complex visualization (such as combining Bar and Line Charts on a single plot) requires [custom composition](#composable-charts)."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Self-contained Charts",
              "introduction": [
                "Self-contained Charts\n\nSelf-contained Chart components are imported and rendered as a single React component (such as `<BarChart />` or `<LineChart />`) which contains all of the necessary subcomponents.\n\nThese components require a `series` prop describing the data to render, as well as a numerical value (rendered in pixels) for the `height` prop.\nThe `width` prop is optional; if no value is provided, the Charts expand to fill the available space."
              ],
              "code_path": [
                "SimpleCharts.js"
              ],
              "children": []
            },
            {
              "name": "Composable Charts",
              "introduction": [
                "Composable Charts\n\nMore complex use cases require composition of the necessary subcomponents inside of a Chart Container wrapper.\nSubcomponents include:\n\n- Axis components – to define the X and Y axes\n- Plot components – to create Bars, Lines, or any other Chart type\n- Auxillary components - to add Tooltips, Highlights, and more\n- Utilities - such as classes and types\n\nSee the [Charts composition documentation](/x/react-charts/composition/) for complete details.\n\nThe demo below shows how to use composition to create a custom Chart that combines a Bar and a Line Chart on a single plot:"
              ],
              "code_path": [
                "Combining.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Chart layouts",
          "introduction": [
            "Chart layouts\n\nThe layout of a Chart is defined by two main spaces: the plot area, and the outer margins.\n\nThe `width` and `height` props define the dimensions of the SVG which is the root of the chart.\nWithin this SVG, the plot area (or drawing area) serves as the canvas for data visualization, where the lines, bars or other visual elements are rendered.\nThe size of the plot area is determined by the `margin = {top, bottom, left, right}` object which defines its outer margins inside the SVG.\nThe outer margin space is where information like axes, titles, and legends are displayed.\n\nSee the [Styling documentation](/x/react-charts/styling/#placement) for complete details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Server-side rendering",
          "introduction": [
            "Server-side rendering\n\nThe chart support server-side rendering under two conditions:\n\n1. The `width` and `height` props needs to be provided.\n2. The animation should be disabled with the `skipAnimation` prop.\n\nThe reason is that it is not possible to compute the SVG dimensions on the server, and the `skipAnimation` ensures that the animation is not in an \"empty\" state when first rendering."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Axis management",
          "introduction": [
            "Axis management\n\nMUI X Charts take a flexible approach to axis management, with support for multiple axes and any combination of scales and ranges.\n\nSee the [Axis documentation](/x/react-charts/axis/) for complete details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "TypeScript",
          "introduction": [
            "TypeScript\n\nTo benefit from [CSS overrides](/material-ui/customization/theme-components/#theme-style-overrides) and [default prop customization](/material-ui/customization/theme-components/#theme-default-props) with the theme, TypeScript users must import the following types.\nThese types use module augmentation to extend the default theme structure.\n\n```tsx\n// only one import is necessary,\n// from the version you're currently using.\nimport type {} from '@mui/x-charts/themeAugmentation';\nimport type {} from '@mui/x-charts-pro/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    MuiChartsAxis: {\n      styleOverrides: {\n        tick: {\n          stroke: '#006BD6',\n        },\n      },\n    },\n  },\n});\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->zoom-and-pan",
      "introduction": [
        "# Charts - Zooming and panning [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Enables zooming and panning on specific charts or axis.</p>\n\nZooming is possible on the **Pro**[<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan') versions of the charts: `<LineChartPro />`, `<BarChartPro />`, `<ScatterChartPro />`."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage\n\nTo enable zooming and panning, set the `zoom` prop to `true` on the wanted axis.\n\nEnabling zoom will enable all the interactions, which are made to be as intuitive as possible.\n\nThe following actions are supported:\n\n- **Scroll**: Zoom in/out by scrolling the mouse wheel.\n- **Drag**: Pan the chart by dragging the mouse.\n- **Pinch**: Zoom in/out by pinching the chart.",
            "",
            ""
          ],
          "code_path": [
            "ZoomScatterChart.js",
            "ZoomBarChart.js",
            "ZoomLineChart.js"
          ],
          "children": []
        },
        {
          "name": "Zooming options",
          "introduction": [
            "Zooming options\n\nYou can customize the zooming behavior by setting the `zoomOptions` prop.\n\nThe following options are available:\n\n- **minStart**: The starting percentage of the axis range. Between 0 and 100.\n- **maxEnd**: The ending percentage of the zoom range.\n- **step**: The step of the zooming function. Defines the granularity of the zoom.\n- **minSpan**: Restricts the minimum span size.\n- **maxSpan**: Restricts the maximum span size.\n- **panning**: Enables or disables panning."
          ],
          "code_path": [
            "ZoomOptionsNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "Zoom filtering",
          "introduction": [
            "Zoom filtering\n\nYou can make the zoom of an axis affect one or more axes extremums by setting the `zoom.filterMode` prop on the axis config.\n\n- If `zoom.filterMode` is set to `\"discard\"` the data points outside the visible range of this axis are filtered out and the other axes will modify their zoom range to fit the visible ones.\n- If `zoom.filterMode` is set to `\"keep\"` (default) the data points outside the visible range are kept. Then, other axes will not be impacted.\n\nSee how the secondary axis adapts to the visible part of the primary axis in the following example."
          ],
          "code_path": [
            "ZoomFilterMode.js"
          ],
          "children": []
        },
        {
          "name": "External zoom management",
          "introduction": [
            "External zoom management\n\nYou can manage the zoom state by two means:\n\n- By defining an initial state with the `initialZoom` prop.\n- By imperatively set a zoom value with the `setZoomData` method of the public api.\n\nIn addition, the `onZoomChange` prop is a function that receives the new zoom state.\n\nThe `zoom` state is an array of objects that define the zoom state for each axis with zoom enabled.\n\n- **axisId**: The id of the axis to control.\n- **start**: The starting percentage of the axis range.\n- **end**: The ending percentage of the zoom range."
          ],
          "code_path": [
            "ZoomControlled.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->scatter",
      "introduction": [
        "# Charts - Scatter\n\n<p class=\"description\">Scatter charts express the relation between two variables, using points in a surface.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\nScatter chart series should contain a `data` property containing an array of objects.\nThose objects require `x`, `y`, and `id` properties."
          ],
          "code_path": [
            "BasicScatter.js"
          ],
          "children": [
            {
              "name": "Using a dataset",
              "introduction": [
                "Using a dataset\n\nIf your data is stored in an array of objects, you can use the `dataset` helper prop.\nIt accepts an array of objects such as `dataset={[{a: 1, b: 32, c: 873}, {a: 2, b: 41, c: 182}, ...]}`.\n\nYou can reuse this data when defining the series.\nThe scatter series work a bit differently than in other charts.\nYou need to specify the `datasetKeys` properties which is an object that requires `x`, `y`, and `id` keys.\nWith an optional `z` key if needed."
              ],
              "code_path": [
                "ScatterDataset.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Interaction",
          "introduction": [
            "Interaction\n\nSince scatter elements can be small, interactions do not require hovering exactly over an element.\nWhen the pointer is in the drawing area, the closest scatter element will be used for interactions (tooltip or highlights).\nTo do so, the chart computes [Voronoi cells](https://en.wikipedia.org/wiki/Voronoi_diagram) which map the pointer position to the closest element.\n\nYou can define a maximal radius with the `voronoiMaxRadius` prop.\nIf the distance with the pointer is larger than this radius, no item will be selected.\nOr set the `disableVoronoi` prop to `true` to trigger interactions only when hovering exactly over an element instead of Voronoi cells.",
            "To use this feature with composition, add the `ChartsVoronoiHandler`.\n\n```jsx\n<ChartsVoronoiHandler voronoiMaxRadius={50} />\n```"
          ],
          "code_path": [
            "VoronoiInteraction.js",
            null
          ],
          "children": []
        },
        {
          "name": "Click event",
          "introduction": [
            "Click event\n\nScatter Chart provides an `onItemClick` handler for handling clicks on specific scatter items.\nIt has the following signature.\n\n```js\nconst onItemClick = (\n  event, // The mouse event.\n  params, // An object that identifies the clicked elements.\n) => {};\n```",
            "If `disableVoronoi=true`, users need to click precisely on the scatter element, and the mouse event will come from this element.\n\nOtherwise, the click behavior will be the same as defined in the [interaction section](#interaction) and the mouse event will come from the svg component."
          ],
          "code_path": [
            "ScatterClickNoSnap.js",
            null
          ],
          "children": []
        },
        {
          "name": "Styling",
          "introduction": [
            "Styling"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Color scale",
              "introduction": [
                "Color scale\n\nAs with other charts, you can modify the [series color](/x/react-charts/styling/#colors) either directly, or with the color palette.\n\nYou can also modify the color by using axes `colorMap` which maps values to colors.\nThe scatter charts use by priority:\n\n1. The z-axis color\n2. The y-axis color\n3. The x-axis color\n4. The series color\n\n:::info\nThe z-axis is a third axis that allows to customize scatter points independently from their position.\nIt can be provided with `zAxis` props.\n\nThe value to map can either come from the `z` property of series data, or from the zAxis data.\nHere are three ways to set z value to 5.\n\n```jsx\n<ScatterChart\n  // First option\n  series={[{ data: [{ id: 0, x: 1, y: 1, z: 5 }] }]}\n  // Second option\n  zAxis={[{ data: [5] }]}\n  // Third option\n  dataset={[{ price: 5 }]}\n  zAxis={[{ dataKey: 'price' }]}\n/>\n```\n\n:::\n\nLearn more about the `colorMap` properties in the [Styling docs](/x/react-charts/styling/#values-color)."
              ],
              "code_path": [
                "ColorScale.js"
              ],
              "children": []
            },
            {
              "name": "Grid",
              "introduction": [
                "Grid\n\nYou can add a grid in the background of the chart with the `grid` prop.\n\nSee [Axis—Grid](/x/react-charts/axis/#grid) documentation for more information."
              ],
              "code_path": [
                "GridDemo.js"
              ],
              "children": []
            },
            {
              "name": "CSS 🚧",
              "introduction": [
                "CSS 🚧"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Shape 🚧",
              "introduction": [
                "Shape 🚧"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Size 🚧",
              "introduction": [
                "Size 🚧"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "charts->axis",
      "introduction": [
        "# Charts - Axis\n\n<p class=\"description\">Axis provides associate values to element positions.</p>\n\nAxes are used in the following charts: `<LineChart />`, `<BarChart />`, `<ScatterChart />`."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Defining axis",
          "introduction": [
            "Defining axis\n\nLike your data, axis definition plays a central role in the chart rendering.\nIt's responsible for the mapping between your data and element positions.\n\nYou can define custom axes by using `xAxis` and `yAxis` props.\nThose props expect an array of objects.\n\nHere is a demonstration with two lines with the same data.\nBut one uses a linear, and the other a log axis.\nEach axis definition is identified by its property `id`.\nThen each series specifies the axis they use with the `xAxisId` and `yAxisId` properties.",
            ":::info\nThe management of those ids is for advanced use cases, such as charts with multiple axes.\nOr customized axes.\n\nIf you do not provide a `xAxisId` or `yAxisId`, the series will use the first axis defined.\n\nThat's why in most of the demonstrations with single x and y axis you will not see definitions of axis `id`, `xAxisId`, or `yAxisId`.\nThose demonstrations use the defaultized values.\n:::"
          ],
          "code_path": [
            "ScaleExample.js",
            null
          ],
          "children": [
            {
              "name": "Axis type",
              "introduction": [
                "Axis type\n\nThe axis type is specified by its property `scaleType` which expect one of the following values:\n\n- `'band'`: Split the axis in equal band. Mostly used for bar charts.\n- `'point'`: Split the axis in equally spaced points. Mostly used for line charts on categories.\n- `'linear'`, `'log'`, `'sqrt'`: Map numerical values to the space available for the chart. `'linear'` is the default behavior.\n- `'time'`, `'utc'`: Map JavaScript `Date()` object to the space available for the chart."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Axis data",
              "introduction": [
                "Axis data\n\nThe axis definition object also includes a `data` property.\nWhich expects an array of value coherent with the `scaleType`:\n\n- For `'linear'`, `'log'`, or `'sqrt'` it should contain numerical values\n- For `'time'` or `'utc'` it should contain `Date()` objects\n- For `'band'` or `'point'` it can contain `string`, or numerical values\n\nSome series types also require specific axis attributes:\n\n- line plots require an `xAxis` to have `data` provided\n- bar plots require an `xAxis` with `scaleType=\"band\"` and some `data` provided."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Axis formatter",
              "introduction": [
                "Axis formatter\n\nAxis data can be displayed in the axes ticks and the tooltip.\nTo modify how data is displayed use the `valueFormatter` property.\n\nThe second argument of `valueFormatter` provides some rendering context for advanced use cases.\n\nIn the next demo, `valueFormatter` is used to shorten months and introduce a breaking space for ticks only.\nTo distinguish tick and tooltip, it uses the `context.location`."
              ],
              "code_path": [
                "FormatterDemoNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Axis sub domain",
              "introduction": [
                "Axis sub domain\n\nBy default, the axis domain is computed such that all your data is visible.\nTo show a specific range of values, you can provide properties `min` and/or `max` to the axis definition.\n\n```js\nxAxis={[\n  {\n    min: 10,\n    max: 50,\n  },\n]}\n```"
              ],
              "code_path": [
                "MinMaxExample.js"
              ],
              "children": []
            },
            {
              "name": "Relative axis subdomain",
              "introduction": [
                "Relative axis subdomain\n\nYou can adjust the axis range relatively to its data by using the `domainLimit` option.\nIt can take 3 different values:\n\n- `\"nice\"` Rounds the domain at human friendly values. It's the default behavior.\n- `\"strict\"` Sets the domain to the min/max value to display.\n- `([minValue, maxValue]) => [min, max]` Receives the calculated extremums as parameters, and should return the axis domain.\n\nThe demo below shows different ways to set the y-axis range.\nThey always display the same data, going from -15 to 92, but with different `domainLimit` settings."
              ],
              "code_path": [
                "CustomDomainYAxis.js"
              ],
              "children": []
            },
            {
              "name": "Axis direction",
              "introduction": [
                "Axis direction\n\nBy default, the axes' directions are left to right and bottom to top.\nYou can change this behavior with the property `reverse`."
              ],
              "code_path": [
                "ReverseExampleNoSnap.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Grid",
          "introduction": [
            "Grid\n\nYou can add a grid in the background of the cartesian chart with the `grid` prop.\n\nIt accepts an object with `vertical` and `horizontal` properties.\nSetting those properties to `true` will display the grid lines.\n\nIf you use composition you can pass those properties to the `<ChartsGrid />` component.\n\n```jsx\n<BarChart grid={{ vertical: true }}>\n\n<ChartContainer>\n  <ChartsGrid vertical >\n</ChartContainer>\n```"
          ],
          "code_path": [
            "GridDemo.js"
          ],
          "children": []
        },
        {
          "name": "Tick position",
          "introduction": [
            "Tick position"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Automatic tick position",
              "introduction": [
                "Automatic tick position\n\nYou can customize the number of ticks with the property `tickNumber`.\n\n:::info\nThis number is not the exact number of ticks displayed.\n\nThanks to d3, ticks are placed to be human-readable.\nFor example, ticks for time axes will be placed on special values (years, days, half-days, ...).\n\nIf you set `tickNumber=5` but there are only 4 years to display in the axis, the component might choose to render ticks on the 4 years, instead of putting 5 ticks on some months.\n:::\n\nAs a helper, you can also provide `tickMinStep` and `tickMaxStep` which will compute `tickNumber` such that the step between two ticks respect those min/max values.\n\nHere the top axis has a `tickMinStep` of half a day, and the bottom axis a `tickMinStep` of a full day."
              ],
              "code_path": [
                "TickNumber.js"
              ],
              "children": []
            },
            {
              "name": "Fixed tick positions",
              "introduction": [
                "Fixed tick positions\n\nIf you want more control over the tick position, you can use the `tickInterval` property.\n\nThis property accepts an array of values.\nTicks will be placed at those values.\n\nFor axis with scale type `'point'`, the `tickInterval` property can be a filtering function of the type `(value, index) => boolean`.\n\nIn the next demo, both axes are with `scaleType='point'`.\nThe top axis displays the default behavior.\nIt shows a tick for each point.\nThe bottom axis uses a filtering function to only display a tick at the beginning of a day."
              ],
              "code_path": [
                "TickPosition.js"
              ],
              "children": []
            },
            {
              "name": "Filtering ticks label",
              "introduction": [
                "Filtering ticks label\n\nYou can display labels only on a subset of ticks with the `tickLabelInterval` property.\nIt's a filtering function in the `(value, index) => boolean` form.\n\nFor example `tickLabelInterval: (value, index) => index % 2 === 0` will show the label every two ticks.\n\n:::warning\nThe `value` and `index` arguments are those of the ticks, not the axis data.\n:::\n\nBy default, ticks are filtered such that their labels do not overlap.\nYou can override this behavior with `tickLabelInterval: () => true` which forces showing the tick label for each tick.\n\nIn this example, the top axis is a reference for the default behavior.\nNotice that tick labels do not overflow.\n\nAt the bottom, you can see one tick for the beginning and the middle of the day but the tick label is only displayed for the beginning of the day."
              ],
              "code_path": [
                "TickLabelPosition.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Axis customization",
          "introduction": [
            "Axis customization\n\nYou can further customize the axis rendering besides the axis definition."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Fixing overflow issues",
              "introduction": [
                "Fixing overflow issues\n\nIf your tick labels are too long, they can either overflow the SVG or overlap with the axis label.\nResolving this can be achieved in two ways:\n\n- Increase the space between the SVG border and the axis by setting the [margin props](/x/react-charts/styling/#placement).\n- Modify the axis label position by:\n  - Using the axis configuration `labelStyle.transform`.\n  - Applying CSS transform to the class name `axisClasses.label`.\n\nIn the following demo, the margin is modified to provide more space to the x and y axes.\nThe x-axis label placement is based on the axis configuration, and the y-axis is placed using a CSS selector."
              ],
              "code_path": [
                "MarginAndLabelPosition.js"
              ],
              "children": []
            },
            {
              "name": "Position",
              "introduction": [
                "Position\n\nCharts components provide 4 props: `topAxis`, `rightAxis`, `bottomAxis`, and `leftAxis` allowing to define the 4 axes of the chart.\nThose props can accept three type of value:\n\n- `null` to not display the axis\n- `string` which should correspond to the id of a `xAxis` for top and bottom. Or to the id of a `yAxis` for left and right.\n- `object` which will be passed as props to `<XAxis />` or `<YAxis />`. It allows to specify which axis should be represent with the `axisId` property, and to customize the design of the axis.\n\nThe demo below uses `leftAxis={null}` to remove the left axis, and `rightAxis={{}}` to set a right axis without overriding the default y-axis configuration."
              ],
              "code_path": [
                "ModifyAxisPosition.js"
              ],
              "children": []
            },
            {
              "name": "Hiding axis",
              "introduction": [
                "Hiding axis\n\nTo hide an axis, set it to `null`.\nFor example `leftAxis={null}` hides the left axis."
              ],
              "code_path": [
                "HidingAxis.js"
              ],
              "children": []
            },
            {
              "name": "Rendering",
              "introduction": [
                "Rendering\n\nAxes rendering can be further customized. Below is an interactive demonstration of the axis props."
              ],
              "code_path": [
                "AxisCustomizationNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Text customization",
              "introduction": [
                "Text customization\n\nTo customize the text elements (ticks label and the axis label) use the `tickLabelStyle` and `labelStyle` properties of the axis configuration."
              ],
              "code_path": [
                "AxisTextCustomizationNoSnap.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Composition",
          "introduction": [
            "Composition\n\nIf you are using composition, you have to provide the axis settings in the `<ChartContainer />` by using `xAxis` and `yAxis` props.\n\nIt will provide all the scaling properties to its children, and allows you to use `<XAxis/>` and `<YAxis/>` components as children.\nThose components require an `axisId` prop to link them to an axis you defined in the `<ChartContainer />`.\n\nYou can choose their position with `position` props which accept `'top'`/`'bottom'` for `<XAxis />` and `'left'`/`'right'` for `<YAxis />`.\nOther props are similar to the ones defined in the [previous section](/x/react-charts/axis/#rendering)."
          ],
          "code_path": [
            "AxisWithComposition.js"
          ],
          "children": [
            {
              "name": "Reference line",
              "introduction": [
                "Reference line\n\nThe `<ChartsReferenceLine />` component add a reference line to the charts.\nYou can provide an `x` or `y` prop to get a vertical or horizontal line respectively at this value.\n\nYou can add a `label` to this reference line.\nIt can be placed with `labelAlign` prop which accepts `'start'`, `'middle'`, and `'end'` values.\nElements can be styled with `lineStyle` and `labelStyle` props."
              ],
              "code_path": [
                "ReferenceLine.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "charts->gauge",
      "introduction": [
        "# Charts - Gauge\n\n<p class=\"description\">Gauge charts let the user evaluate metrics.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\nThe Gauge displays a numeric value that varies within a defined range."
          ],
          "code_path": [
            "BasicGauges.js"
          ],
          "children": []
        },
        {
          "name": "Value range",
          "introduction": [
            "Value range\n\nThe Gauge's value is provided through the `value` props, which accept a value range between 0 and 100.\nTo modify it, use the `valueMin` and `valueMax` props."
          ],
          "code_path": [
            "GaugeValueRangeNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "Arcs configuration",
          "introduction": [
            "Arcs configuration\n\nModify the arc shape with the following props:\n\n- `startAngle` and `endAngle`: The angle range provided in degrees\n- `innerRadius` and `outerRadius`: The arc's radii. It can be a fixed number of pixels or a percentage string, which will be a percent of the maximal available radius\n- `cornerRadius`: It can be a fixed number of pixels or a percentage string, which will be a percent of the maximal available radius",
            ":::success\nNotice that the arc position is computed to let the Gauge take as much space as possible in the drawing area.\n\nUse the `cx` and/or `cy` props to fix the coordinate of the arc center.\n:::"
          ],
          "code_path": [
            "ArcPlaygroundNoSnap.js",
            null
          ],
          "children": []
        },
        {
          "name": "Text configuration",
          "introduction": [
            "Text configuration\n\nBy default, the Gauge displays the value in the center of the arc.\nTo modify it, use the `text` prop.\n\nThis prop can be a string, or a formatter.\nIn the second case, the formatter argument contains the `value`, `valueMin` and `valueMax`.\n\nTo modify the text's layout, use the `gaugeClasses.valueText` class name."
          ],
          "code_path": [
            "TextPlaygroundNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "Arc design",
          "introduction": [
            "Arc design\n\nTo customize the Gauge styles, use the `chartsGaugeClasses` export to pull class names from different parts of the component, such as `valueText`, `valueArc`, and `referenceArc`.\n\nFor a full reference list, visit the [API page](/x/api/charts/gauge/#classes)."
          ],
          "code_path": [
            "ArcDesign.js"
          ],
          "children": []
        },
        {
          "name": "Adding elements",
          "introduction": [
            "Adding elements"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Using the default Gauge",
              "introduction": [
                "Using the default Gauge\n\nTo insert more elements into the Gauge, the first option would be to add them as children, which means they will be stacked on top of the default rendering.\n\n```tsx\nimport { Gauge } from '@mui/x-charts/Gauge';\n\n<Gauge value={25} valueMax={50}>\n  <AddedElement />\n</Gauge>;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Using the Gauge container",
              "introduction": [
                "Using the Gauge container\n\nThe second option is to make use of the following elements that are available within the Gauge module:\n\n- Gauge Reference Arc\n- Gauge Value Arc\n- Gauge Value Text\n\n```tsx\nimport {\n  GaugeContainer,\n  Gauge,\n  GaugeReferenceArc,\n  GaugeValueArc,\n} from '@mui/x-charts/Gauge';\n\n<GaugeContainer value={25} valueMax={50}>\n  <GaugeReferenceArc />\n  <GaugeValueArc />\n  <AddedElement />\n</GaugeContainer>;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Creating your components",
              "introduction": [
                "Creating your components\n\nTo create your own components, use the `useGaugeState()` hook which provides all you need about the gauge configuration:\n\n- information about the value: `value`, `valueMin`, `valueMax`\n- information to plot the arc: `startAngle`, `endAngle`, `outerRadius`, `innerRadius`, `cornerRadius`, `cx`, and `cy`\n- computed values:\n  - `maxRadius`: the maximal radius that can fit the drawing area\n  - `valueAngle`: the angle associated with the current value"
              ],
              "code_path": [
                "CompositionExample.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\nThe MUI X Gauge is compliant with the [Meter ARIA pattern](https://www.w3.org/WAI/ARIA/apg/patterns/meter/), which includes the addition of the `meter` role to the parent container and correct usage of the `aria-valuenow`, `aria-valuemin`, and `aria-valuemax` attributes."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Label",
              "introduction": [
                "Label\n\nIf a visible label is available, reference it by adding `aria-labelledby` attribute.\nOtherwise, the label can be manually provided by `aria-label`."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Presentation",
              "introduction": [
                "Presentation\n\nAssistive technologies often present the value as a percentage.\nThis can be modified by providing `aria-valuetext` attribute.\n\nFor example, a battery level indicator is better with an hour-long duration.\n\n```jsx\n<h3 id=\"battery_level_label\">\n  Battery level\n</h3>\n<Gauge\n  value={6}\n  valueMax={12}\n  aria-labelledby=\"battery_level_label\"\n  aria-valuetext=\"50% (6 hours) remaining\"\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "charts->styling",
      "introduction": [
        "# Charts - Styling\n\n<p class=\"description\">This page groups topics about charts customization.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Colors",
          "introduction": [
            "Colors"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Series color",
              "introduction": [
                "Series color\n\nSeries accepts a property `color` which is the base color used to render its components.\n\n```jsx\n<LineChart series={[{ ..., color: '#fdb462'}]} />\n```"
              ],
              "code_path": [
                "BasicColor.js"
              ],
              "children": []
            },
            {
              "name": "Color palette",
              "introduction": [
                "Color palette\n\nCharts come with built-in color palettes to automatically assign colors to series.\nIf a particular series lacks a color prop, the chart will default to assigning a color based on the series' index.\n\nYou can set a custom color palette by using the prop `colors` on chart components (or `<ChartContainer />` if you are using composition).\nThis prop takes an array of colors, or callback whose input is the theme's mode (`'dark'` or `'light'`) and returns the array of colors."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Provided palettes",
                  "introduction": [
                    "Provided palettes\n\nThe library includes three palettes."
                  ],
                  "code_path": [
                    "MuiColorTemplate.js"
                  ],
                  "children": []
                },
                {
                  "name": "Custom palettes",
                  "introduction": [
                    "Custom palettes\n\nThose palettes can also be generated by using [d3-scale-chromatic](https://observablehq.com/@d3/color-schemes).\nOr any color manipulation library you like.\n\nHere is an example of the d3 Categorical color palette."
                  ],
                  "code_path": [
                    "ColorTemplate.js"
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Values color",
              "introduction": [
                "Values color\n\nColors can also be set according to item values using the `colorMap` property of the corresponding axis.\n\nLearn more about how to use this feature with each chart component in their dedicated docs section:\n\n- [bar charts](/x/react-charts/bars/#color-scale)\n- [line charts](/x/react-charts/lines/#color-scale)\n- [scatter charts](/x/react-charts/scatter/#color-scale)\n\nThe `colorMap` property can accept three kinds of objects defined below."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Piecewise color map",
                  "introduction": [
                    "Piecewise color map\n\nThe piecewise configuration takes an array of _n_ `thresholds` values and _n+1_ `colors`.\n\n```ts\n{\n  type: 'piecewise';\n  thresholds: Value[];\n  colors: string[];\n}\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Continuous color map",
                  "introduction": [
                    "Continuous color map\n\nThe continuous configuration lets you map values from `min` to `max` properties to their corresponding colors.\n\nThe `color` property can either be an array of two colors to interpolate, or an interpolation function that returns a color corresponding to a number _t_ with a value between 0 and 1.\nThe [d3-scale-chromatic](https://d3js.org/d3-scale-chromatic) offers a lot of those functions.\n\nValues lower than the `min` get the color of the `min` value; similarly, values higher than the `max` get the color of the `max` value.\nBy default, the `min`/`max` range is set to 0 / 100.\n\n```ts\n{\n  type: 'continuous';\n  min?: Value;\n  max?: Value;\n  color: [string, string] | ((t: number) => string);\n}\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Ordinal color map",
                  "introduction": [
                    "Ordinal color map\n\nThis configuration takes two properties—`values` and `colors`—and maps those values to their respective colors.\n\nIf a value is not defined, it will fall back to the `unknownColor`, and if this is also undefined, then it falls back on the series color.\n\nThis configuration can be used in Bar Charts to set colors according to string categories.\n\n```ts\n{\n  type: 'ordinal';\n  values: Value[];\n  colors: string[];\n  unknownColor?: string;\n}\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Overlay",
          "introduction": [
            "Overlay\n\nCharts have a _loading_ and _noData_ overlays that appear if:\n\n- `loading` prop is set to `true`.\n- There is no data to display."
          ],
          "code_path": [
            "Overlay.js"
          ],
          "children": [
            {
              "name": "Axis display",
              "introduction": [
                "Axis display\n\nYou can provide the axes data to display them while loading the data."
              ],
              "code_path": [
                "OverlayWithAxis.js"
              ],
              "children": []
            },
            {
              "name": "Custom overlay",
              "introduction": [
                "Custom overlay\n\nTo modify the overlay message, you can use the `message` props as follows:\n\n```jsx\n<BarChart\n  slotProps={{\n    // Custom loading message\n    loadingOverlay: { message: 'Data should be available soon.' },\n    // Custom message for empty chart\n    noDataOverlay: { message: 'Select some data to display.' },\n  }}\n/>\n```\n\nFor more advanced customization, use the `loadingOverlay` and `noDataOverlay` slots link in the following demo."
              ],
              "code_path": [
                "CustomOverlay.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Styling",
          "introduction": [
            "Styling"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Size",
              "introduction": [
                "Size\n\nBy default, charts adapt their sizing to fill their parent element.\nHowever, you can modify this behavior by providing `height` and/or `width` props.\n\nThose will fix the chart's size to the given value (in px)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Placement",
              "introduction": [
                "Placement\n\nAt the core of chart layout is the drawing area which corresponds to the space available to represent data.\n\nThis space can be defined with the `margin` prop and its properties `top`, `bottom`, `left`, and `right`.\nThose values define the space between the SVG border and the drawing area.\n\nYou might want to modify those values to leave more space for your axis ticks or reduce them to provide more space for the data."
              ],
              "code_path": [
                "MarginNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "CSS",
              "introduction": [
                "CSS\n\nSince the library relies on SVG for rendering, you can customize them as you do with other MUI System components with CSS overriding.\n\nChart components accept the `sx` props.\nFrom here, you can target any subcomponents with its class name."
              ],
              "code_path": [
                "SxStyling.js"
              ],
              "children": []
            },
            {
              "name": "Gradients and patterns",
              "introduction": [
                "Gradients and patterns\n\nIt is possible to use gradients and patterns to fill the charts.\nThis can be done by passing your gradient or pattern definition as children of the chart component.\n\nNote that the gradient or pattern defined that way is only usable for SVG.\nSo a direct definition like `color: \"url(#Pattern)'` would cause undefined colors in HTML elements."
              ],
              "code_path": [
                "GradientTooltip.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "charts->scatter-demo",
      "introduction": [
        "# Charts - Scatter demonstration\n\n<p class=\"description\">This page groups demonstration using scatter charts.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "SimpleScatterChart",
          "introduction": [
            "SimpleScatterChart"
          ],
          "code_path": [
            "SimpleScatterChart.js"
          ],
          "children": []
        },
        {
          "name": "MultipleYAxesScatterChart",
          "introduction": [
            "MultipleYAxesScatterChart"
          ],
          "code_path": [
            "MultipleYAxesScatterChart.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->heatmap",
      "introduction": [
        "# Charts - Heatmap [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Heatmap charts visually represents data with color variations to highlight patterns and trends across two dimensions.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\nThe Heatmap requires two axes with `data` properties.\nThose data defined the x and y categories.\n\nThe series `data` is an array of 3-tuples.\nThe 2 first numbers are respectively the x and y indexes of the cell.\nAnd the third is its value."
          ],
          "code_path": [
            "BasicHeatmap.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Color mapping",
              "introduction": [
                "Color mapping\n\nTo customize the color mapping, use the `zAxis` configuration.\nYou can either use the piecewise or continuous [color mapping](https://mui.com/x/react-charts/styling/#values-color)."
              ],
              "code_path": [
                "ColorConfig.js"
              ],
              "children": []
            },
            {
              "name": "Highlight",
              "introduction": [
                "Highlight\n\nYou can chose to highlight the hovered element by setting `highlightScope.highlight` to `'item'`.\nTo fade the other item, set `highlightScope.fade` to `'global'`.",
                "By default highlighted/faded effect is obtained by applying the CSS property `filter: saturate(...)` to cells.\nTo modify this styling, use the `heatmapClasses.highlighted` and `heatmapClasses.faded` CSS classes to override the applied style.\n\nIn the following demo, we replace the highlight saturation by a border radius and reduce the saturation of the faded cells."
              ],
              "code_path": [
                "HighlightHeatmap.js",
                "HighlightClasses.js"
              ],
              "children": []
            },
            {
              "name": "Axes",
              "introduction": [
                "Axes\n\nThe Heatmap axes can be customized like any other chart axis.\nThe available options are available in the [dedicated page](/x/react-charts/axis/#axis-customization)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Tooltip 🚧",
              "introduction": [
                "Tooltip 🚧"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Legend 🚧",
          "introduction": [
            "Legend 🚧"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Labels 🚧",
          "introduction": [
            "Labels 🚧"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Custom item",
          "introduction": [
            "Custom item"
          ],
          "code_path": [
            "CustomItem.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->radar",
      "introduction": [
        "# Charts - Radar 🚧\n\n<p class=\"description\">Radar allows to compare multivariate data in a 2D chart.</p>\n\n:::warning\nThe Radar Chart component isn't available yet, but you can upvote [**this GitHub issue**](https://github.com/mui/mui-x/issues/7925) to see it arrive sooner.\n\nDon't hesitate to leave a comment there to influence what gets built.\nEspecially if you already have a use case for this component, or if you're facing a pain point with your current solution.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "charts->overview",
      "introduction": [
        "# MUI X Charts\n\n<p class=\"description\">A collection of React chart components for data visualization.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Overview",
          "introduction": [
            "Overview\n\nMUI X Charts is a library of production-ready components for rendering charts with React.\nIt uses [D3.js](https://d3js.org/) for data manipulation and SVGs for rendering.\n\nThe components provide a high level of customization, with beautiful defaults as well as extensive configuration props and flexible composition options.\nThey also have access to all [MUI System](https://mui.com/system/getting-started/) tools such as theme overrides and the `sx` prop."
          ],
          "code_path": [
            "ChartsOverviewDemo.js"
          ],
          "children": []
        },
        {
          "name": "All MUI X Charts",
          "introduction": [
            "All MUI X Charts\n\n{{\"component\": \"modules/components/ChartComponentsGrid.js\"}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Using this documentation",
          "introduction": [
            "Using this documentation\n\nEach Chart type has two accompanying documents:\n\n1. **Overview** – a general description of built-in features\n2. **Demo** – a collection of custom examples"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Supported features",
          "introduction": [
            "Supported features\n\nFeatures shared across Chart components such as axes and legends are described in standalone documents:\n\n{{\"component\": \"modules/components/ChartFeaturesGrid.js\"}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->lines",
      "introduction": [
        "# Charts - Lines\n\n<p class=\"description\">Line charts can express qualities about data, such as hierarchy, highlights, and comparisons.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Data format",
              "introduction": [
                "Data format\n\nTo plot lines, a series must have a `data` property containing an array of numbers.\nThis `data` array corresponds to y values.\n\nBy default, those y values will be associated with integers starting from 0 (0, 1, 2, 3, ...).\nTo modify the x values, you should provide a `xAxis` with data property."
              ],
              "code_path": [
                "BasicLineChart.js"
              ],
              "children": []
            },
            {
              "name": "Using a dataset",
              "introduction": [
                "Using a dataset\n\nIf your data is stored in an array of objects, you can use the `dataset` helper prop.\nIt accepts an array of objects such as `dataset={[{x: 1, y: 32}, {x: 2, y: 41}, ...]}`.\n\nYou can reuse this data when defining the series and axis, thanks to the `dataKey` property.\n\nFor example `xAxis={[{ dataKey: 'x'}]}` or `series={[{ dataKey: 'y'}]}`.\n\nHere is a plot of the evolution of world electricity production by source."
              ],
              "code_path": [
                "LineDataset.js"
              ],
              "children": []
            },
            {
              "name": "Area",
              "introduction": [
                "Area\n\nYou can fill the area of the line by setting the series' `area` property to `true`."
              ],
              "code_path": [
                "BasicArea.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Stacking",
          "introduction": [
            "Stacking\n\nEach line series can get a `stack` property which expects a string value.\nSeries with the same `stack` will be stacked on top of each other."
          ],
          "code_path": [
            "StackedAreas.js"
          ],
          "children": [
            {
              "name": "Stacking strategy",
              "introduction": [
                "Stacking strategy\n\nYou can use the `stackOffset` and `stackOrder` properties to define how the series will be stacked.\n\nBy default, they are stacked in the order you defined them, with positive values stacked above 0 and negative values stacked below 0.\n\nFor more information, see [stacking docs](/x/react-charts/stacking/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Partial data",
          "introduction": [
            "Partial data"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Skip missing points",
              "introduction": [
                "Skip missing points\n\nLine series can have fewer data points than the axis.\nYou can handle lines with partial data or data starting at different points by providing `null` values.\n\nBy default, the tooltip does not show series if they have no value.\nTo override this behavior, use the `valueFormatter` to return a string if the value is `null` or `undefined`.",
                ":::info\nWhen series data length is smaller than the axis one, overflowing values are `undefined` and not `null`.\n\nThe following code plots a line for x between 2 and 4.\n\n- For x<2, values are set to `null` and then not shown.\n- For x>4, values are set to `undefined` and then not shown.\n\n```jsx\n<LineChart\n  series={[{ data: [null, null, 10, 11, 12] }]}\n  xAxis={[{ data: [0, 1, 2, 3, 4, 5, 6] }]}\n/>\n```\n\n:::"
              ],
              "code_path": [
                "DifferentLength.js",
                null
              ],
              "children": []
            },
            {
              "name": "Connect missing points",
              "introduction": [
                "Connect missing points\n\nLine series accepts a `connectNulls` property which will continue the interpolation across points with a `null` value.\nThis property can link two sets of points, with `null` data between them.\nHowever, it cannot extrapolate the curve before the first non-null data point or after the last one."
              ],
              "code_path": [
                "ConnectNulls.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Click event",
          "introduction": [
            "Click event\n\nLine charts provides multiple click handlers:\n\n- `onAreaClick` for click on a specific area.\n- `onLineClick` for click on a specific line.\n- `onMarkClick` for click on a specific mark.\n- `onAxisClick` for a click anywhere in the chart\n\nThey all provide the following signature.\n\n```js\nconst clickHandler = (\n  event, // The mouse event.\n  params, // An object that identifies the clicked elements.\n) => {};\n```",
            ":::info\nTheir is a slight difference between the `event` of `onAxisClick` and the others:\n\n- For `onAxisClick` it's a native mouse event emitted by the svg component.\n- For others, it's a React synthetic mouse event emitted by the area, line, or mark component.\n\n:::"
          ],
          "code_path": [
            "LineClickNoSnap.js",
            null
          ],
          "children": [
            {
              "name": "Composition",
              "introduction": [
                "Composition\n\nIf you're using composition, you can get those click event as follow.\nNotice that the `onAxisClick` will handle both bar and line series if you mix them.\n\n```jsx\nimport ChartsOnAxisClickHandler from '@mui/x-charts/ChartsOnAxisClickHandler';\n// ...\n\n<ChartContainer>\n  {/* ... */}\n  <ChartsOnAxisClickHandler onAxisClick={onAxisClick} />\n  <LinePlot onItemClick={onLineClick} />\n  <AreaPlot onItemClick={onAreaClick} />\n</ChartContainer>;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Styling",
          "introduction": [
            "Styling"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Grid",
              "introduction": [
                "Grid\n\nYou can add a grid in the background of the chart with the `grid` prop.\n\nSee [Axis—Grid](/x/react-charts/axis/#grid) documentation for more information."
              ],
              "code_path": [
                "GridDemo.js"
              ],
              "children": []
            },
            {
              "name": "Color scale",
              "introduction": [
                "Color scale\n\nAs with other charts, you can modify the [series color](/x/react-charts/styling/#colors) either directly, or with the color palette.\n\nYou can also modify the color by using axes `colorMap` which maps values to colors.\nThe line charts use by priority:\n\n1. The y-axis color\n2. The x-axis color\n3. The series color\n\nLearn more about the `colorMap` properties in the [Styling docs](/x/react-charts/styling/#values-color).",
                ":::warning\nFor now, ordinal config is not supported for line chart.\n:::"
              ],
              "code_path": [
                "ColorScale.js",
                null
              ],
              "children": []
            },
            {
              "name": "Interpolation",
              "introduction": [
                "Interpolation\n\nThe interpolation between data points can be customized by the `curve` property.\nThis property expects one of the following string values, corresponding to the interpolation method: `'catmullRom'`, `'linear'`, `'monotoneX'`, `'monotoneY'`, `'natural'`, `'step'`, `'stepBefore'`, `'stepAfter'`.\n\nThis series property adds the option to control the interpolation of a series.\nDifferent series could even have different interpolations."
              ],
              "code_path": [
                "InterpolationDemoNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Baseline",
              "introduction": [
                "Baseline\n\nThe area chart draws a `baseline` on the Y axis `0`.\nThis is useful as a base value, but customized visualizations may require a different baseline.\n\nTo get the area filling the space above or below the line, set `baseline` to `\"min\"` or `\"max\"`.\nIt is also possible to provide a `number` value to fix the baseline at the desired position.\n\n:::warning\nThe `baseline` should not be used with stacked areas, as it will not work as expected.\n:::"
              ],
              "code_path": [
                "AreaBaseline.js"
              ],
              "children": []
            },
            {
              "name": "Optimization",
              "introduction": [
                "Optimization\n\nTo show mark elements, use `showMark` series property.\nIt accepts a boolean or a callback.\nThe next example shows how to use it to display only one mark every two data points.\n\nWhen a value is highlighted, a mark is rendered for that given value.\nIf the charts already have some marks (due to `showMark=true`) the highlight one will be on top of others.\n\nThis behavior can be removed with the `disableHighlight` series property or at the root of the line chart with a `disableLineItemHighlight` prop.\n\nIn this example, you have one mark for every value with an even index.\nThe highlighted data has a mark regardless if it has an even or odd index."
              ],
              "code_path": [
                "MarkOptimization.js"
              ],
              "children": []
            },
            {
              "name": "CSS",
              "introduction": [
                "CSS\n\nLine plots are made of three elements named `LineElement`, `AreaElement`, and `MarkElement`.\nEach element can be selected with the CSS class name `.MuiLineElement-root`, `.MuiAreaElement-root`, or `.MuiMarkElement-root`.\n\nIf you want to select the element of a given series, you can use classes `.MuiLineElement-series-<seriesId>` with `<seriesId>` the id of the series you want to customize.\n\nIn the next example, each line style is customized with dashes, and marks are removed.\nThe area of Germany's GDP also gets a custom gradient color.\nThe definition of `myGradient` is passed as a children of the chart component.\n\n```jsx\nsx={{\n  '& .MuiLineElement-root': {\n    strokeDasharray: '10 5',\n    strokeWidth: 4,\n  },\n  '& .MuiAreaElement-series-Germany': {\n    fill: \"url('#myGradient')\",\n  },\n}}\n```"
              ],
              "code_path": [
                "CSSCustomization.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Animation",
          "introduction": [
            "Animation\n\nTo skip animation at the creation and update of your chart, you can use the `skipAnimation` prop.\nWhen set to `true` it skips animation powered by `@react-spring/web`.\n\nCharts containers already use the `useReducedMotion()` from `@react-spring/web` to skip animation [according to user preferences](https://react-spring.dev/docs/utilities/use-reduced-motion#why-is-it-important).\n\n:::warning\nIf you support interactive ways to add or remove series from your chart, you have to provide the series' id.\n\nOtherwise the chart will have no way to know if you are modifying, removing, or adding some series.\nThis will lead to strange behaviors.\n:::\n\n```jsx\n// For a single component chart\n<LineChart skipAnimation />\n\n// For a composed chart\n<ChartContainer>\n  <LinePlot skipAnimation />\n  <AreaPlot skipAnimation />\n</ChartContainer>\n```"
          ],
          "code_path": [
            "LineAnimation.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "charts->funnel",
      "introduction": [
        "# Charts - Funnel [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')🚧\n\n<p class=\"description\">Funnel charts allow to express quantity evolution along a process, such as audience engagement.</p>\n\n:::warning\nThe Funnel Chart component isn't available yet, but you can upvote [**this GitHub issue**](https://github.com/mui/mui-x/issues/7929) to see it arrive sooner.\n\nDon't hesitate to leave a comment there to influence what gets built.\nEspecially if you already have a use case for this component, or if you're facing a pain point with your current solution.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "charts->treemap",
      "introduction": [
        "# Charts - Treemap 🚧\n\n<p class=\"description\">Treemap allows to display data with a hierarchical structure.</p>\n\n:::warning\nThe Treemap component isn't available yet, but you can upvote [**this GitHub issue**](https://github.com/mui/mui-x/issues/7924) to see it arrive sooner.\n\nDon't hesitate to leave a comment there to influence what gets built.\nEspecially if you already have a use case for this component, or if you're facing a pain point with your current solution.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "common-concepts->custom-components",
      "introduction": [
        "# Custom slots and subcomponents\n\n<p class=\"description\">Learn how to override parts of the MUI X components.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "What is a slot?",
          "introduction": [
            "What is a slot?\n\nA slot is a part of a component that can be [overridden](/x/common-concepts/custom-components/#how-to-override-a-slot) and/or [customized](/x/common-concepts/custom-components/#how-to-customize-a-slot).\n\nSome of those slots allow you to provide your own UI primitives to the MUI X components.\nThis is the role of all the `baseXXX` component on the Data Grid component (`baseButton`, `baseSelect`, ...).\nThese slots receive props that should be as generic as possible so that it is easy to interface any other design system.\n\nOther slots allow you to override parts of the MUI X UI components with a custom UI built specifically for this component.\nThis is the role of slots like `calendarHeader` on the `DateCalendar` component or `item` on the Rich Tree View component.\nThese slots receive props specific to this part of the UI and will most likely not be re-use throughout your application."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "How to override a slot?",
              "introduction": [
                "How to override a slot?\n\nYou can override a slot by providing a custom component to the `slots` prop:"
              ],
              "code_path": [
                "CustomSlot.js"
              ],
              "children": []
            },
            {
              "name": "How to customize a slot?",
              "introduction": [
                "How to customize a slot?\n\nYou can pass props to any slot using the `slotProps` prop:",
                "You can also use both `slots` and `slotProps` on the same component:",
                "Most slots also support a callback version of `slotProps`.\nThis callback receives an object that contains information about the current state of the component,\nthat information can vary depending on the slot being used:"
              ],
              "code_path": [
                "CustomSlotProps.js",
                "CustomSlotAndSlotProps.js",
                "CustomSlotPropsCallback.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Correct usage",
          "introduction": [
            "Correct usage\n\nA slot is a React component; therefore, it should keep the same JavaScript reference between two renders.\nIf the JavaScript reference of component changes between two renders, React will remount it.\nYou can avoid it by not inlining the component definition in the `slots` prop.\n\nThe first two examples below are buggy because the calendar header will remount after each keystroke, leading to a loss of focus.\n\n```jsx\n// ❌ The `calendarHeader` slot is re-defined each time the parent component renders,\n// causing the component to remount.\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n  return (\n    <DateCalendar\n      slots={{\n        calendarHeader: () => (\n          <input value={name} onChange={(event) => setName(event.target.value)} />\n        ),\n      }}\n    />\n  );\n}\n```\n\n```jsx\n// ❌ The `calendarHeader` slot is re-defined each time `name` is updated,\n// causing the component to remount.\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n\n  const CustomCalendarHeader = React.useCallback(\n    () => <input value={name} onChange={(event) => setName(event.target.value)} />,\n    [name],\n  );\n\n  return <DateCalendar slots={{ calendarHeader: CustomCalendarHeader }} />;\n}\n```\n\n```jsx\n// ✅ The `calendarHeader` slot is defined only once, it will never remount.\nconst CustomCalendarHeader = ({ name, setName }) => (\n  <input value={name} onChange={(event) => setName(event.target.value)} />\n);\n\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n  return (\n    <DateCalendar\n      slots={{ calendarHeader: CustomCalendarHeader }}\n      slotProps={{ calendarHeader: { name, setName } }}\n    />\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Usage with TypeScript",
          "introduction": [
            "Usage with TypeScript"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Type custom slots",
              "introduction": [
                "Type custom slots\n\nIf you want to ensure type safety on your custom slot component,\nyou can declare your component using the `PropsFromSlot` interface:\n\n```tsx\nfunction CustomCalendarHeader({\n  currentMonth,\n}: PropsFromSlot<DateCalendarSlots['calendarHeader']>) {\n  return <div>{currentMonth?.format('MM-DD-YYYY')}</div>;\n}\n```\n\n:::success\nThe `PropsFromSlot` is exported from every package that supports slots:\n\n```ts\nimport { PropsFromSlot } from '@mui/x-data-grid/models';\nimport { PropsFromSlot } from '@mui/x-date-pickers/models';\n// ...\n```\n\nIt takes the slot type (as defined in the `slots` prop of your component) and returns the props that the slot receives.\n\n```ts\nimport { Dayjs } from 'dayjs';\nimport { PropsFromSlot, GridSlots } from '@mui/x-data-grid';\nimport { DateCalendarSlots } from '@mui/x-date-pickers';\n\ntype ToolbarProps = PropsFromSlot<GridSlots['toolbar']>;\n\n// Most of the picker slots interfaces need to receive the date type as a generic.\ntype CalendarHeaderProps = PropsFromSlot<DateCalendarSlots['calendarHeader']>;\n```\n\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Using additional props",
              "introduction": [
                "Using additional props\n\nIf you are passing additional props to your slot, you can add them to the props your custom component receives:\n\n```ts\ninterface CustomCalendarHeaderProps\n  extends PropsFromSlot<DateCalendarSlots['calendarHeader']> {\n  displayWeekNumber: boolean;\n  setDisplayWeekNumber: (displayWeekNumber: boolean) => void;\n}\n```\n\nYou can then use these props in your custom component and access both the props provided by the host component\nand the props you added:\n\n```tsx\nfunction CustomCalendarHeader({\n  displayWeekNumber,\n  setDisplayWeekNumber,\n  ...other\n}: CustomCalendarHeaderProps) {\n  return (\n    <Stack>\n      <DisplayWeekNumberToggle\n        value={displayWeekNumber}\n        onChange={setDisplayWeekNumber}\n      />\n      <PickersCalendarHeader {...other} />\n    </Stack>\n  );\n}\n```\n\nIf your custom component has a different type than the default one, you will need to cast it to the correct type.\nThis can happen if you pass additional props to your custom component using `slotProps`.\nIf we take the example of the `calendarHeader` slot, you can cast your custom component as below:\n\n```tsx\nfunction MyApp() {\n  const [displayWeekNumber, setDisplayWeekNumber] = React.useState(true);\n  return (\n    <DateCalendar\n      displayWeekNumber={displayWeekNumber}\n      slots={{\n        calendarHeader: CustomCalendarHeader as DateCalendarSlots['calendarHeader'],\n      }}\n      slotProps={{\n        calendarHeader: {\n          displayWeekNumber,\n          setDisplayWeekNumber,\n        } as DateCalendarSlotProps['calendarHeader'],\n      }}\n    />\n  );\n}\n```"
              ],
              "code_path": [
                "TypescriptCasting.js"
              ],
              "children": []
            },
            {
              "name": "Using module augmentation",
              "introduction": [
                "Using module augmentation\n\nIf you are using one of the Data Grid packages,\nyou can also use [module augmentation](/x/react-data-grid/components/#custom-slot-props-with-typescript) to let TypeScript know about your custom props:\n\n```ts\ndeclare module '@mui/x-data-grid' {\n  interface ToolbarPropsOverrides {\n    name: string;\n    setName: (name: string) => void;\n  }\n}\n```\n\nYou can then use your custom slot without any type casting:\n\n```tsx\nfunction CustomToolbar({ name, setName }: PropsFromSlot<GridSlots['toolbar']>) {\n  return <input value={name} onChange={(event) => setName(event.target.value)} />;\n}\n\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n  return (\n    <DataGrid\n      rows={[]}\n      columns={[]}\n      slots={{ toolbar: CustomToolbar }}\n      slotProps={{\n        toolbar: { name, setName },\n      }}\n    />\n  );\n}\n```\n\nSee [Data Grid - Custom slots and subcomponents—Custom slot props with TypeScript](/x/react-data-grid/components/#custom-slot-props-with-typescript) for more details.\n\n:::warning\nThe module augmentation feature isn't implemented yet for the other sets of components. It's coming.\n\n- 👍 Upvote [issue 9775](https://github.com/mui/mui-x/issues/9775) if you want to see it land faster on the Date and Time Pickers.\n- 👍 Upvote [issue 14063](https://github.com/mui/mui-x/issues/14063) if you want to see it land faster on the Charts.\n- 👍 Upvote [issue 14062](https://github.com/mui/mui-x/issues/14062) if you want to see it land faster on the Tree View.\n\n  :::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Slots of the X components",
          "introduction": [
            "Slots of the X components\n\nYou can find the list of slots in the API documentation of each component (for example [DataGrid](/x/api/data-grid/data-grid/#slots), [DatePicker](/x/api/date-pickers/date-picker/#slots), [BarChart](/x/api/charts/bar-chart/#slots) or [RichTreeView](/x/api/tree-view/rich-tree-view/#slots)).\n\nMost of the slots have a standalone doc example to show how to use them:\n\n- [Data Grid—Custom slots and subcomponents](/x/react-data-grid/components/)\n- [Date Picker—Custom slots and subcomponents](/x/react-date-pickers/custom-components/)\n- [RichTreeView—Customization](/x/react-tree-view/rich-tree-view/customization/) / [SimpleTreeView—Customization](/x/react-tree-view/simple-tree-view/customization/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "tree-view->rich-tree-view->customization",
      "introduction": [
        "# Rich Tree View - Customization\n\n<p class=\"description\">Learn how to customize the Rich Tree View component.</p>\n\n:::success\nSee [Common concepts—Slots and subcomponents](/x/common-concepts/custom-components/) to learn how to use slots.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Custom icons",
              "introduction": [
                "Custom icons\n\nUse the `collapseIcon` slot, the `expandIcon` slot and the `defaultEndIcon` prop to customize the Tree View icons.\nThe demo below shows how to add icons using both an existing icon library, such as [Material Icons](/material-ui/material-icons/), and creating an icon from scratch using Material UI's [SVG Icon component](/material-ui/icons/#svgicon)."
              ],
              "code_path": [
                "CustomIcons.js"
              ],
              "children": []
            },
            {
              "name": "Custom toggle animations",
              "introduction": [
                "Custom toggle animations\n\nUse the `groupTransition` slot on the `<TreeItem />` to pass a component that handles your animation.\n\nThe demo below is animated using Material UI's [Collapse](/material-ui/transitions/#collapse) component together with the [react-spring](https://www.react-spring.dev/) library."
              ],
              "code_path": [
                "CustomAnimation.js"
              ],
              "children": []
            },
            {
              "name": "Custom styling",
              "introduction": [
                "Custom styling\n\nUse `treeItemClasses` to target internal elements of the Tree Item component and change their styles."
              ],
              "code_path": [
                "CustomStyling.js"
              ],
              "children": []
            },
            {
              "name": "Custom Tree Item",
              "introduction": [
                "Custom Tree Item\n\nYou can use the Tree Item's customization API to build new layouts and manage behaviors.\nLearn more about the anatomy of the Tree Item components and the customization utilities provided in the [Tree Item customization doc](/x/react-tree-view/tree-item-customization/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Headless API",
              "introduction": [
                "Headless API\n\nUse the `useTreeItem` hook to create your own component.\nThe demo below shows how to add an avatar and custom typography elements."
              ],
              "code_path": [
                "HeadlessAPI.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Common examples",
          "introduction": [
            "Common examples"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "File explorer",
              "introduction": [
                "File explorer\n\nThe demo below shows many of the previous customization examples brought together to make the Tree View component look completely different than its default design."
              ],
              "code_path": [
                "FileExplorer.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->rich-tree-view->focus",
      "introduction": [
        "# Rich Tree View - Focus\n\n<p class=\"description\">Learn how to focus Tree View items.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Imperative API",
          "introduction": [
            "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\nWhen your component first renders, `apiRef` will be `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Focus a specific item",
              "introduction": [
                "Focus a specific item\n\nUse the `focusItem` API method to focus a specific item.\n\n```ts\napiRef.current.focusItem(\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to focus\n  itemId,\n);\n```\n\n:::info\nThis method only works with items that are currently visible.\nCalling `apiRef.focusItem()` on an item whose parent is collapsed does nothing.\n:::"
              ],
              "code_path": [
                "ApiMethodFocusItem.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->rich-tree-view->expansion",
      "introduction": [
        "# Rich Tree View - Expansion\n\n<p class=\"description\">Handle how users can expand items.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Controlled expansion",
          "introduction": [
            "Controlled expansion\n\nUse the `expandedItems` prop to control the expanded items.\n\nYou can use the `onExpandedItemsChange` prop to listen to changes in the expanded items and update the prop accordingly.",
            ":::info\n\n- The expansion is **controlled** when its parent manages it by providing a `expandedItems` prop.\n- The expansion is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultExpandedItems` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "ControlledExpansion.js",
            null
          ],
          "children": []
        },
        {
          "name": "Track item expansion change",
          "introduction": [
            "Track item expansion change\n\nUse the `onItemExpansionToggle` prop if you want to react to an item expansion change:"
          ],
          "code_path": [
            "TrackItemExpansionToggle.js"
          ],
          "children": []
        },
        {
          "name": "Limit expansion to icon container",
          "introduction": [
            "Limit expansion to icon container\n\nYou can use the `expansionTrigger` prop to decide if the expansion interaction should be triggered by clicking on the icon container instead of the whole Tree Item content."
          ],
          "code_path": [
            "IconExpansionTreeView.js"
          ],
          "children": []
        },
        {
          "name": "Imperative API",
          "introduction": [
            "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\nWhen your component first renders, `apiRef` will be `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Change an item expansion",
              "introduction": [
                "Change an item expansion\n\nUse the `setItemExpansion` API method to change the expansion of an item.\n\n```ts\napiRef.current.setItemExpansion(\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to expand or collapse\n  itemId,\n  // If `true` the item will be expanded\n  // If `false` the item will be collapsed\n  isExpanded,\n);\n```"
              ],
              "code_path": [
                "ApiMethodSetItemExpansion.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->rich-tree-view->editing",
      "introduction": [
        "# Rich Tree View - Label editing\n\n<p class=\"description\">Learn how to edit the label of Tree View items.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Enable label editing",
          "introduction": [
            "Enable label editing\n\nYou can use the `isItemEditable` prop to enable editing.\nIf set to `true`, this prop will enable label editing on all items:",
            ":::success\nIf an item is editable, the editing state can be toggled by double clicking on it, or by pressing <kbd class=\"key\">Enter</kbd> on the keyboard when the item is in focus.\n\nOnce an item is in editing state, the value of the label can be edited. Pressing <kbd class=\"key\">Enter</kbd> again or bluring the item will save the new value. Pressing <kbd class=\"key\">Esc</kbd> will cancel the action and restore the item to its original state.\n\n:::"
          ],
          "code_path": [
            "LabelEditingAllItems.js",
            null
          ],
          "children": []
        },
        {
          "name": "Limit editing to some items",
          "introduction": [
            "Limit editing to some items\n\nIf you pass a method to `isItemEditable`, only the items for which the method returns `true` will be editable:"
          ],
          "code_path": [
            "LabelEditingSomeItems.js"
          ],
          "children": [
            {
              "name": "Limit editing to leaves",
              "introduction": [
                "Limit editing to leaves\n\nYou can limit the editing to just the leaves of the tree."
              ],
              "code_path": [
                "EditLeaves.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Track item label change",
          "introduction": [
            "Track item label change\n\nUse the `onItemLabelChange` prop to trigger an action when the label of an item changes."
          ],
          "code_path": [
            "EditingCallback.js"
          ],
          "children": []
        },
        {
          "name": "Change the default behavior",
          "introduction": [
            "Change the default behavior\n\nBy default, blurring the Tree Item saves the new value if there is one.\nTo modify this behavior, use the `slotProps` of the Tree Item."
          ],
          "code_path": [
            "CustomBehavior.js"
          ],
          "children": []
        },
        {
          "name": "Validation",
          "introduction": [
            "Validation\n\nYou can override the event handlers of the `labelInput` and implement a custom validation logic using the interaction methods from `useTreeItemUtils`."
          ],
          "code_path": [
            "Validation.js"
          ],
          "children": []
        },
        {
          "name": "Enable editing using only icons",
          "introduction": [
            "Enable editing using only icons\n\nThe demo below shows how to entirely override the editing behavior, and implement it using icons."
          ],
          "code_path": [
            "EditWithIcons.js"
          ],
          "children": []
        },
        {
          "name": "Create a custom labelInput",
          "introduction": [
            "Create a custom labelInput\n\nThe demo below shows how to use a different component in the `labelInput` slot."
          ],
          "code_path": [
            "CustomLabelInput.js"
          ],
          "children": []
        },
        {
          "name": "Imperative API",
          "introduction": [
            "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\nWhen your component first renders, `apiRef` will be `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Change the label of an item",
              "introduction": [
                "Change the label of an item\n\nUse the `setItemExpansion` API method to change the expansion of an item.\n\n```ts\napiRef.current.updateItemLabel(\n  // The id of the item to to update\n  itemId,\n  // The new label of the item.\n  newLabel,\n);\n```"
              ],
              "code_path": [
                "ApiMethodUpdateItemLabel.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->rich-tree-view->ordering",
      "introduction": [
        "# Rich Tree View - Ordering [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Drag and drop your items to reorder them.</p>\n\n:::success\nTo be able to reorder items, you first have to enable the `itemsReordering` experimental feature:\n\n```tsx\n<RichTreeViewPro items={ITEMS} experimentalFeatures={{ itemsReordering: true }} />\n```\n\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Enable drag & drop re-ordering",
          "introduction": [
            "Enable drag & drop re-ordering\n\nYou can enable the drag & drop re-ordering of items by setting the `itemsReordering` prop to `true`:"
          ],
          "code_path": [
            "DragAndDrop.js"
          ],
          "children": []
        },
        {
          "name": "Limit the re-ordering",
          "introduction": [
            "Limit the re-ordering\n\nBy default, all the items are reorderable.\nYou can prevent the re-ordering of some items using the `isItemReorderable` prop.\nThe following example shows how to only allow re-ordering of the leaves using the [`getItemOrderedChildrenIds`](/x/react-tree-view/rich-tree-view/items/#get-an-items-children-by-id) API method.",
            "You can also limit the items in which an item can be dropped using the `canMoveItemToNewPosition` prop.\nThe following example shows how to only allow re-ordering inside the same parent:"
          ],
          "code_path": [
            "OnlyReorderLeaves.js",
            "OnlyReorderInSameParent.js"
          ],
          "children": []
        },
        {
          "name": "React to an item re-ordering",
          "introduction": [
            "React to an item re-ordering\n\nYou can use the `onItemPositionChange` to send the new position of an item to your backend:",
            "If you want to send the entire dataset to your backend, you can use the [`getItemTree`](/x/react-tree-view/rich-tree-view/items/#get-the-current-item-tree) API method.\nThe following demo demonstrates it by synchronizing the first Tree View with the second one whenever you do a re-ordering:"
          ],
          "code_path": [
            "OnItemPositionChange.js",
            "SendAllItemsToServer.js"
          ],
          "children": []
        },
        {
          "name": "Customization",
          "introduction": [
            "Customization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Only trigger the reordering from a drag handle",
              "introduction": [
                "Only trigger the reordering from a drag handle\n\nYou can create a custom Tree Item component to render a drag handle icon and only trigger the reordering when dragging from it:"
              ],
              "code_path": [
                "OnlyReorderFromDragHandle.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Common examples",
          "introduction": [
            "Common examples"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "File explorer",
              "introduction": [
                "File explorer\n\nThe example below is a simplified version of the [File Explorer](/x/react-tree-view/rich-tree-view/customization/#file-explorer) example with drag & drop re-ordering.\nYou can re-order items but only inside folders (or inside the trash)."
              ],
              "code_path": [
                "FileExplorer.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->rich-tree-view->headless",
      "introduction": [
        "# Rich Tree View - Headless\n\n<p class=\"description\">Create your custom Tree View.</p>\n\n:::warning\nThe `useTreeView` hook is not public API for now,\nthis page is still a _Work in Progress_ and its content is not meant to be used in production.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Create a custom plugin",
          "introduction": [
            "Create a custom plugin"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Basic plugin",
              "introduction": [
                "Basic plugin\n\nA custom plugins contains 2 required elements:\n\n1. A hook that will be executed by the `useTreeView` hook:\n\n   ```ts\n   const useCustomPlugin = ({ params }) => {\n     React.useEffect(() => {\n       console.log(params.customParam);\n     });\n\n     return {};\n   };\n   ```\n\n2. A property containing the params used by this topic:\n\n   ```ts\n   useCustomPlugin.params = {\n     customParam: true,\n   };\n   ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Params default value",
              "introduction": [
                "Params default value\n\nUse the `getDefaultizedParams` property to set a default value to your plugin params:\n\n```ts\nconst useCustomPlugin = ({ params }) => {\n  React.useEffect(() => {\n    console.log(params.customParam);\n  });\n\n  return {};\n};\n\nuseCustomPlugin.params = { customParam: true };\n\nuseCustomPlugin.getDefaultizedParams = ({ params }) => ({\n  ...params,\n  customParam: params.customParam ?? false,\n});\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Controllable models",
              "introduction": [
                "Controllable models\n\nA model is a value that can either be controlled or initialized using a prop.\nThe Tree View contains several models like the `expandedItems` model which contains the ids of the items currently expanded.\n\nYou can create your own models using the `models` property of your plugin:\n\n```ts\nuseCustomPlugin.params = {\n  // ...other params\n  defaultCustomModel: true,\n  customModel: true,\n};\n\nuseCustomPlugin.getDefaultizedParams = ({ params }) => ({\n  ...params,\n  // ... other defaultized params\n  defaultCustomModel: params.defaultCustomModel ?? false,\n});\n\nuseCustomPlugin.models = {\n  customModel: {\n    getDefaultValue: (params) => defaultCustomModel,\n  },\n};\n```\n\n:::info\nWhen creating a model, you should always set a default value to your `defaultCustomModel` prop. This will initialize the component's internal state when the model is uncontrolled.\nSee the [Params default value](/x/react-tree-view/rich-tree-view/headless/#params-default-value) section for more information.\n:::\n\nYou can then use this model in your plugin (or in any other plugin) using the `models` parameter:\n\n```ts\nconst useCustomPlugin = ({ models }) => {\n  React.useEffect(() => {\n    console.log(models.customModel.value);\n  });\n\n  const updateCustomModel = (newValue) =>\n    models.customModel.setControlledValue(newValue);\n\n  return {};\n};\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Use elements from another plugin",
              "introduction": [
                "Use elements from another plugin\n\nYour plugin can access the instance methods, the params and the models of any other plugin.\n\n```ts\nconst useCustomPlugin = ({ models }) => {\n  const handleSomeAction = () => {\n    // Log the id of the items currently expanded\n    console.log(models.expandedItems.value);\n\n    // Collapse all the items\n    models.expandedItems.setValue([]);\n\n    // Check if an item is expanded\n    const isExpanded = useSelector(selectorIsItemExpanded, 'some-item-id');\n  };\n};\n```\n\n:::warning\nSetting a model value in another plugin is wrong because it won't publish the associated callback.\nWe probably need a new abstraction here so that a plugin is always responsible for its model updates.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Define a plugin state",
              "introduction": [
                "Define a plugin state\n\nTODO\n\n:::warning\nOnce `focusedItemId` becomes a model, we could consider removing the notion of state and just let each plugin define its state and provide methods in the instance to access / update it.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Populate the Tree View instance",
              "introduction": [
                "Populate the Tree View instance\n\nThe Tree View instance is an object accessible in all the plugins and in the Tree Item.\nIt is the main way a plugin can provide features to the rest of the component.\n\n```ts\nconst useCustomPlugin = ({ models }) => {\n  const toggleCustomModel = () =>\n    models.customModel.setValue(!models.customModel.value);\n\n  return {\n    instance: {\n      toggleCustomModel,\n    },\n  };\n};\n```\n\nYou can then use this instance method in any other plugin:\n\n```ts\nconst useOtherCustomPlugin = ({ models, instance }) => {\n  const handleSomeAction = () => {\n    instance.toggleCustomModel();\n  };\n};\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Emit and receive events",
              "introduction": [
                "Emit and receive events\n\n```ts\nconst useCustomPlugin = () => {\n  const toggleCustomModel = () => {\n    const newValue = !models.customModel.value;\n    models.customModel.setValue(newValue);\n    publishTreeViewEvent(instance, 'toggleCustomModel', { value: newValue });\n  };\n\n  return {\n    instance: {\n      toggleCustomModel,\n    },\n  };\n};\n```\n\nYou can then subscribe to this event in any other plugin:\n\n```ts\nconst useOtherCustomPlugin = ({ instance }) => {\n  useInstanceEventHandler(instance, 'toggleCustomModel', ({ value }) => {\n    console.log('New value of customModel', value);\n  });\n};\n```\n\n:::info\nIf you are using TypeScript, you need to define your dependencies in your plugin signature, see the [Plugin typing](/x/react-tree-view/rich-tree-view/headless/#plugin-typing) section for more information.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Pass props to your root element",
              "introduction": [
                "Pass props to your root element\n\nUse the `getRootProps` property of your returned value to pass props to your root element:\n\n```ts\nconst useCustomPlugin = ({ params }) => {\n  return {\n    getRootProps: () => ({\n      'data-customparam': params.customParam,\n    }),\n  };\n};\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Pass elements to the Tree Item",
              "introduction": [
                "Pass elements to the Tree Item\n\nUse the `contextValue` property in the returned object to pass elements to the Tree Item:\n\n:::warning\nThe context is private for now and cannot be accessed outside the provided plugins.\nYou need to modify the `useTreeItemState` hook to return the new value returned by your plugin.\n:::\n\n```tsx\nconst useCustomPlugin = ({ params }) => {\n  return {\n    contextValue: () => ({\n      customPlugin: { enabled: true },\n    }),\n  };\n};\n\nfunction useTreeItemState(itemId: string) {\n  const {\n    customPlugin,\n    // ...other elements returned by the context\n  } = useTreeViewContext<DefaultTreeViewPluginSignatures>();\n\n  // ...rest of the `useTreeItemState` hook content\n\n  return {\n    customPlugin,\n    // ...other elements returned by `useTreeItemState`\n  };\n}\n\nfunction TreeItemContent() {\n  const {\n    customPlugin,\n    // ...other elements returned by `useTreeItemState`\n  } = useTreeItemState(props.itemId);\n\n  // Do something with customPlugin.enabled\n}\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Plugin typing",
              "introduction": [
                "Plugin typing\n\nThe typing of a plugin is defined using its _signature_.\nThis type contains the following information:\n\n```ts\ntype UseCustomPluginSignature = TreeViewPluginSignature<{\n  // The params specific to your plugin before running `getDefaultizedParams`\n  params: UseCustomPluginParams;\n  // The params specific to your plugins after running `getDefaultizedParams`\n  defaultizedParams: UseCustomPluginDefaultizedParams;\n  // The methods added to the Tree View instance by your plugin\n  instance: UseCustomPluginInstance;\n  // The events emitted by your plugin\n  events: UseCustomPluginEvents;\n  // The states defined by your plugin\n  state: UseCustomPluginState;\n  // The context value defined by your plugin and passed to the items\n  contextValue: UseCustomPluginContextValue;\n  // The slots used by this plugin\n  slots: UseCustomPluginSlots;\n  // The slot props used by this plugin\n  slotProps: UseCustomPluginSlotProps;\n  // The name of the models defined by your plugin\n  modelNames: UseCustomPluginModelNames;\n  // The plugins this plugin needs to work correctly\n  dependencies: UseCustomPluginDependantPlugins;\n}>;\n```\n\nThe most basic plugin would have the following signature:\n\n```ts\ntype UseCustomPluginSignature = TreeViewPluginSignature<{}>;\n```\n\nThe plugin built in the sections above would have the following signature:\n\n```ts\ntype UseCustomPluginSignature = TreeViewPluginSignature<{\n  params: {\n    customParam?: boolean;\n    customModel?: boolean;\n    defaultCustomModel?: boolean;\n  };\n  // `customParam` and `defaultCustomModel` have a default value defined in `getDefaultizedParams`\n  defaultizedParams: {\n    customParam: boolean;\n    customModel?: boolean;\n    defaultCustomModel: boolean;\n  };\n  instance: { toggleCustomModel: () => void };\n  events: {\n    toggleCustomModel: {\n      params: { value: boolean };\n    };\n  };\n  contextValue: { customPlugin: { enabled: boolean } };\n  modelNames: 'customModel';\n  // We want to have access to the expansion models and methods of the expansion plugin.\n  dependencies: [UseTreeViewExpansionSignature];\n}>;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Examples",
          "introduction": [
            "Examples"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Log expanded items",
              "introduction": [
                "Log expanded items\n\nInteract with the Tree View to see the expanded items being logged:"
              ],
              "code_path": [
                "LogExpandedItems.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->rich-tree-view->selection",
      "introduction": [
        "# Rich Tree View - Selection\n\n<p class=\"description\">Handle how users can select items.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Single selection",
          "introduction": [
            "Single selection\n\nBy default, the Tree View allows selecting a single item.",
            ":::success\nWhen the Tree View uses single selection, you can select an item by clicking it,\nor using the [keyboard shortcuts](/x/react-tree-view/accessibility/#on-single-select-trees).\n:::"
          ],
          "code_path": [
            "SingleSelectTreeView.js",
            null
          ],
          "children": []
        },
        {
          "name": "Multi selection",
          "introduction": [
            "Multi selection\n\nUse the `multiSelect` prop to enable multi-selection.",
            ":::success\nWhen the Tree View uses multi selection, you can select multiple items using the mouse in two ways:\n\n- To select multiple independent items, hold <kbd class=\"key\">Ctrl</kbd> (or <kbd class=\"key\">⌘ Command</kbd> on macOS) and click the items.\n- To select a range of items, click on the first item of the range, then hold the <kbd class=\"key\">Shift</kbd> key while clicking on the last item of the range.\n\nYou can also use the [keyboard shortcuts](/x/react-tree-view/accessibility/#on-multi-select-trees) to select items.\n:::"
          ],
          "code_path": [
            "MultiSelectTreeView.js",
            null
          ],
          "children": []
        },
        {
          "name": "Disable selection",
          "introduction": [
            "Disable selection\n\nUse the `disableSelection` prop if you don't want your items to be selectable:"
          ],
          "code_path": [
            "DisableSelection.js"
          ],
          "children": []
        },
        {
          "name": "Checkbox selection",
          "introduction": [
            "Checkbox selection\n\nTo activate checkbox selection set `checkboxSelection={true}`:",
            "This is also compatible with multi selection:"
          ],
          "code_path": [
            "CheckboxSelection.js",
            "CheckboxMultiSelection.js"
          ],
          "children": []
        },
        {
          "name": "Controlled selection",
          "introduction": [
            "Controlled selection\n\nUse the `selectedItems` prop to control the selected items.\n\nYou can use the `onSelectedItemsChange` prop to listen to changes in the selected items and update the prop accordingly.",
            ":::info\n\n- The selection is **controlled** when its parent manages it by providing a `selectedItems` prop.\n- The selection is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultSelectedItems` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "ControlledSelection.js",
            null
          ],
          "children": []
        },
        {
          "name": "Track item selection change",
          "introduction": [
            "Track item selection change\n\nUse the `onItemSelectionToggle` prop if you want to react to an item selection change:"
          ],
          "code_path": [
            "TrackItemSelectionToggle.js"
          ],
          "children": []
        },
        {
          "name": "Automatic parents and children selection",
          "introduction": [
            "Automatic parents and children selection\n\nBy default, selecting a parent item does not select its children. You can override this behavior using the `selectionPropagation` prop.\n\nHere's how it's structured:\n\n```ts\ntype TreeViewSelectionPropagation = {\n  descendants?: boolean; // default: false\n  parents?: boolean; // default: false\n};\n```\n\nWhen `selectionPropagation.descendants` is set to `true`:\n\n- Selecting a parent selects all its descendants automatically.\n- Deselecting a parent deselects all its descendants automatically.\n\nWhen `selectionPropagation.parents` is set to `true`:\n\n- Selecting all the descendants of a parent selects the parent automatically.\n- Deselecting a descendant of a selected parent deselects the parent automatically.\n\nThe example below demonstrates the usage of the `selectionPropagation` prop.",
            ":::warning\nThis feature only works when multi selection is enabled using `props.multiSelect`.\n:::"
          ],
          "code_path": [
            "SelectionPropagation.js",
            null
          ],
          "children": []
        },
        {
          "name": "Imperative API",
          "introduction": [
            "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\nWhen your component first renders, `apiRef` is `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Select or deselect an item",
              "introduction": [
                "Select or deselect an item\n\nUse the `selectItem()` API method to select or deselect an item:\n\n```ts\napiRef.current.selectItem({\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to select or deselect\n  itemId,\n  // If `true`, the other already selected items will remain selected\n  // Otherwise, they will be deselected\n  // This parameter is only relevant when `multiSelect` is `true`\n  keepExistingSelection,\n  // If `true` the item will be selected\n  // If `false` the item will be deselected\n  // If not defined, the item's new selection status will be the opposite of its current one\n  shouldBeSelected,\n});\n```",
                "You can use the `keepExistingSelection` property to avoid losing the already selected items when using `multiSelect`:"
              ],
              "code_path": [
                "ApiMethodSelectItem.js",
                "ApiMethodSelectItemKeepExistingSelection.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->rich-tree-view->items",
      "introduction": [
        "# Rich Tree View - Items\n\n<p class=\"description\">Pass data to your Tree View.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic usage",
          "introduction": [
            "Basic usage\n\nThe items can be defined with the `items` prop, which expects an array of objects.\n\n:::warning\nThe `items` prop should keep the same reference between two renders except if you want to apply new items.\nOtherwise, the Tree View will re-generate its entire structure.\n:::"
          ],
          "code_path": [
            "BasicRichTreeView.js"
          ],
          "children": []
        },
        {
          "name": "Item identifier",
          "introduction": [
            "Item identifier\n\nEach item must have a unique identifier.\n\nThis identifier is used internally to identify the item in the various models and to track the item across updates.\n\nBy default, the Rich Tree View component looks for a property named `id` in the data set to get that identifier:\n\n```tsx\nconst ITEMS = [{ id: 'tree-view-community' }];\n\n<RichTreeView items={ITEMS} />;\n```\n\nIf the item's identifier is not called `id`, then you need to use the `getItemId` prop to tell the Rich Tree View component where it is located.\n\nThe following demo shows how to use `getItemId` to grab the unique identifier from a property named `internalId`:\n\n```tsx\nconst ITEMS = [{ internalId: 'tree-view-community' }];\n\nfunction getItemId(item) {\n  return item.internalId;\n}\n\n<RichTreeView items={ITEMS} getItemId={getItemId} />;\n```",
            ":::warning\nJust like the `items` prop, the `getItemId` function should keep the same JavaScript reference between two renders.\nOtherwise, the Tree View will re-generate its entire structure.\n\nIt could be achieved by either defining the prop outside the component scope or by memoizing using the `React.useCallback` hook if the function reuses something from the component scope.\n:::"
          ],
          "code_path": [
            "GetItemId.js",
            null
          ],
          "children": []
        },
        {
          "name": "Item label",
          "introduction": [
            "Item label\n\nEach item must have a label which does not need to be unique.\n\nBy default, the Rich Tree View component looks for a property named `label` in the data set to get that label:\n\n```tsx\nconst ITEMS = [{ label: '@mui/x-tree-view' }];\n\n<RichTreeView items={ITEMS} />;\n```\n\nIf the item's label is not called `label`, then you need to use the `getItemLabel` prop to tell the Rich Tree View component where it's located:\n\nThe following demo shows how to use `getItemLabel` to grab the unique identifier from a property named `name`:\n\n```tsx\nconst ITEMS = [{ name: '@mui/x-tree-view' }];\n\nfunction getItemLabel(item) {\n  return item.name;\n}\n\n<RichTreeView items={ITEMS} getItemLabel={getItemLabel} />;\n```",
            ":::warning\nJust like the `items` prop, the `getItemLabel` function should keep the same JavaScript reference between two renders.\nOtherwise, the Tree View will re-generate its entire structure.\n\nIt could be achieved by either defining the prop outside the component scope or by memoizing using the `React.useCallback` hook if the function reuses something from the component scope.\n:::\n\n:::warning\nUnlike the Simple Tree View component, the Rich Tree View component only supports string labels, you cannot pass React nodes to it.\n:::"
          ],
          "code_path": [
            "GetItemLabel.js",
            null
          ],
          "children": []
        },
        {
          "name": "Disabled items",
          "introduction": [
            "Disabled items\n\nUse the `isItemDisabled` prop on the Rich Tree View to disable interaction and focus on a Tree Item:\n\n```tsx\nfunction isItemDisabled(item) {\n  return item.disabled ?? false;\n}\n\n<RichTreeView isItemDisabled={isItemDisabled} />;\n```",
            ":::warning\nJust like the `items` prop, the `isItemDisabled` function should keep the same JavaScript reference between two renders.\nOtherwise, the Tree View will re-generate its entire structure.\n\nThis can be achieved by either defining the prop outside the component scope or by memoizing using the `React.useCallback` hook if the function reuses something from the component scope.\n:::"
          ],
          "code_path": [
            "DisabledPropItem.js",
            null
          ],
          "children": [
            {
              "name": "Focus disabled items",
              "introduction": [
                "Focus disabled items\n\nUse the `disabledItemsFocusable` prop to control if disabled Tree Items can be focused.\n\nWhen this prop is set to false:\n\n- Navigating with keyboard arrow keys will not focus the disabled items, and the next non-disabled item will be focused instead.\n- Typing the first character of a disabled item's label will not move the focus to it.\n- Mouse or keyboard interaction will not expand/collapse disabled items.\n- Mouse or keyboard interaction will not select disabled items.\n- <kbd class=\"key\">Shift</kbd> + arrow keys will skip disabled items, and the next non-disabled item will be selected instead.\n- Programmatic focus will not focus disabled items.\n\nWhen it's set to true:\n\n- Navigating with keyboard arrow keys will focus disabled items.\n- Typing the first character of a disabled item's label will move focus to it.\n- Mouse or keyboard interaction will not expand/collapse disabled items.\n- Mouse or keyboard interaction will not select disabled items.\n- <kbd class=\"key\">Shift</kbd> + arrow keys will not skip disabled items, but the disabled item will not be selected.\n- Programmatic focus will focus disabled items."
              ],
              "code_path": [
                "DisabledItemsFocusable.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Track item clicks",
          "introduction": [
            "Track item clicks\n\nUse the `onItemClick` prop to track the clicked item:"
          ],
          "code_path": [
            "OnItemClick.js"
          ],
          "children": []
        },
        {
          "name": "Imperative API",
          "introduction": [
            "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\nWhen your component first renders, `apiRef` will be `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Get an item by ID",
              "introduction": [
                "Get an item by ID\n\nUse the `getItem` API method to get an item by its ID.\n\n```ts\nconst item = apiRef.current.getItem(\n  // The id of the item to retrieve\n  itemId,\n);\n```"
              ],
              "code_path": [
                "ApiMethodGetItem.js"
              ],
              "children": []
            },
            {
              "name": "Get an item's DOM element by ID",
              "introduction": [
                "Get an item's DOM element by ID\n\nUse the `getItemDOMElement()` API method to get an item's DOM element by its ID.\n\n```ts\nconst itemElement = apiRef.current.getItemDOMElement(\n  // The id of the item to get the DOM element of\n  itemId,\n);\n```"
              ],
              "code_path": [
                "ApiMethodGetItemDOMElement.js"
              ],
              "children": []
            },
            {
              "name": "Get the current item tree",
              "introduction": [
                "Get the current item tree\n\nUse the `getItemTree` API method to get the current item tree.\n\n```ts\nconst itemTree = apiRef.current.getItemTree();\n```",
                ":::info\nThis method is mostly useful when the Tree View has some internal updates on the items.\nFor now, the only features causing updates on the items is the [re-ordering](/x/react-tree-view/rich-tree-view/ordering/).\n:::"
              ],
              "code_path": [
                "ApiMethodGetItemTree.js",
                null
              ],
              "children": []
            },
            {
              "name": "Get an item's children by ID",
              "introduction": [
                "Get an item's children by ID\n\nUse the `getItemOrderedChildrenIds` API method to get an item's children by its ID.\n\n```ts\nconst childrenIds = apiRef.current.getItemOrderedChildrenIds(\n  // The id of the item to retrieve the children from\n  itemId,\n);\n```"
              ],
              "code_path": [
                "ApiMethodGetItemOrderedChildrenIds.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->simple-tree-view->customization",
      "introduction": [
        "# Simple Tree View - Customization\n\n<p class=\"description\">Learn how to customize the Simple Tree View component.</p>\n\n:::success\nSee [Common concepts—Slots and subcomponents](/x/common-concepts/custom-components/) to learn how to use slots.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Custom icons",
              "introduction": [
                "Custom icons\n\nUse the `collapseIcon` slot, the `expandIcon` slot and the `defaultEndIcon` prop to customize the Tree View icons.\nThe demo below shows how to add icons using both an existing icon library, such as [Material Icons](/material-ui/material-icons/), and creating an icon from scratch using Material UI's [SVG Icon component](/material-ui/icons/#svgicon)."
              ],
              "code_path": [
                "CustomIcons.js"
              ],
              "children": []
            },
            {
              "name": "Custom toggle animations",
              "introduction": [
                "Custom toggle animations\n\nUse the `groupTransition` slot on the Tree Item to pass a component that handles your animation.\n\nThe demo below is animated using Material UI's [Collapse](/material-ui/transitions/#collapse) component together with the [react-spring](https://www.react-spring.dev/) library."
              ],
              "code_path": [
                "CustomAnimation.js"
              ],
              "children": []
            },
            {
              "name": "Custom styling",
              "introduction": [
                "Custom styling\n\nUse `treeItemClasses` to target internal elements of the Tree Item component and change their styles."
              ],
              "code_path": [
                "CustomStyling.js"
              ],
              "children": []
            },
            {
              "name": "Custom Tree Item",
              "introduction": [
                "Custom Tree Item\n\nYou can use the Tree Item's customization API to build new layouts and manage behaviors.\n\nLearn more about the anatomy of the Tree Items and the customization utilities provided on the [Tree Item Customization page](/x/react-tree-view/tree-item-customization/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Headless API",
              "introduction": [
                "Headless API\n\nUse the `useTreeItem` hook to create your own component.\nThe demo below shows how to add an avatar and custom typography elements."
              ],
              "code_path": [
                "HeadlessAPI.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Common examples",
          "introduction": [
            "Common examples"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Connection border",
              "introduction": [
                "Connection border\n\nTarget the `treeItemClasses.groupTransition` class to add connection borders between the Tree View items."
              ],
              "code_path": [
                "BorderedTreeView.js"
              ],
              "children": []
            },
            {
              "name": "Gmail clone",
              "introduction": [
                "Gmail clone\n\nGoogle's Gmail side nav is potentially one of the web's most famous tree view components.\nThe demo below shows how to replicate it.\n\nThe Gmail sidebar is one of the most well known examples of a tree view.\nThe demo below shows how to recreate it with the Tree View component:"
              ],
              "code_path": [
                "GmailTreeView.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->simple-tree-view->focus",
      "introduction": [
        "# Simple Tree View - Focus\n\n<p class=\"description\">Learn how to focus Tree View items.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Imperative API",
          "introduction": [
            "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <SimpleTreeView apiRef={apiRef}>{children}</SimpleTreeView>;\n```\n\nWhen your component first renders, `apiRef` will be `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Focus a specific item",
              "introduction": [
                "Focus a specific item\n\nUse the `focusItem` API method to focus a specific item.\n\n```ts\napiRef.current.focusItem(\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to focus\n  itemId,\n);\n```\n\n:::info\nThis method only works with items that are currently visible.\nCalling `apiRef.focusItem()` on an item whose parent is collapsed does nothing.\n:::"
              ],
              "code_path": [
                "ApiMethodFocusItem.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->simple-tree-view->expansion",
      "introduction": [
        "# Simple Tree View - Expansion\n\n<p class=\"description\">Learn how to handle expanding and collapsing Tree View items.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Controlled expansion",
          "introduction": [
            "Controlled expansion\n\nUse the `expandedItems` prop to control the expanded items.\nYou can also use the `onExpandedItemsChange` prop to listen to changes in the expanded items and update the prop accordingly.",
            ":::info\n\n- The expansion is **controlled** when its parent manages it by providing a `expandedItems` prop.\n- The expansion is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultExpandedItems` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "ControlledExpansion.js",
            null
          ],
          "children": []
        },
        {
          "name": "Track item expansion change",
          "introduction": [
            "Track item expansion change\n\nUse the `onItemExpansionToggle` prop to trigger an action upon an item being expanded."
          ],
          "code_path": [
            "TrackItemExpansionToggle.js"
          ],
          "children": []
        },
        {
          "name": "Limit expansion to icon container",
          "introduction": [
            "Limit expansion to icon container\n\nYou can use the `expansionTrigger` prop to decide if the expansion interaction should be triggered by clicking on the icon container instead of the whole Tree Item content."
          ],
          "code_path": [
            "IconExpansionTreeView.js"
          ],
          "children": []
        },
        {
          "name": "Imperative API",
          "introduction": [
            "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <SimpleTreeView apiRef={apiRef}>{children}</SimpleTreeView>;\n```\n\nWhen your component first renders, `apiRef` will be `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Change an item expansion",
              "introduction": [
                "Change an item expansion\n\nUse the `setItemExpansion` API method to change the expansion of an item.\n\n```ts\napiRef.current.setItemExpansion(\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to expand or collapse\n  itemId,\n  // If `true` the item will be expanded\n  // If `false` the item will be collapsed\n  isExpanded,\n);\n```"
              ],
              "code_path": [
                "ApiMethodSetItemExpansion.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->simple-tree-view->selection",
      "introduction": [
        "# Simple Tree View - Selection\n\n<p class=\"description\">Learn how to enable item selection for the Tree View component.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Single selection",
          "introduction": [
            "Single selection\n\nBy default, the Tree View allows selecting a single item.",
            ":::success\nWhen the Tree View uses single selection, you can select an item by clicking it,\nor using the [keyboard shortcuts](/x/react-tree-view/accessibility/#on-single-select-trees).\n:::"
          ],
          "code_path": [
            "SingleSelectTreeView.js",
            null
          ],
          "children": []
        },
        {
          "name": "Multi selection",
          "introduction": [
            "Multi selection\n\nUse the `multiSelect` prop to enable multi-selection.",
            ":::success\nWhen the Tree View uses multi selection, you can select multiple items using the mouse in two ways:\n\n- To select multiple independent items, hold <kbd class=\"key\">Ctrl</kbd> (or <kbd class=\"key\">⌘ Command</kbd> on macOS) and click the items.\n- To select a range of items, click on the first item of the range, then hold the <kbd class=\"key\">Shift</kbd> key while clicking on the last item of the range.\n\nYou can also use the [keyboard shortcuts](/x/react-tree-view/accessibility/#on-multi-select-trees) to select items.\n:::"
          ],
          "code_path": [
            "MultiSelectTreeView.js",
            null
          ],
          "children": []
        },
        {
          "name": "Disable selection",
          "introduction": [
            "Disable selection\n\nUse the `disableSelection` prop if you don't want your items to be selectable:"
          ],
          "code_path": [
            "DisableSelection.js"
          ],
          "children": []
        },
        {
          "name": "Checkbox selection",
          "introduction": [
            "Checkbox selection\n\nTo activate checkbox selection set `checkboxSelection={true}`:",
            "This is also compatible with multi selection:"
          ],
          "code_path": [
            "CheckboxSelection.js",
            "CheckboxMultiSelection.js"
          ],
          "children": []
        },
        {
          "name": "Controlled selection",
          "introduction": [
            "Controlled selection\n\nUse the `selectedItems` prop to control selected Tree View items.\nYou can also use the `onSelectedItemsChange` prop to listen to changes in the selected items and update the prop accordingly.",
            ":::info\n\n- The selection is **controlled** when its parent manages it by providing a `selectedItems` prop.\n- The selection is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultSelectedItems` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
          ],
          "code_path": [
            "ControlledSelection.js",
            null
          ],
          "children": []
        },
        {
          "name": "Track item selection change",
          "introduction": [
            "Track item selection change\n\nUse the `onItemSelectionToggle` prop if you want to react to an item selection change:"
          ],
          "code_path": [
            "TrackItemSelectionToggle.js"
          ],
          "children": []
        },
        {
          "name": "Imperative API",
          "introduction": [
            "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <SimpleTreeView apiRef={apiRef}>{children}</SimpleTreeView>;\n```\n\nWhen your component first renders, `apiRef` will be `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Select or deselect an item",
              "introduction": [
                "Select or deselect an item\n\nUse the `selectItem()` API method to select or deselect an item:\n\n```ts\napiRef.current.selectItem({\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to select or deselect\n  itemId,\n  // If `true`, the other already selected items will remain selected\n  // Otherwise, they will be deselected\n  // This parameter is only relevant when `multiSelect` is `true`\n  keepExistingSelection,\n  // If `true` the item will be selected\n  // If `false` the item will be deselected\n  // If not defined, the item's new selection status will be the opposite of its current one\n  shouldBeSelected,\n});\n```",
                "You can use the `keepExistingSelection` property to avoid losing the already selected items when using `multiSelect`:"
              ],
              "code_path": [
                "ApiMethodSelectItem.js",
                "ApiMethodSelectItemKeepExistingSelection.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->simple-tree-view->items",
      "introduction": [
        "# Simple Tree View - Items\n\n<p class=\"description\">Learn how to add simple data to the Tree View component.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basics",
          "introduction": [
            "Basics\n\n```jsx\nimport { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\nimport { TreeItem } from '@mui/x-tree-view/TreeItem';\n```\n\nThe Simple Tree View component receives its items directly as JSX children."
          ],
          "code_path": [
            "BasicSimpleTreeView.js"
          ],
          "children": [
            {
              "name": "Item identifier",
              "introduction": [
                "Item identifier\n\nEach Tree Item must have a unique `itemId`.\nThis is used internally to identify the item in the various models, and to track it across updates.\n\n```tsx\n<SimpleTreeView>\n  <TreeItem itemId=\"item-unique-id\" {...otherItemProps} />\n</SimpleTreeView>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Item label",
              "introduction": [
                "Item label\n\nYou must pass a `label` prop to each Tree Item component, as shown below:\n\n```tsx\n<SimpleTreeView>\n  <TreeItem label=\"Item label\" {...otherItemProps} />\n</SimpleTreeView>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Disabled items",
              "introduction": [
                "Disabled items\n\nUse the `disabled` prop on the Tree Item component to disable interaction and focus:"
              ],
              "code_path": [
                "DisabledJSXItem.js"
              ],
              "children": [
                {
                  "name": "The disabledItemsFocusable prop",
                  "introduction": [
                    "The disabledItemsFocusable prop\n\nNote that the demo below also includes a switch.\nThis toggles the `disabledItemsFocusable` prop, which controls whether or not a disabled Tree Item can be focused.\n\nWhen this prop is set to false:\n\n- Navigating with keyboard arrow keys will not focus the disabled items, and the next non-disabled item will be focused instead.\n- Typing the first character of a disabled item's label will not move the focus to it.\n- Mouse or keyboard interaction will not expand/collapse disabled items.\n- Mouse or keyboard interaction will not select disabled items.\n- <kbd class=\"key\">Shift</kbd> + arrow keys will skip disabled items, and the next non-disabled item will be selected instead.\n- Programmatic focus will not focus disabled items.\n\nWhen it's set to true:\n\n- Navigating with keyboard arrow keys will focus disabled items.\n- Typing the first character of a disabled item's label will move focus to it.\n- Mouse or keyboard interaction will not expand/collapse disabled items.\n- Mouse or keyboard interaction will not select disabled items.\n- <kbd class=\"key\">Shift</kbd> + arrow keys will not skip disabled items, but the disabled item will not be selected.\n- Programmatic focus will focus disabled items."
                  ],
                  "code_path": [
                    "DisabledItemsFocusable.js"
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Track item clicks",
          "introduction": [
            "Track item clicks\n\nUse the `onItemClick` prop to track the clicked item:"
          ],
          "code_path": [
            "OnItemClick.js"
          ],
          "children": []
        },
        {
          "name": "Imperative API",
          "introduction": [
            "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <SimpleTreeView apiRef={apiRef}>{children}</SimpleTreeView>;\n```\n\nWhen your component first renders, `apiRef` is `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Get an item's DOM element by ID",
              "introduction": [
                "Get an item's DOM element by ID\n\nUse the `getItemDOMElement()` API method to get an item's DOM element by its ID.\n\n```ts\nconst itemElement = apiRef.current.getItemDOMElement(\n  // The id of the item to get the DOM element of\n  itemId,\n);\n```"
              ],
              "code_path": [
                "ApiMethodGetItemDOMElement.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->getting-started",
      "introduction": [
        "# Tree View - Getting Started\n\n<p class=\"description\">Get started with the Tree View. Install the package, configure your application and start using the components.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Installation",
          "introduction": [
            "Installation\n\nUsing your favorite package manager, install `@mui/x-tree-view-pro` for the commercial version, or `@mui/x-tree-view` for the free community version.\n\n<!-- #default-branch-switch -->\n\n{{\"component\": \"modules/components/TreeViewInstallationInstructions.js\"}}\n\nThe Tree View package has a peer dependency on `@mui/material`.\nIf you are not already using it in your project, you can install it with:\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n```bash pnpm\npnpm add @mui/material @emotion/react @emotion/styled\n```\n\n```bash yarn\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n</codeblock>\n\n<!-- #react-peer-version -->\n\nPlease note that [react](https://www.npmjs.com/package/react) and [react-dom](https://www.npmjs.com/package/react-dom) are peer dependencies too:\n\n```json\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n},\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Style engine",
              "introduction": [
                "Style engine\n\nMaterial UI is using [Emotion](https://emotion.sh/docs/introduction) as a styling engine by default. If you want to use [`styled-components`](https://styled-components.com/) instead, run:\n\n<codeblock storageKey=\"package-manager\">\n```bash npm\nnpm install @mui/styled-engine-sc styled-components\n```\n\n```bash pnpm\npnpm add @mui/styled-engine-sc styled-components\n```\n\n```bash yarn\nyarn add @mui/styled-engine-sc styled-components\n```\n\n</codeblock>\n\nTake a look at the [Styled engine guide](/material-ui/integrations/styled-components/) for more information about how to configure `styled-components` as the style engine."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Render your first component",
          "introduction": [
            "Render your first component\n\nTo make sure that everything is set up correctly, try rendering a Simple Tree View component:"
          ],
          "code_path": [
            "FirstComponent.js"
          ],
          "children": []
        },
        {
          "name": "Accessibility",
          "introduction": [
            "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/treeview/)\n\nThe component follows the WAI-ARIA authoring practices.\n\nTo have an accessible Tree View you must use `aria-labelledby`\nor `aria-label` to reference or provide a label on the TreeView,\notherwise, screen readers will announce it as \"tree\", making it hard to understand the context of a specific tree item."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "TypeScript",
          "introduction": [
            "TypeScript\n\nIn order to benefit from the [CSS overrides](/material-ui/customization/theme-components/#theme-style-overrides) and [default prop customization](/material-ui/customization/theme-components/#theme-default-props) with the theme, TypeScript users need to import the following types.\nInternally, it uses module augmentation to extend the default theme structure.\n\n```tsx\nimport type {} from '@mui/x-tree-view/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    MuiRichTreeView: {\n      styleOverrides: {\n        root: {\n          backgroundColor: 'red',\n        },\n      },\n    },\n  },\n});\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "tree-view->tree-item-customization",
      "introduction": [
        "# Tree Item Customization\n\n<p class=\"description\">Learn how to customize the Tree Item component.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Anatomy",
          "introduction": [
            "Anatomy\n\nEach Tree Item component is shaped by a series of composable slots.\nHover over them in the demo below to see each slot.\n\n<span class=\"only-light-mode\" style=\"border: 1px solid rgb(232, 234, 238); border-radius:12px\">\n  <img src=\"/static/x/tree-view-illustrations/tree-item-light.png\" width=\"1632\" height=\"644\" alt=\"Tree Item anatomy\" loading=\"lazy\" style=\"display: block;\">\n</span>\n<span class=\"only-dark-mode\" style=\"border: 1px solid rgb(29, 33, 38); border-radius:12px\">\n  <img src=\"/static/x/tree-view-illustrations/tree-item-dark.png\" width=\"1632\" height=\"644\" alt=\"Tree Item anatomy\" loading=\"lazy\" style=\"display: block;\">\n</span>"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Content",
              "introduction": [
                "Content\n\nUse the content slot to customize the content of the Tree Item or replace it with a custom component."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Slot props",
                  "introduction": [
                    "Slot props\n\nThe `slotProps` prop lets you pass props to the content component.\nThe demo below shows how to pass an `sx` handler to the content of the Tree Item:"
                  ],
                  "code_path": [
                    "ContentSlotProps.js"
                  ],
                  "children": []
                },
                {
                  "name": "Slot",
                  "introduction": [
                    "Slot\n\nThe demo below shows how to replace the content slot with a custom component."
                  ],
                  "code_path": [
                    "ContentSlot.js"
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Label",
              "introduction": [
                "Label\n\nUse the label slot to customize the Tree Item label or replace it with a custom component."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Slot props",
                  "introduction": [
                    "Slot props\n\nThe `slotProps` prop lets you pass props to the label component.\nThe demo below shows how to pass an `id` attribute to the Tree Item label:"
                  ],
                  "code_path": [
                    "LabelSlotProps.js"
                  ],
                  "children": []
                },
                {
                  "name": "Slot",
                  "introduction": [
                    "Slot\n\nThe demo below shows how to replace the label slot with a custom component."
                  ],
                  "code_path": [
                    "LabelSlot.js"
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Checkbox",
              "introduction": [
                "Checkbox\n\nThe checkbox is present on the items when `checkboxSelection` is enabled on the Tree View."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Slot props",
                  "introduction": [
                    "Slot props\n\nYou can pass props to the checkbox slot using the `slotProps` on the Tree Item 2 component."
                  ],
                  "code_path": [
                    "CheckboxSlotProps.js"
                  ],
                  "children": []
                },
                {
                  "name": "Slot",
                  "introduction": [
                    "Slot\n\nThe demo below shows how to replace the checkbox slot with a custom component."
                  ],
                  "code_path": [
                    "CheckboxSlot.js"
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Basics",
          "introduction": [
            "Basics"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Change nested item's indentation",
              "introduction": [
                "Change nested item's indentation\n\nUse the `itemChildrenIndentation` prop to change the indentation of the nested items.\nBy default, a nested item is indented by `12px` from its parent item.",
                ":::success\nIf you are using a custom Tree Item component, and you want to override the padding,\nthen apply the following padding to your `content` element:\n\n```ts\nconst CustomTreeItemContent = styled(TreeItemContent)(({ theme }) => ({\n  // ...other styles\n  paddingLeft:\n      `calc(${theme.spacing(1)} + var(--TreeView-itemChildrenIndentation) * var(--TreeView-itemDepth))`,\n}\n```\n\n:::"
              ],
              "code_path": [
                "ItemChildrenIndentationProp.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Hooks",
          "introduction": [
            "Hooks"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "useTreeItem",
              "introduction": [
                "useTreeItem\n\nThe `useTreeItem` hook lets you manage and customize individual Tree Items.\nYou can use it to get the properties needed for all slots, the status of any given Item, or to tap into the interactive API of the Tree View."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Slot properties",
                  "introduction": [
                    "Slot properties\n\nThe `useTreeItem` hook gives you granular control over an Item's layout by providing resolvers to get the appropriate props for each slot.\nThis makes it possible to build a fully custom layout for your Tree Items.\n\nThe demo below shows how to get the props needed for each slot, and how to pass them correctly.",
                    "You can pass additional props to a slot—or override existing slots—by passing an object argument to the slot's props resolver, as shown below:\n\n```jsx\n<CustomTreeItemContent\n  {...getContentProps({\n    className: 'overridingClassName',\n    newProp: 'I am passing this to the content slot'\n  })}\n>\n```"
                  ],
                  "code_path": [
                    "useTreeItemHookProperties.js",
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Item status",
                  "introduction": [
                    "Item status\n\nThe `useTreeItem` hook also returns a `status` object that holds boolean values for each possible state of a Tree Item.\n\n```jsx\nconst {\n  status: { expanded, expandable, focused, selected, disabled, editable, editing },\n} = useTreeItem(props);\n```\n\nYou can use these statuses to apply custom styling to the item or conditionally render subcomponents."
                  ],
                  "code_path": [
                    "useTreeItemHookStatus.js"
                  ],
                  "children": []
                },
                {
                  "name": "Imperative API",
                  "introduction": [
                    "Imperative API\n\nThe `publicAPI` object provides a number of methods to programmatically interact with the Tree View.\nYou can use the `useTreeItem` hook to access the `publicAPI` object from within a Tree Item.",
                    "See the **Imperative API** section on each feature page to learn more about the public API methods available on the Tree View.\n\n:::warning\nThe `publicAPI` object should not be used in the render because the item won't necessarily re-render when the returned value is updated.\n\nIf you want to access the item model, you can use the `useTreeItemModel` hook.\nSee [Tree Item Customization—useTreeItemModel](/x/react-tree-view/tree-item-customization/#usetreeitemmodel) for more details.\n:::"
                  ],
                  "code_path": [
                    "useTreeItemHookPublicAPI.js",
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "`useTreeItemUtils`",
              "introduction": [
                "`useTreeItemUtils`\n\nThe `useTreeItemUtils` hook provides a set of interaction methods for implementing custom behaviors for the Tree View.\nIt also returns the status of the Item.\n\n```jsx\nconst { interactions, status, publicAPI } = useTreeItemUtils({\n  itemId: props.itemId,\n  children: props.children,\n});\n```\n\nTo override the Tree Item's default interactions, set `event.defaultMuiPrevented` to `true` in the event handlers and then implement your own behavior."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Selection",
                  "introduction": [
                    "Selection\n\nYou can select an Item in a Tree View by clicking its content slot.\nThe demo below shows how to handle selection when the user clicks on an icon."
                  ],
                  "code_path": [
                    "HandleSelectionDemo.js"
                  ],
                  "children": []
                },
                {
                  "name": "Checkbox selection",
                  "introduction": [
                    "Checkbox selection\n\nBy default, checkbox selection is skipped if an Item is disabled or if `disableSelection` is `true` on the Tree View.\nYou can create a custom handler for the `onChange` event on the checkbox slot to bypass these conditions.\nThe demo below shows how to implement custom checkbox selection behavior.",
                    "Visit the [Rich Tree View](/x/react-tree-view/rich-tree-view/selection/) or [Simple Tree View](/x/react-tree-view/simple-tree-view/selection/) docs, respectively, for more details on the selection API."
                  ],
                  "code_path": [
                    "HandleCheckboxSelectionDemo.js",
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Expansion",
                  "introduction": [
                    "Expansion\n\nBy default, a Tree Item is expanded when the user clicks on its contents.\nYou can change the expansion trigger using the `expansionTrigger` prop on the `iconContainer`.\nFor more details, see [Expansion—Limit expansion to icon container](/x/react-tree-view/rich-tree-view/expansion/#limit-expansion-to-icon-container).\n\nUse the `handleExpansion` interaction method for deeper customization of the Item's expansion behavior.\n\nThe demo below shows how to introduce a new element that expands and collapses the Item."
                  ],
                  "code_path": [
                    "HandleExpansionDemo.js"
                  ],
                  "children": []
                },
                {
                  "name": "Label editing",
                  "introduction": [
                    "Label editing\n\nThe `useTreeItemUtils` hook provides the following interaction methods relevant to label editing behavior:\n\n```jsx\nconst {\n  interactions: {\n    toggleItemEditing,\n    handleCancelItemLabelEditing,\n    handleSaveItemLabel,\n  },\n} = useTreeItemUtils({\n  itemId: props.itemId,\n  children: props.children,\n});\n```\n\nSee [Editing—enable editing using only icons](/x/react-tree-view/rich-tree-view/editing/#enable-editing-using-only-icons) for more details on customizing this behavior."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "`useTreeItemModel`",
              "introduction": [
                "`useTreeItemModel`\n\nThe `useTreeItemModel` hook lets you access the item model (the object passed to `props.items`):\n\n```jsx\nconst item = useTreeItemModel(itemId);\n```"
              ],
              "code_path": [
                "LabelSlot.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->overview",
      "introduction": [
        "# MUI X Tree View\n\n<p class=\"description\">The Tree View component lets users navigate hierarchical lists of data with nested levels that can be expanded and collapsed.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Available components",
          "introduction": [
            "Available components\n\nThe MUI X Tree View package exposes two different versions of the component:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Simple Tree View",
              "introduction": [
                "Simple Tree View\n\n```jsx\nimport { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\n```\n\nThe simple version of the Tree View component receives its items as JSX children.\nThis is the recommended version for hardcoded items."
              ],
              "code_path": [
                "BasicSimpleTreeView.js"
              ],
              "children": []
            },
            {
              "name": "Rich Tree View",
              "introduction": [
                "Rich Tree View\n\n```jsx\nimport { RichTreeView } from '@mui/x-tree-view/RichTreeView';\n```\n\nThe rich version of the Tree View component receives its items dynamically from an external data source.\nThis is the recommended version for larger trees, as well as those that require more advanced features like editing and virtualization.",
                ":::info\nAt the moment, the Simple and Rich Tree Views are similar in terms of feature support. But as the component grows, you can expect to see the more advanced ones appear primarily on the Rich Tree View.\n:::"
              ],
              "code_path": [
                "BasicRichTreeView.js",
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "tree-view->accessibility",
      "introduction": [
        "# Accessibility\n\n<p class=\"description\">Learn how the Tree View implements accessibility features and guidelines, including keyboard navigation that follows international standards.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Guidelines",
          "introduction": [
            "Guidelines\n\nCommon conformance guidelines for accessibility include:\n\n- Globally accepted standard: [WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/)\n- US:\n  - [ADA](https://www.ada.gov/) - US Department of Justice\n  - [Section 508](https://www.section508.gov/) - US federal agencies\n- Europe: [EAA](https://employment-social-affairs.ec.europa.eu/policies-and-activities/social-protection-social-inclusion/persons-disabilities/union-equality-strategy-rights-persons-disabilities-2021-2030/european-accessibility-act_en) (European Accessibility Act)\n\nWCAG 2.1 has three levels of conformance: A, AA, and AAA.\nLevel AA exceeds the basic criteria for accessibility and is a common target for most organizations, so this is what we aim to support.\n\nThe [WAI-ARIA Authoring Practices](https://www.w3.org/WAI/ARIA/apg/patterns/treeview/) provide valuable information on how to optimize the accessibility of a Tree View."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Keyboard interactions",
          "introduction": [
            "Keyboard interactions\n\n:::info\nThe key assignments in the table below apply to Windows and Linux users.\n\nOn macOS replace <kbd class=\"key\">Ctrl</kbd> with <kbd class=\"key\">⌘ Command</kbd>.\n\nSome devices may lack certain keys, requiring the use of key combinations. In this case, replace:\n\n- <kbd class=\"key\">Home</kbd> with <kbd class=\"key\">Fn</kbd>+<kbd class=\"key\">Arrow Left</kbd>\n- <kbd class=\"key\">End</kbd> with <kbd class=\"key\">Fn</kbd>+<kbd class=\"key\">Arrow Right</kbd>\n\n:::\n\n|                                                                                          Keys | Description                                                                                                                                                                                                          |\n| --: | :- |\n|                                                                  <kbd class=\"key\">Enter</kbd> | Activates the focused item. <ul><li>If item has children, it is expanded or collapsed</li><li>If the item does not have children, it is selected</li></ul>                                                           |\n|                                                               <kbd class=\"key\">Arrow Up</kbd> | Moves focus to the previous focusable item, without expanding or collapsing it                                                                                                                                       |\n|                                                             <kbd class=\"key\">Arrow Down</kbd> | Moves focus to the next focusable item, without expanding or collapsing it                                                                                                                                           |\n| <kbd class=\"key\">Arrow Right</kbd> + RTL off </br> <kbd class=\"key\">Arrow Left</kbd> + RTL on | <ul><li>If focus is on a collapsed item, expands the item without moving focus</li><li>If focus is on an expanded item, moves focus to the first child</li><li>If focus is on an end item, nothing happens</li></ul> |\n|   <kbd class=\"key\">Arrow Left</kbd> + RTL off </br> <kbd class=\"key\">Arrow Right</kbd> RTL on | <ul><li>If focus is on an expanded item, collapses the item</li><li>If focus is on a collapsed item that has a parent, moves focus to its parent</li><li>If focus is on a root item, nothing happens</li></ul>       |\n|                                                                   <kbd class=\"key\">Home</kbd> | Focuses the first item in the tree                                                                                                                                                                                   |\n|                                                                    <kbd class=\"key\">End</kbd> | Focuses the last item in the tree                                                                                                                                                                                    |\n|                                                                     <kbd class=\"key\">\\*</kbd> | Expands all siblings that are at the same level as the focused item without moving focus                                                                                                                             |\n\nType-ahead is supported for single characters. When typing a character, focus moves to the next item with a label that starts with the typed character."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Selection",
          "introduction": [
            "Selection\n\nThe Tree View supports both single and multi-selection. To learn more about the selection API, visit the dedicated page for the [Simple Tree View](/x/react-tree-view/simple-tree-view/selection/) or the [Rich Tree View](/x/react-tree-view/rich-tree-view/selection/).\n\nTo read more about the distinction between selection and focus, you can refer to the [WAI-ARIA Authoring Practices guide](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_vs_selection)."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "On single-select trees",
              "introduction": [
                "On single-select trees\n\nWhen a single-select tree receives focus:\n\n- If none of the items are selected when the tree receives focus, focus is set on the first item.\n- If an item is selected before the tree receives focus, focus is set on the selected item.\n\n|                         Keys | Description                                                  |\n| -- |\n| <kbd class=\"key\">Space</kbd> | Selects the focused item.                                    |\n| <kbd class=\"key\">Enter</kbd> | Selects the focused item if the item does not have children. |"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "On multi-select trees",
              "introduction": [
                "On multi-select trees\n\nWhen a multi-select tree receives focus:\n\n- If none of the items are selected when the tree receives focus, focus is set on the first item.\n- If one or more items are selected before the tree receives focus, then focus is set on:\n  - the first selected item if it is the first render\n  - the item that was last selected otherwise\n\n|                                                                                 Keys | Description                                                       |\n| - |\n|                                                         <kbd class=\"key\">Space</kbd> | Toggles the selection state of the focused item.                  |\n|                         <kbd class=\"key\">Shift</kbd>+<kbd class=\"key\">Arrow Up</kbd> | Moves focus and toggles the selection state of the previous item. |\n|                       <kbd class=\"key\">Shift</kbd>+<kbd class=\"key\">Arrow Down</kbd> | Moves focus and toggles the selection state of the next item.     |\n| <kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">Shift</kbd>+<kbd class=\"key\">Home</kbd> | Selects the focused item and all items up to the first item.      |\n|  <kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">Shift</kbd>+<kbd class=\"key\">End</kbd> | Selects the focused item and all the items down to the last item. |\n|                                 <kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">A</kbd> | Selects all items.                                                |"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "migration->migration-tree-view-lab",
      "introduction": [
        "# Migration from the lab\n\n<p class=\"description\">Material UI Tree View is now available on MUI X!</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference for migrating your site's Tree View from `@mui/lab` to `@mui/x-tree-view`.\nThis migration is about the npm packages used, it **does not** affect the behavior of the components in your application.\n\n[//]: # 'You can find why we are moving in this direction in the [announcement blog post](/blog/lab-tree-view-to-mui-x/).'"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Migration steps",
          "introduction": [
            "Migration steps"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "1. Install MUI X package",
              "introduction": [
                "1. Install MUI X package\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/x-tree-view\n```\n\n```bash pnpm\npnpm add @mui/x-tree-view\n```\n\n```bash yarn\nyarn add @mui/x-tree-view\n```\n\n</codeblock>"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "2. Run the code mod",
              "introduction": [
                "2. Run the code mod\n\nWe have prepared a codemod to help you migrate your codebase.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n```bash\nnpx @mui/codemod v5.0.0/tree-view-moved-to-x <path>\n```\n\nWhich will transform the imports like this:\n\n```diff\n-import TreeView from '@mui/lab/TreeView';\n+import { TreeView } from '@mui/x-tree-view/TreeView';\n\n-import { TreeView, TreeItem } from '@mui/lab';\n+import { TreeView, TreeItem } from '@mui/x-tree-view';\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "migration->migration-tree-view-v6",
      "introduction": [
        "# Migration from v6 to v7\n\n<p class=\"description\">This guide describes the changes needed to migrate the Tree View from v6 to v7.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference guide for upgrading `@mui/x-tree-view` from v6 to v7.\nTo read more about the changes from the new major, check out [the blog post about the release of MUI X v7](https://mui.com/blog/mui-x-v7-beta/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Start using the new release",
          "introduction": [
            "Start using the new release\n\nIn `package.json`, change the version of the Tree View package to `^7.0.0`.\n\n```diff\n-\"@mui/x-tree-view\": \"^6.0.0\",\n+\"@mui/x-tree-view\": \"^7.0.0\",\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Update `@mui/material` package",
          "introduction": [
            "Update `@mui/material` package\n\nTo have the option of using the latest API from `@mui/material`, the package peer dependency version has been updated to `^5.15.14`.\nIt is a change in minor version only, so it should not cause any breaking changes.\nPlease update your `@mui/material` package to this or a newer version."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Run codemods",
          "introduction": [
            "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v7.\nYou can run `v7.0.0/tree-view/preset-safe` targeting only Tree View or `v7.0.0/preset-safe` to target other MUI X components like the Data Grid as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n<!-- #default-branch-switch -->\n\n```bash\n# Tree View specific\nnpx @mui/x-codemod@latest v7.0.0/tree-view/preset-safe <path>\n\n# Target other MUI X components as well\nnpx @mui/x-codemod@latest v7.0.0/preset-safe <path>\n```\n\n:::info\nIf you want to run the codemods one by one, check out the codemods included in the [preset-safe codemod for the Tree View](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/README.md#preset-safe-for-tree-view-v700) for more details.\n:::\n\nBreaking changes that are handled by `preset-safe` codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen or next to the specific point that is handled by it.\n\nIf you have already applied the `v7.0.0/tree-view/preset-safe` (or `v7.0.0/preset-safe`) codemod, then you should not need to take any further action on these items. If there's a specific part of the breaking change that is not part of the codemod or needs some manual work, it will be listed in the end of each section.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading, cross-file dependencies, etc., the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<RichTreeView {...newProps} />\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Breaking changes",
          "introduction": [
            "Breaking changes\n\nSince `v7` is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Drop the legacy bundle",
              "introduction": [
                "Drop the legacy bundle\n\nThe support for IE 11 has been removed from all MUI X packages.\nThe `legacy` bundle that used to support old browsers like IE 11 is no longer included.\n\n:::info\nIf you need support for IE 11, you will need to keep using the latest version of the `v6` release.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Drop webpack 4 support",
              "introduction": [
                "Drop webpack 4 support\n\nDropping old browsers support also means that we no longer transpile some features that are natively supported by modern browsers – like [Nullish Coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) and [Optional Chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining).\n\nThese features are not supported by webpack 4, so if you are using webpack 4, you will need to transpile these features yourself or upgrade to webpack 5.\n\nHere is an example of how you can transpile these features on webpack 4 using the `@babel/preset-env` preset:\n\n```diff\n // webpack.config.js\n\n module.exports = (env) => ({\n   // ...\n   module: {\n     rules: [\n       {\n         test: /\\.[jt]sx?$/,\n-        exclude: /node_modules/,\n+        exclude: [\n+          {\n+            test: path.resolve(__dirname, 'node_modules'),\n+            exclude: [path.resolve(__dirname, 'node_modules/@mui/x-tree-view')],\n+          },\n+        ],\n       },\n     ],\n   },\n });\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Rename `nodeId` to `itemId`",
              "introduction": [
                "✅ Rename `nodeId` to `itemId`\n\nThe required `nodeId` prop used by the Tree Item has been renamed to `itemId` for consistency:\n\n```diff\n <TreeView>\n-  <TreeItem label=\"Item 1\" nodeId=\"one\">\n+  <TreeItem label=\"Item 1\" itemId=\"one\">\n </TreeView>\n```\n\nThe same change has been applied to the `ContentComponent` prop:\n\n```diff\n const CustomContent = React.forwardRef((props, ref) => {\n-  const id = props.nodeId;\n+  const id = props.itemId;\n   // Render some UI\n });\n\n function App() {\n   return (\n     <SimpleTreeView>\n       <TreeItem ContentComponent={CustomContent} />\n     </SimpleTreeView>\n   )\n }\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Use Simple Tree View instead of Tree View",
              "introduction": [
                "✅ Use Simple Tree View instead of Tree View\n\nThe `<TreeView />` component has been deprecated and will be removed in the next major.\nYou can start replacing it with the new `<SimpleTreeView />` component which has exactly the same API:\n\n```diff\n-import { TreeView } from '@mui/x-tree-view';\n+import { SimpleTreeView } from '@mui/x-tree-view';\n\n-import { TreeView } from '@mui/x-tree-view/TreeView';\n+import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\n\n   return (\n-    <TreeView>\n+    <SimpleTreeView>\n       <TreeItem itemId=\"1\" label=\"First item\" />\n-    </TreeView>\n+    </SimpleTreeView>\n   );\n```\n\nIf you were using theme augmentation, you will also need to migrate it:\n\n```diff\n const theme = createTheme({\n   components: {\n-    MuiTreeView: {\n+    MuiSimpleTreeView: {\n       styleOverrides: {\n         root: {\n           opacity: 0.5,\n         },\n       },\n     },\n   },\n });\n```\n\nIf you were using the `treeViewClasses` object, you can replace it with the new `simpleTreeViewClasses` object:\n\n```diff\n import { treeViewClasses } from '@mui/x-tree-view/TreeView';\n import { simpleTreeViewClasses } from '@mui/x-tree-view/SimpleTreeView';\n\n-const rootClass = treeViewClasses.root;\n+const rootClass = simpleTreeViewClasses.root;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Use slots to define the item icons",
              "introduction": [
                "Use slots to define the item icons"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Define `expandIcon`",
                  "introduction": [
                    "Define `expandIcon`\n\nThe icon used to expand the children of an item (rendered when this item is collapsed)\nis now defined as a slot both on the `<TreeView />` and the `<TreeItem />` components.\n\nIf you were using the `ChevronRight` icon from `@mui/icons-material`,\nyou can stop passing it to your component because it is now the default value:\n\n```diff\n-import ChevronRightIcon from '@mui/icons-material/ChevronRight';\n\n <SimpleTreeView\n-  defaultExpandIcon={<ChevronRightIcon />}\n >\n   {items}\n </SimpleTreeView>\n```\n\nIf you were passing another icon to your Tree View component,\nyou need to use the new `expandIcon` slot on this component:\n\n```diff\n <SimpleTreeView\n-  defaultExpandIcon={<MyCustomExpandIcon />}\n+  slots={{ expandIcon: MyCustomExpandIcon }}\n >\n   {items}\n </SimpleTreeView>\n```\n\n:::warning\nNote that the `slots` prop expects a React component, not the JSX element returned when rendering this component.\n:::\n\nIf you were passing another icon to your `<TreeItem />` component,\nyou need to use the new `expandIcon` slot on this component:\n\n```diff\n  <SimpleTreeView>\n    <TreeItem\n      itemId=\"1\"\n      label=\"Item 1\"\n-     expandIcon={<MyCustomExpandIcon />}\n+     slots={{ expandIcon: MyCustomExpandIcon }}\n    />\n  </SimpleTreeView>\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Define `collapseIcon`",
                  "introduction": [
                    "Define `collapseIcon`\n\nThe icon used to collapse the children of an item (rendered when this item is expanded)\nis now defined as a slot both on the `<TreeView />` and `<TreeItem />` components.\n\nIf you were using the `ExpandMore` icon from `@mui/icons-material`,\nyou can stop passing it to your component because it is now the default value:\n\n```diff\n- import ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\n  <SimpleTreeView\n-   defaultCollapseIcon={<ExpandMoreIcon />}\n  >\n    {items}\n  </SimpleTreeView>\n```\n\nIf you were passing another icon to your Tree View component,\nyou need to use the new `collapseIcon` slot on this component:\n\n```diff\n  <SimpleTreeView\n-   defaultCollapseIcon={<MyCustomCollapseIcon />}\n+   slots={{ collapseIcon: MyCustomCollapseIcon }}\n  >\n    {items}\n  </SimpleTreeView>\n```\n\n:::warning\nNote that the `slots` prop expects a React component, not the JSX element returned when rendering this component.\n:::\n\nIf you were passing another icon to your `<TreeItem />` component,\nyou need to use the new `collapseIcon` slot on this component:\n\n```diff\n  <SimpleTreeView>\n    <TreeItem\n      itemId=\"1\"\n      label=\"Item 1\"\n-     collapseIcon={<MyCustomCollapseIcon />}\n+     slots={{ collapseIcon: MyCustomCollapseIcon }}\n    />\n  </SimpleTreeView>\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Replace `parentIcon`",
                  "introduction": [
                    "Replace `parentIcon`\n\nThe `parentIcon` prop has been removed from the Tree View components.\n\nIf you were passing an icon to your Tree View component,\nyou can achieve the same behavior\nby passing the same icon to both the `collapseIcon` and the `expandIcon` slots on this component:\n\n```diff\n  <SimpleTreeView\n-   defaultParentIcon={<MyCustomParentIcon />}\n+   slots={{ collapseIcon: MyCustomParentIcon, expandIcon: MyCustomParentIcon }}\n  >\n    {items}\n  </SimpleTreeView>\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Define `endIcon`",
                  "introduction": [
                    "Define `endIcon`\n\nThe icon rendered next to an item without children\nis now defined as a slot both on the `<TreeView />` and `<TreeItem />` components.\n\nIf you were passing an icon to your Tree View component,\nyou need to use the new `endIcon` slot on this component:\n\n```diff\n  <SimpleTreeView\n-   defaultEndIcon={<MyCustomEndIcon />}\n+   slots={{ endIcon: MyCustomEndIcon }}\n  >\n    {items}\n  </SimpleTreeView>\n```\n\n:::warning\nNote that the `slots` prop expects a React component, not the JSX element returned when rendering this component.\n:::\n\nIf you were passing an icon to your `<TreeItem />` component,\nyou need to use the new `endIcon` slot on this component:\n\n```diff\n  <SimpleTreeView>\n    <TreeItem\n      itemId=\"1\"\n      label=\"Item 1\"\n-     endIcon={<MyCustomEndIcon />}\n+     slots={{ endIcon: MyCustomEndIcon }}\n    />\n  </SimpleTreeView>\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Define `icon`",
                  "introduction": [
                    "Define `icon`\n\nThe icon rendered next to an item\nis now defined as a slot on the `<TreeItem />` component.\n\nIf you were passing an icon to your `<TreeItem />` component,\nyou need to use the new `icon` slot on this component:\n\n```diff\n  <SimpleTreeView>\n    <TreeItem\n      itemId=\"1\"\n      label=\"Item 1\"\n-     icon={<MyCustomIcon />}\n+     slots={{ icon: MyCustomIcon }}\n    />\n  </SimpleTreeView>\n```\n\n:::warning\nNote that the `slots` prop expects a React component, not the JSX element returned when rendering this component.\n:::"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "✅ Use slots to define the group transition",
              "introduction": [
                "✅ Use slots to define the group transition\n\nThe component used to animate the item children\nis now defined as a slot on the `<TreeItem />` component.\n\nIf you were passing a `TransitionComponent` or `TransitionProps` to your `<TreeItem />` component,\nyou need to use the new `groupTransition` slot on this component:\n\n```diff\n <SimpleTreeView>\n   <TreeItem\n     itemId=\"1\"\n     label=\"Item 1\"\n-    TransitionComponent={Fade}\n-    TransitionProps={{ timeout: 600 }}\n+    slots={{ groupTransition: Fade }}\n+    slotProps={{ groupTransition: { timeout: 600 } }}\n   />\n </SimpleTreeView>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Rename the `group` class of the Tree Item component",
              "introduction": [
                "Rename the `group` class of the Tree Item component\n\nThe `group` class of the `<TreeItem />` component has been renamed to `groupTransition` to match with its new slot name.\n\n```diff\n const StyledTreeItem = styled(TreeItem)({\n-  [`& .${treeItemClasses.group}`]: {\n+  [`& .${treeItemClasses.groupTransition}`]: {\n    marginLeft: 20,\n  },\n });\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Rename `onNodeToggle`, `expanded` and `defaultExpanded`",
              "introduction": [
                "✅ Rename `onNodeToggle`, `expanded` and `defaultExpanded`\n\nThe expansion props have been renamed to better describe their behaviors:\n\n| Old name          | New name                |\n| :- |\n| `onNodeToggle`    | `onExpandedItemsChange` |\n| `expanded`        | `expandedItems`         |\n| `defaultExpanded` | `defaultExpandedItems`  |\n\n```diff\n <TreeView\n-  onNodeToggle={handleExpansionChange}\n+  onExpandedItemsChange={handleExpansionChange}\n\n-  expanded={expandedItems}\n+  expandedItems={expandedItems}\n\n-  defaultExpanded={defaultExpandedItems}\n+  defaultExpandedItems={defaultExpandedItems}\n />\n```\n\n:::info\nIf you were using the `onNodeToggle` prop to react to the expansion or collapse of a specific item,\nyou can use the new `onItemExpansionToggle` prop which is called whenever an item is expanded or collapsed with its id and expansion status\n\n```tsx\n// It is also available on the deprecated Tree View component\n<SimpleTreeView\n  onItemExpansionToggle={(event, itemId, isExpanded) =>\n    console.log(itemId, isExpanded)\n  }\n/>\n```\n\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Rename `onNodeSelect`, `selected`, and `defaultSelected`",
              "introduction": [
                "✅ Rename `onNodeSelect`, `selected`, and `defaultSelected`\n\nThe selection props have been renamed to better describe their behaviors:\n\n| Old name          | New name                |\n| :- |\n| `onNodeSelect`    | `onSelectedItemsChange` |\n| `selected`        | `selectedItems`         |\n| `defaultSelected` | `defaultSelectedItems`  |\n\n```diff\n <TreeView\n-  onNodeSelect={handleSelectionChange}\n+  onSelectedItemsChange={handleSelectionChange}\n\n-  selected={selectedItems}\n+  selectedItems={selectedItems}\n\n-  defaultSelected={defaultSelectedItems}\n+  defaultSelectedItems={defaultSelectedItems}\n />\n```\n\n:::info\nIf you were using the `onNodeSelect` prop to react to the selection or deselection of a specific item,\nyou can use the new `onItemSelectionToggle` prop which is called whenever an item is selected or deselected with its id and selection status.\n\n```tsx\n// It is also available on the deprecated `<TreeView />` component\n<SimpleTreeView\n  onItemSelectionToggle={(event, itemId, isSelected) =>\n    console.log(itemId, isSelected)\n  }\n/>\n```\n\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Focus the Tree Item instead of the Tree View",
              "introduction": [
                "Focus the Tree Item instead of the Tree View\n\nThe focus is now applied to the Tree Item root element instead of the Tree View root element.\n\nThis change will allow new features that require the focus to be on the Tree Item,\nlike the drag and drop reordering of items.\nIt also solves several issues with focus management,\nlike the inability to scroll to the focused item when a lot of items are rendered.\n\nThis will mostly impact how you write tests to interact with the Tree View:\n\nFor example, if you were writing a test with `react-testing-library`, here is what the changes could look like:\n\n```diff\n it('test example on first item', () => {\n   const { getByRole } = render(\n     <SimpleTreeView>\n       <TreeItem itemId=\"one\" id=\"one\">One</TreeItem>\n       <TreeItem itemId=\"two\" id=\"two\">Two</TreeItem>\n    </SimpleTreeView>\n   );\n\n   // Set the focus to the item \"One\"\n-  const tree = getByRole('tree');\n+  const treeItem = getByRole('treeitem', { name: 'One' });\n   act(() => {\n-    tree.focus();\n+    treeItem.focus();\n   });\n-  fireEvent.keyDown(tree, { key: 'ArrowDown' });\n+  fireEvent.keyDown(treeItem, { key: 'ArrowDown' });\n\n  // Check if the new focused item is \"Two\"\n- expect(tree)to.have.attribute('aria-activedescendant', 'two');\n+ expect(document.activeElement).to.have.attribute('id', 'two');\n })\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Use `useTreeItemState` instead of `useTreeItem`",
              "introduction": [
                "✅ Use `useTreeItemState` instead of `useTreeItem`\n\nThe `useTreeItem` hook has been renamed `useTreeItemState`.\nThis will help create a new headless version of the Tree Item component based on a future `useTreeItem` hook.\n\n```diff\n-import { TreeItem, useTreeItem } from '@mui/x-tree-view/TreeItem';\n+import { TreeItem, useTreeItemState } from '@mui/x-tree-view/TreeItem';\n\n const CustomContent = React.forwardRef((props, ref) => {\n-  const { disabled } = useTreeItem(props.itemId);\n+  const { disabled } = useTreeItemState(props.itemId);\n\n   // Render some UI\n });\n\n function App() {\n   return (\n     <SimpleTreeView>\n       <TreeItem ContentComponent={CustomContent} />\n     </SimpleTreeView>\n   )\n }\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Rename `onNodeFocus`",
              "introduction": [
                "✅ Rename `onNodeFocus`\n\nThe `onNodeFocus` callback has been renamed to `onItemFocus` for consistency:\n\n```diff\n <SimpleTreeView\n-  onNodeFocus={onNodeFocus}\n+  onItemFocus={onItemFocus}\n />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "migration->migration-tree-view-v7",
      "introduction": [
        "# Migration from v7 to v8\n\n<p class=\"description\">This guide describes the changes needed to migrate the Tree View from v7 to v8.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference guide for upgrading `@mui/x-tree-view` from v7 to v8."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Start using the new release",
          "introduction": [
            "Start using the new release\n\nIn `package.json`, change the version of the Tree View package to `next`.\n\n```diff\n-\"@mui/x-tree-view\": \"7.x.x\",\n+\"@mui/x-tree-view\": \"next\",\n\n-\"@mui/x-tree-view-pro\": \"7.x.x\",\n+\"@mui/x-tree-view-pro\": \"next\",\n```\n\nUsing `next` ensures that it will always use the latest v8 pre-release version, but you can also use a fixed version, like `8.0.0-alpha.0`.\n\nSince `v8` is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features.\nDescribed below are the steps needed to migrate from v7 to v8."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Run codemods",
          "introduction": [
            "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v8. You can run `v8.0.0/tree-view/preset-safe` targeting only Tree View or `v8.0.0/preset-safe` to target the other packages as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n<!-- #default-branch-switch -->\n\n```bash\n# Tree View specific\nnpx @mui/x-codemod@latest v8.0.0/tree-view/preset-safe <path>\n\n# Target the other packages as well\nnpx @mui/x-codemod@latest v8.0.0/preset-safe <path>\n```\n\n:::info\nIf you want to run the transformers one by one, check out the transformers included in the [preset-safe codemod for the Tree View](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/README.md#preset-safe-for-tree-view-v800) for more details.\n:::\n\nBreaking changes that are handled by this codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen.\n\nIf you have already applied the `v8.0.0/tree-view/preset-safe` (or `v8.0.0/preset-safe`) codemod, then you should not need to take any further action on these items.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading, cross-file dependencies, etc., the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<RichTreeView {...treeViewProps} />\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "✅ Use Simple Tree View instead of Tree View",
              "introduction": [
                "✅ Use Simple Tree View instead of Tree View\n\nThe `<TreeView />` component has been renamed `<SimpleTreeView />` which has exactly the same API:\n\n```diff\n-import { TreeView } from '@mui/x-tree-view';\n+import { SimpleTreeView } from '@mui/x-tree-view';\n\n-import { TreeView } from '@mui/x-tree-view/TreeView';\n+import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\n\n   return (\n-    <TreeView>\n+    <SimpleTreeView>\n       <TreeItem itemId=\"1\" label=\"First item\" />\n-    </TreeView>\n+    </SimpleTreeView>\n   );\n```\n\nIf you were using theme augmentation, you will also need to migrate it:\n\n```diff\n const theme = createTheme({\n   components: {\n-    MuiTreeView: {\n+    MuiSimpleTreeView: {\n       styleOverrides: {\n         root: {\n           opacity: 0.5,\n         },\n       },\n     },\n   },\n });\n```\n\nIf you were using the `treeViewClasses` object, you can replace it with the new `simpleTreeViewClasses` object:\n\n```diff\n import { treeViewClasses } from '@mui/x-tree-view/TreeView';\n import { simpleTreeViewClasses } from '@mui/x-tree-view/SimpleTreeView';\n\n-const rootClass = treeViewClasses.root;\n+const rootClass = simpleTreeViewClasses.root;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "New API to customize the Tree Item",
          "introduction": [
            "New API to customize the Tree Item\n\nThe `ContentComponent` or `ContentProps` props of the `TreeItem` component have been removed in favor of the new `slots`, `slotProps` props and of the `useTreeItem` hook.\n\nLearn more about the anatomy of the Tree Items and the customization utilities provided on the [Tree Item Customization page](/x/react-tree-view/tree-item-customization/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Behavior change on the `onClick` and `onMouseDown` props of `TreeItem`",
          "introduction": [
            "Behavior change on the `onClick` and `onMouseDown` props of `TreeItem`\n\nThe `onClick` and `onMouseDown` were the only event callback that were passed to the content of the Tree Item instead of its root.\nThe goal was to make sure that the callback was not fired when clicking on a descendant of a giving item.\nThis inconsistency has been solved, all the event manager now target the root of the item, and you can use the `onItemClick` prop on the Tree View component to target the content of an item:\n\n```diff\n-<SimpleTreeView>\n-  <TreeItem onClick={handleItemClick}>\n+<SimpleTreeView onItemClick={handleItemClick}>\n+  <TreeItem>\n </SimpleTreeView>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Rename the `TreeItem2` (and related utils)",
          "introduction": [
            "✅ Rename the `TreeItem2` (and related utils)\n\nAll the new Tree Item-related components and utils (introduced in the previous major to improve the DX of the Tree Item component) are becoming the default way of using the Tree Item and are therefore losing their `2` suffix:\n\n```diff\n import * as React from 'react';\n import {\n-  TreeItem2,\n+  TreeItem,\n-  TreeItem2Root,\n+  TreeItemRoot,\n-  TreeItem2Content,\n+  TreeItemContent,\n-  TreeItem2IconContainer,\n+  TreeItemIconContainer,\n-  TreeItem2GroupTransition,\n+  TreeItemGroupTransition,\n-  TreeItem2Checkbox,\n+  TreeItemCheckbox,\n-  TreeItem2Label,\n+  TreeItemLabel,\n-  TreeItem2Props,\n+  TreeItemProps,\n-  TreeItem2Slots,\n+  TreeItemSlots,\n-  TreeItem2SlotProps,\n+  TreeItemSlotProps,\n- } from '@mui/x-tree-view/TreeItem2';\n+ } from '@mui/x-tree-view/TreeItem';\n import {\n-  useTreeItem2,\n+  useTreeItem,\n-  unstable_useTreeItem2 as useAliasedTreeItem,\n+  unstable_useTreeItem as useAliasedTreeItem,\n-  UseTreeItem2Parameters,\n+  UseTreeItemParameters,\n-  UseTreeItem2ReturnValue,\n+  UseTreeItemReturnValue,\n-  UseTreeItem2Status,\n+  UseTreeItemStatus,\n-  UseTreeItem2RootSlotOwnProps,\n+  UseTreeItemRootSlotOwnProps,\n-  UseTreeItem2ContentSlotOwnProps,\n+  UseTreeItemContentSlotOwnProps,\n-  UseTreeItem2LabelInputSlotOwnProps,\n+  UseTreeItemLabelInputSlotOwnProps,\n-  UseTreeItem2LabelSlotOwnProps,\n+  UseTreeItemLabelSlotOwnProps,\n-  UseTreeItem2CheckboxSlotOwnProps,\n+  UseTreeItemCheckboxSlotOwnProps,\n-  UseTreeItem2IconContainerSlotOwnProps,\n+  UseTreeItemIconContainerSlotOwnProps,\n-  UseTreeItem2GroupTransitionSlotOwnProps,\n+  UseTreeItemGroupTransitionSlotOwnProps,\n-  UseTreeItem2DragAndDropOverlaySlotOwnProps,\n+  UseTreeItemDragAndDropOverlaySlotOwnProps,\n- } from '@mui/x-tree-view/useTreeItem2';\n+ } from '@mui/x-tree-view/useTreeItem';\n- import { useTreeItem2Utils } from '@mui/x-tree-view/hooks';\n+ import { useTreeItemUtils } from '@mui/x-tree-view/hooks';\n import {\n-  TreeItem2Provider,\n+  TreeItemProvider,\n-  TreeItem2ProviderProps,\n+  TreeItemProviderProps,\n- } from '@mui/x-tree-view/TreeItem2Provider';\n+ } from '@mui/x-tree-view/TreeItemProvider';\n import {\n-  TreeItem2Icon,\n+  TreeItemIcon,\n-  TreeItem2IconProps,\n+  TreeItemIconProps,\n-  TreeItem2IconSlots,\n+  TreeItemIconSlots,\n-  TreeItem2IconSlotProps,\n+  TreeItemIconSlotProps,\n- } from '@mui/x-tree-view/TreeItem2Icon';\n+ } from '@mui/x-tree-view/TreeItemIcon';\n import {\n-  TreeItem2DragAndDropOverlay,\n+  TreeItemDragAndDropOverlay,\n-  TreeItem2DragAndDropOverlayProps,\n+  TreeItemDragAndDropOverlayProps,\n- } from '@mui/x-tree-view/TreeItem2DragAndDropOverlay';\n+ } from '@mui/x-tree-view/TreeItemDragAndDropOverlay';\n import {\n-  TreeItem2LabelInput,\n+  TreeItemLabelInput,\n-  TreeItem2LabelInputProps,\n+  TreeItemLabelInputProps,\n- } from '@mui/x-tree-view/TreeItem2LabelInput';\n+ } from '@mui/x-tree-view/TreeItemLabelInput';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Stop using `publicAPI` methods in the render",
          "introduction": [
            "Stop using `publicAPI` methods in the render\n\nThe Tree Items are now memoized to improve the performances of the Tree View components.\nIf you call a `publicAPI` method in the render of an item, it might not re-render and you might not have the new value.\n\n```ts\nfunction CustomTreeItem(props) {\n  const { publicAPI } = useTreeItemUtils();\n\n  // Invalid\n  console.log(publicAPI.getItem(props.itemId));\n\n  // Valid\n  React.useEffect(() => {\n    console.log(publicAPI.getItem(props.itemId));\n  });\n\n  // Valid\n  function handleItemClick() {\n    console.log(publicAPI.getItem(props.itemId));\n  }\n}\n```\n\nIf you need to access the tree item model inside the render, you can use the new `useTreeItemModel` hook:\n\n```diff\n+import { useTreeItemModel } from '@mui/x-tree-view/hooks';\n\n function CustomTreeItem(props) {\n-  const { publicAPI } = useTreeItemUtils();\n-  const item = publicAPI.getItem(props.itemId);\n+  const item = useTreeItemModel(props.itemId);\n }\n```\n\n:::success\nIf you were using `publicAPI` methods to access other information than the tree item model inside the render, please open an issue so that we can provide a way to do it.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Apply the indentation on the item content instead of it's parent's group",
          "introduction": [
            "Apply the indentation on the item content instead of it's parent's group\n\nThe indentation of nested Tree Items is now applied on the content of the element.\nThis is required to support features like the drag and drop re-ordering which requires every Tree Item to go to the far left of the Tree View."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Apply custom indentation",
              "introduction": [
                "Apply custom indentation\n\nIf you used to set custom indentation in your Tree Item, you can use the new `itemChildrenIndentation` prop to do it while supporting the new DOM structure:\n\n```tsx\n<RichTreeView\n  items={MUI_X_PRODUCTS}\n  itemChildrenIndentation={24}\n  defaultExpandedItems={['grid']}\n/>\n```\n\n:::info\nSee [Tree Item Customization—Change nested item's indentation](/x/react-tree-view/tree-item-customization/#change-nested-items-indentation) for more details.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Fallback to the old behavior",
              "introduction": [
                "Fallback to the old behavior\n\nIf you used to style your content element (for example to add a border to it) and you don't use the drag and drop re-ordering, you can manually put the padding on the group transition element to restore the previous behavior:\n\n```tsx\nconst CustomTreeItemContent = styled(TreeItemContent)(({ theme }) => ({\n  // Remove the additional padding of nested elements\n  padding: theme.spacing(0.5, 1),\n}));\n\nconst CustomTreeItemGroupTransition = styled(TreeItemGroupTransition)({\n  // Add the padding back on the group transition element\n  paddingLeft: 'var(--TreeView-itemChildrenIndentation) !important',\n});\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "migration->migration-pickers-v5",
      "introduction": [
        "# Migration from v5 to v6\n\n<p class=\"description\">This guide describes the changes needed to migrate the Date and Time Pickers from v5 to v6.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nTo get started, check out [the blog post about the release of MUI X v6](https://mui.com/blog/mui-x-v6/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Start using the new release",
          "introduction": [
            "Start using the new release\n\nIn `package.json`, change the version of the date pickers package to `^6.0.0`.\n\n```diff\n-\"@mui/x-date-pickers\": \"^5.0.0\",\n+\"@mui/x-date-pickers\": \"^6.0.0\",\n```\n\nSince v6 is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features.\nDescribed below are the steps needed to migrate from v5 to v6."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Run codemods",
          "introduction": [
            "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v6. You can run `v6.0.0/pickers/preset-safe` targeting only Date and Time Pickers or `v6.0.0/preset-safe` to target Data Grid as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n```bash\n# Date and Time Pickers specific\nnpx @mui/x-codemod@latest v6.0.0/pickers/preset-safe <path>\n\n# Target Data Grid as well\nnpx @mui/x-codemod@latest v6.0.0/preset-safe <path>\n```\n\n:::info\nIf you want to run the transformers one by one, check out the transformers included in the [preset-safe codemod for pickers](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/README.md#preset-safe-for-pickers-v600) for more details.\n:::\n\nBreaking changes that are handled by this codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen.\n\nIf you have already applied the `v6.0.0/pickers/preset-safe` (or `v6.0.0/preset-safe`) codemod, then you should not need to take any further action on these items.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading, cross-file dependencies, etc., the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<DatePicker {...pickerProps} />\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Picker components",
          "introduction": [
            "Picker components"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "✅ Rename the `inputFormat` prop",
              "introduction": [
                "✅ Rename the `inputFormat` prop\n\nThe `inputFormat` prop has been renamed to `format` on all the pickers components.\n\n```diff\n <DatePicker\n-  inputFormat=\"YYYY\"\n+  format=\"YYYY\"\n />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Update expected values in tests",
              "introduction": [
                "Update expected values in tests\n\nThe value rendered in the input might have been modified.\nIf you are using RTL or if your date contains single digits sections, non-ASCII characters will be added.\n\nIf your tests are relying on the input values, you can clean them with the following method.\n\n```ts\nexport const cleanString = (dirtyString: string) =>\n  dirtyString\n    .replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '') // Remove non-ASCII characters\n    .replace(/ \\/ /g, '/'); // Remove extra spaces\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Update the format of the `value` prop",
              "introduction": [
                "Update the format of the `value` prop\n\nPreviously, it was possible to provide any format that your date management library was able to parse.\nFor instance, you could pass `value={new Date()}` when using `AdapterDayjs`.\nThis behavior brought a lot of confusion.\n\nIn v6, the format expected by the `value` prop is the same as for any other prop holding a date.\nHere is the syntax to initialize a date picker at the current date for each adapter:\n\n```tsx\n// Date-fns\n<DatePicker value={new Date()} />;\n\n// Dayjs\nimport dayjs from 'dayjs';\n<DatePicker value={dayjs()} />;\n\n// Moment\nimport moment from 'moment';\n<DatePicker value={moment()} />;\n\n// Luxon\nimport { DateTime } from 'luxon';\n<DatePicker value={DateTime.now()} />;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Stop rendering a clock on desktop",
              "introduction": [
                "Stop rendering a clock on desktop\n\nIn desktop mode, the `DateTimePicker` and `TimePicker` components will no longer render the [`TimeClock`](/x/react-date-pickers/time-clock/) component.\nThe `TimeClock` component has been replaced with a new [`DigitalClock`](/x/react-date-pickers/digital-clock/) component instead.\nThe behavior on `Mobile` and `Static` variants is still the same.\nIf you were relying on Clock Picker in desktop mode for tests—make sure to check [testing caveats](/x/react-date-pickers/base-concepts/#testing-caveats) to choose the best replacement for it.\n\nYou can manually re-enable the previous clock component using the new `viewRenderers` prop.\nThe code below enables the `TimeClock` UI on all the `DesktopTimePicker` and `DesktopDateTimePicker` in your application.\n\nTake a look at the [default props via theme documentation](/material-ui/customization/theme-components/#theme-default-props) for more information.\n\n```tsx\nconst theme = createTheme({\n  components: {\n    MuiDesktopTimePicker: {\n      defaultProps: {\n        viewRenderers: {\n          hours: renderTimeViewClock,\n          minutes: renderTimeViewClock,\n          seconds: renderTimeViewClock,\n        },\n      },\n    },\n    MuiDesktopDateTimePicker: {\n      defaultProps: {\n        viewRenderers: {\n          hours: renderTimeViewClock,\n          minutes: renderTimeViewClock,\n          seconds: renderTimeViewClock,\n        },\n      },\n    },\n  },\n});\n```\n\n:::success\nIf you are using TypeScript, please make sure to add the [theme augmentation](/x/react-date-pickers/base-concepts/#typescript) to your project.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the keyboard view",
              "introduction": [
                "Remove the keyboard view\n\nThe picker components no longer have a keyboard view to render the input inside the modal on mobile.\n\n- If your date is easier to edit with the keyboard (for example a birthdate), you can directly use the new field components:\n\n  ```diff\n   function App() {\n     return (\n  -    <DatePicker />\n  +    <DateField />\n     )\n   }\n  ```\n\n- If you want to keep the old keyboard view, you can pass a custom `Layout` component slot to re-introduce the keyboard view.",
                ":::info\nAt some point, the mobile pickers should have a prop allowing to have an editable field without opening the modal.\n:::"
              ],
              "code_path": [
                "MobileKeyboardView.js",
                null
              ],
              "children": []
            },
            {
              "name": "✅ Rename or refactor `shouldDisableTime` prop",
              "introduction": [
                "✅ Rename or refactor `shouldDisableTime` prop\n\nThe `shouldDisableTime` prop signature has been changed.\nPreviously it did receive `value` as a `number` of hours, minutes, or seconds. Now it will receive the date object (based on the used adapter).\nThis will allow more powerful usage and will be compatible with the future digital time selection view.\n\nEither rename the prop to the newly added, but deprecated `shouldDisableClock` or refactor usage to account for the change in prop type.\nThe codemod will take care of renaming the prop to keep the existing functionality but feel free to update to the new `shouldDisableTime` prop on your own.\n\n```diff\n // ℹ️ Rename and keep using the deprecated prop\n // This is the change that the codemod will apply\n <DateTimePicker\n-  shouldDisableTime={(timeValue, view) => view === 'hours' && timeValue < 12}\n+  shouldDisableClock={(timeValue, view) => view === 'hours' && timeValue < 12}\n />\n\n // ✅ Update your code to use the provided date value parameter instead of a number\n <DateTimePicker\n-  shouldDisableTime={(timeValue, view) => view === 'hours' && timeValue < 12}\n+  shouldDisableTime={(value, view) => view === 'hours' && value.hour() < 12}\n />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Change the DOM structure",
              "introduction": [
                "Change the DOM structure\n\n- The internal `CalendarOrClockPicker` component has been removed and all its element have been moved to the new `Layout` component slot.\n\n  The DOM node containing the toolbar and the view content (the `root` slot of the `CalendarOrClockPicker` component) no longer exists.\n  The closest equivalent is now the `contentWrapper` slot of the `PickersLayout` component, which do not contain the toolbar.\n  If you need a DOM node containing the toolbar and the view content, you will have to pass a [custom `Layout` component slot](/x/react-date-pickers/custom-layout/#dom-customization).\n\n  ```diff\n   const theme = createTheme({\n     components: {\n  -    MuiCalendarOrClockPicker: {\n  +    MuiPickersLayout: {\n         styleOverrides: {\n  -        root: {\n  +        contentWrapper: {\n             backgroundColor: 'red',\n           },\n         },\n       },\n     },\n   });\n  ```\n\n- The internal `PickerStaticWrapper` component has been removed and all its element have been moved to the new `Layout` component slot.\n\n  ```diff\n   const theme = createTheme({\n     components: {\n  -    MuiPickerStaticWrapper: {\n  +    MuiPickersLayout: {\n         styleOverrides: {\n           root: {\n             opacity: 0.5,\n           },\n         },\n       },\n     },\n   });\n  ```\n\n  The DOM node containing the toolbar and the view content (the `content` slot of the `PickerStaticWrapper` component) no longer exists.\n  The closest equivalent is now the `contentWrapper` slot of the `PickersLayout` component, which do not contain the toolbar.\n  If you need a DOM node containing the toolbar and the view content, you will have to pass a [custom `Layout` component slot](/x/react-date-pickers/custom-layout/#dom-customization).\n\n  ```diff\n   const theme = createTheme({\n     components: {\n  -    MuiPickerStaticWrapper: {\n  +    MuiPickersLayout: {\n         styleOverrides: {\n  -        content: {\n  +        contentWrapper: {\n             opacity: 0.5,\n           },\n         },\n       },\n     },\n   });\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Date library and adapters",
          "introduction": [
            "Date library and adapters"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "✅ Do not import adapter from `@date-io`",
              "introduction": [
                "✅ Do not import adapter from `@date-io`\n\nIn v5, it was possible to import adapters either from either `@date-io` or `@mui/x-date-pickers` which were the same.\nIn v6, the adapters are extended by `@mui/x-date-pickers` to support [fields components](/x/react-date-pickers/fields/).\nWhich means adapters cannot be imported from `@date-io` anymore. They need to be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`.\nOtherwise, some methods will be missing.\nIf you do not find the adapter you were using—there probably was a reason for it, but you can raise an issue expressing interest in it.\n\n```diff\n-import AdapterJalaali from '@date-io/jalaali';\n+import { AdapterMomentJalaali } from '@mui/x-date-pickers/AdapterMomentJalaali';\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Increase Luxon minimal version",
              "introduction": [
                "Increase Luxon minimal version\n\nThe v6 `AdapterLuxon` now requires `luxon` version `3.0.2` or higher in order to work.\n\nTake a look at the [Upgrading Luxon](https://moment.github.io/luxon/#/upgrading) guide if you are using an older version."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "View components",
          "introduction": [
            "View components"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "✅ Rename components",
              "introduction": [
                "✅ Rename components\n\nThe view components allowing to pick a time, a date or parts of a date without an input have been renamed to better fit their usage:\n\n```diff\n-<CalendarPicker {...props} />\n+<DateCalendar {...props} />\n\n-<DayPicker {...props} />\n+<DayCalendar {...props} />\n\n-<CalendarPickerSkeleton {...props} />\n+<DayCalendarSkeleton {...props} />\n\n-<MonthPicker {...props} />\n+<MonthCalendar {...props} />\n\n-<YearPicker {...props} />\n+<YearCalendar {...props} />\n\n-<ClockPicker {...props} />\n+<TimeClock {...props} />\n```\n\nComponent names in the theme have changed as well:\n\n```diff\n-MuiCalendarPicker: {\n+MuiDateCalendar: {\n\n-MuiDayPicker: {\n+MuiDayCalendar: {\n\n-MuiCalendarPickerSkeleton: {\n+MuiDayCalendarSkeleton: {\n\n-MuiMonthPicker: {\n+MuiMonthCalendar: {\n\n-MuiYearPicker: {\n+MuiYearCalendar: {\n\n-MuiClockPicker: {\n+MuiTimeClock: {\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Rename `date` prop to `value`",
              "introduction": [
                "✅ Rename `date` prop to `value`\n\nThe `date` prop has been renamed to `value` on `MonthCalendar`, `YearCalendar`, `TimeClock`, and `DateCalendar` (components renamed in previous section):\n\n```diff\n-<MonthPicker date={dayjs()} />\n+<MonthCalendar value={dayjs()} />\n\n-<YearPicker date={dayjs()} />\n+<YearCalendar value={dayjs()} />\n\n-<ClockPicker date={dayjs()} />\n+<TimeClock value={dayjs()} />\n\n-<CalendarPicker date={dayjs()} />\n+<DateCalendar value={dayjs()} />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Use the 12h/24h format from the locale as the default value of the `ampm` prop on `TimeClock`",
              "introduction": [
                "Use the 12h/24h format from the locale as the default value of the `ampm` prop on `TimeClock`\n\nThe default value of the `ampm` prop changed from `false` to `utils.is12HourCycleInCurrentLocale()`.\nIt means that the `TimeClock` component will use a 12h time format for locales where the time is usually displayed with a 12h format.\n\nIf you want to keep the previous behavior, you just have to set the `ampm` prop to `false` (components renamed in previous section):\n\n```diff\n- <ClockPicker />\n+ <TimeClock ampm={false} />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Stop using the responsive classes on `PickersMonth` and `PickersYear`",
              "introduction": [
                "Stop using the responsive classes on `PickersMonth` and `PickersYear`\n\nThe `modeMobile` and `modeDesktop` classes have been removed from the `PickersMonth` and `PickersYear` internal components.\n\nIf you were using those classes on responsive components,\nyou can import `DEFAULT_DESKTOP_MODE_MEDIA_QUERY` from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro` (or use your custom media query if any):\n\n```diff\n <GlobalStyles\n   styles={{\n-    [`.${pickersYearClasses.modeDesktop}`]: {\n-      backgroundColor: 'red'\n-    }\n+    [DEFAULT_DESKTOP_MODE_MEDIA_QUERY]: {\n+      [`.${pickersYearClasses.root}`]: {\n+        backgroundColor: 'red'\n+      }\n+    }\n\n-    [`.${pickersYearClasses.modeMobile}`]: {\n-      backgroundColor: 'red'\n-    }\n+    [DEFAULT_DESKTOP_MODE_MEDIA_QUERY.replace('@media', '@media not')]: {\n+      [`.${pickersYearClasses.root}`]: {\n+        backgroundColor: 'red'\n+      }\n+    }\n   }}\n />\n```\n\n:::info\nWorks exactly the same way for `PickersMonth`\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Localization",
          "introduction": [
            "Localization"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "✅ Rename localization props",
              "introduction": [
                "✅ Rename localization props\n\nThe props used to set the text displayed in the pickers have been replaced by keys inside the `localeText` prop:\n\n| Removed prop                 | Property in the new `localText` prop                                              |\n| :----- |\n| `endText`                    | `end`                                                                             |\n| `getClockLabelText`          | `clockLabelText`                                                                  |\n| `getHoursClockNumberText`    | `hoursClockNumberText`                                                            |\n| `getMinutesClockNumberText`  | `minutesClockNumberText`                                                          |\n| `getSecondsClockNumberText`  | `secondsClockNumberText`                                                          |\n| `getViewSwitchingButtonText` | `calendarViewSwitchingButtonAriaLabel`                                            |\n| `leftArrowButtonText`        | `openPreviousView` (or `previousMonth` when the button changes the visible month) |\n| `rightArrowButtonText`       | `openNextView` (or `nextMonth` when the button changes the visible month)         |\n| `startText`                  | `start`                                                                           |\n| `getOpenDialogAriaText`      | `openDatePickerDialogue` /(or `openTimePickerDialogue` for time pickers)          |\n\nFor instance if you want to replace the `startText` / `endText`\n\n```diff\n <DateRangePicker\n-  startText=\"From\"\n-  endText=\"To\"\n+  localeText={{\n+    start: 'From',\n+    end: 'To',\n+  }}\n />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Rename `locale` prop on `LocalizationProvider`",
              "introduction": [
                "✅ Rename `locale` prop on `LocalizationProvider`\n\nThe `locale` prop of the `LocalizationProvider` component have been renamed `adapterLocale`:\n\n```diff\n <LocalizationProvider\n   dateAdapter={AdapterDayjs}\n-  locale=\"fr\"\n+  adapterLocale=\"fr\"\n >\n   {children}\n </LocalizationProvider\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Component slots / component slot props",
          "introduction": [
            "Component slots / component slot props\n\nAll the props used to pass props to parts of the UI (for example to pass a prop to the input) have been replaced by component slot props.\nAll the props used to override parts of the UI (for example to pass a custom day renderer) have been replaced by component slots.\n\nYou can find more information about this pattern in the [Base UI documentation](https://mui.com/base-ui/getting-started/usage/#shared-props).\n\nThese changes apply to all the components that had the prop.\nFor example, the `ToolbarComponent` has been replaced by a `Toolbar` component slot on all pickers."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Input renderer (required in v5)",
              "introduction": [
                "Input renderer (required in v5)\n\n- The `renderInput` has been replaced by an `input` component slot props:\n\n  ```diff\n   <DatePicker\n  -  renderInput={(inputProps) => <TextField {...props} variant=\"outlined\" />}\n  +  slotProps={{ textField: { variant: 'outlined' } }}\n   />\n\n   <DateRangePicker\n  -  renderInput={(startProps, endProps) => (\n  -    <React.Fragment>\n  -      <TextField {...startProps} variant=\"outlined\" />\n  -      <Box sx={{ mx: 2 }}> - </Box>\n  -      <TextField {...endProps} variant=\"outlined\" />\n  -    </React.Fragment>\n  -  )}\n  +  slotProps={{ textField: { variant: 'outlined' } }}\n   />\n  ```\n\n- The Date Range Picker also have a new `fieldSeparator` component slot and component slot props to customize only this part of the UI:\n\n  ```diff\n   <DateRangePicker\n  -  renderInput={(startProps, endProps) => (\n  -    <React.Fragment>\n  -      <TextField {...startProps} />\n  -      <Box sx={{ mx: 2 }}> to </Box>\n  -      <TextField {...endProps} />\n  -    </React.Fragment>\n  -  )}\n  +  slotProps={{ fieldSeparator: { children: 'to' } }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Toolbar (`ToolbarComponent`)",
              "introduction": [
                "Toolbar (`ToolbarComponent`)\n\n- ✅ The `ToolbarComponent` has been replaced by a `toolbar` component slot:\n\n  ```diff\n   <DatePicker\n  -  ToolbarComponent={MyToolbar}\n  +  slots={{ toolbar: MyToolbar }}\n   />\n  ```\n\n- ✅ The `toolbarPlaceholder`, `toolbarFormat`, and `showToolbar` props have been moved to the `toolbar` component slot props:\n\n  ```diff\n   <DatePicker\n  -  toolbarPlaceholder=\"__\"\n  -  toolbarFormat=\"DD / MM / YYYY\"\n  -  showToolbar\n  +  slotProps={{\n  +    toolbar: {\n  +      toolbarPlaceholder: '__',\n  +      toolbarFormat: 'DD / MM / YYYY',\n  +      hidden: false,\n  +    }\n  +  }}\n   />\n  ```\n\n- ✅ The `toolbarTitle` prop has been moved to the localization object:\n\n  ```diff\n   <DatePicker\n  -  toolbarTitle=\"Title\"\n  +  localeText={{ toolbarTitle: 'Title' }}\n   />\n  ```\n\n- ✅ The toolbar related translation keys have been renamed to better fit their usage:\n\n  ```diff\n   <LocalizationProvider\n     localeText={{\n  -    datePickerDefaultToolbarTitle: 'Date Picker',\n  +    datePickerToolbarTitle: 'Date Picker',\n\n  -    timePickerDefaultToolbarTitle: 'Time Picker',\n  +    timePickerToolbarTitle: 'Time Picker',\n\n  -    dateTimePickerDefaultToolbarTitle: 'Date Time Picker',\n  +    dateTimePickerToolbarTitle: 'Date Time Picker',\n\n  -    dateRangePickerDefaultToolbarTitle: 'Date Range Picker',\n  +    dateRangePickerToolbarTitle: 'Date Range Picker',\n     }}\n   />\n  ```\n\n- The `onChange` / `openView` props on the toolbar have been renamed to `onViewChange` / `view`.\n\n  ```diff\n   const CustomToolbarComponent = props => (\n     <div>\n  -    <button onChange={() => props.onChange('day')}>Show day view</button>\n  +    <button onClick={() => props.onViewChange('day')}>Show day view</button>\n  -    <div>Current view: {props.openView}</div>\n  +    <div>Current view: {props.view}</div>\n     </div>\n   )\n\n   <DatePicker\n  -  ToolbarComponent={CustomToolbarComponent}\n  +  slots={{\n  +    toolbar: CustomToolbarComponent\n  +  }}\n   />\n  ```\n\n- The `currentlySelectingRangeEnd` / `setCurrentlySelectingRangeEnd` props on the Date Range Picker toolbar have been renamed to `rangePosition` / `onRangePositionChange`.\n\n  ```diff\n   const CustomToolbarComponent = props => (\n     <div>\n  -    <button onChange={() => props.setCurrentlySelectingRangeEnd('end')}>Edit end date</button>\n  +    <button onClick={() => props.onRangePositionChange('end')}>Edit end date</button>\n  -    <div>Is editing end date: {props.currentlySelectingRangeEnd === 'end'}</div>\n  +    <div>Is editing end date: {props.rangePosition === 'end'}</div>\n     </div>\n   )\n   <DateRangePicker\n  -  ToolbarComponent={CustomToolbarComponent}\n  +  slots={{\n  +    toolbar: CustomToolbarComponent\n  +  }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Tabs",
              "introduction": [
                "Tabs\n\n- ✅ The `hideTabs` and `timeIcon` props have been moved to `tabs` component slot props.\n  The `dateRangeIcon` prop has been renamed to `dateIcon` and moved to `tabs` component slot props:\n\n  ```diff\n   <DateTimePicker\n  -  hideTabs={false}\n  -  dateRangeIcon={<LightModeIcon />}\n  -  timeIcon={<AcUnitIcon />}\n  +  slotProps={{\n  +    tabs: {\n  +      hidden: false,\n  +      dateIcon: <LightModeIcon />,\n  +      timeIcon: <AcUnitIcon />,\n  +    }\n  +  }}\n   />\n  ```\n\n- The `onChange` prop on `DateTimePickerTabs` component has been renamed to `onViewChange` to better fit its usage:\n\n  ```diff\n   <DateTimePickerTabs\n  -  onChange={() => {}}\n  +  onViewChange={() => {}}\n   />\n  ```\n\n  ```diff\n   const CustomTabsComponent = props => (\n     <div>\n  -    <button onClick={() => props.onChange('day')}>Show day view</button>\n  +    <button onClick={() => props.onViewChange('day')}>Show day view</button>\n     </div>\n   )\n   <DateTimePicker\n     slots={{\n       tabs: CustomTabsComponent\n     }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Action bar",
              "introduction": [
                "Action bar\n\n- The `actions` prop of the `actionBar` component slot can no longer receive a callback.\n  Instead, you can pass a callback at the component slot props level\n\n  ```diff\n   <DatePicker\n  -  componentsProps={{\n  -     actionBar: {\n  -       actions: (variant) => (variant === 'desktop' ? [] : ['clear']),\n  -     },\n  -  }}\n  +  componentsProps={{\n  +     actionBar: ({ wrapperVariant }) => ({\n  +       actions: wrapperVariant === 'desktop' ? [] : ['clear'],\n  +     }),\n  +  }}\n     // or using the new `slots` prop\n  +  slotProps={{\n  +     actionBar: ({ wrapperVariant }) => ({\n  +       actions: wrapperVariant === 'desktop' ? [] : ['clear'],\n  +     }),\n  +  }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Day (`renderDay`)",
              "introduction": [
                "Day (`renderDay`)\n\n- The `renderDay` prop has been replaced by a `day` component slot:\n\n  ```diff\n   <DatePicker\n  -  renderDay={(_, dayProps) => <CustomDay {...dayProps} />}\n  +  slots={{ day: CustomDay }}\n   />\n  ```\n\n- The `Day` component slot no longer receives a `selectedDays` prop.\n  If you need to access it, you can control the value and pass it to the component slot props:\n\n  ```tsx\n  function CustomDay({ selectedDay, ...other }) {\n    // do something with 'selectedDay'\n    return <PickersDay {...other} />;\n  }\n\n  function App() {\n    const [value, setValue] = React.useState(null);\n\n    return (\n      <DatePicker\n        value={value}\n        onChange={(newValue) => setValue(newValue)}\n        slots={{ day: CustomDay }}\n        slotProps={{\n          day: { selectedDay: value },\n        }}\n      />\n    );\n  }\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Popper (`PopperProps`)",
              "introduction": [
                "✅ Popper (`PopperProps`)\n\n- The `PopperProps` prop has been replaced by a `popper` component slot props:\n\n  ```diff\n   <DatePicker\n  -  PopperProps={{ onClick: handleClick }}\n  +  slotProps={{ popper: { onClick: handleClick } }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Desktop transition (`TransitionComponent`)",
              "introduction": [
                "✅ Desktop transition (`TransitionComponent`)\n\n- The `TransitionComponent` prop has been replaced by a `desktopTransition` component slot:\n\n  ```diff\n   <DatePicker\n  -  TransitionComponent={Fade}\n  +  slots={{ desktopTransition: Fade }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Dialog (`DialogProps`)",
              "introduction": [
                "✅ Dialog (`DialogProps`)\n\n- The `DialogProps` prop has been replaced by a `dialog` component slot props:\n\n  ```diff\n   <DatePicker\n  -  DialogProps={{ backgroundColor: 'red' }}\n  +  slotProps={{ dialog: { backgroundColor: 'red' }}}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Desktop paper (`PaperProps`)",
              "introduction": [
                "✅ Desktop paper (`PaperProps`)\n\n- The `PaperProps` prop has been replaced by a `desktopPaper` component slot props:\n\n  ```diff\n   <DatePicker\n  -  PaperProps={{ backgroundColor: 'red' }}\n  +  slotProps={{ desktopPaper: { backgroundColor: 'red' } }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Desktop TrapFocus (`TrapFocusProp`)",
              "introduction": [
                "✅ Desktop TrapFocus (`TrapFocusProp`)\n\n- The `TrapFocusProps` prop has been replaced by a `desktopTrapFocus` component slot props:\n\n  ```diff\n   <DatePicker\n  -  TrapFocusProps={{ isEnabled: () => false }}\n  +  slotProps={{ desktopTrapFocus: { isEnabled: () => false } }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Paper Content",
              "introduction": [
                "Paper Content\n\n- The `PaperContent` / `paperContent` component slot and component slot props have been removed.\n\n  You can use the new [`Layout` component slot](/x/react-date-pickers/custom-layout/).\n  The main difference is that you now receive the various parts of the UI instead of a single `children` prop:\n\n  ```diff\n  +import { usePickerLayout } from '@mui/x-date-pickers/PickersLayout';\n\n   function MyCustomLayout(props) {\n  -  const { children } = props;\n  -\n  -  return (\n  -    <React.Fragment>\n  -      {children}\n  -      <div>Custom component</div>\n  -    </React.Fragment>\n  -  );\n  +  const { toolbar, tabs, content, actionBar} = usePickerLayout(props);\n  +\n  +  return (\n  +    <PickersLayoutRoot>\n  +      {toolbar}\n  +      {content}\n  +      {actionBar}\n  +      <div>Custom component</div>\n  +    </PickersLayoutRoot>\n  +  );\n   }\n\n   function App() {\n     return (\n       <DatePicker\n  -       components={{\n  -         PaperContent: MyCustomLayout,\n  -       }}\n  +       components={{\n  +         Layout: MyCustomLayout,\n  +       }}\n          // or using the new `slots` prop\n  +       slots={{\n  +         layout: MyCustomLayout,\n  +       }}\n       />\n     );\n   }\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Left arrow button",
              "introduction": [
                "✅ Left arrow button\n\n- The component slot `LeftArrowButton` has been renamed to `PreviousIconButton`:\n\n  ```diff\n   <DatePicker\n  -  components={{\n  -    LeftArrowButton: CustomButton,\n  -  }}\n  +  components={{\n  +    PreviousIconButton: CustomButton,\n  +  }}\n     // or using the new `slots` prop\n  +  slots={{\n  +    previousIconButton: CustomButton,\n  +  }}\n\n  -  componentsProps={{\n  -    leftArrowButton: {},\n  -  }}\n  +  componentsProps={{\n  +    previousIconButton: {},\n  +  }}\n     // or using the new `slotProps` prop\n  +  slotProps={{\n  +    previousIconButton: {},\n  +  }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Right arrow button",
              "introduction": [
                "✅ Right arrow button\n\n- The component slot `RightArrowButton` has been renamed to `NextIconButton`:\n\n  ```diff\n   <DatePicker\n  -  components={{\n  -    RightArrowButton: CustomButton,\n  -  }}\n  +  components={{\n  +    NextIconButton: CustomButton,\n  +  }}\n     // or using the new `slots` prop\n  +  slots={{\n  +    nextIconButton: CustomButton,\n  +  }}\n\n  -  componentsProps={{\n  -    rightArrowButton: {},\n  -  }}\n  +  componentsProps={{\n  +    nextIconButton: {},\n  +  }}\n     // or using the new `slotProps` prop\n  +  slotProps={{\n  +    nextIconButton: {},\n  +  }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Input",
              "introduction": [
                "✅ Input\n\n- The `InputProps` prop has been removed.\n  You can use the `InputProps` of the `textField` component slot props instead:\n\n  ```diff\n   <DatePicker\n  -  InputProps={{ color: 'primary' }}\n  +  slotProps={{ textField: { InputProps: { color: 'primary' } } }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Input adornment",
              "introduction": [
                "✅ Input adornment\n\n- The `InputAdornmentProps` prop has been replaced by an `inputAdornment` component slot props:\n\n  ```diff\n   <DatePicker\n  -  InputAdornmentProps={{ position: 'start' }}\n  +  slotProps={{ inputAdornment: { position: 'start' } }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Open Picker Button",
              "introduction": [
                "✅ Open Picker Button\n\n- The `OpenPickerButtonProps` prop has been replaced by an `openPickerButton` component slot props:\n\n  ```diff\n   <DatePicker\n  -  OpenPickerButtonProps={{ ref: buttonRef }}\n  +  slotProps={{ openPickerButton: { ref: buttonRef } }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Rename remaining `private` components",
          "introduction": [
            "Rename remaining `private` components\n\nThe four components prefixed with `Private` are now stable.\nThese components were renamed:\n\n- `PrivatePickersMonth` -> `MuiPickersMonth`\n- `PrivatePickersSlideTransition` -> `MuiPickersSlideTransition`\n- `PrivatePickersToolbarText` -> `MuiPickersToolbarText`\n- `PrivatePickersYear` -> `MuiPickersYear`\n\nManual style overriding will need to use updated classes:\n\n```diff\n-.PrivatePickersMonth-root {\n+.MuiPickersMonth-root {\n\n-.PrivatePickersSlideTransition-root {\n+.MuiPickersSlideTransition-root {\n\n-.PrivatePickersToolbarText-root {\n+.MuiPickersToolbarText-root {\n\n-.PrivatePickersYear-root {\n+.MuiPickersYear-root {\n```\n\nComponent name changes are also reflected in `themeAugmentation`:\n\n```diff\n const theme = createTheme({\n   components: {\n-    PrivatePickersMonth: {\n+    MuiPickersMonth: {\n       // overrides\n     },\n-    PrivatePickersSlideTransition: {\n+    MuiPickersSlideTransition: {\n       // overrides\n     },\n-    PrivatePickersToolbarText: {\n+    MuiPickersToolbarText: {\n       // overrides\n     },\n-    PrivatePickersYear: {\n+    MuiPickersYear: {\n       // overrides\n     },\n   },\n });\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Behavior of field `onChange` props",
          "introduction": [
            "Behavior of field `onChange` props\n\nSince the masked input has been replaced by [fields](/x/react-date-pickers/fields/#fields-to-edit-a-single-element) the input value is valid most of the time.\n\nIn v5, the user had to delete a character and type in another character to update the date resulting in `onChange` being called twice.\nFirstly with deleted character, and then with the complete date again.\n\nIn v6, user can override the field section, so `onChange` is called at nearly every key pressed.\n\nIf you were relying on `onChange` to send server requests, you might be interested in debouncing it to avoid sending too many requests.\nTo do so please refer to the corresponding [docs example](/x/react-date-pickers/lifecycle/#server-interaction)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Rename `components` to `slots` (optional)",
          "introduction": [
            "Rename `components` to `slots` (optional)\n\nThe `components` and `componentsProps` props are being renamed to `slots` and `slotProps` props respectively.\nThis is a slow and ongoing effort between all the different libraries maintained by MUI.\nTo smooth the transition, pickers support both the `components` props which are deprecated, and the new `slots` props.\n\nIf you would like to use the new API and do not want to see deprecated prop usage, consider running `rename-components-to-slots` codemod handling the prop renaming.\n\n```bash\nnpx @mui/x-codemod@latest v6.0.0/pickers/rename-components-to-slots <path>\n```\n\nTake a look at [the RFC](https://github.com/mui/material-ui/issues/33416) for more information.\n\n:::warning\nIf this codemod is applied on a component with both a `slots` and a `components` prop, the output will contain two `slots` props.\nYou are then responsible for merging those two props manually.\n\nFor example:\n\n```tsx\n// Before running the codemod\n<DatePicker\n  slots={{ textField: MyTextField }}\n  components={{ toolbar: MyToolbar }}\n/>\n\n// After running the codemod\n<DatePicker\n  slots={{ textField: MyTextField }}\n  slots={{ toolbar: MyToolbar }}\n/>\n```\n\nThe same applies to `slotProps` and `componentsProps`.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "migration->migration-data-grid-v6",
      "introduction": [
        "# Migration from v6 to v7\n\n<p class=\"description\">This guide describes the changes needed to migrate the Data Grid from v6 to v7.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference guide for upgrading `@mui/x-data-grid` from v6 to v7.\nTo read more about the changes from the new major, check out [the blog post about the release of MUI X v7](https://mui.com/blog/mui-x-v7-beta/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Start using the new release",
          "introduction": [
            "Start using the new release\n\nIn `package.json`, change the version of the Data Grid package to `^7.0.0`.\n\n```diff\n-\"@mui/x-data-grid\": \"^6.0.0\",\n+\"@mui/x-data-grid\": \"^7.0.0\",\n\n-\"@mui/x-data-grid-pro\": \"^6.0.0\",\n+\"@mui/x-data-grid-pro\": \"^7.0.0\",\n\n-\"@mui/x-data-grid-premium\": \"^6.0.0\",\n+\"@mui/x-data-grid-premium\": \"^7.0.0\",\n```\n\nSince v7 is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features.\nDescribed below are the steps needed to migrate from v6 to v7."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Update `@mui/material` package",
          "introduction": [
            "Update `@mui/material` package\n\nTo have the option of using the latest API from `@mui/material`, the package peer dependency version has been updated to `^5.15.14`.\nIt is a change in minor version only, so it should not cause any breaking changes.\nPlease update your `@mui/material` package to this or a newer version."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Update the license package",
          "introduction": [
            "Update the license package\n\nIf you're using the commercial version of the Data Grid ([Pro](/x/introduction/licensing/#pro-plan) and [Premium](/x/introduction/licensing/#premium-plan) plans), you need to update the import path:\n\n```diff\n-import { LicenseInfo } from '@mui/x-license-pro';\n+import { LicenseInfo } from '@mui/x-license';\n```\n\nIf you have `@mui/x-license-pro` in the `dependencies` section of your `package.json`, rename and update the license package to the latest version:\n\n```diff\n-\"@mui/x-license-pro\": \"^6.0.0\",\n+\"@mui/x-license\": \"^7.0.0\",\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Run codemods",
          "introduction": [
            "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v7.\nYou can run `v7.0.0/data-grid/preset-safe` targeting only Data Grid or `v7.0.0/preset-safe` to target other MUI X components like the Date and Time pickers as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n<!-- #default-branch-switch -->\n\n```bash\n# Data Grid specific\nnpx @mui/x-codemod@latest v7.0.0/data-grid/preset-safe <path>\n\n# Target other MUI X components as well\nnpx @mui/x-codemod@latest v7.0.0/preset-safe <path>\n```\n\n:::info\nIf you want to run the codemods one by one, check out the codemods included in the [preset-safe codemod for the Data Grid](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/README.md#preset-safe-for-data-grid-v700) for more details.\n:::\n\nBreaking changes that are handled by `preset-safe` codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen or next to the specific point that is handled by it.\n\nIf you have already applied the `v7.0.0/data-grid/preset-safe` (or `v7.0.0/preset-safe`) codemod, then you should not need to take any further action on these items. If there's a specific part of the breaking change that is not part of the codemod or needs some manual work, it will be listed in the end of each section.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading, cross-file dependencies, etc., the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<DataGrid {...newProps} />\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Breaking changes",
          "introduction": [
            "Breaking changes\n\nSince v7 is a major release, it contains some changes that affect the public API.\nThese changes were done for consistency, improve stability and make room for new features.\nBelow are described the steps you need to make to migrate from v6 to v7."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Drop the legacy bundle",
              "introduction": [
                "Drop the legacy bundle\n\nThe support for IE 11 has been removed from all MUI X packages.\nThe `legacy` bundle that used to support old browsers like IE 11 is no longer included.\n\n:::info\nIf you need support for IE 11, you will need to keep using the latest version of the `v6` release.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Drop webpack 4 support",
              "introduction": [
                "Drop webpack 4 support\n\nDropping old browsers support also means that we no longer transpile some features that are natively supported by modern browsers – like [Nullish Coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) and [Optional Chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining).\n\nThese features are not supported by webpack 4, so if you are using webpack 4, you will need to transpile these features yourself or upgrade to webpack 5.\n\nHere is an example of how you can transpile these features on webpack 4 using the `@babel/preset-env` preset:\n\n```diff\n // webpack.config.js\n\n module.exports = (env) => ({\n   // ...\n   module: {\n     rules: [\n       {\n         test: /\\.[jt]sx?$/,\n-        exclude: /node_modules/,\n+        exclude: [\n+          {\n+            test: path.resolve(__dirname, 'node_modules'),\n+            exclude: [\n+              // Covers @mui/x-data-grid, @mui/x-data-grid-pro, and @mui/x-data-grid-premium\n+              path.resolve(__dirname, 'node_modules/@mui/x-data-grid'),\n+              path.resolve(__dirname, 'node_modules/@mui/x-license'),\n+            ],\n+          },\n+        ],\n       },\n     ],\n   },\n });\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "DOM changes",
              "introduction": [
                "DOM changes\n\nThe Data Grid's layout has been substantially altered to use CSS sticky positioned elements.\nAs a result, the following changes have been made:\n\n- The main element now corresponds to the virtual scroller element.\n- Headers are now contained in the virtual scroller.\n- Pinned row and column sections are now contained in the virtual scroller.\n- The cell inner wrapper `.MuiDataGrid-cellContent` has been removed."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Renamed props",
          "introduction": [
            "Renamed props\n\n- The props `rowBuffer` and `columnBuffer` were renamed to `rowBufferPx` and `columnBufferPx`.\n  Their value is now a pixel value rather than a number of items. Their default value is now `150`."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Removed props",
              "introduction": [
                "Removed props\n\n- ✅ The deprecated props `components` and `componentsProps` have been removed. Use `slots` and `slotProps` instead. See [components section](/x/react-data-grid/components/) for more details.\n- The `slots.preferencesPanel` slot and the `slotProps.preferencesPanel` prop were removed. Use `slots.panel` and `slotProps.panel` instead.\n- The `getOptionValue` and `getOptionLabel` props were removed from the following components:\n\n  - `GridEditSingleSelectCell`\n  - `GridFilterInputSingleSelect`\n  - `GridFilterInputMultipleSingleSelect`\n\n  Use the `getOptionValue` and `getOptionLabel` properties on the `singleSelect` column definition instead:\n\n  ```tsx\n  const column: GridColDef = {\n    type: 'singleSelect',\n    field: 'country',\n    valueOptions: [\n      { code: 'BR', name: 'Brazil' },\n      { code: 'FR', name: 'France' },\n    ],\n    getOptionValue: (value: any) => value.code,\n    getOptionLabel: (value: any) => value.name,\n  };\n  ```\n\n- The props `rowThreshold` and `columnThreshold` have been removed.\n  If you had the `rowThreshold` prop set to `0` to force new rows to be rendered more often – this is no longer necessary.\n- ✅ Some feature flags were removed from the `experimentalFeatures` prop. These features are now stable and enabled by default:\n  - [`columnGrouping`](/x/react-data-grid/column-groups/)\n  - [`clipboardPaste`](/x/react-data-grid/clipboard/#clipboard-paste)\n  - [`lazyLoading`](/x/react-data-grid/row-updates/#lazy-loading)"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Behavioral changes",
              "introduction": [
                "Behavioral changes\n\nThe disabled column specific features like `hiding`, `sorting`, `filtering`, `pinning`, `row grouping`, etc., can now be controlled programmatically using `initialState`, respective controlled models, or the [API object](/x/react-data-grid/api-object/).\n\nHere's the list of affected features, column definition flags and props to disable them, and the related props and API methods to control them programmatically."
              ],
              "code_path": [
                "ColDefChangesGridNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "State access",
              "introduction": [
                "State access\n\nSome selectors now require passing `instanceId` as a second argument:\n\n```diff\n-gridColumnFieldsSelector(apiRef.current.state);\n+gridColumnFieldsSelector(apiRef.current.state, apiRef.current.instanceId);\n```\n\nHowever, it's preferable to pass the `apiRef` as the first argument instead:\n\n```js\ngridColumnFieldsSelector(apiRef);\n```\n\nSee the [Direct state access](/x/react-data-grid/state/#direct-selector-access) page for more info.\n\n<!-- ### Events\n\n- -->"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Columns",
              "introduction": [
                "Columns\n\n- The `GridColDef['type']` has been narrowed down to only accept the built-in column types.\n  TypeScript users need to use the `GridColDef` interface when defining columns:\n\n  ```tsx\n  // 🛑 `type` is inferred as `string` and is too wide\n  const columns = [{ type: 'number', field: 'id' }];\n  <DataGrid columns={columns} />;\n\n  // ✅ `type` is `'number'`\n  const columns: GridColDef[] = [{ type: 'number', field: 'id' }];\n  <DataGrid columns={columns} />;\n\n  // ✅ Alternalively, `as const` can be used to narrow down the type\n  const columns = [{ type: 'number' as const, field: 'id' }];\n  <DataGrid columns={columns} />;\n  ```\n\n- The type `GridPinnedColumns` has been renamed to `GridPinnedColumnFields`.\n\n- The type `GridPinnedPosition` has been renamed to `GridPinnedColumnPosition`.\n\n- The column grouping API methods `getColumnGroupPath` and `getAllGroupDetails` are no longer prefixed with `unstable_`.\n\n- The column grouping selectors `gridFocusColumnGroupHeaderSelector` and `gridTabIndexColumnGroupHeaderSelector` are no longer prefixed with `unstable_`.\n\n- The columns management component has been redesigned and the component is extracted from the `ColumnsPanel` which now only serves as a wrapper to display the component over the headers as a panel. As a result, a new slot `columnsManagement`, and corresponding prop `slotProps.columnsManagement` have been introduced. The props corresponding to the columns management component which were previously passed to the prop `slotProps.columnsPanel` should now be passed to `slotProps.columnsManagement`. `slotProps.columnsPanel` could still be used to override props corresponding to the `Panel` component used in `ColumnsPanel` which uses [`Popper`](/material-ui/react-popper/) component under the hood.\n\n```diff\n <DataGrid\n  slotProps={{\n-   columnsPanel: {\n+   columnsManagement: {\n      sort: 'asc',\n      autoFocusSearchField: false,\n    },\n  }}\n />\n```\n\n- `Show all` and `Hide all` buttons in the `ColumnsPanel` have been combined into one `Show/Hide All` checkbox in the new columns management component. The related props `disableShowAllButton` and `disableHideAllButton` have been replaced with a new prop `disableShowHideToggle`.\n\n- The signature of `GridColDef['valueGetter']` has been changed for performance reasons:\n\n  ```diff\n  -valueGetter: ({ value, row }) => value,\n  +valueGetter: (value, row, column, apiRef) => value,\n  ```\n\n  The `GridValueGetterParams` interface has been removed:\n\n  ```diff\n  -const customValueGetter = (params: GridValueGetterParams) => params.row.budget;\n  +const customValueGetter: GridValueGetterFn = (value, row) => row.budget;\n  ```\n\n- The signature of `GridColDef['valueFormatter']` has been changed for performance reasons:\n\n  ```diff\n  -valueFormatter: ({ value }) => value,\n  +valueFormatter: (value, row, column, apiRef) => value,\n  ```\n\n  The `GridValueFormatterParams` interface has been removed:\n\n  ```diff\n  -const gridDateFormatter = ({ value, field, id }: GridValueFormatterParams<Date>) => value.toLocaleDateString();\n  +const gridDateFormatter: GridValueFormatter = (value: Date) => value.toLocaleDateString();\n  ```\n\n- The signature of `GridColDef['valueSetter']` has been changed for performance reasons:\n\n  ```diff\n  -valueSetter: (params) => {\n  -  const [firstName, lastName] = params.value!.toString().split(' ');\n  -  return { ...params.row, firstName, lastName };\n  -}\n  +valueSetter: (value, row) => {\n  +  const [firstName, lastName] = value!.toString().split(' ');\n  +  return { ...row, firstName, lastName };\n  +}\n  ```\n\n  The `GridValueSetterParams` interface has been removed:\n\n  ```diff\n  -const setFullName = (params: GridValueSetterParams) => {\n  -  const [firstName, lastName] = params.value!.toString().split(' ');\n  -  return { ...params.row, firstName, lastName };\n  -};\n  +const setFullName: GridValueSetter<Row> = (value, row) => {\n  +  const [firstName, lastName] = value!.toString().split(' ');\n  +  return { ...row, firstName, lastName };\n  +}\n  ```\n\n- The signature of `GridColDef['valueParser']` has been changed for performance reasons:\n\n  ```diff\n  -valueParser: (value, params: GridCellParams) => value.toLowerCase(),\n  +valueParser: (value, row, column, apiRef) => value.toLowerCase(),\n  ```\n\n- The signature of `GridColDef['colSpan']` has been changed for performance reasons:\n\n  ```diff\n  -colSpan: ({ row, field, value }: GridCellParams) => (row.id === 'total' ? 2 : 1),\n  +colSpan: (value, row, column, apiRef) => (row.id === 'total' ? 2 : 1),\n  ```\n\n- The signature of `GridColDef['pastedValueParser']` has been changed for performance reasons:\n\n  ```diff\n  -pastedValueParser: (value, params) => new Date(value),\n  +pastedValueParser: (value, row, column, apiRef) => new Date(value),\n  ```\n\n- The signature of `GridColDef['groupingValueGetter']` has been changed for performance reasons:\n\n  ```diff\n  -groupingValueGetter: (params) => params.value.name,\n  +groupingValueGetter: (value: { name: string }, row, column, apiRef) => value.name,\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Density",
              "introduction": [
                "Density\n\n- The `density` is a [controlled prop](/x/react-data-grid/accessibility/#set-the-density-programmatically) now, if you were previously passing the `density` prop to the Data Grid, you will need to do one of the following:\n\n1. Move it to the `initialState.density` to initialize it.\n\n```diff\n <DataGrid\n-  density=\"compact\"\n+  initialState={{ density: \"compact\" }}\n />\n```\n\n2. Move it to the state and use `onDensityChange` callback to update the `density` prop accordingly for it to work as expected.\n\n```diff\n const [density, setDensity] = React.useState<GridDensity>('compact');\n <DataGrid\n-  density=\"compact\"\n+  density={density}\n+  onDensityChange={(newDensity) => setDensity(newDensity)}\n />\n```\n\n- The selector `gridDensityValueSelector` was removed, use the `gridDensitySelector` instead.\n\n<!-- ### Rows\n\n- -->\n\n<!-- ### `apiRef` methods\n\n- -->"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Clipboard",
              "introduction": [
                "Clipboard\n\n- ✅ The clipboard related exports `ignoreValueFormatterDuringExport` and `splitClipboardPastedText` are not anymore prefixed with `unstable_`."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Print export",
              "introduction": [
                "Print export\n\n- The print export will now only print the selected rows if there are any.\n  If there are no selected rows, it will print all rows. This makes the print export consistent with the other exports.\n  You can [customize the rows to export by using the `getRowsToExport` function](/x/react-data-grid/export/#customizing-the-rows-to-export)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Selection",
              "introduction": [
                "Selection\n\n- ✅ The `unstable_` prefix has been removed from the cell selection props listed below.\n\n  | Old name                              | New name                     |\n  | : | : | : |\n  | `unstable_getCellSelectionModel`   | `getCellSelectionModel`   |\n  | `unstable_getSelectedCellsAsArray` | `getSelectedCellsAsArray` |\n  | `unstable_isCellSelected`          | `isCellSelected`          |\n  | `unstable_selectCellRange`         | `selectCellRange`         |\n  | `unstable_setCellSelectionModel`   | `setCellSelectionModel`   |"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Filtering",
              "introduction": [
                "Filtering\n\n- The `getApplyFilterFnV7` in `GridFilterOperator` has been renamed to `getApplyFilterFn`.\n  If you use `getApplyFilterFnV7` directly - rename it to `getApplyFilterFn`.\n\n- The signature of the function returned by `getApplyFilterFn` has changed for performance reasons:\n\n```diff\n const getApplyFilterFn: GetApplyFilterFn<any, unknown> = (filterItem) => {\n   if (!filterItem.value) {\n     return null;\n   }\n\n   const filterRegex = new RegExp(escapeRegExp(filterItem.value), 'i');\n-  return (cellParams) => {\n-    const { value } = cellParams;\n+  return (value, row, colDef, apiRef) => {\n     return value != null ? filterRegex.test(String(value)) : false;\n   };\n }\n```\n\n- The `getApplyQuickFilterFnV7` in `GridColDef` was renamed to `getApplyQuickFilterFn`.\n  If you use `getApplyQuickFilterFnV7` directly - rename it to `getApplyQuickFilterFn`.\n\n- The signature of the function returned by `getApplyQuickFilterFn` has changed for performance reasons:\n\n```diff\n const getGridStringQuickFilterFn: GetApplyQuickFilterFn<any, unknown> = (value) => {\n   if (!value) {\n     return null;\n   }\n   const filterRegex = new RegExp(escapeRegExp(value), 'i');\n-  return (cellParams) => {\n-    const { formattedValue } = cellParams;\n+  return (value, row, column, apiRef) => {\n+    let formattedValue = apiRef.current.getRowFormattedValue(row, column);\n     return formattedValue != null ? filterRegex.test(formattedValue.toString()) : false;\n   };\n };\n```\n\n- The Quick Filter now ignores hidden columns by default.\n  See [Including hidden columns](/x/react-data-grid/filtering/quick-filter/#including-hidden-columns) section for more details.\n\n- The header filters feature is now stable. `unstable_` prefix is removed from prop `headerFilters` and the following exports.\n\n  | Old name                                          | New name                                 |\n  | : | :--- |\n  | `unstable_gridFocusColumnHeaderFilterSelector`    | `gridFocusColumnHeaderFilterSelector`    |\n  | `unstable_gridHeaderFilteringEditFieldSelector`   | `gridHeaderFilteringEditFieldSelector`   |\n  | `unstable_gridHeaderFilteringMenuSelector`        | `gridHeaderFilteringMenuSelector`        |\n  | `unstable_gridHeaderFilteringStateSelector`       | `gridHeaderFilteringStateSelector`       |\n  | `unstable_gridTabIndexColumnHeaderFilterSelector` | `gridTabIndexColumnHeaderFilterSelector` |\n\n- The filter panel no longer uses the native version of the [`Select`](https://mui.com/material-ui/react-select/) component for all components.\n- The `filterModel` now supports `Date` objects as values for `date` and `dateTime` column types.\n  The `filterModel` still accepts strings as values for `date` and `dateTime` column types,\n  but all updates to the `filterModel` coming from the UI (for example filter panel) will set the value as a `Date` object."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Accessibility",
              "introduction": [
                "Accessibility\n\n- ✅ The `ariaV7` experimental flag has been removed and the Data Grid now uses the improved accessibility implementation by default.\n  If you were using the `ariaV7` flag, you can remove it from the `experimentalFeatures` prop:\n\n  ```diff\n  -<DataGrid experimentalFeatures={{ ariaV7: true }} />\n  +<DataGrid />\n  ```\n\n  The most notable changes that might affect your application or tests are:\n\n  - The `role=\"grid\"` attribute along with related ARIA attributes are now applied to the inner `div` element instead of the root `div` element:\n\n    ```diff\n    -<div class=\"MuiDataGrid-root\" role=\"grid\" aria-colcount=\"5\" aria-rowcount=\"101\" aria-multiselectable=\"false\">\n    +<div class=\"MuiDataGrid-root\">\n       <div class=\"MuiDataGrid-toolbarContainer\"></div>\n    -    <div class=\"MuiDataGrid-main\"></div>\n    +    <div class=\"MuiDataGrid-main\" role=\"grid\" aria-colcount=\"5\" aria-rowcount=\"101\" aria-multiselectable=\"false\"></div>\n       <div class=\"MuiDataGrid-footerContainer\"></div>\n     </div>\n    ```\n\n  - When [Tree data](/x/react-data-grid/tree-data/) feature is used, the grid role is now `role=\"treegrid\"` instead of `role=\"grid\"`.\n  - The Data Grid cells now have `role=\"gridcell\"` instead of `role=\"cell\"`."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Editing",
              "introduction": [
                "Editing\n\n- The `rowEditCommit` event and the related prop `onRowEditCommit` was removed. The [`processRowUpdate`](/x/react-data-grid/editing/persistence/#the-processrowupdate-callback) prop can be used in its place."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Other exports",
              "introduction": [
                "Other exports\n\n- The import path for locales has been changed:\n\n  ```diff\n  -import { enUS } from '@mui/x-data-grid';\n  +import { enUS } from '@mui/x-data-grid/locales';\n\n  -import { enUS } from '@mui/x-data-grid-pro';\n  +import { enUS } from '@mui/x-data-grid-pro/locales';\n\n  -import { enUS } from '@mui/x-data-grid-premium';\n  +import { enUS } from '@mui/x-data-grid-premium/locales';\n  ```\n\n- The deprecated constants `SUBMIT_FILTER_STROKE_TIME` and `SUBMIT_FILTER_DATE_STROKE_TIME` are no longer exported.\n  Use the [`filterDebounceMs`](/x/api/data-grid/data-grid/#data-grid-prop-filterDebounceMs) prop to customize filter debounce time.\n\n- The `GridPreferencesPanel` component is not exported anymore as it wasn't meant to be used outside of the Data Grid.\n\n- The buttons in toolbar composable components `GridToolbarColumnsButton`, `GridToolbarFilterButton`, `GridToolbarDensity`, and `GridToolbarExport` are now wrapped with a tooltip component and have a consistent interface. In order to override some props corresponding to the toolbar buttons or their corresponding tooltips, you can use the `slotProps` prop. Following is an example diff. See [Toolbar section](/x/react-data-grid/components/#toolbar) for more details.\n\n```diff\n function CustomToolbar() {\n  return (\n    <GridToolbarContainer>\n      <GridToolbarColumnsButton />\n      <GridToolbarFilterButton\n-       title=\"Custom filter\" // 🛑 This was previously forwarded to the tooltip component\n+       slotProps={{ tooltip: { title: 'Custom filter' } }} // ✅ This is the correct way now\n      />\n      <GridToolbarDensitySelector\n-       variant=\"outlined\"    // 🛑 This was previously forwarded to the button component\n+       slotProps={{ button: { variant: 'outlined' } }} // ✅ This is the correct way now\n      />\n    </GridToolbarContainer>\n  );\n }\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "CSS classes and styling",
              "introduction": [
                "CSS classes and styling\n\n- You can now style a row's hover state using just `:hover` instead of `.Mui-hovered`.\n- The `.MuiDataGrid--pinnedColumns-(left\\|right)` class for pinned columns has been removed.\n- The `.MuiDataGrid-cell--withRenderer` class has been removed.\n- The cell element isn't `display: flex` by default. You can add `display: 'flex'` on the column definition to restore the behavior.\n\n  **NOTE**: If you're using **dynamic row height**, this also means cells aren't vertically centered by default anymore, you might want to set the `display: 'flex'` for all non-dynamic columns. This may also affect text-ellipsis, which you can restore by adding your own wrapper with `text-overflow: ellipsis`.\n\n  ```tsx\n  {\n    display: 'flex',\n    renderCell: ({ value }) => (\n      <div style={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n        {value}\n      </div>\n    ),\n  },\n  ```\n\n- The `columnHeader--showColumnBorder` class was replaced by `columnHeader--withLeftBorder` and `columnHeader--withRightBorder`.\n- The `columnHeadersInner`, `columnHeadersInner--scrollable`, and `columnHeaderDropZone` classes were removed since the inner wrapper was removed in our effort to simplify the DOM structure and improve accessibility.\n- The `pinnedColumnHeaders`, `pinnedColumnHeaders--left`, and `pinnedColumnHeaders--right` classes have been removed along with the element they were applied to.\n  The pinned column headers now use `position: 'sticky'` and are rendered in the same row element as the regular column headers.\n- The column headers and pinned section now require an explicit color. By default, the MUI `theme.palette.background.default` color will be used. To customize it, see https://mui.com/material-ui/customization/palette/#customization\n  We will be adding a new color name to the palette for additional customization, read [#12443](https://github.com/mui/mui-x/issues/12443) for more details."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Changes to the public API",
              "introduction": [
                "Changes to the public API\n\n- The method `getRootDimensions()` now returns a non-null value.\n- The field `mainElementRef` is now always non-null.\n- The field `rootElementRef` is now always non-null.\n- The field `virtualScrollerRef` is now always non-null.\n- The event `renderedRowsIntervalChange` params changed from `GridRenderedRowsIntervalChangeParams` to `GridRenderContext`, and the former has been removed."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Changes to slots",
              "introduction": [
                "Changes to slots\n\n- The slot `columnHeaders` has had these props removed: `columnPositions`, `densityFactor`, `minColumnIndex`.\n- The slot `row` has had these props removed: `containerWidth`, `position`.\n- The slot `row` has typed props now.\n- The slot `headerFilterCell` has had these props removed: `filterOperators`.\n- All slots are now strongly typed, previously were `React.JSXElementConstructor<any>`.\n\n<!-- ### Rename `components` to `slots` -->"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "migration->migration-data-grid-v7",
      "introduction": [
        "# Migration from v7 to v8\n\n<p class=\"description\">This guide describes the changes needed to migrate the Data Grid from v7 to v8.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference guide for upgrading `@mui/x-data-grid` from v7 to v8."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Start using the new release",
          "introduction": [
            "Start using the new release\n\nIn `package.json`, change the version of the Data Grid package to `next`.\n\n```diff\n-\"@mui/x-data-grid\": \"^7.0.0\",\n+\"@mui/x-data-grid\": \"next\",\n\n-\"@mui/x-data-grid-pro\": \"^7.0.0\",\n+\"@mui/x-data-grid-pro\": \"next\",\n\n-\"@mui/x-data-grid-premium\": \"^7.0.0\",\n+\"@mui/x-data-grid-premium\": \"next\",\n```\n\nUsing `next` ensures that it will always use the latest v8 pre-release version, but you can also use a fixed version, like `8.0.0-alpha.0`."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Breaking changes",
          "introduction": [
            "Breaking changes\n\nSince v8 is a major release, it contains some changes that affect the public API.\nThese changes were done for consistency, improve stability and make room for new features.\nBelow are described the steps you need to make to migrate from v7 to v8."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Props",
              "introduction": [
                "Props\n\n- Passing additional props (like `data-*`, `aria-*`) directly on the Data Grid component is no longer supported. To pass the props, use `slotProps`:\n  - For the `.root` element, use `slotProps.root`\n  - For the `.main` element (the one with `role=\"grid\"`), use `slotProps.main`"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Selection",
              "introduction": [
                "Selection\n\n- The default value of the `rowSelectionPropagation` prop has been changed to `{ parents: true, descendants: true }` which means that the selection will be propagated to the parents and descendants by default.\n  To revert to the previous behavior, pass `rowSelectionPropagation={{ parents: false, descendants: false }}`.\n- The prop `indeterminateCheckboxAction` has been removed. Clicking on an indeterminate checkbox \"selects\" the unselected descendants.\n- The \"Select all\" checkbox would now be checked when all the selectable rows are selected, ignoring rows that are not selectable because of the `isRowSelectable` prop."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Changes to the public API",
              "introduction": [
                "Changes to the public API\n\n- The `rowPositionsDebounceMs` prop was removed.\n- The `apiRef.current.resize()` method was removed.\n- The `<GridOverlays />` component is not exported anymore.\n- The `sanitizeFilterItemValue()` utility is not exported anymore.\n- `gridRowsDataRowIdToIdLookupSelector` was removed. Use `gridRowsLookupSelector` in combination with `getRowId()` API method instead.\n\n  ```diff\n  -const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n  -const rowId = idToIdLookup[id];\n  +const rowsLookup = gridRowsLookupSelector(apiRef);\n  +const rowId = apiRef.current.getRowId(rowsLookup[id]);\n  ```\n\n- The feature row spanning is now stable.\n\n  ```diff\n   <DataGrid\n  -  unstable_rowSpanning\n  +  rowSpanning\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Localization",
              "introduction": [
                "Localization\n\n- If `estimatedRowCount` is used, the text provided to the [Table Pagination](/material-ui/api/table-pagination/) component from the Material UI library is updated and requires additional translations. Check the example at the end of [Index-based pagination section](/x/react-data-grid/pagination/#index-based-pagination)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Accessibility",
              "introduction": [
                "Accessibility\n\n- The Grid is more aligned with the WAI-ARIA authoring practices and sets the `role` attribute to `treegrid` if the Data Grid is used with row grouping feature."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "State",
              "introduction": [
                "State\n\n- The selectors signature has been updated due to the support of arguments in the selectors. Pass `undefined` as `arguments` if the selector doesn't use any arguments.\n\n  ```diff\n  -mySelector(state, instanceId)\n  +mySelector(state, arguments, instanceId)\n  ```\n\n- The `useGridSelector` signature has been updated due to the introduction of arguments parameter in the selectors. Pass `undefined` as `arguments` if the selector doesn't use any arguments.\n\n  ```diff\n  -const output = useGridSelector(apiRef, selector, equals);\n  +const output = useGridSelector(apiRef, selector, arguments, equals);\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Other exports",
              "introduction": [
                "Other exports\n\n- `ariaV8` experimental flag is removed. It's now the default behavior."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Filtering",
              "introduction": [
                "Filtering\n\n- The clear button in header filter cells has moved to the header filter menu. Use `slotProps={{ headerFilterCell: { showClearIcon: true } }}` to restore the clear button in the cell.\n\n<!-- ### Editing\n\nTBD"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "CSS classes and styling",
              "introduction": [
                "CSS classes and styling\n\nTBD"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Changes to slots",
              "introduction": [
                "Changes to slots\n\nTBD -->"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "migration->migration-pickers-v7",
      "introduction": [
        "# Migration from v7 to v8\n\n<p class=\"description\">This guide describes the changes needed to migrate the Date and Time Pickers from v7 to v8.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference guide for upgrading `@mui/x-date-pickers` from v7 to v8."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Start using the new release",
          "introduction": [
            "Start using the new release\n\nIn `package.json`, change the version of the date pickers package to `next`.\n\n```diff\n-\"@mui/x-date-pickers\": \"7.x.x\",\n+\"@mui/x-date-pickers\": \"next\",\n\n-\"@mui/x-date-pickers-pro\": \"7.x.x\",\n+\"@mui/x-date-pickers-pro\": \"next\",\n```\n\nUsing `next` ensures that it will always use the latest v8 pre-release version, but you can also use a fixed version, like `8.0.0-alpha.0`.\n\nSince `v8` is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features.\nDescribed below are the steps needed to migrate from v7 to v8."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Run codemods",
          "introduction": [
            "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v8. You can run `v8.0.0/pickers/preset-safe` targeting only Date and Time Pickers or `v8.0.0/preset-safe` to target the other packages as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n<!-- #default-branch-switch -->\n\n```bash\n# Date and Time Pickers specific\nnpx @mui/x-codemod@latest v8.0.0/pickers/preset-safe <path>\n\n# Target the other packages as well\nnpx @mui/x-codemod@latest v8.0.0/preset-safe <path>\n```\n\n:::info\nIf you want to run the transformers one by one, check out the transformers included in the [preset-safe codemod for pickers](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/README.md#preset-safe-for-pickers-v800) for more details.\n:::\n\nBreaking changes that are handled by this codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen.\n\nIf you have already applied the `v8.0.0/pickers/preset-safe` (or `v8.0.0/preset-safe`) codemod, then you should not need to take any further action on these items.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading, cross-file dependencies, etc., the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<DatePicker {...pickerProps} />\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Components breaking changes",
          "introduction": [
            "Components breaking changes"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "New DOM structure for the field",
              "introduction": [
                "New DOM structure for the field\n\nBefore version `v7.x`, the fields' DOM structure consisted of an `<input />`, which held the whole value for the component.\nUnfortunately it presented accessibility limitations, which are impossible to resolve.\n\nStarting with version `v7.x`, we have introduced a new DOM structure that allows the field component to set aria attributes on individual sections, providing a far better experience on screen readers.\nThis approach is recommended in [W3C ARIA](https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/examples/datepicker-spinbuttons/) example and is also used by native date HTML input element under the hood.\n\nStarting with version `v8.x`, the new DOM structure is the default for all fields."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Fallback to the non-accessible DOM structure",
                  "introduction": [
                    "Fallback to the non-accessible DOM structure\n\n```tsx\n<DateField enableAccessibleFieldDOMStructure={false} />\n<DatePicker enableAccessibleFieldDOMStructure={false} />\n<DateRangePicker enableAccessibleFieldDOMStructure={false} />\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Migrate `slotProps.field`",
                  "introduction": [
                    "Migrate `slotProps.field`\n\nWhen using `slotProps.field` to pass props to your field component,\nthe field consumes some props (for example `shouldRespectLeadingZeros`) and forwards the rest to the `TextField`.\n\n- For the props consumed by the field, the behavior should remain exactly the same with both DOM structures.\n\n  Both components below will respect the leading zeroes on digit sections:\n\n  ```js\n  <DatePicker\n    slotProps={{ field: { shouldRespectLeadingZeros: true } }}\n    enableAccessibleFieldDOMStructure={false}\n   />\n  <DatePicker\n    slotProps={{ field: { shouldRespectLeadingZeros: true } }}\n  />\n  ```\n\n- For the props forwarded to the `TextField`,\n  you can have a look at the next section to see how the migration impact them.\n\n  Both components below will render a small size UI:\n\n  ```js\n  <DatePicker\n    slotProps={{ field: { size: 'small' } }}\n    enableAccessibleFieldDOMStructure={false}\n   />\n  <DatePicker\n    slotProps={{ field: { size: 'small' } }}\n  />\n  ```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Migrate `slotProps.textField`",
                  "introduction": [
                    "Migrate `slotProps.textField`\n\nIf you are passing props to `slotProps.textField`,\nthese props will now be received by `PickersTextField` and should keep working the same way as before.\n\nBoth components below will render a small size UI:\n\n```js\n<DatePicker\n  slotProps={{ textField: { size: 'small' } }}\n  enableAccessibleFieldDOMStructure={false}\n/>\n<DatePicker\n  slotProps={{ textField: { size: 'small' } }}\n/>\n```\n\n:::info\nIf you are passing `inputProps` to `slotProps.textField`,\nthese props will now be passed to the hidden `<input />` element.\n:::"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Migrate `slots.field`",
                  "introduction": [
                    "Migrate `slots.field`\n\nIf you are passing a custom field component to your pickers, you need to create a new one that is using the accessible DOM structure.\nThis new component will need to use the `PickersSectionList` component instead of an `<input />` HTML element.\n\nYou can have a look at the [Using a custom input](/x/react-date-pickers/custom-field/#using-a-custom-input) section to have a concrete example."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Migrate `slots.textField`",
                  "introduction": [
                    "Migrate `slots.textField`\n\nIf you are passing a custom `TextField` component to your fields and pickers,\nyou need to create a new one that is using the accessible DOM structure.\n\nYou can have a look at the [Wrapping PickersTextField](/x/react-date-pickers/custom-field/#wrapping-pickerstextfield) section to have a concrete example.\n\n:::info\nIf your custom `TextField` was used to apply a totally different input that did not use `@mui/material/TextField`,\nplease consider having a look at the [Using a custom input](/x/react-date-pickers/custom-field/#using-a-custom-input) section which uses `slots.field`.\nThis approach can be more appropriate for deeper changes.\n:::"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Migrate the theme",
                  "introduction": [
                    "Migrate the theme\n\nIf you are using the theme to customize `MuiTextField`,\nyou need to pass the same config to `MuiPickersTextField`:\n\n```js\nconst theme = createTheme({\n  components: {\n    MuiTextField: {\n      defaultProps: {\n        variant: 'outlined',\n      },\n      styleOverrides: {\n        root: {\n          '& .MuiInputLabel-outlined.Mui-focused': {\n            color: 'red',\n          },\n        },\n      },\n    },\n    MuiPickersTextField: {\n      defaultProps: {\n        variant: 'outlined',\n      },\n      styleOverrides: {\n        root: {\n          '& .MuiInputLabel-outlined.Mui-focused': {\n            color: 'red',\n          },\n        },\n      },\n    },\n  },\n});\n```\n\nIf you are using the theme to customize `MuiInput`, `MuiOutlinedInput` or `MuiFilledInput`,\nyou need to pass the same config to `MuiPickersInput`, `MuiPickersOutlinedInput` or `MuiPickersFilledInput`:\n\n```js\nconst theme = createTheme({\n  components: {\n    // Replace with `MuiOutlinedInput` or `MuiFilledInput` if needed\n    MuiInput: {\n      defaultProps: {\n        margin: 'dense',\n      },\n      styleOverrides: {\n        root: {\n          color: 'red',\n        },\n      },\n    },\n    // Replace with `MuiPickersOutlinedInput` or `MuiPickersFilledInput` if needed\n    MuiPickersInput: {\n      defaultProps: {\n        margin: 'dense',\n      },\n      styleOverrides: {\n        root: {\n          color: 'red',\n        },\n      },\n    },\n  },\n});\n```\n\nIf you are using the theme to customize `MuiInputBase`,\nyou need to pass the same config to `MuiPickersInputBase`:\n\n```js\nconst theme = createTheme({\n  components: {\n    MuiInputBase: {\n      defaultProps: {\n        margin: 'dense',\n      },\n      styleOverrides: {\n        root: {\n          color: 'red',\n        },\n      },\n    },\n    MuiPickersInputBase: {\n      defaultProps: {\n        margin: 'dense',\n      },\n      styleOverrides: {\n        root: {\n          color: 'red',\n        },\n      },\n    },\n  },\n});\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Field editing on mobile Pickers",
              "introduction": [
                "Field editing on mobile Pickers\n\nThe field is now editable if rendered inside a mobile Picker.\nBefore v8, if rendered inside a mobile Picker, the field was read-only, and clicking anywhere on it would open the Picker.\nThe mobile and desktop Pickers now behave similarly:\n\n- clicking on the field allows editing the value with the keyboard\n- clicking on the input adornment opens the Picker\n\n:::success\nIf you prefer the old behavior, you can create a custom field that renders a read-only Text Field on mobile.\nSee [Custom field—Using a read-only Text Field on mobile](/x/react-date-pickers/custom-field/#using-a-read-only-text-field-on-mobile) to learn more.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Month Calendar",
              "introduction": [
                "Month Calendar\n\nTo simplify the theme and class structure, the `<PickersMonth />` component has been moved inside the Month Calendar component.\nThis change causes a few breaking changes:\n\n- The classes from `pickersMonthClasses` have been moved inside `monthCalendarClasses`:\n\n  ```diff\n  -import { pickersMonthClasses } from '@mui/x-date-pickers/MonthCalendar';\n  +import { monthCalendarClasses } from '@mui/x-date-pickers/MonthCalendar';\n\n  -const buttonClassName = pickersMonthClasses.monthButton;\n  +const buttonClassName = monthCalendarClasses.button;\n\n  -const selectedButtonClassName = pickersMonthClasses.selected;\n  +const selectedButtonClassName = monthCalendarClasses.selected;\n\n  -const disabledButtonClassName = pickersMonthClasses.disabled;\n  +const disabledButtonClassName = monthCalendarClasses.disabled;\n  ```\n\n- The `monthButton` slot of the `PickersMonth` style overrides has been replaced by the `button` slot of the `MonthCalendar` theme entry:\n\n  ```diff\n   const theme = createTheme({\n     components: {\n  -    PickersMonth: {\n  +    MonthCalendar: {\n         styleOverrides: {\n  -        monthButton: {\n  +        button: {\n             color: 'red',\n           },\n         },\n       },\n     },\n   });\n  ```\n\n- The button to render a single month is no longer wrapped in a `<div />`, the spacing are instead defined inside the `root` slot of the Month Calendar."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Year Calendar",
              "introduction": [
                "Year Calendar\n\nTo simplify the theme and class structure, the `<PickersYear />` component has been moved inside the Year Calendar component.\nThis change causes a few breaking changes:\n\n- The classes from `pickersYearClasses` have been moved inside `yearCalendarClasses`:\n\n  ```diff\n  -import { pickersYearClasses } from '@mui/x-date-pickers/YearCalendar';\n  +import { yearCalendarClasses } from '@mui/x-date-pickers/YearCalendar';\n\n  -const buttonClassName = pickersYearClasses.monthButton;\n  +const buttonClassName = yearCalendarClasses.button;\n\n  -const selectedButtonClassName = pickersYearClasses.selected;\n  +const selectedButtonClassName = yearCalendarClasses.selected;\n\n  -const disabledButtonClassName = pickersYearClasses.disabled;\n  +const disabledButtonClassName = yearCalendarClasses.disabled;\n  ```\n\n- The `yearButton` slot of the `PickersYear` style overrides has been replaced by the `button` slot of the `YearCalendar` theme entry:\n\n  ```diff\n   const theme = createTheme({\n     components: {\n  -    PickersYear: {\n  +    YearCalendar: {\n         styleOverrides: {\n  -        yearButton: {\n  +        button: {\n             color: 'red',\n           },\n         },\n       },\n     },\n   });\n  ```\n\n- The button to render a single year is no longer wrapped in a `<div />`, the spacing are instead defined inside the `root` slot of the Year Calendar."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Update default `closeOnSelect` and Action Bar `actions` values",
              "introduction": [
                "Update default `closeOnSelect` and Action Bar `actions` values\n\nThe default value of the `closeOnSelect` prop has been updated to `false` for all Picker components, except `<DesktopDatePicker />` and `<DesktopDateRangePicker />`, which still have `closeOnSelect` set to `true`.\n\nThis change goes hand in hand with the new default `actions` prop value for the `<PickersActionBar />` component.\nThe default value of the `actions` prop has been updated to `['cancel', 'accept']` for all Picker components, except `<DesktopDatePicker />` and `<DesktopDateRangePicker />`.\n\nIf the updated values do not fit your use case, you can [override them](/x/react-date-pickers/custom-components/#component-props)."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Slots breaking changes",
          "introduction": [
            "Slots breaking changes"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Slot: `field`",
              "introduction": [
                "Slot: `field`\n\n- The component passed to the `field` slot no longer receives `InputProps` and `inputProps` props.\n  You now need to manually add the UI to open the picker using the `usePickerContext` hook:\n\n  ```diff\n   import { unstable_useDateField } from '@mui/x-date-pickers/DateField';\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n   function CustomField(props) {\n  +  const pickerContext = usePickerContext();\n\n     return (\n      <TextField\n        {...customProps}\n  -      InputProps={props.InputProps}\n  +      InputProps={{\n  +        ref: pickerContext.triggerRef,\n  +        endAdornment: (\n  +          <InputAdornment position=\"end\">\n  +            <IconButton\n  +              onClick={() => pickerContext.setOpen((prev) => !prev)}\n  +              edge=\"end\"\n  +              aria-label={fieldResponse.openPickerAriaLabel}\n  +            >\n  +              <CalendarIcon />\n  +            </IconButton>\n  +          </InputAdornment>\n  +        ),\n  +      }}\n      />\n     );\n   }\n  ```\n\n  If you are extracting the `ref` from `InputProps` to pass it to another trigger component, you can replace it with `pickerContext.triggerRef`:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n   function CustomField(props) {\n  +  const pickerContext = usePickerContext();\n\n     return (\n      <button\n        {...customProps}\n  -      ref={props.InputProps?.ref}\n  +      ref={pickerContext.triggerRef}\n      >\n        Open picker\n      </button>\n     );\n   }\n  ```\n\n  If you are using a custom editing behavior, instead of using the `openPickerAriaLabel` property returned by the `useXXXField` hooks, you can generate it manually:\n\n  ```diff\n  +import { usePickerTranslations } from '@mui/x-date-pickers/hooks';\n\n   function CustomField(props) {\n  +  const translations = usePickerTranslations();\n  +  const formattedValue = props.value?.isValid() ? value.format('ll') : null;\n  +  const ariaLabel = translations.openDatePickerDialogue(formattedValue);\n\n     return (\n      <button\n        {...customProps}\n  -      ref={props.InputProps?.ref}\n  +      ref={pickerContext.triggerRef}\n  +      aria-label={ariaLabel}\n      >\n        Open picker\n      </button>\n     );\n   }\n  ```\n\n- The component passed to the `field` slot no longer receives the `value`, `onChange`, `timezone`, `format` and `disabled` props.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n  -const { value } = props;\n  -const { value } = props;\n  +const { value } = usePickerContext();\n\n  -const { onChange } = props;\n  -onChange(dayjs(), { validationError: null });\n  +const { setValue } = usePickerContext();\n  -setValue(dayjs(), { validationError: null });\n\n  -const { timezone } = props;\n  +const { timezone } = usePickerContext();\n\n  -const { format } = props;\n  +const { fieldFormat } = usePickerContext();\n\n  -const { disabled } = props;\n  +const { disabled } = usePickerContext();\n  ```\n\n  :::success\n  If you are using a hook like `useDateField`, you don't have to do anything, the values from the context are automatically applied.\n  :::\n\n- The component passed to the `field` slot no longer receives the `formatDensity`, `enableAccessibleFieldDOMStructure`, `selectedSections` and `onSelectedSectionsChange` props.\n  These props, formerly mirroring the picker's props, are no longer exposed.\n  You can manually pass them using `slotProps.field` to keep the same behavior:\n\n  ```diff\n   <DatePicker\n     enableAccessibleFieldDOMStructure={false}\n     formatDensity='spacious'\n     selectedSections={selectedSections}\n     onSelectedSectionsChange={onSelectedSectionsChange}\n  +  slotProps={{\n       field: {\n         enableAccessibleFieldDOMStructure: false,\n         formatDensity: 'spacious',\n         selectedSections,\n         onSelectedSectionsChange,\n       },\n     }}\n   />\n  ```\n\n  If you were not passing those props to the picker, then you can use their default values:\n\n  - `formatDensity`: `\"dense\"`\n  - `enableAccessibleFieldDOMStructure`: `true`\n  - `selectedSections`: `undefined`\n  - `onSelectedSectionsChange`: `undefined`\n\n  :::success\n  If you are using a hook like `useDateField`, you don't have to do anything, the value from the context are automatically applied.\n  :::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Slot: `inputAdornment`",
              "introduction": [
                "Slot: `inputAdornment`\n\n- The `position` props passed to the `inputAdornment` slot props no longer sets the position of the opening button.\n  This allows defining the position of the opening and clear buttons independently.\n  You can use the `openPickerButtonPosition` prop instead:\n\n  ```diff\n   <DatePicker\n     slotProps={{\n  -    inputAdornment: { position: 'start' },\n  +    field: { openPickerButtonPosition: 'start' },\n     }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Slot: `layout`",
              "introduction": [
                "Slot: `layout`\n\n- The `<PickersLayoutRoot />` and `<PickersLayoutContentWrapper />` components must now receive the `ownerState` returned by `usePickerLayout` instead of their props:\n\n  ```diff\n  -const { toolbar, tabs, content, actionBar } = usePickerLayout(props);\n  +const { toolbar, tabs, content, actionBar, ownerState } = usePickerLayout(props);\n\n   return (\n  -  <PickersLayoutRoot ownerState={props}>\n  -    <PickersLayoutContentWrapper>\n  +  <PickersLayoutRoot ownerState={ownerState}>\n  +    <PickersLayoutContentWrapper ownerState={ownerState}>\n       </PickersLayoutContentWrapper>\n     </PickersLayoutRoot>\n   );\n  ```\n\n- The component passed to the `layout` slot no longer receives the `value` prop.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n   // This contains a small behavior change.\n   // If the picker receives an invalid date,\n   // the old value equals `null`.\n   // the new value equals the invalid date received.\n  -const { value } = props;\n  +const { value } = usePickerContext();\n  ```\n\n- The component passed to the `layout` slot no longer receives the `disabled` and `readOnly` props.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n  -const { disabled } = props;\n  +const { disabled } = usePickerContext();\n\n  -const { readOnly } = props;\n  +const { readOnly } = usePickerContext();\n  ```\n\n- The component passed to the `layout` slot no longer receives the `isRtl` prop.\n  You can use the `useRtl` hook from `@mui/system` instead:\n\n  ```diff\n  +import { useRtl } from '@mui/system/RtlProvider';\n\n  -  const { isRtl } = props;\n  +  const isRtl = useRtl();\n  ```\n\n- The component passed to the `layout` slot no longer receives the `orientation` and `isLandscape` props.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n  -const { orientation } = props;\n  +const { orientation } = usePickerContext();\n\n  -const { isLandscape } = props;\n  +const { orientation } = usePickerContext();\n  +const isLandscape = orientation === 'landscape';\n  ```\n\n- The component passed to the `layout` slot no longer receives the `wrapperVariant` prop.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n  -const { wrapperVariant } = props;\n  +const { variant } = usePickerContext();\n  ```\n\n- The component passed to the `layout` slot no longer receives the `view`, `views` and `onViewChange` props.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n  -const { view } = props;\n  +const { view } = usePickerContext();\n\n  -const { views } = props;\n  +const { views } = usePickerContext();\n\n  -const { onViewChange } = props;\n  -onViewChange('month');\n  +const { setView } = usePickerContext();\n  +setView('month');\n  ```\n\n- The component passed to the `layout` slot no longer receives the `onClear`, `onSetToday`, `onAccept`, `onCancel`, `onOpen`, `onClose` `onDismiss`, `onChange` and `onSelectShortcut` props.\n  You can use the `usePickerActionsContext` or the `usePickerContext` hooks instead:\n\n  ```diff\n  +import { usePickerActionsContext } from '@mui/x-date-pickers/hooks';\n\n  -const { onClear } = props;\n  +const { clearValue } = usePickerActionsContext();\n\n  -const { onSetToday } = props;\n  +const { setValueToToday } = usePickerActionsContext();\n\n  -const { onAccept } = props;\n  +const { acceptValueChanges } = usePickerActionsContext();\n\n  -const { onCancel } = props;\n  +const { cancelValueChanges } = usePickerActionsContext();\n\n  -const { onOpen } = props;\n  +const { setOpen } = usePickerActionsContext();\n  +const onOpen = event => {\n  +  event.preventDefault();\n  +  setOpen(true);\n  +}\n\n  -const { onClose } = props;\n  +const { setOpen } = usePickerActionsContext();\n  +const onClose = event => {\n  +  event.preventDefault();\n  +  setOpen(false);\n  +}\n\n   // This contains a small behavior change.\n   // If the picker is not controlled and has a default value,\n   // opening it and calling `acceptValueChanges` without any change will call `onAccept`\n   // with the default value.\n   // Whereas before, opening it and calling `onDimiss` without any change would\n   // not have called `onAccept`.\n  -const { onDismiss } = props;\n  +const { acceptValueChanges } = usePickerActionsContext();\n  +const onDismiss = acceptValueChanges\n\n  -const { onChange } = props;\n  -onChange(dayjs(), 'partial');\n  -onChange(dayjs(), 'finish');\n  +const { setValue } = usePickerActionsContext();\n  +setValue(dayjs(), { changeImportance: 'set' });\n  +setValue(dayjs(), { changeImportance: 'accept' });\n\n  -const { onSelectShortcut } = props;\n  -onSelectShortcut(dayjs(), 'accept', myShortcut);\n  +const { setValue } = usePickerActionsContext();\n  +setValue(dayjs(), { changeImportance: 'accept', shortcut: myShortcut });\n  ```\n\n  :::success\n  The `usePickerContext` also contain all the actions returned by `usePickerActionsContext`.\n  The only difference is that `usePickerActionsContext` only contains variables with stable references that won't cause a re-render of your component.\n  :::\n\n- The component passed to the `layout` slot no longer receives the `rangePosition` and `onRangePositionChange` on range pickers.\n  You can use the `usePickerRangePositionContext` hook instead:\n\n  ```diff\n  +import { usePickerRangePositionContext } from '@mui/x-date-pickers-pro/hooks';\n\n  -const { rangePosition } = props;\n  +const { rangePosition } = usePickerRangePositionContext();\n\n  -const { onRangePositionChange } = props;\n  -onRangePositionChange('start');\n  +const { setRangePosition } = usePickerRangePositionContext();\n  +setRangePosition('start');\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Slot: `toolbar`",
              "introduction": [
                "Slot: `toolbar`\n\n- The component passed to the `toolbar` slot no longer receives the `value` prop.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n   // This contains a small behavior change.\n   // If the picker receives an invalid date,\n   // the old value would equal `null`.\n   // the new value would equal the invalid date received.\n  -const { value } = props;\n  +const { value } = usePickerContext();\n  ```\n\n- The component passed to the `toolbar` slot no longer receives the `disabled` and `readOnly` props.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n  -const { disabled } = props;\n  +const { disabled } = usePickerContext();\n\n  -const { readOnly } = props;\n  +const { readOnly } = usePickerContext();\n  ```\n\n- The component passed to the `toolbar` slot no longer receives the `isLandscape` prop.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n  -const { isLandscape } = props;\n  +const { orientation } = usePickerContext();\n  +const isLandscape = orientation === 'landscape';\n  ```\n\n- The component passed to the `toolbar` slot no longer receives the `view`, `views` and `onViewChange` props.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n  -const { view } = props;\n  +const { view } = usePickerContext();\n\n  -const { views } = props;\n  +const { views } = usePickerContext();\n\n  -const { onViewChange } = props;\n  +const { onViewChange } = usePickerContext();\n  ```\n\n- The component passed to the `toolbar` slot no longer receives the `onChange` prop.\n  You can use the `usePickerActionsContext` or the `usePickerContext` hooks instead:\n\n  ```diff\n  +import { usePickerActionsContext } from '@mui/x-date-pickers/hooks';\n\n  -const { onChange } = props;\n  -onChange(dayjs(), 'partial');\n  -onChange(dayjs(), 'finish');\n  +const { setValue } = usePickerActionsContext();\n  +setValue(dayjs(), { changeImportance: 'set' });\n  +setValue(dayjs(), { changeImportance: 'accept' });\n  ```\n\n  :::success\n  The `usePickerContext` also contain all the actions returned by `usePickerActionsContext`.\n  The only difference is that `usePickerActionsContext` only contains variables with stable references that won't cause a re-render of your component.\n  :::\n\n- The component passed to the `toolbar` slot no longer receives the `rangePosition` and `onRangePositionChange` on range pickers, instead you can use the `usePickerRangePositionContext` hook:\n\n  ```diff\n  +import { usePickerRangePositionContext } from '@mui/x-date-pickers-pro/hooks';\n\n  -const { rangePosition } = props;\n  +const { rangePosition } = usePickerRangePositionContext();\n\n  -const { onRangePositionChange } = props;\n  -onRangePositionChange('start');\n  +const { setRangePosition } = usePickerRangePositionContext();\n  +setRangePosition('start');\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Slot: `tabs`",
              "introduction": [
                "Slot: `tabs`\n\n- The component passed to the `tabs` slot no longer receives the `view`, `views` and `onViewChange` props.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n  -const { view } = props;\n  +const { view } = usePickerContext();\n\n  -const { views } = props;\n  +const { views } = usePickerContext();\n\n  -const { onViewChange } = props;\n  +const { onViewChange } = usePickerContext();\n  ```\n\n- The component passed to the `tabs` slot no longer receives the `rangePosition` and `onRangePositionChange` on range pickers, instead you can use the `usePickerRangePositionContext` hook:\n\n  ```diff\n  +import { usePickerRangePositionContext } from '@mui/x-date-pickers-pro/hooks';\n\n  -const { rangePosition } = props;\n  +const { rangePosition } = usePickerRangePositionContext();\n\n  -const { onRangePositionChange } = props;\n  -onRangePositionChange('start');\n  +const { setRangePosition } = usePickerRangePositionContext();\n  +setRangePosition('start');\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Slot: `actionBar`",
              "introduction": [
                "Slot: `actionBar`\n\n- The component passed to the `actionBar` slot no longer receives the `onClear`, `onSetToday`, `onAccept` and `onCancel` props.\n  You can use the `usePickerActionsContext` or the `usePickerContext` hooks instead:\n\n  ```diff\n  +import { usePickerActionsContext } from '@mui/x-date-pickers/hooks';\n\n  -const { onClear } = props;\n  +const { clearValue } = usePickerActionsContext();\n\n  -const { onSetToday } = props;\n  +const { setValueToToday } = usePickerActionsContext();\n\n  -const { onAccept } = props;\n  +const { acceptValueChanges } = usePickerActionsContext();\n\n  -const { onCancel } = props;\n  +const { cancelValueChanges } = usePickerActionsContext();\n  ```\n\n  :::success\n  The `usePickerContext` also contain all the actions returned by `usePickerActionsContext`.\n  The only difference is that `usePickerActionsContext` only contains variables with stable references that won't cause a re-render of your component.\n  :::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Slot: `shortcuts`",
              "introduction": [
                "Slot: `shortcuts`\n\n- The component passed to the `shortcuts` slot no longer receives the `isLandscape` prop.\n  You can use the `usePickerContext` hook instead:\n\n  ```diff\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n\n  -const { isLandscape } = props;\n  +const { orientation } = usePickerContext();\n  +const isLandscape = orientation === 'landscape';\n  ```\n\n- The component passed to the `shortcuts` slot no longer receives the `onChange` prop.\n  You can use the `usePickerActionsContext` or the `usePickerContext` hooks instead:\n\n  ```diff\n  -const { onChange } = props;\n  -onChange(dayjs(), 'accept', myShortcut);\n  +const { setValue } = usePickerActionsContext();\n  +setValue(dayjs(), { changeImportance: 'accept', shortcut: myShortcut });\n  ```\n\n  :::success\n  The `usePickerContext` also contain all the actions returned by `usePickerActionsContext`.\n  The only difference is that `usePickerActionsContext` only contains variables with stable references that won't cause a re-render of your component.\n  :::\n\n- The component passed to the `shortcuts` slot no longer receives the `isValid` prop.\n  You can use the `useIsValidValue` hook instead:\n\n  ```diff\n  +import { useIsValidValue } from '@mui/x-date-pickers/hooks';\n\n  -const { isValid } = props;\n  -const isTodayValid = isValid(dayjs());\n  +const isValidValue = useIsValidValue();\n  +const isTodayValid = isValidValue(dayjs());\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Renamed variables and types",
          "introduction": [
            "Renamed variables and types\n\nThe following variables and types have been renamed to have a coherent `Picker` / `Pickers` prefix:\n\n- `usePickersTranslations`\n\n  ```diff\n  -import { usePickersTranslations } from '@mui/x-date-pickers/hooks';\n  -import { usePickersTranslations } from '@mui/x-date-pickers';\n  -import { usePickersTranslations } from '@mui/x-date-pickers-pro';\n\n  +import { usePickerTranslations } from '@mui/x-date-pickers/hooks';\n  +import { usePickerTranslations } from '@mui/x-date-pickers';\n  +import { usePickerTranslations } from '@mui/x-date-pickers-pro';\n\n  -const translations = usePickersTranslations();\n  +const translations = usePickerTranslations();\n  ```\n\n- `usePickersContext`\n\n  ```diff\n  -import { usePickersContext } from '@mui/x-date-pickers/hooks';\n  -import { usePickersContext } from '@mui/x-date-pickers';\n  -import { usePickersContext } from '@mui/x-date-pickers-pro';\n\n  +import { usePickerContext } from '@mui/x-date-pickers/hooks';\n  +import { usePickerContext } from '@mui/x-date-pickers';\n  +import { usePickerContext } from '@mui/x-date-pickers-pro';\n\n  -const pickersContext = usePickersContext();\n  +const pickerContext = usePickerContext();\n  ```\n\n- ✅ `FieldValueType`\n\n  ```diff\n  -import { FieldValueType } from '@mui/x-date-pickers/models';\n  -import { FieldValueType } from '@mui/x-date-pickers';\n  -import { FieldValueType } from '@mui/x-date-pickers-pro';\n\n  +import { PickerValueType } from '@mui/x-date-pickers/models';\n  +import { PickerValueType } from '@mui/x-date-pickers';\n  +import { PickerValueType } from '@mui/x-date-pickers-pro';\n  ```\n\n- `RangeFieldSection`\n\n  ```diff\n  -import { RangeFieldSection } from '@mui/x-date-pickers-pro/models';\n  -import { RangeFieldSection } from '@mui/x-date-pickers-pro';\n\n  +import { FieldRangeSection } from '@mui/x-date-pickers-pro/models';\n  +import { FieldRangeSection } from '@mui/x-date-pickers-pro';\n  ```\n\n- `PickerShortcutChangeImportance`\n\n  ```diff\n  -import { PickerShortcutChangeImportance } from '@mui/x-date-pickers/PickersShortcuts';\n  -import { PickerShortcutChangeImportance } from '@mui/x-date-pickers';\n\n  +import { PickerChangeImportance } from '@mui/x-date-pickers/models';\n  +import { PickerChangeImportance } from '@mui/x-date-pickers';\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Hooks breaking changes",
          "introduction": [
            "Hooks breaking changes"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "`useMultiInputDateRangeField`",
              "introduction": [
                "`useMultiInputDateRangeField`\n\nThis hook has been removed in favor of the new `useMultiInputRangeField` hook with an improved DX:\n\n```diff\n import useSlotProps from '@mui/utils/useSlotProps';\n-import { unstable_useMultiInputDateRangeField as useMultiInputDateRangeField } from '@mui/x-date-pickers-pro/MultiInputDateRangeField';\n+import { useDateRangeManager } from '@mui/x-date-pickers-pro/managers';\n+import { unstable_useMultiInputRangeField as useMultiInputRangeField } from '@mui/x-date-pickers-pro/hooks';\n import { useSplitFieldProps } from '@mui/x-date-pickers/hooks';\n\n const DateRangeField(props) {\n   const { internalProps, forwardedProps } = useSplitFieldProps(props, 'date');\n   const { slotProps, slots } = forwardedProps;\n\n   const startTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'start' },\n   });\n\n   const endTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'end' },\n   });\n\n-  const fieldResponse = useMultiInputDateRangeField({\n-     sharedProps: internalProps,\n-     startTextFieldProps,\n-     endTextFieldProps,\n-     unstableStartFieldRef: internalProps.unstableStartFieldRef,\n-     unstableEndFieldRef: internalProps.unstableEndFieldRef,\n-   });\n\n+   const manager = useDateRangeManager(props);\n+   const fieldResponse = useMultiInputRangeField({\n+     manager,\n+     internalProps,\n+     startForwardedProps: startTextFieldProps,\n+     endForwardedProps: endTextFieldProps,\n+   });\n\n   return ( /** Your UI */ )\n }\n```\n\n:::success\nThe associated types have also been removed. [Learn how to migrate them](/x/migration/migration-pickers-v7/#removed-types).\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "`useMultiInputTimeRangeField`",
              "introduction": [
                "`useMultiInputTimeRangeField`\n\nThis hook has been removed in favor of the new `useMultiInputRangeField` hook with an improved DX:\n\n```diff\n import useSlotProps from '@mui/utils/useSlotProps';\n-import { unstable_useMultiInputTimeRangeField as useMultiInputTimeRangeField } from '@mui/x-date-pickers-pro/MultiInputTimeRangeField';\n+import { useTimeRangeManager } from '@mui/x-date-pickers-pro/managers';\n+import { unstable_useMultiInputRangeField as useMultiInputRangeField } from '@mui/x-date-pickers-pro/hooks';\n import { useSplitFieldProps } from '@mui/x-date-pickers/hooks';\n\n const DateRangeField(props) {\n   const { internalProps, forwardedProps } = useSplitFieldProps(props, 'time');\n   const { slotProps, slots } = forwardedProps;\n\n   const startTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'start' },\n   });\n\n   const endTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'end' },\n   });\n\n\n-  const fieldResponse = useMultiInputTimeRangeField({\n-     sharedProps: internalProps,\n-     startTextFieldProps,\n-     endTextFieldProps,\n-     unstableStartFieldRef: internalProps.unstableStartFieldRef,\n-     unstableEndFieldRef: internalProps.unstableEndFieldRef,\n-   });\n\n+   const manager = useTimeRangeManager(props);\n+   const fieldResponse = useMultiInputRangeField({\n+     manager,\n+     internalProps,\n+     startForwardedProps: startTextFieldProps,\n+     endForwardedProps: endTextFieldProps,\n+   });\n\n   return ( /** Your UI */ )\n }\n```\n\n:::success\nThe associated types have also been removed. [Learn how to migrate them](/x/migration/migration-pickers-v7/#removed-types).\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "`useMultiInputDateTimeRangeField`",
              "introduction": [
                "`useMultiInputDateTimeRangeField`\n\nThis hook has been removed in favor of the new `useMultiInputRangeField` hook with an improved DX:\n\n```diff\n import useSlotProps from '@mui/utils/useSlotProps';\n-import { unstable_useMultiInputDateTimeRangeField as useMultiInputDateTimeRangeField } from '@mui/x-date-pickers-pro/MultiInputDateTimeRangeField';\n+import { useDateTimeRangeManager } from '@mui/x-date-pickers-pro/managers';\n+import { unstable_useMultiInputRangeField as useMultiInputRangeField } from '@mui/x-date-pickers-pro/hooks';\n import { useSplitFieldProps } from '@mui/x-date-pickers/hooks';\n\n const DateRangeField(props) {\n   const { internalProps, forwardedProps } = useSplitFieldProps(props, 'date-time');\n   const { slotProps, slots } = forwardedProps;\n\n   const startTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'start' },\n   });\n\n   const endTextFieldProps = useSlotProps({\n     elementType: 'input',\n     externalSlotProps: slotProps?.textField,\n     ownerState: { ...props, position: 'end' },\n   });\n\n\n-  const fieldResponse = useMultiInputDateTimeRangeField({\n-     sharedProps: internalProps,\n-     startTextFieldProps,\n-     endTextFieldProps,\n-     unstableStartFieldRef: internalProps.unstableStartFieldRef,\n-     unstableEndFieldRef: internalProps.unstableEndFieldRef,\n-   });\n\n+   const manager = useDateTimeRangeManager(props);\n+   const fieldResponse = useMultiInputRangeField({\n+     manager,\n+     internalProps,\n+     startForwardedProps: startTextFieldProps,\n+     endForwardedProps: endTextFieldProps,\n+   });\n\n   return ( /** Your UI */ )\n }\n```\n\n:::success\nThe associated types have also been removed. [Learn how to migrate them](/x/migration/migration-pickers-v7/#removed-types).\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "`usePickerContext`",
              "introduction": [
                "`usePickerContext`\n\n- The `onOpen` and `onClose` methods have been replaced with a single `setOpen` method.\n  This method no longer takes an event, which was used to prevent the browser default behavior:\n\n  ```diff\n   const pickerContext = usePickerContext();\n\n  -<button onClick={pickerContext.onOpen}>Open</button>\n  +<button onClick={() => pickerContext.setOpen(true)}>Open</button>\n\n  -<button onClick={pickerContext.onClose}>Close</button>\n  +<button onClick={() => pickerContext.setOpen(false)}>Open</button>\n\n  -<button\n  -  onClick={(event) =>\n  -    pickerContext.open ? pickerContext.onClose(event) : pickerContext.onOpen(event)\n  -  }\n  ->\n  -  Toggle\n  -</button>\n  +<button onClick={() => pickerContext.setOpen(prev => !prev)}>Toggle</button>\n  ```\n\n  If you want to prevent the default behavior, you now have to do it manually:\n\n  ```diff\n     <div\n     onKeyDown={(event) => {\n       if (event.key === 'Escape') {\n  -      pickerContext.onClose();\n  +      event.preventDefault();\n  +      pickerContext.setOpen(false);\n       }\n     }}\n   />\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Typing breaking changes",
          "introduction": [
            "Typing breaking changes"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Do not pass the date object as a generic",
              "introduction": [
                "Do not pass the date object as a generic\n\nThe `TDate` generic has been removed from all the types, interfaces, and variables of the `@mui/x-date-pickers` and `@mui/x-date-pickers-pro` packages.\n\nIf you were passing your date object type as a generic to any element of one of those packages, you can remove it:\n\n```diff\n-<DatePicker<Dayjs> value={value} onChange={onChange} />\n+<DatePicker value={value} onChange={onChange} />\n\n-type FieldComponent = DatePickerSlots<Dayjs>['field'];\n+type FieldComponent = DatePickerSlots['field'];\n\n-function CustomDatePicker(props: DatePickerProps<Dayjs>) {}\n+function CustomDatePicker(props: DatePickerProps) {}\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Do not pass the section type as a generic",
              "introduction": [
                "Do not pass the section type as a generic\n\nThe `TSection` generic of the `FieldRef` type has been replaced with the `TValue` generic:\n\n```diff\n-const fieldRef = React.useRef<FieldRef<FieldSection>>(null);\n+const fieldRef = React.useRef<Dayjs | null>(null);\n\n-const fieldRef = React.useRef<FieldRef<RangeFieldSection>>(null);\n+const fieldRef = React.useRef<DateRange<Dayjs>>(null);\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Removed types",
              "introduction": [
                "Removed types\n\nThe following types are no longer exported by `@mui/x-date-pickers` and/or `@mui/x-date-pickers-pro`.\nIf you were using them, you need to replace them with the following code:\n\n- `NonEmptyDateRange`\n\n  ```ts\n  // When using AdapterDayjs\n  import { Dayjs } from 'dayjs';\n  type NonEmptyDateRange = [Dayjs, Dayjs];\n\n  // When using AdapterLuxon\n  import { DateTime } from 'luxon';\n  type NonEmptyDateRange = [DateTime, DateTime];\n\n  // When using AdapterMoment, AdapterMomentJalaali or AdapterMomentHijri\n  import { Moment } from 'moment';\n  type NonEmptyDateRange = [Moment, Moment];\n\n  // When using AdapterDateFns, AdapterDateFnsV3, AdapterDateFnsJalali or AdapterDateFnsJalaliV3\n  type NonEmptyDateRange = [Date, Date];\n  ```\n\n- `UseDateFieldComponentProps`\n\n  ```ts\n  import { UseDateFieldProps } from '@mui/x-date-pickers/DateField';\n  import { PickerValidDate } from '@mui/x-date-pickers/models';\n\n  type UseDateFieldComponentProps<\n    TDate extends PickerValidDate,\n    TEnableAccessibleFieldDOMStructure extends boolean,\n    TChildProps extends {},\n  > = Omit<\n    TChildProps,\n    keyof UseDateFieldProps<TDate, TEnableAccessibleFieldDOMStructure>\n  > &\n    UseDateFieldProps<TDate, TEnableAccessibleFieldDOMStructure>;\n  ```\n\n- `UseTimeFieldComponentProps`\n\n  ```ts\n  import { UseTimeFieldProps } from '@mui/x-date-pickers/TimeField';\n  import { PickerValidDate } from '@mui/x-date-pickers/models';\n\n  type UseTimeFieldComponentProps<\n    TDate extends PickerValidDate,\n    TEnableAccessibleFieldDOMStructure extends boolean,\n    TChildProps extends {},\n  > = Omit<\n    TChildProps,\n    keyof UseTimeFieldProps<TDate, TEnableAccessibleFieldDOMStructure>\n  > &\n    UseTimeFieldProps<TDate, TEnableAccessibleFieldDOMStructure>;\n  ```\n\n- `UseDateTimeFieldComponentProps`\n\n  ```ts\n  import { UseDateTimeFieldProps } from '@mui/x-date-pickers/DateTimeField';\n  import { PickerValidDate } from '@mui/x-date-pickers/models';\n\n  type UseDateTimeFieldComponentProps<\n    TDate extends PickerValidDate,\n    TEnableAccessibleFieldDOMStructure extends boolean,\n    TChildProps extends {},\n  > = Omit<\n    TChildProps,\n    keyof UseDateTimeFieldProps<TDate, TEnableAccessibleFieldDOMStructure>\n  > &\n    UseDateTimeFieldProps<TDate, TEnableAccessibleFieldDOMStructure>;\n  ```\n\n- `UseDateRangeFieldProps`\n\n  ```ts\n  import { DateRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\n\n  interface UseDateRangeFieldProps<\n    TEnableAccessibleFieldDOMStructure extends boolean,\n  > extends Omit<\n      DateRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>,\n      'unstableFieldRef'\n    > {}\n  ```\n\n- `UseMultiInputDateRangeFieldProps`\n\n  ```ts\n  import { DateRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\n  import { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\n  interface UseMultiInputDateRangeFieldProps<\n    TEnableAccessibleFieldDOMStructure extends boolean,\n  > extends DateRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>,\n      MultiInputFieldRefs {}\n  ```\n\n- `UseMultiInputDateRangeFieldComponentProps`\n\n  ```ts\n  import { DateRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\n  import { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\n  type UseMultiInputDateRangeFieldComponentProps<\n    TEnableAccessibleFieldDOMStructure extends boolean,\n    TChildProps extends {},\n  > = Omit<\n    TChildProps,\n    | keyof DateRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>\n    | keyof MultiInputFieldRefs\n  > &\n    DateRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure> &\n    MultiInputFieldRefs;\n  ```\n\n- `UseMultiInputTimeRangeFieldProps`\n\n  ```ts\n  import { TimeRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\n  import { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\n  interface UseMultiInputTimeRangeFieldProps<\n    TEnableAccessibleFieldDOMStructure extends boolean,\n  > extends TimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>,\n      MultiInputFieldRefs {}\n  ```\n\n- `UseMultiInputTimeRangeFieldComponentProps`\n\n  ```ts\n  import { TimeRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\n  import { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\n  type UseMultiInputTimeRangeFieldComponentProps<\n    TEnableAccessibleFieldDOMStructure extends boolean,\n    TChildProps extends {},\n  > = Omit<\n    TChildProps,\n    | keyof TimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>\n    | keyof MultiInputFieldRefs\n  > &\n    TimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure> &\n    MultiInputFieldRefs;\n  ```\n\n- `UseMultiInputDateTimeRangeFieldProps`\n\n  ```ts\n  import { DateTimeRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\n  import { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\n  interface UseMultiInputDateTimeRangeFieldProps<\n    TEnableAccessibleFieldDOMStructure extends boolean,\n  > extends DateTimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>,\n      MultiInputFieldRefs {}\n  ```\n\n- `UseMultiInputDateTimeRangeFieldComponentProps`\n\n  ```ts\n  import { DateTimeRangeManagerFieldInternalProps } from '@mui/x-date-pickers-pro/managers';\n  import { MultiInputFieldRefs } from '@mui/x-date-pickers-pro/models';\n\n  type UseMultiInputDateTimeRangeFieldComponentProps<\n    TEnableAccessibleFieldDOMStructure extends boolean,\n    TChildProps extends {},\n  > = Omit<\n    TChildProps,\n    | keyof DateTimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure>\n    | keyof MultiInputFieldRefs\n  > &\n    DateTimeRangeManagerFieldInternalProps<TEnableAccessibleFieldDOMStructure> &\n    MultiInputFieldRefs;\n  ```\n\n- `MultiInputRangeFieldClasses`\n\n  ```ts\n  // If you were using MultiInputRangeFieldClasses for a date range field.\n  import { MultiInputDateRangeFieldClasses } from '@mui/x-date-pickers-pro/MultiInputDateRangeField';\n\n  // If you were using MultiInputRangeFieldClasses for a time range field.\n  import { MultiInputTimeRangeFieldClasses } from '@mui/x-date-pickers-pro/MultiInputTimeRangeField';\n\n  // If you were using MultiInputRangeFieldClasses for a date time range field.\n  import { MultiInputDateTimeRangeFieldClasses } from '@mui/x-date-pickers-pro/MultiInputDateTimeRangeField';\n  ```\n\n- `MultiInputRangeFieldClassKey`\n\n  ```ts\n  // If you were using MultiInputRangeFieldClassKey for a date range field.\n  import { MultiInputRangeFieldClassKey } from '@mui/x-date-pickers-pro/MultiInputDateRangeField';\n\n  // If you were using MultiInputRangeFieldClassKey for a time range field.\n  import { MultiInputRangeFieldClassKey } from '@mui/x-date-pickers-pro/MultiInputTimeRangeField';\n\n  // If you were using MultiInputRangeFieldClassKey for a date time range field.\n  import { MultiInputRangeFieldClassKey } from '@mui/x-date-pickers-pro/MultiInputDateTimeRangeField';\n  ```\n\n- `BaseSingleInputFieldProps`\n\n  - If you are building a custom field for a Date Picker:\n\n    ```diff\n    -import {\n    -  BaseSingleInputFieldProps,\n    -  DateValidationError,\n    -  FieldSection,\n    -} from '@mui/x-date-pickers/models';\n    -import { UseDateFieldProps } from '@mui/x-date-pickers/DateField';\n    +import { DatePickerFieldProps } from '@mui/x-date-pickers/DatePicker';\n\n    -interface CustomDateFieldProps\n    -  extends UseDateFieldProps<Dayjs, true>,\n    -    BaseSingleInputFieldProps<\n    -      Dayjs | null,\n    -      Dayjs,\n    -      FieldSection,\n    -      true,\n    -      DateValidationError\n    -    > {}\n    +interface CustomDateFieldProps extends DatePickerFieldProps {}\n    ```\n\n  - If you are building a custom field for a Time Picker:\n\n    ```diff\n    -import {\n    -  BaseSingleInputFieldProps,\n    -  TimeValidationError,\n    -  FieldSection,\n    -} from '@mui/x-date-pickers/models';\n    -import { UseTimeFieldProps } from '@mui/x-date-pickers/TimeField';\n    +import { TimePickerFieldProps } from '@mui/x-date-pickers/TimePicker';\n\n    -interface CustomTimeFieldProps\n    - extends UseTimeFieldProps<Dayjs, true>,\n    - BaseSingleInputFieldProps<\n    -      Dayjs | null,\n    -      Dayjs,\n    -      FieldSection,\n    -      true,\n    -      TimeValidationError\n    - > {}\n    +interface CustomTimeFieldProps extends TimePickerFieldProps {}\n    ```\n\n  - If you are building a custom field for a Date Time Picker:\n\n    ```diff\n    -import {\n    -  BaseSingleInputFieldProps,\n    -  DateTimeValidationError,\n    -  FieldSection,\n    -} from '@mui/x-date-pickers/models';\n    -import { UseDateTimeFieldProps } from '@mui/x-date-pickers/DateTimeField';\n    +import { DateTimePickerFieldProps } from '@mui/x-date-pickers/DateTimePicker';\n\n    -interface CustomDateTimeFieldProps\n    -  extends UseDateTimeFieldProps<Dayjs, true>,\n    -    BaseSingleInputFieldProps<\n    -      Dayjs | null,\n    -      Dayjs,\n    -      FieldSection,\n    -      true,\n    -      DateTimeValidationError\n    -    > {}\n    +interface CustomDateTimeFieldProps extends DateTimePickerFieldProps {}\n    ```\n\n  - If you are building a custom single input field for a Date Range Picker:\n\n    ```diff\n    -import {\n    -  DateRangeValidationError,\n    -  RangeFieldSection,\n    -  DateRange,\n    -} from '@mui/x-date-pickers-pro/models';\n    -import {\n    -  UseSingleInputDateRangeFieldProps\n    -} from '@mui/x-date-pickers-pro/SingleInputDateRangeField';\n    +import { DateRangePickerFieldProps } from '@mui/x-date-pickers-pro/DateRangePicker';\n\n    -interface CustomDateRangeFieldProps\n    -  extends UseSingleInputDateRangeFieldProps<Dayjs, true>,\n    -    BaseSingleInputFieldProps<\n    -      DateRange<Dayjs>,\n    -      Dayjs,\n    -      RangeFieldSection,\n    -      true,\n    -      DateRangeValidationError\n    -    >\n    +interface CustomDateRangeFieldProps extends DateRangePickerFieldProps {}\n    ```\n\n  - If you are building a custom single input field for a Date Time Range Picker:\n\n    ```diff\n    -import {\n    -  DateTimeRangeValidationError,\n    -  RangeFieldSection,\n    -  DateRange,\n    -} from '@mui/x-date-pickers-pro/models';\n    -import {\n    -  UseSingleInputDateTimeRangeFieldProps\n    -} from '@mui/x-date-pickers-pro/SingleInputDateTimeRangeField';\n    +import {\n    +  DateTimeRangePickerFieldProps\n    +} from '@mui/x-date-pickers-pro/DateTimeRangePicker';\n\n    -interface CustomDateTimeRangeFieldProps\n    -  extends UseSingleInputDateTimeRangeFieldProps<Dayjs, true>,\n    -    BaseSingleInputFieldProps<\n    -      DateRange<Dayjs>,\n    -      Dayjs,\n    -      RangeFieldSection,\n    -      true,\n    -      DateTimeRangeValidationError\n    -    >\n    +interface CustomDateTimeRangeFieldProps extends DateTimeRangePickerFieldProps {}\n    ```\n\n- `BaseMultiInputFieldProps`\n\n  - If you are building a custom multi input field for a Date Range Picker:\n\n    ```diff\n    -import {\n    -  DateRangeValidationError,\n    -  RangeFieldSection,\n    -  DateRange,\n    -} from '@mui/x-date-pickers-pro/models';\n    -import {\n    -  UseMultiInputDateRangeFieldProps\n    -} from '@mui/x-date-pickers-pro/MultiInputDateRangeField';\n    +import { DateRangePickerFieldProps } from '@mui/x-date-pickers-pro/DateRangePicker';\n\n    -interface CustomDateRangeFieldProps\n    -  extends UseMultiInputDateRangeFieldProps<Dayjs, true>,\n    -    BaseMultiInputFieldProps<\n    -      DateRange<Dayjs>,\n    -      Dayjs,\n    -      RangeFieldSection,\n    -      true,\n    -      DateRangeValidationError\n    -    > {}\n    +interface CustomDateRangeFieldProps\n    +  extends Omit<\n    +     DateRangePickerFieldProps<true>,\n    +    'unstableFieldRef' | 'clearable' | 'onClear'\n    +  >,\n    +  MultiInputFieldRefs {}\n    ```\n\n  - If you are building a custom multi input field for a Date Time Range Picker:\n\n    ```diff\n    -import {\n    -  DateTimeRangeValidationError,\n    -  RangeFieldSection,\n    -  DateRange,\n    -} from '@mui/x-date-pickers-pro/models';\n    -import {\n    -  UseMultiInputDateTimeRangeFieldProps\n    -} from '@mui/x-date-pickers-pro/MultiInputDateTimeRangeField';\n    +import {\n    +  DateTimeRangePickerFieldProps\n    +} from '@mui/x-date-pickers-pro/DateTimeRangePicker';\n\n    -interface CustomDateTimeRangeFieldProps\n    -  extends UseMultiInputDateTimeRangeFieldProps<Dayjs, false>,\n    -    BaseMultiInputFieldProps<\n    -      DateRange<Dayjs>,\n    -      Dayjs,\n    -      RangeFieldSection,\n    -      false,\n    -      DateTimeRangeValidationError\n    -    > {}\n    +interface JoyMultiInputDateRangeFieldProps\n    +  extends Omit<\n    +     DateTimeRangePickerFieldProps<false>,\n    +    'unstableFieldRef' | 'clearable' | 'onClear'\n    +  >,\n    +  MultiInputFieldRefs {}\n    ```\n\n- `BasePickersTextFieldProps`\n\n  - If your Text Field is used inside a non-range picker or in a range-picker with a single input field:\n\n    ```diff\n    -import { BasePickersTextFieldProps } from '@mui/x-date-pickers-pro/models';\n    +import { BaseSingleInputPickersTextFieldProps } from '@mui/x-date-pickers/models';\n\n     interface CustomTextFieldProps\n    -  extends BasePickersTextFieldProps<true> {}\n    +  extends BaseSingleInputPickersTextFieldProps<true> {}\n    ```\n\n  - If your Text Field is used inside a range-picker with a multi input field:\n\n    ```diff\n    -import { BasePickersTextFieldProps } from '@mui/x-date-pickers-pro/models';\n    +import { BaseMultiInputPickersTextFieldProps } from '@mui/x-date-pickers-pro/models';\n\n     interface CustomTextFieldProps\n    -  extends BasePickersTextFieldProps<true> {}\n    +  extends BaseMultiInputPickersTextFieldProps<true> {}\n    ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "✅ Rename `date-fns` adapter imports",
          "introduction": [
            "✅ Rename `date-fns` adapter imports\n\n:::warning\nThis codemod is not idempotent. Running it multiple times will rename the imports back and forth.\n\nIn example: usage of `AdapterDateFnsV3` would be replaced by `AdapterDateFns` and a subsequent run would rename it to `AdapterDateFnsV2`.\n:::\n\n- The `AdapterDateFns` and `AdapterDateFnsJalali` adapters have been renamed to `AdapterDateFnsV2` and `AdapterDateFnsJalaliV2` respectively.\n  If you were using the old imports, you need to update them:\n\n  ```diff\n  -import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n  -import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalali';\n  +import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV2';\n  +import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalaliV2';\n  ```\n\n  Or consider updating the `date-fns` or `date-fns-jalali` package to the latest version and use the updated adapters.\n\n- The `AdapterDateFnsV3` and `AdapterDateFnsJalaliV3` adapters have been renamed to `AdapterDateFns` and `AdapterDateFnsJalali` respectively.\n  If you were using the old imports, you need to update them:\n\n  ```diff\n  -import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';\n  -import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalaliV3';\n  +import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n  +import { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalali';\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Stop using `LicenseInfo` from `@mui/x-date-pickers-pro`",
          "introduction": [
            "Stop using `LicenseInfo` from `@mui/x-date-pickers-pro`\n\nThe `LicenseInfo` object is no longer exported from the `@mui/x-date-pickers-pro` package.\nYou can import it from `@mui/x-license` instead:\n\n```diff\n-import { LicenseInfo } from '@mui/x-date-pickers-pro';\n+import { LicenseInfo } from '@mui/x-license';\n\n LicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Stop passing `utils` and the date object to some translation keys",
          "introduction": [
            "Stop passing `utils` and the date object to some translation keys\n\nSome translation keys no longer require `utils` and the date object as parameters, but only the formatted value as a string. The keys affected by this changes are: `clockLabelText`, `openDatePickerDialogue` and `openTimePickerDialogue`.\nIf you have customized those translation keys, you have to update them following the examples below:\n\n- If you are setting a custom value in a picker component:\n\n```diff\n-clockLabelText: (view, time, utils) =>\n-   `Select ${view}. ${\n-     time === null || !utils.isValid(time)\n-       ? 'No time selected'\n-       : `Selected time is ${utils.format(time, 'fullTime')}`\n-   }`\n+clockLabelText: (view, formattedTime) =>\n+   `Select ${view}. ${\n+     formattedTime == null ? 'No time selected' : `Selected time is ${formattedTime}`\n+   }`\n\n-openDatePickerDialogue: (value, utils) =>\n-  value !== null && utils.isValid(value)\n-    ? `Choose date, selected date is ${utils.format(value, 'fullDate')}`\n-    : 'Choose date',\n+openDatePickerDialogue: (formattedDate) =>\n+  formattedDate ? `Choose date, selected date is ${formattedDate}` : 'Choose date'\n\n-openTimePickerDialogue: (value, utils) =>\n-  value !== null && utils.isValid(value)\n-    ? `Choose time, selected time is ${utils.format(value, 'fullTime')}`\n-    : 'Choose time',\n+openTimePickerDialogue: (formattedTime) =>\n+  formattedTime ? `Choose time, selected time is ${formattedTime}` : 'Choose time'\n```\n\n- If you are setting a custom value in the `LocalizationProvider`:\n\n```diff\n <LocalizationProvider localeText={{\n-   clockLabelText: (view, time, utils) =>\n-     `Select ${view}. ${\n-       time === null || !utils.isValid(time)\n-         ? 'No time selected'\n-         : `Selected time is ${utils.format(time, 'fullTime')}`\n-     }`\n+   clockLabelText: (view, formattedTime) =>\n+     `Select ${view}. ${\n+       formattedTime == null ? 'No time selected' : `Selected time is ${formattedTime}`\n+     }`\n-   openDatePickerDialogue: (value, utils) =>\n-     value !== null && utils.isValid(value)\n-      ? `Choose date, selected date is ${utils.format(value, 'fullDate')}`\n-      : 'Choose date',\n+   openDatePickerDialogue: (formattedDate) =>\n+     formattedDate ? `Choose date, selected date is ${formattedDate}` : 'Choose date'\n-   openTimePickerDialogue: (value, utils) =>\n-     value !== null && utils.isValid(value)\n-       ? `Choose time, selected time is ${utils.format(value, 'fullTime')}`\n-       : 'Choose time',\n+   openTimePickerDialogue: (formattedTime) =>\n+     formattedTime ? `Choose time, selected time is ${formattedTime}` : 'Choose time'\n }} >\n```\n\n- If you using this translation key in a custom component:\n\n```diff\n const translations = usePickerTranslations();\n\n-const clockLabelText = translations.clockLabelText(\n-  view,\n-  value,\n-  {} as any,\n-  value == null ? null : value.format('hh:mm:ss')\n-);\n+const clockLabelText = translations.clockLabelText(\n+  view,\n+  value == null ? null : value.format('hh:mm:ss')\n+);\n\n-const openDatePickerDialogue = translations.openDatePickerDialogue(\n-  value,\n-  {} as any,\n-  value == null ? null : value.format('MM/DD/YYY')\n-);\n+const openDatePickerDialogue = translations.openDatePickerDialogue(\n+  value == null ? null : value.format('MM/DD/YYY')\n+);\n\n-const openTimePickerDialogue = translations.openTimePickerDialogue(\n-  value,\n-  {} as any,\n-  value == null ? null : value.format('hh:mm:ss')\n-);\n+const openTimePickerDialogue = translations.openTimePickerDialogue(\n+  value == null ? null : value.format('hh:mm:ss')\n+);\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "migration->migration-pickers-v6",
      "introduction": [
        "# Migration from v6 to v7\n\n<p class=\"description\">This guide describes the changes needed to migrate the Date and Time Pickers from v6 to v7.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference guide for upgrading `@mui/x-date-pickers` from v6 to v7.\nTo read more about the changes from the new major, check out [the blog post about the release of MUI X v7](https://mui.com/blog/mui-x-v7-beta/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Start using the new release",
          "introduction": [
            "Start using the new release\n\nIn `package.json`, change the version of the date pickers package to `^7.0.0`.\n\n```diff\n-\"@mui/x-date-pickers\": \"^6.0.0\",\n+\"@mui/x-date-pickers\": \"^7.0.0\",\n\n-\"@mui/x-date-pickers-pro\": \"^6.0.0\",\n+\"@mui/x-date-pickers-pro\": \"^7.0.0\",\n```\n\nSince `v7` is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features.\nDescribed below are the steps needed to migrate from v6 to v7."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Update `@mui/material` package",
          "introduction": [
            "Update `@mui/material` package\n\nTo have the option of using the latest API from `@mui/material`, the package peer dependency version has been updated to `^5.15.14`.\nIt is a change in minor version only, so it should not cause any breaking changes.\nPlease update your `@mui/material` package to this or a newer version."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Update the license package",
          "introduction": [
            "Update the license package\n\nIf you're using the commercial version of the Pickers ([Pro](/x/introduction/licensing/#pro-plan) plan), you need to update the import path:\n\n```diff\n-import { LicenseInfo } from '@mui/x-license-pro';\n+import { LicenseInfo } from '@mui/x-license';\n```\n\nIf you have `@mui/x-license-pro` in the `dependencies` section of your `package.json`, rename and update the license package to the latest version:\n\n```diff\n-\"@mui/x-license-pro\": ^6.0.0\",\n+\"@mui/x-license\": \"^7.0.0\",\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Run codemods",
          "introduction": [
            "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v7.\nYou can run `v7.0.0/pickers/preset-safe` targeting only Date and Time Pickers or `v7.0.0/preset-safe` to target other MUI X components like the Data Grid as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n<!-- #default-branch-switch -->\n\n```bash\n# Date and Time Pickers specific\nnpx @mui/x-codemod@latest v7.0.0/pickers/preset-safe <path>\n\n# Target other MUI X components as well\nnpx @mui/x-codemod@latest v7.0.0/preset-safe <path>\n```\n\n:::info\nIf you want to run the transformers one by one, check out the transformers included in the [preset-safe codemod for pickers](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/README.md#preset-safe-for-pickers-v700) for more details.\n:::\n\nBreaking changes that are handled by this codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen.\n\nIf you have already applied the `v7.0.0/pickers/preset-safe` (or `v7.0.0/preset-safe`) codemod, then you should not need to take any further action on these items.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading, cross-file dependencies, etc., the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<DatePicker {...newProps} />\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Breaking changes",
          "introduction": [
            "Breaking changes\n\nSince v7 is a major release, it contains some changes that affect the public API.\nThese changes were done for consistency, improve stability and make room for new features."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Drop the legacy bundle",
              "introduction": [
                "Drop the legacy bundle\n\nThe support for IE 11 has been removed from all MUI X packages.\nThe `legacy` bundle that used to support old browsers like IE 11 is no longer included.\n\n:::info\nIf you need support for IE 11, you will need to keep using the latest version of the `v6` release.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Drop webpack 4 support",
              "introduction": [
                "Drop webpack 4 support\n\nDropping old browsers support also means that we no longer transpile some features that are natively supported by modern browsers – like [Nullish Coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) and [Optional Chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining).\n\nThese features are not supported by webpack 4, so if you are using webpack 4, you will need to transpile these features yourself or upgrade to webpack 5.\n\nHere is an example of how you can transpile these features on webpack 4 using the `@babel/preset-env` preset:\n\n```diff\n // webpack.config.js\n\n module.exports = (env) => ({\n   // ...\n   module: {\n     rules: [\n       {\n         test: /\\.[jt]sx?$/,\n-        exclude: /node_modules/,\n+        exclude: [\n+          {\n+            test: path.resolve(__dirname, 'node_modules'),\n+            exclude: [\n+              // Covers @mui/x-date-pickers and @mui/x-date-pickers-pro\n+              path.resolve(__dirname, 'node_modules/@mui/x-date-pickers'),\n+              path.resolve(__dirname, 'node_modules/@mui/x-license'),\n+            ],\n+          },\n+        ],\n       },\n     ],\n   },\n });\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Component slots",
          "introduction": [
            "Component slots"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Rename `components` to `slots`",
              "introduction": [
                "Rename `components` to `slots`\n\nThe `components` and `componentsProps` props are renamed to `slots` and `slotProps` props respectively.\nThis is a slow and ongoing effort between all the different libraries maintained by MUI.\nTo smooth the transition, they were deprecated during the [v6](/x/migration/migration-pickers-v5/#rename-components-to-slots-optional).\nAnd are removed from the v7.\n\nIf not already done, this modification can be handled by the codemod\n\n```bash\nnpx @mui/x-codemod@latest v7.0.0/pickers/ <path>\n```\n\nTake a look at [the RFC](https://github.com/mui/material-ui/issues/33416) for more information.\n\n:::warning\nIf this codemod is applied on a component with both a `slots` and a `components` prop, the output will contain two `slots` props.\nYou are then responsible for merging those two props manually.\n\nFor example:\n\n```tsx\n// Before running the codemod\n<DatePicker\n  slots={{ textField: MyTextField }}\n  components={{ toolbar: MyToolbar }}\n/>\n\n// After running the codemod\n<DatePicker\n  slots={{ textField: MyTextField }}\n  slots={{ toolbar: MyToolbar }}\n/>\n```\n\nThe same applies to `slotProps` and `componentsProps`.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Rename slots types",
              "introduction": [
                "✅ Rename slots types\n\nThe slot interfaces have been renamed to match with `@mui/base` naming convention.\nSuffix `SlotsComponent` is replaced by `Slots` and `SlotsComponentsProps` is replaced by `SlotProps`.\nIf you are not relying on the codemod, consider checking all the renamed types in [this file](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/src/v7.0.0/pickers/rename-slots-types/index.ts).\nHere is an example on the `DateCalendar` typing.\n\n```diff\n-DateCalendarSlotsComponent\n+DateCalendarSlots\n-DateCalendarSlotsComponentsProps\n+DateCalendarSlotProps\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Add new parameters to the `shortcuts` slot `onChange` callback",
              "introduction": [
                "Add new parameters to the `shortcuts` slot `onChange` callback\n\n:::warning\nThe following breaking change only impacts you if you are overriding the `shortcuts` slot to create your own custom UI.\nIf you are just passing shortcuts to the default UI using `slotProps={{ shortcuts: [...] }}` then you can safely skip this section.\n:::\n\nThe `onChange` callback fired when selecting a shortcut now requires two new parameters (previously they were optional):\n\n- The [`changeImportance`](/x/react-date-pickers/shortcuts/#behavior-when-selecting-a-shortcut) of the shortcut.\n- The `item` containing the entire shortcut object.\n\n```diff\n const CustomShortcuts = (props) => {\n   return (\n     <React.Fragment>\n       {props.items.map(item => {\n         const value = item.getValue({ isValid: props.isValid });\n         return (\n           <button\n-            onClick={() => onChange(value)}\n+            onClick={() => onChange(value, props.changeImportance ?? 'accept', item)}\n           >\n             {value}\n           </button>\n         )\n       }}\n     </React.Fragment>\n   )\n }\n\n <DatePicker slots={{ shortcuts: CustomShortcuts }} />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Change the imports of the `calendarHeader` slot",
              "introduction": [
                "Change the imports of the `calendarHeader` slot\n\nThe imports related to the `calendarHeader` slot have been moved from `@mui/x-date-pickers/DateCalendar` to `@mui/x-date-pickers/PickersCalendarHeader`:\n\n```diff\n export {\n   pickersCalendarHeaderClasses,\n   PickersCalendarHeaderClassKey,\n   PickersCalendarHeaderClasses,\n   PickersCalendarHeader,\n   PickersCalendarHeaderProps,\n   PickersCalendarHeaderSlotsComponent,\n   PickersCalendarHeaderSlotsComponentsProps,\n   ExportedPickersCalendarHeaderProps,\n-} from '@mui/x-date-pickers/DateCalendar';\n+} from '@mui/x-date-pickers/PickersCalendarHeader';\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Removed props",
          "introduction": [
            "Removed props"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Replace `shouldDisableClock` with `shouldDisableTime`",
              "introduction": [
                "Replace `shouldDisableClock` with `shouldDisableTime`\n\nThe deprecated `shouldDisableClock` prop has been removed in favor of the more flexible `shouldDisableTime` prop.\nThe `shouldDisableClock` prop received `value` as a `number` of hours, minutes, or seconds.\nInstead, the `shouldDisableTime` prop receives the date object (based on the used adapter).\nYou can read more about the deprecation of this prop in [v6 migration guide](/x/migration/migration-pickers-v5/#%E2%9C%85-rename-or-refactor-shoulddisabletime-prop).\n\n```diff\n <DateTimePicker\n-  shouldDisableClock={(timeValue, view) => view === 'hours' && timeValue < 12}\n+  shouldDisableTime={(value, view) => view === 'hours' && value.hour() < 12}\n />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "✅ Replace `defaultCalendarMonth` with `referenceDate`",
              "introduction": [
                "✅ Replace `defaultCalendarMonth` with `referenceDate`\n\nThe deprecated `defaultCalendarMonth` prop has been removed in favor of the more flexible `referenceDate` prop.\n\n:::info\nThe new `referenceDate` prop is not limited to the default month.\nIt will also impact year, day, and time.\n\nSee [Date Calendar—Choose the initial year / month](/x/react-date-pickers/date-calendar/#choose-the-initial-year-month) or [Base concepts—Reference date when no value is defined](/x/react-date-pickers/base-concepts/#reference-date-when-no-value-is-defined) for more details.\n:::\n\n```diff\n-<DateCalendar defaultCalendarMonth={dayjs('2022-04-01')};\n+<DateCalendar referenceDate={dayjs('2022-04-01')} />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Modified props",
          "introduction": [
            "Modified props"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Remove the string argument of the `dayOfWeekFormatter` prop",
              "introduction": [
                "Remove the string argument of the `dayOfWeekFormatter` prop\n\nThe string argument of the `dayOfWeekFormatter` prop has been replaced in favor of the date object to allow more flexibility.\n\n```diff\n <DateCalendar\n   // If you were still using the day string, you can get it back with your date library.\n-  dayOfWeekFormatter={dayStr => `${dayStr}.`}\n+  dayOfWeekFormatter={day => `${day.format('dd')}.`}\n\n   // If you were already using the day object, just remove the first argument.\n-  dayOfWeekFormatter={(_dayStr, day) => `${day.format('dd')}.`\n+  dayOfWeekFormatter={day => `${day.format('dd')}.`}\n />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Strict typing of the date-related props",
              "introduction": [
                "Strict typing of the date-related props\n\nAll the date-related props are now strictly typed to only accept the date format supported by your adapter\n(`Date` object for `date-fns`, `daysjs.Dayjs` object for `days-js`, etc.).\n\n:::info\nSee [Base concepts—Typing of the date](/x/react-date-pickers/base-concepts/#typing-of-the-date) for more details.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Field components",
          "introduction": [
            "Field components"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Update the format of `selectedSections`",
              "introduction": [
                "Update the format of `selectedSections`\n\nThe `selectedSections` prop no longer accepts start and end indexes.\nWhen selecting several — but not all — sections,\nthe field components were not behaving correctly, you can now only select one or all sections:\n\n```diff\n <DateField\n-  selectedSections={{ startIndex: 0, endIndex: 0 }}\n+  selectedSections={0}\n\n   // If the field has 3 sections\n-  selectedSections={{ startIndex: 0, endIndex: 2 }}\n+  selectedSections=\"all\"\n />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Replace the section `hasLeadingZeros` property",
              "introduction": [
                "Replace the section `hasLeadingZeros` property\n\n:::success\nThis only impacts you if you are using the `unstableFieldRef` prop to imperatively access the section object.\n:::\n\nThe property `hasLeadingZeros` has been removed from the sections in favor of the more precise `hasLeadingZerosInFormat` and `hasLeadingZerosInInput` properties.\nTo keep the same behavior, you can replace it by `hasLeadingZerosInFormat`\n\n```diff\n const fieldRef = React.useRef<FieldRef<FieldSection>>(null);\n\n React.useEffect(() => {\n   const firstSection = fieldRef.current!.getSections()[0];\n-  console.log(firstSection.hasLeadingZeros);\n+  console.log(firstSection.hasLeadingZerosInFormat);\n }, []);\n\n return <DateField unstableFieldRef={fieldRef} />;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Headless fields",
              "introduction": [
                "Headless fields\n\n:::success\nThe following breaking changes only impact you if you are using hooks like `useDateField` to build a custom UI.\n\nIf you are just using the regular field components, then you can safely skip this section.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Move `inputRef` inside the props passed to the hook",
                  "introduction": [
                    "Move `inputRef` inside the props passed to the hook\n\nThe field hooks now only receive the props instead of an object containing both the props and the `inputRef`.\n\n```diff\n-const { inputRef, ...otherProps } = props\n-const fieldResponse = useDateField({ props: otherProps, inputRef });\n+const fieldResponse = useDateField(props);\n```\n\nIf you are using a multi input range field hook, the same applies to `startInputRef` and `endInputRef` params\n\n```diff\n- const { inputRef: startInputRef, ...otherStartTextFieldProps } = startTextFieldProps\n- const { inputRef: endInputRef, ...otherEndTextFieldProps } = endTextFieldProps\n\n  const fieldResponse = useMultiInputDateRangeField({\n    sharedProps,\n-   startTextFieldProps: otherStartTextFieldProps,\n-   endTextFieldProps: otherEndTextFieldProps,\n-   startInputRef\n-   endInputRef,\n+   startTextFieldProps,\n+   endTextFieldProps\n  });\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Rename the ref returned by the hook to `inputRef`",
                  "introduction": [
                    "Rename the ref returned by the hook to `inputRef`\n\nWhen used with the v6 TextField approach (where the input is an `<input />` HTML element), the field hooks return a ref that needs to be passed to the `<input />` element.\nThis ref was previously named `ref` and has been renamed `inputRef` for extra clarity.\n\n```diff\n  const fieldResponse = useDateField(props);\n\n- return <input ref={fieldResponse.ref} />\n+ return <input ref={fieldResponse.inputRef} />\n```\n\nIf you are using a multi input range field hook, the same applies to the ref in the `startDate` and `endDate` objects\n\n```diff\n  const fieldResponse = useDateField(props);\n\n  return (\n    <div>\n-     <input ref={fieldResponse.startDate.ref} />\n+     <input ref={fieldResponse.startDate.inputRef} />\n      <span>–</span>\n-     <input ref={fieldResponse.endDate.ref} />\n+     <input ref={fieldResponse.endDate.inputRef} />\n    </div>\n  )\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Restructure the API of `useClearableField`",
                  "introduction": [
                    "Restructure the API of `useClearableField`\n\nThe `useClearableField` hook API has been simplified to now take a `props` parameter instead of a `fieldProps`, `InputProps`, `clearable`, `onClear`, `slots` and `slotProps` parameters.\n\nYou should now be able to directly pass the returned value from your field hook (for example `useDateField`) to `useClearableField`\n\n```diff\n  const fieldResponse = useDateField(props);\n\n- const { InputProps, onClear, clearable, slots, slotProps, ...otherFieldProps } = fieldResponse\n- const { InputProps: ProcessedInputProps, fieldProps: processedFieldProps } = useClearableField({\n-   fieldProps: otherFieldProps,\n-   InputProps,\n-   clearable,\n-   onClear,\n-   slots,\n-   slotProps,\n- });\n-\n-  return <MyCustomTextField {...processedFieldProps} InputProps={ProcessedInputProps} />\n\n+ const processedFieldProps = useClearableField(fieldResponse);\n+\n+ return <MyCustomTextField {...processedFieldProps} />\n```\n\n:::info\nIf your custom field is based on one of the examples of the [Custom field](/x/react-date-pickers/custom-field/) page,\nthen you can look at the page to see all the examples improved and updated to use the new simplified API.\n:::"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Do not forward the `enableAccessibleFieldDOMStructure` prop to the DOM",
                  "introduction": [
                    "Do not forward the `enableAccessibleFieldDOMStructure` prop to the DOM\n\nThe headless field hooks (e.g.: `useDateField`) now return a new prop called `enableAccessibleFieldDOMStructure`.\nThis is used to know if the current UI expected is built using the accessible DOM structure or not.\n\n:::info\nSee [Migration from v7 to v8—New DOM structure for the field](/x/migration/migration-pickers-v7/#new-dom-structure-for-the-field) for more details.\n:::\n\nWhen building a custom UI, you are most-likely only supporting one DOM structure, so you can remove `enableAccessibleFieldDOMStructure` before it is passed to the DOM:\n\n```diff\n  function MyCustomTextField(props) {\n    const {\n+     // Should be ignored\n+     enableAccessibleFieldDOMStructure,\n\n      // ... rest of the props you are using\n    }\n\n    return ( /* Some UI to edit the date */ )\n  }\n\n  function MyCustomField(props) {\n    const fieldResponse = useDateField<Dayjs, false, typeof textFieldProps>({\n      ...props,\n+     // If you only support one DOM structure, we advise you to hardcode it\n+     // here to avoid unwanted switches in your application.\n+     enableAccessibleFieldDOMStructure: false,\n    });\n\n    return <MyCustomTextField ref={ref} {...fieldResponse} />;\n  }\n\n  function App() {\n    return <DatePicker slots={{ field: MyCustomField }} />;\n  }\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Date management",
          "introduction": [
            "Date management"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Use localized week with luxon",
              "introduction": [
                "Use localized week with luxon\n\nThe `AdapterLuxon` now uses the localized week when Luxon `v3.4.4` or higher is installed.\nThis improvement aligns `AdapterLuxon` with the behavior of other adapters.\n\nIf you want to keep the start of the week on Monday even if your locale says otherwise.\nYou can hardcode the week settings as follows:\n\n```ts\nimport { Settings, Info } from 'luxon';\n\nSettings.defaultWeekSettings = {\n  firstDay: 1,\n  minimalDays: Info.getMinimumDaysInFirstWeek(),\n  weekend: Info.getWeekendWeekdays(),\n};\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `monthAndYear` format",
              "introduction": [
                "Remove the `monthAndYear` format\n\nThe `monthAndYear` format has been removed.\nIt was used in the header of the calendar views.\nYou can replace it with the new `format` prop of the `calendarHeader` slot:\n\n```diff\n <LocalizationProvider\n   adapter={AdapterDayJS}\n-  formats={{ monthAndYear: 'MM/YYYY' }}\n />\n   <DatePicker\n+    slotProps={{ calendarHeader: { format: 'MM/YYYY' }}}\n   />\n   <DateRangePicker\n+    slotProps={{ calendarHeader: { format: 'MM/YYYY' }}}\n   />\n <LocalizationProvider />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Renamed variables",
          "introduction": [
            "Renamed variables"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "✅ Rename the `dayPickerClasses` variable to `dayCalendarClasses`",
              "introduction": [
                "✅ Rename the `dayPickerClasses` variable to `dayCalendarClasses`\n\nThe `dayPickerClasses` variable has been renamed `dayCalendarClasses` to be consistent with the new name of the `DayCalendar` component introduced in v6.0.0.\n\n```diff\n-import { dayPickerClasses } from '@mui/x-date-pickers/DateCalendar';\n+import { dayCalendarClasses } from '@mui/x-date-pickers/DateCalendar';\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Usage with Day.js",
          "introduction": [
            "Usage with Day.js"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Use UTC with the Day.js adapter",
              "introduction": [
                "Use UTC with the Day.js adapter\n\nThe `dateLibInstance` prop of `LocalizationProvider` does not work with `AdapterDayjs` anymore.\nThis prop was used to set the pickers in UTC mode before the implementation of a proper timezone support in the components.\n\n:::info\nSee [Timezone](/x/react-date-pickers/timezone/) for more details.\n:::\n\n```diff\n // When a `value` or a `defaultValue` is provided\n <LocalizationProvider\n   adapter={AdapterDayjs}\n-  dateLibInstance={dayjs.utc}\n >\n   <DatePicker value={dayjs.utc('2022-04-17')} />\n </LocalizationProvider>\n\n // When no `value` or `defaultValue` is provided\n <LocalizationProvider\n   adapter={AdapterDayjs}\n-  dateLibInstance={dayjs.utc}\n >\n-  <DatePicker />\n+  <DatePicker timezone=\"UTC\" />\n </LocalizationProvider>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Usage with `customParseFormat`",
              "introduction": [
                "Usage with `customParseFormat`\n\nThe call to `dayjs.extend(customParseFormatPlugin)` has been moved to the `AdapterDayjs` constructor. This allows users\nto pass custom options to this plugin before the adapter uses it.\n\nIf you are using this plugin before the rendering of the first `LocalizationProvider` component and did not call\n`dayjs.extend` in your own codebase, you will need to manually extend `dayjs`:\n\n```tsx\nimport dayjs from 'dayjs';\nimport customParseFormatPlugin from 'dayjs/plugin/customParseFormat';\n\ndayjs.extend(customParseFormatPlugin);\n```\n\nThe other plugins are still added before the adapter initialization."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Remove root level `locales` export",
          "introduction": [
            "Remove root level `locales` export\n\nThe `locales` export has been removed from the root of the packages.\nIn an effort to reduce the bundle size, the locales are now only available from the `@mui/x-date-pickers/locales` or `@mui/x-date-pickers-pro/locales` paths.\nIf you were still relying on the root level export, please update your code.\n\nBefore v7, it was possible to import locales from the package root (that is `import { frFR } from '@mui/x-date-pickers'`).\n\n```diff\n-import { frFR } from '@mui/x-date-pickers';\n+import { frFR } from '@mui/x-date-pickers/locales';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Remove `dateTimeViewRenderers` export",
          "introduction": [
            "Remove `dateTimeViewRenderers` export\n\nThe `dateTimeViewRenderers` export has been removed in favor of reusing existing time view renderers (`renderTimeViewClock`, `renderDigitalClockTimeView` and `renderMultiSectionDigitalClockTimeView`) and date view renderer (`renderDateViewCalendar`) to render the `DesktopDateTimePicker`.\n\nIf you were relying on this import, you can refer to the implementation of the `DesktopDateTimePicker` to see how to combine the renderers yourself.\n\n:::info\nThe additional side-effect of this change is that passing `renderTimeViewClock` to time view renderers will no longer revert to the old behavior of rendering only date or time view.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Adapters internal changes",
          "introduction": [
            "Adapters internal changes\n\n:::success\nThe following breaking changes only impact you if you are using the adapters outside the pickers like displayed in the following example:\n\n```tsx\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\n\nconst adapter = new AdapterDays();\nadapter.isValid(dayjs('2022-04-17T15:30'));\n```\n\nIf you are just passing an adapter to `LocalizationProvider`, then you can safely skip this section.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Removed methods",
              "introduction": [
                "Removed methods\n\n<details>\n  <summary>Show breaking changes</summary>"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Remove the `dateWithTimezone` method",
                  "introduction": [
                    "Remove the `dateWithTimezone` method\n\nThe `dateWithTimezone` method has been removed and its content has been moved the `date` method.\nYou can use the `date` method instead:\n\n```diff\n-adapter.dateWithTimezone(undefined, 'system');\n+adapter.date(undefined, 'system');\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `getDiff` method",
                  "introduction": [
                    "Remove the `getDiff` method\n\nThe `getDiff` method has been removed.\nYou can directly use your date library:\n\n```diff\n // For Day.js\n-const diff = adapter.getDiff(value, comparing, unit);\n+const diff = value.diff(comparing, unit);\n\n // For Luxon\n-const diff = adapter.getDiff(value, comparing, unit);\n+const getDiff = (value: DateTime, comparing: DateTime | string, unit?: AdapterUnits) => {\n+  const parsedComparing = typeof comparing === 'string'\n+    ? DateTime.fromJSDate(new Date(comparing))\n+    : comparing;\n+  if (unit) {\n+    return Math.floor(value.diff(comparing).as(unit));\n+  }\n+  return value.diff(comparing).as('millisecond');\n+};\n+\n+const diff = getDiff(value, comparing, unit);\n\n // For DateFns\n-const diff = adapter.getDiff(value, comparing, unit);\n+const getDiff = (value: Date, comparing: Date | string, unit?: AdapterUnits) => {\n+  const parsedComparing = typeof comparing === 'string' ? new Date(comparing) : comparing;\n+  switch (unit) {\n+    case 'years':\n+      return dateFns.differenceInYears(value, parsedComparing);\n+    case 'quarters':\n+      return dateFns.differenceInQuarters(value, parsedComparing);\n+    case 'months':\n+      return dateFns.differenceInMonths(value, parsedComparing);\n+    case 'weeks':\n+      return dateFns.differenceInWeeks(value, parsedComparing);\n+    case 'days':\n+      return dateFns.differenceInDays(value, parsedComparing);\n+    case 'hours':\n+      return dateFns.differenceInHours(value, parsedComparing);\n+    case 'minutes':\n+      return dateFns.differenceInMinutes(value, parsedComparing);\n+    case 'seconds':\n+      return dateFns.differenceInSeconds(value, parsedComparing);\n+    default: {\n+      return dateFns.differenceInMilliseconds(value, parsedComparing);\n+    }\n+  }\n+};\n+\n+const diff = getDiff(value, comparing, unit);\n\n // For Moment\n-const diff = adapter.getDiff(value, comparing, unit);\n+const diff = value.diff(comparing, unit);\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `getFormatHelperText` method",
                  "introduction": [
                    "Remove the `getFormatHelperText` method\n\nThe `getFormatHelperText` method has been removed.\nYou can use the `expandFormat` instead:\n\n```diff\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format);\n```\n\nAnd if you need the exact same output.\nYou can apply the following transformation:\n\n```diff\n // For Day.js\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();\n\n // For Luxon\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/(a)/g, '(a|p)m').toLocaleLowerCase();\n\n // For DateFns\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/(aaa|aa|a)/g, '(a|p)m').toLocaleLowerCase();\n\n // For Moment\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `getMeridiemText` method",
                  "introduction": [
                    "Remove the `getMeridiemText` method\n\nThe `getMeridiemText` method has been removed.\nYou can use the `setHours`, `date` and `format` methods to recreate its behavior:\n\n```diff\n-const meridiem = adapter.getMeridiemText('am');\n+const getMeridiemText = (meridiem: 'am' | 'pm') => {\n+  const date = adapter.setHours(adapter.date()!, meridiem === 'am' ? 2 : 14);\n+  return utils.format(date, 'meridiem');\n+};\n+\n+const meridiem = getMeridiemText('am');\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `getMonthArray` method",
                  "introduction": [
                    "Remove the `getMonthArray` method\n\nThe `getMonthArray` method has been removed.\nYou can use the `startOfYear` and `addMonths` methods to recreate its behavior:\n\n```diff\n-const monthArray = adapter.getMonthArray(value);\n+const getMonthArray = (year) => {\n+  const firstMonth = utils.startOfYear(year);\n+  const months = [firstMonth];\n+\n+  while (months.length < 12) {\n+    const prevMonth = months[months.length - 1];\n+    months.push(utils.addMonths(prevMonth, 1));\n+  }\n+\n+  return months;\n+}\n+\n+const monthArray = getMonthArray(value);\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `getNextMonth` method",
                  "introduction": [
                    "Remove the `getNextMonth` method\n\nThe `getNextMonth` method has been removed.\nYou can use the `addMonths` method instead:\n\n```diff\n-const nextMonth = adapter.getNextMonth(value);\n+const nextMonth = adapter.addMonths(value, 1);\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `getPreviousMonth` method",
                  "introduction": [
                    "Remove the `getPreviousMonth` method\n\nThe `getPreviousMonth` method has been removed.\nYou can use the `addMonths` method instead:\n\n```diff\n-const previousMonth = adapter.getPreviousMonth(value);\n+const previousMonth = adapter.addMonths(value, -1);\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `getWeekdays` method",
                  "introduction": [
                    "Remove the `getWeekdays` method\n\nThe `getWeekdays` method has been removed.\nYou can use the `startOfWeek` and `addDays` methods instead:\n\n```diff\n-const weekDays = adapter.getWeekdays(value);\n+const getWeekdays = (value) => {\n+  const start = adapter.startOfWeek(value);\n+  return [0, 1, 2, 3, 4, 5, 6].map((diff) => utils.addDays(start, diff));\n+};\n+\n+const weekDays = getWeekdays(value);\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `isNull` method",
                  "introduction": [
                    "Remove the `isNull` method\n\nThe `isNull` method has been removed.\nYou can replace it with a very basic check:\n\n```diff\n-const isNull = adapter.isNull(value);\n+const isNull = value === null;\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `mergeDateAndTime` method",
                  "introduction": [
                    "Remove the `mergeDateAndTime` method\n\nThe `mergeDateAndTime` method has been removed.\nYou can use the `setHours`, `setMinutes`, and `setSeconds` methods to recreate its behavior:\n\n```diff\n-const result = adapter.mergeDateAndTime(valueWithDate, valueWithTime);\n+const mergeDateAndTime = <TDate>(\n+   dateParam,\n+   timeParam,\n+ ) => {\n+   let mergedDate = dateParam;\n+   mergedDate = utils.setHours(mergedDate, utils.getHours(timeParam));\n+   mergedDate = utils.setMinutes(mergedDate, utils.getMinutes(timeParam));\n+   mergedDate = utils.setSeconds(mergedDate, utils.getSeconds(timeParam));\n+\n+   return mergedDate;\n+ };\n+\n+const result = mergeDateAndTime(valueWithDate, valueWithTime);\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `parseISO` method",
                  "introduction": [
                    "Remove the `parseISO` method\n\nThe `parseISO` method has been removed.\nYou can directly use your date library:\n\n```diff\n // For Day.js\n-const value = adapter.parseISO(isoString);\n+const value = dayjs(isoString);\n\n // For Luxon\n-const value = adapter.parseISO(isoString);\n+const value = DateTime.fromISO(isoString);\n\n // For DateFns\n-const value = adapter.parseISO(isoString);\n+const value = dateFns.parseISO(isoString);\n\n // For Moment\n-const value = adapter.parseISO(isoString);\n+const value = moment(isoString, true);\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Remove the `toISO` method",
                  "introduction": [
                    "Remove the `toISO` method\n\nThe `toISO` method has been removed.\nYou can directly use your date library:\n\n```diff\n // For Day.js\n-const isoString = adapter.toISO(value);\n+const isoString = value.toISOString();\n\n // For Luxon\n-const isoString = adapter.toISO(value);\n+const isoString = value.toUTC().toISO({ format: 'extended' });\n\n // For DateFns\n-const isoString = adapter.toISO(value);\n+const isoString = dateFns.formatISO(value, { format: 'extended' });\n\n // For Moment\n-const isoString = adapter.toISO(value);\n+const isoString = value.toISOString();\n```\n\nThe `getYearRange` method used to accept two params and now accepts a tuple to be consistent with the `isWithinRange` method:\n\n```diff\n-adapter.getYearRange(start, end);\n+adapter.getYearRange([start, end])\n```\n\n</details>"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Modified methods",
              "introduction": [
                "Modified methods\n\n<details>\n  <summary>Show breaking changes</summary>"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Restrict the input format of the `date` method",
                  "introduction": [
                    "Restrict the input format of the `date` method\n\nThe `date` method now have the behavior of the v6 `dateWithTimezone` method.\nIt no longer accept `any` as a value but only `string | null | undefined`\n\n```diff\n-adapter.date(new Date());\n+adapter.date();\n\n-adapter.date(new Date('2022-04-17');\n+adapter.date('2022-04-17');\n\n-adapter.date(new Date(2022, 3, 17, 4, 5, 34));\n+adapter.date('2022-04-17T04:05:34');\n\n-adapter.date(new Date('Invalid Date'));\n+adapter.getInvalidDate();\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Restrict the input format of the `isEqual` method",
                  "introduction": [
                    "Restrict the input format of the `isEqual` method\n\nThe `isEqual` method used to accept any type of value for its two input and tried to parse them before checking if they were equal.\nThe method has been simplified and now only accepts an already-parsed date or `null` (ie: the same formats used by the `value` prop in the pickers)\n\n```diff\n const adapterDayjs = new AdapterDayjs();\n const adapterLuxon = new AdapterLuxon();\n const adapterDateFns = new AdapterDateFns();\n const adapterMoment = new AdapterMoment();\n\n // Supported formats\n const isEqual = adapterDayjs.isEqual(null, null); // Same for the other adapters\n const isEqual = adapterLuxon.isEqual(DateTime.now(), DateTime.fromISO('2022-04-17'));\n const isEqual = adapterMoment.isEqual(moment(), moment('2022-04-17'));\n const isEqual = adapterDateFns.isEqual(new Date(), new Date('2022-04-17'));\n\n // Non-supported formats (JS Date)\n-const isEqual = adapterDayjs.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterDayjs.isEqual(dayjs(), dayjs('2022-04-17'));\n\n-const isEqual = adapterLuxon.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterLuxon.isEqual(DateTime.now(), DateTime.fromISO('2022-04-17'));\n\n-const isEqual = adapterMoment.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterMoment.isEqual(moment(), moment('2022-04-17'));\n\n // Non-supported formats (string)\n-const isEqual = adapterDayjs.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterDayjs.isEqual(dayjs('2022-04-17'), dayjs('2022-04-17'));\n\n-const isEqual = adapterLuxon.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterLuxon.isEqual(DateTime.fromISO('2022-04-17'), DateTime.fromISO('2022-04-17'));\n\n-const isEqual = adapterMoment.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterMoment.isEqual(moment('2022-04-17'), moment('2022-04-17'));\n\n-const isEqual = adapterDateFns.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterDateFns.isEqual(new Date('2022-04-17'), new Date('2022-04-17'));\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Restrict the input format of the `isValid` method",
                  "introduction": [
                    "Restrict the input format of the `isValid` method\n\nThe `isValid` method used to accept any type of value and tried to parse them before checking their validity.\nThe method has been simplified and now only accepts an already-parsed date or `null`.\nWhich is the same type as the one accepted by the components `value` prop.\n\n```diff\n const adapterDayjs = new AdapterDayjs();\n const adapterLuxon = new AdapterLuxon();\n const adapterDateFns = new AdapterDateFns();\n const adapterMoment = new AdapterMoment();\n\n // Supported formats\n const isValid = adapterDayjs.isValid(null); // Same for the other adapters\n const isValid = adapterLuxon.isValid(DateTime.now());\n const isValid = adapterMoment.isValid(moment());\n const isValid = adapterDateFns.isValid(new Date());\n\n // Non-supported formats (JS Date)\n-const isValid = adapterDayjs.isValid(new Date('2022-04-17'));\n+const isValid = adapterDayjs.isValid(dayjs('2022-04-17'));\n\n-const isValid = adapterLuxon.isValid(new Date('2022-04-17'));\n+const isValid = adapterLuxon.isValid(DateTime.fromISO('2022-04-17'));\n\n-const isValid = adapterMoment.isValid(new Date('2022-04-17'));\n+const isValid = adapterMoment.isValid(moment('2022-04-17'));\n\n // Non-supported formats (string)\n-const isValid = adapterDayjs.isValid('2022-04-17');\n+const isValid = adapterDayjs.isValid(dayjs('2022-04-17'));\n\n-const isValid = adapterLuxon.isValid('2022-04-17');\n+const isValid = adapterLuxon.isValid(DateTime.fromISO('2022-04-17'));\n\n-const isValid = adapterMoment.isValid('2022-04-17');\n+const isValid = adapterMoment.isValid(moment('2022-04-17'));\n\n-const isValid = adapterDateFns.isValid('2022-04-17');\n+const isValid = adapterDateFns.isValid(new Date('2022-04-17'));\n```\n\n</details>"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "Removed internal types",
          "introduction": [
            "Removed internal types\n\nThe following internal types were exported by mistake and have been removed from the public API:\n\n- `UseDateFieldDefaultizedProps`\n- `UseTimeFieldDefaultizedProps`\n- `UseDateTimeFieldDefaultizedProps`\n- `UseSingleInputDateRangeFieldComponentProps`\n- `UseSingleInputTimeRangeFieldComponentProps`\n- `UseSingleInputDateTimeRangeFieldComponentProps`"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "migration->migration-data-grid-v5",
      "introduction": [
        "# Migration from v5 to v6\n\n<p class=\"description\">This guide describes the changes needed to migrate the Data Grid from v5 to v6.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nTo get started, check out [the blog post about the release of MUI X v6](https://mui.com/blog/mui-x-v6/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Start using the new release",
          "introduction": [
            "Start using the new release\n\nIn `package.json`, change the version of the Data Grid package to `^6.0.0`.\n\n```diff\n-\"@mui/x-data-grid\": \"^5.0.0\",\n+\"@mui/x-data-grid\": \"^6.0.0\",\n```\n\nSince v6 is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features.\nDescribed below are the steps needed to migrate from v5 to v6."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Run codemods",
          "introduction": [
            "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v6. You can run `v6.0.0/data-grid/preset-safe` targeting only Data Grid or `v6.0.0/preset-safe` to target Date and Time pickers as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n```bash\n# Data Grid specific\nnpx @mui/x-codemod@latest v6.0.0/data-grid/preset-safe <path>\n\n# Target Date and Time Pickers as well\nnpx @mui/x-codemod@latest v6.0.0/preset-safe <path>\n```\n\n:::success\nApart from the removed methods and exports that require manual intervention, around 50% of the DataGrid breaking changes are automatically handled by the `preset-safe` codemod 🎉.\n:::\n\n:::info\nIf you want to run the codemods one by one, check out the codemods included in the [preset-safe codemod for Data Grid](https://github.com/mui/mui-x/blob/master/packages/x-codemod/README.md#preset-safe-for-data-grid-v600) for more details.\n:::\n\nBreaking changes that are handled by `preset-safe` codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen or next to the specific point that is handled by it.\n\nIf you have already applied the `v6.0.0/data-grid/preset-safe` (or `v6.0.0/preset-safe`) codemod, then you should not need to take any further action on these items. If there's a specific part of the breaking change that is not part of the codemod or needs some manual work, it will be listed in the end of each section.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading, cross-file dependencies, etc., the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<DataGrid {...newProps} />\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Breaking changes",
          "introduction": [
            "Breaking changes\n\nSince v6 is a major release, it contains some changes that affect the public API.\nThese changes were done for consistency, improve stability and make room for new features.\nBelow are described the steps you need to make to migrate from v5 to v6.\n\n:::warning\nThe minimum supported Node.js version has been changed from 12.0.0 to 14.0.0, since [12.x.x reached end-of-life status](https://nodejs.org/en/blog/release/v12.22.12) in 2022.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "✅ Renamed props",
              "introduction": [
                "✅ Renamed props\n\n- To avoid confusion with the props that will be added for the cell selection feature, some props related to row selection were renamed to have \"row\" in their name. The renamed props are the following:\n\n  | Old name                   | New name                      |\n  | :- | :-- | : | :---- |\n  | `.MuiDataGrid-withBorder`                  | `.MuiDataGrid-withBorderColor`              | The class only sets `border-color` CSS property |\n  | `.MuiDataGrid-filterFormLinkOperatorInput` | `.MuiDataGrid-filterFormLogicOperatorInput` |                                                 |"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Removals from the public API",
              "introduction": [
                "Removals from the public API\n\n- The `getGridSingleSelectQuickFilterFn` function was removed.\n  You can copy the old function and pass it to the `getApplyQuickFilterFn` property of the `singleSelect` column definition."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Rename `components` to `slots` (optional)",
          "introduction": [
            "Rename `components` to `slots` (optional)\n\nThe `components` and `componentsProps` props are being renamed to `slots` and `slotProps` props respectively.\nThis is a slow and ongoing effort between all the different libraries maintained by MUI.\nTo smooth the transition, Data Grid support both the `components` props which are deprecated, and the new `slots` props.\n\nIf you would like to use the new API and do not want to see deprecated prop usage, consider running `rename-components-to-slots` codemod handling the prop renaming.\n\n```bash\nnpx @mui/x-codemod@latest v6.0.0/data-grid/rename-components-to-slots <path>\n```\n\nTake a look at [the RFC](https://github.com/mui/material-ui/issues/33416) for more information."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "migration->migration-data-grid-v4",
      "introduction": [
        "# Migration from v4 to v5\n\n<p class=\"description\">This guide describes the changes needed to migrate the Data Grid from v4 to v5.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference guide for upgrading your site from MUI X v4 to v5.\nMUI X v5 is fully compatible with Material UI v5 and MUI System v5 and can be used with Material UI v4 and MUI System v4 with some additional steps.\nMost breaking changes are renaming of CSS classes or variables to improve the consistency of the Data Grid."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Migrating MUI Core from v4",
          "introduction": [
            "Migrating MUI Core from v4\n\n:::warning\nWe strongly recommend you [migrate Material UI to v5](/material-ui/migration/migration-v4/) when using MUI X v5.\nHowever, this might not be possible, depending on the complexity of the application.\nThe alternative is to install Material UI v5 and configure it to keep Material UI v4 running alongside.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Using MUI Core v4 with v5",
              "introduction": [
                "Using MUI Core v4 with v5\n\nUsing Material UI v4 with v5 can be achieved with the following steps:\n\n1. First, make sure you have Material UI v5 installed. If not, install it with these [instructions](/material-ui/getting-started/installation/).\n1. Add a custom [`createGenerateClassName`](/system/styles/api/#creategenerateclassname-options-class-name-generator) to disable the generation of global class names in JSS.\n\n```jsx\nimport { createGenerateClassName } from '@material-ui/core/styles';\n\nconst generateClassName = createGenerateClassName({\n  // By enabling this option, if you have non-MUI elements (for example `<div />`)\n  // using MUI classes (for example `.MuiButton`) they will lose styles.\n  // Make sure to convert them to use `styled()` or `<Box />` first.\n  disableGlobal: true,\n  // Class names will receive this seed to avoid name collisions.\n  seed: 'mui-jss',\n});\n```\n\n3. Create a v5 theme with the same customizations as the v4 theme. This has to be done as the theme is not shared between different Material UI versions.\n\n```jsx\nimport { createMuiTheme as createThemeV4 } from '@material-ui/core/styles';\nimport { createTheme as createThemeV5 } from '@mui/material/styles';\n\nconst themeV4 = createThemeV4({\n  palette: {\n    primary: {\n      main: '#2196f3',\n    },\n  },\n});\n\nconst themeV5 = createThemeV5({\n  palette: {\n    primary: {\n      main: themeV4.palette.primary.main,\n    },\n  },\n});\n```\n\n4. Apply the class name generator and v5 theme to the application.\n\n```jsx\nimport * as React from 'react';\nimport { ThemeProvider as ThemeProviderV5 } from '@mui/material/styles';\nimport { ThemeProvider as ThemeProviderV4, StylesProvider } from '@material-ui/core/styles';\n\nconst generateClassName = createGenerateClassName({ ... });\nconst themeV4 = createThemeV4({ ... });\nconst themeV5 = createThemeV5({ ... });\n\nexport default function DataGridDemo() {\n  return (\n    <StylesProvider generateClassName={generateClassName}>\n      <ThemeProviderV4 theme={themeV4}>\n        <ThemeProviderV5 theme={themeV5}>\n          {/* Your component tree. */}\n        </ThemeProviderV5>\n      </ThemeProviderV4>\n    </StylesProvider>\n  );\n}\n```\n\n**Done!** Now, you can render any dependencies that rely on Material UI v5 without upgrading from v4, and they will both run seamlessly alongside.\nFor example, the following interactive demo shows how these steps tie together with the Data Grid:"
              ],
              "code_path": [
                "CoreV5WithCoreV4.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Migrating MUI X",
          "introduction": [
            "Migrating MUI X"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Update MUI X version",
              "introduction": [
                "Update MUI X version\n\nTo use the v5 version of MUI X, you first need to update to the new package names:\n\n- `@material-ui/data-grid` is now `@mui/x-data-grid` (MIT)\n- `@material-ui/x-grid` is now `@mui/x-data-grid-pro` (Commercial)"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "CSS classes",
              "introduction": [
                "CSS classes\n\n- Some CSS classes were removed or renamed\n\n  | MUI X v4 classes                   | MUI X v5 classes                         |\n  | : |\n  | `.MuiDataGrid-window`              | removed                                  |\n  | `.MuiDataGrid-windowContainer`     | removed                                  |\n  | `.MuiDataGrid-viewport`            | `.MuiDataGrid-virtualScroller`           |\n  | `.MuiDataGrid-dataContainer`       | `.MuiDataGrid-virtualScrollerContent`    |\n  | `.MuiDataGrid-renderingZone`       | `.MuiDataGrid-virtualScrollerRenderZone` |\n  | `.MuiDataGrid-gridMenuList`        | `.MuiDataGrid-menuList`                  |\n  | `.MuiGridToolbarContainer-root`    | `.MuiDataGrid-toolbarContainer`          |\n  | `.MuiGridMenu-root`                | `.MuiDataGrid-menu`                      |\n  | `.MuiDataGridColumnsPanel-root`    | `.MuiDataGrid-columnsPanel`              |\n  | `.MuiGridPanel-root`               | `.MuiDataGrid-panel`                     |\n  | `.MuiGridPanelContent-root`        | `.MuiDataGrid-panelContent`              |\n  | `.MuiGridPanelFooter-root`         | `.MuiDataGrid-panelFooter`               |\n  | `.MuiDataGridPanelHeader-root`     | `.MuiDataGrid-panelHeader`               |\n  | `.MuiGridPanelWrapper-root`        | `.MuiDataGrid-panelWrapper`              |\n  | `.MuiGridFilterForm-root`          | `.MuiDataGrid-filterForm`                |\n  | `.MuiGridToolbarFilterButton-root` | `.MuiDataGrid-toolbarFilterList`         |"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Module augmentation",
              "introduction": [
                "Module augmentation\n\n- The module augmentation is no longer enabled by default. This change was done to prevent conflicts with projects using Data Grid and Data Grid Pro together.\n\n  In order to still be able to do overrides at the theme level, add the following imports to your project:\n\n  ```diff\n  +import type {} from '@mui/x-data-grid/themeAugmentation';\n  +import type {} from '@mui/x-data-grid-pro/themeAugmentation';\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Virtualization",
              "introduction": [
                "Virtualization\n\n- The `onViewportRowsChange` prop and the `viewportRowsChange` event have been removed\n\n  You can replace them with a listener on the `rowsScroll` event:\n\n  ```tsx\n  const apiRef = useGridApiRef();\n  const prevRenderContext = React.useRef(null);\n\n  React.useEffect(() => {\n    return apiRef.current.subscribeEvent('rowsScroll', ({ renderContext }) => {\n      if (\n        !prevRenderContext.current ||\n        renderContext.firstRowIdx !== prevRenderContext.current.firstRowIndex ||\n        renderContext.lastRowIdx !== prevRenderContext.current.lastRowIndex\n      ) {\n        prevRenderContext.current = renderContext;\n        const params = {\n          firstRowIndex: renderContext.firstRowIndex,\n          lastRowIndex: renderContext.lastRowIndex,\n        };\n      }\n    });\n  }, [apiRef]);\n\n  <DataGridPro apiRef={apiRef} />;\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Removed props",
              "introduction": [
                "Removed props\n\n- Some event listeners and DOM attributes were removed from `GridCell` and `GridRow` to improve performance.\n\n  The following props were removed.\n\n  - `onCellBlur`\n  - `onCellOver`\n  - `onCellOut`\n  - `onCellEnter`\n  - `onCellLeave`\n  - `onRowOver`\n  - `onRowOut`\n  - `onRowEnter`\n  - `onRowLeave`\n\n  If you depend on them, you can use `componentsProps.row` and `componentsProps.cell` to pass custom props to the row or cell.\n  For more information, check [this page](/x/react-data-grid/components/#row). Example:\n\n  ```diff\n  -<DataGrid onRowOver={handleRowOver} />;\n  +<DataGrid\n  +  componentsProps={{\n  +    row: { onMouseOver: handleRowOver },\n  +  }}\n  +/>;\n  ```\n\n  The `data-rowindex` and `data-rowselected` attributes were removed from the cell element. Equivalent attributes can be found in the row element.\n\n  The `data-editable` attribute was removed from the cell element. Use the `.MuiDataGrid-cell--editable` CSS class.\n\n  The `data-mode` attribute was removed from the cell element. Use the `.MuiDataGrid-cell--editing` CSS class."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "State access",
              "introduction": [
                "State access\n\n- The state direct access is not considered part of the public API anymore. We only guarantee that the selectors continue to work between minor releases.\n  We advise you to avoid accessing directly a state sub-key, instead use the available selectors or `apiRef` methods whenever possible.\n  You can replace the following state access by their matching selectors:\n\n  | Direct state access     | Selector                           |\n  | : |\n  | `state.rows`            | `gridRowsStateSelector`            |\n  | `state.filter`          | `gridFilterStateSelector`          |\n  | `state.sorting`         | `gridSortingStateSelector`         |\n  | `state.editRows`        | `gridEditRowsStateSelector`        |\n  | `state.pagination`      | `gridPaginationSelector`           |\n  | `state.columns`         | `gridColumnsSelector`              |\n  | `state.columnMenu`      | `gridColumnMenuSelector`           |\n  | `state.focus`           | `gridFocusStateSelector`           |\n  | `state.tabIndex`        | `gridTabIndexStateSelector`        |\n  | `state.selection`       | `gridSelectionStateSelector`       |\n  | `state.preferencePanel` | `gridPreferencePanelStateSelector` |\n  | `state.density`         | `gridDensitySelector`              |\n  | `state.columnReorder`   | `gridColumnReorderSelector`        |\n  | `state.columnResize`    | `gridColumnResizeSelector`         |\n\n- The `apiRef.current.getState` method was removed. You can directly access the state through `apiRef.current.state`\n\n  ```diff\n  -const state = apiRef.current.getState();\n  +const state = apiRef.current.state\n\n   const filterModel = gridFilterModelSelector(state);\n  ```\n\n- The `state` prop was not working correctly and was removed.\n  You can use the new `initialState` prop instead.\n\n  Note that `initialState` only allows the `preferencePanel`, `filter.filterModel` and `sort.sortModel` keys.\n  To fully control the state, use the feature's model prop and change callback (for example `filterModel` and `onFilterModelChange`).\n\n  ```diff\n   <DataGrid\n  -  state={{\n  +  initialState={{\n       preferencePanel: {\n         open: true,\n         openedPanelValue: GridPreferencePanelsValue.filters,\n       },\n     }}\n   />\n  ```\n\n- Some selectors have been renamed to match with our naming convention:\n\n  | MUI X v4 selectors                | MUI X v5 selectors                    |\n  | :-- | : |\n  | `unorderedGridRowIdsSelector`     | `gridRowIdsSelector`                  |\n  | `sortingGridStateSelector`        | `gridSortingStateSelector`            |\n  | `sortedGridRowIdsSelector`        | `gridSortedRowIdsSelector`            |\n  | `filterGridStateSelector`         | `gridFilterModelSelector`             |\n  | `visibleSortedGridRowIdsSelector` | `gridVisibleSortedRowIdsSelector`     |\n  | `visibleGridRowCountSelector`     | `gridVisibleRowCountSelector`         |\n  | `filterGridColumnLookupSelector`  | `gridFilterActiveItemsLookupSelector` |\n  | `densitySelector`                 | `gridDensitySelector`                 |\n\n- Some selectors have been removed/reworked\n\n  1. `sortedGridRowsSelector` was removed. You can use `gridSortedRowEntriesSelector` instead.\n\n  The return format has changed:\n\n  ```diff\n  -sortedGridRowsSelector: (state: GridState) => Map<GridRowId, GridRowModel>\n  +gridSortedRowEntriesSelector: (state: GridState) => GridRowEntry[]\n  ```\n\n  If you need the old format, you can convert the selector return value as follows:\n\n  ```diff\n  -const map = sortedGridRowsSelector(state);\n  +const map = new Map(gridSortedRowEntriesSelector(state).map(row => [row.id, row.model]));\n  ```\n\n  2. `filterGridItemsCounterSelector` was removed. You can use `gridFilterActiveItemsSelector`\n\n  ```diff\n  -const filterCount = filterGridItemsCounterSelector(state);\n  +const filterCount = gridFilterActiveItemsSelector(state).length;\n  ```\n\n  3. `unorderedGridRowModelsSelector` was removed. You can use `apiRef.current.getRowModels` or `gridRowIdsSelector` and `gridRowsLookupSelector`\n\n  ```diff\n  -const rowModels = unorderedGridRowModelsSelector(apiRef.current.state);\n\n   // using the `apiRef`\n  +const rowModels = apiRef.current.getRowModels();\n\n   // using selectors\n  +const allRows = gridRowIdsSelector(apiRef.current.state);\n  +const idRowsLookup = gridRowsLookupSelector(apiRef.current.state);\n  +const rowModels = new Map(allRows.map((id) => [id, idRowsLookup[id]]));\n  ```\n\n  4. The `visibleSortedGridRowsSelector` was removed. You can use `gridVisibleSortedRowEntriesSelector`\n\n  The return format has changed:\n\n  ```diff\n  -visibleSortedGridRowsSelector: (state: GridState) => Map<GridRowId, GridRowModel>;\n  +gridVisibleSortedRowEntriesSelector: (state: GridState) => GridRowEntry[];\n  ```\n\n  If you need the old format, you can convert the selector return value as follows:\n\n  ```diff\n  -const map = visibleSortedGridRowsSelector(state);\n  +const map = new Map(gridVisibleSortedRowEntriesSelector(state).map(row => [row.id, row.model]));\n  ```\n\n  5. The `visibleSortedGridRowsAsArraySelector` was removed. You can use `gridVisibleSortedRowEntriesSelector`\n\n  The return format has changed:\n\n  ```diff\n  -visibleSortedGridRowsAsArraySelector: (state: GridState) => [GridRowId, GridRowData][];\n  +gridVisibleSortedRowEntriesSelector: (state: GridState) => GridRowEntry[];\n  ```\n\n  If you need the old format, you can convert the selector return value as follows:\n\n  ```diff\n  -const rows = visibleSortedGridRowsAsArraySelector(state);\n  +const rows = gridVisibleSortedRowEntriesSelector(state).map(row => [row.id, row.model]);\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "`apiRef` methods",
              "introduction": [
                "`apiRef` methods\n\n- The `apiRef` methods to partially update the filter model have been renamed:\n\n  1. `apiRef.current.applyFilterLinkOperator` was renamed to `apiRef.current.setFilterLinkOperator`\n  2. `apiRef.current.upsertFilter` was renamed to `apiRef.current.upsertFilterItem`\n  3. `apiRef.current.deleteFilter` was renamed to `apiRef.current.deleteFilterItem`\n\n- The third argument in `apiRef.current.selectRow` is now inverted to keep consistency with other selection APIs.\n\n  If you were passing `allowMultiple: true`, you should now pass `resetSelection: false` or stop passing anything.\n\n  If you were passing `allowMultiple: false` or not passing anything on `allowMultiple`, you should now pass `resetSelection: true`.\n\n  ```diff\n  -selectRow: (id: GridRowId, isSelected?: boolean, allowMultiple?: boolean = false) => void;\n  +selectRow: (id: GridRowId, isSelected?: boolean, resetSelection?: boolean = false) => void;\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Columns",
              "introduction": [
                "Columns\n\n- The params passed to the `valueFormatter` were changed.\n\n  You can use the `api` to get the missing params.\n  The `GridValueFormatterParams` interface has the following signature now:\n\n  ```diff\n  -export type GridValueFormatterParams = Omit<GridRenderCellParams, 'formattedValue' | 'isEditable'>;\n  +export interface GridValueFormatterParams {\n  +  /**\n  +   * The column field of the cell that triggered the event.\n  +   */\n  +  field: string;\n  +  /**\n  +   * The cell value, but if the column has valueGetter, use getValue.\n  +   */\n  +  value: GridCellValue;\n  +  /**\n  +   * GridApi that lets you manipulate the Data Grid.\n  +   */\n  +  api: any;\n  +}\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Other exports",
              "introduction": [
                "Other exports\n\n- The `gridCheckboxSelectionColDef` was renamed to `GRID_CHECKBOX_SELECTION_COL_DEF`.\n\n- The individual string constants have been removed in favor of a single `gridClasses` object\n\n  ```diff\n  -const columnHeaderClass = GRID_COLUMN_HEADER_CSS_CLASS;\n  +const columnHeaderClass = gridClasses.columnHeader;\n\n  -const rowClass = GRID_ROW_CSS_CLASS;\n  +const rowClass = gridClasses.row;\n\n  -const cellClass = GRID_CELL_CSS_CLASS;\n  +const cellClass = gridClasses.cell;\n\n  -const columnSeparatorClass = GRID_COLUMN_HEADER_SEPARATOR_RESIZABLE_CSS_CLASS;\n  +const columnSeparatorClass = gridClasses['columnSeparator--resizable'];\n\n  -const columnHeaderTitleClass = GRID_COLUMN_HEADER_TITLE_CSS_CLASS;\n  +const columnHeaderTitleClass = gridClasses.columnHeaderTitle;\n\n  -const columnHeaderDropZoneClass = GRID_COLUMN_HEADER_DROP_ZONE_CSS_CLASS;\n  +const columnHeaderDropZoneClass = gridClasses.columnHeaderDropZone;\n\n  -const columnHeaderDraggingClass = GRID_COLUMN_HEADER_DRAGGING_CSS_CLASS;\n  +const columnHeaderDraggingClass = gridClasses['columnHeader--dragging'];\n  ```\n\n- The constants referring to the column types were removed.\n  Their values can be hardcoded.\n\n  ```diff\n  -const isColumnString = column.type === GRID_STRING_COLUMN_TYPE;\n  +const isColumnString = col.type === 'string';\n\n  -const isColumnNumber = col.type === GRID_NUMBER_COLUMN_TYPE;\n  +const isColumnNumber = col.type === 'number';\n\n  -const isColumnDate = col.type === GRID_DATE_COLUMN_TYPE;\n  +const isColumnDate = col.type === 'date';\n\n  -const isColumnDateTime = col.type === GRID_DATETIME_COLUMN_TYPE;\n  +const isColumnDateTime = col.type === 'dateTime';\n\n  -const isColumnBoolean = col.type === GRID_BOOLEAN_COLUMN_TYPE;\n  +const isColumnBoolean = col.type === 'boolean';\n  ```\n\n- The hook `useGridSlotComponentProps` was removed.\n  You can use the following hooks to access the same data.\n\n  ```diff\n  -const { apiRef, state, rootElement, options } = useGridSlotComponentProps();\n  +const apiRef = useGridApiContext();\n  +const [state] = useGridState(apiRef);\n  +const rootElement = apiRef.current.rootElementRef;\n  +const rootProps = useGridRootProps(); // equivalent of `options`\n  ```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Removals from the public API",
              "introduction": [
                "Removals from the public API\n\nWe removed some API methods/selectors from what we consider public by adding the `unstable_` prefix on them.\nYou can continue to use these methods if you desire, but they may be subject to breaking changes in the future without prior notice.\n\n1. `apiRef.current.applyFilters` was renamed `apiRef.current.unstable_applyFilters`\n2. `gridContainerSizesSelector` was renamed `unstable_gridContainerSizesSelector`\n3. `gridViewportSizesSelector` was renamed `unstable_gridViewportSizesSelector`\n4. `gridScrollBarSizeSelector` was renamed `unstable_gridScrollBarSizeSelector`"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "migration->migration-charts-v6",
      "introduction": [
        "# Migration from v6 to v7\n\n<p class=\"description\">This guide describes the changes needed to migrate Charts from v6 to v7.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference guide for upgrading `@mui/x-charts` from v6 to v7.\nThe change between v6 and v7 is mostly here to match the version with other MUI X packages.\nNo big breaking changes are expected."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Start using the new release",
          "introduction": [
            "Start using the new release\n\nIn `package.json`, change the version of the charts package to `^7.0.0`.\n\n```diff\n-\"@mui/x-charts\": \"^6.0.0\",\n+\"@mui/x-charts\": \"^7.0.0\",\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Update `@mui/material` package",
          "introduction": [
            "Update `@mui/material` package\n\nTo have the option of using the latest API from `@mui/material`, the package peer dependency version has been updated to `^5.15.14`.\nIt is a change in minor version only, so it should not cause any breaking changes.\nPlease update your `@mui/material` package to this or a newer version."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Breaking changes",
          "introduction": [
            "Breaking changes\n\nSince `v7` is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Drop the legacy bundle",
              "introduction": [
                "Drop the legacy bundle\n\nThe support for IE 11 has been removed from all MUI X packages.\nThe `legacy` bundle that used to support old browsers like IE 11 is no longer included.\n\n:::info\nIf you need support for IE 11, you will need to keep using the latest version of the `v6` release.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Drop webpack 4 support",
              "introduction": [
                "Drop webpack 4 support\n\nDropping old browsers support also means that we no longer transpile some features that are natively supported by modern browsers – like [Nullish Coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) and [Optional Chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining).\n\nThese features are not supported by webpack 4, so if you are using webpack 4, you will need to transpile these features yourself or upgrade to webpack 5.\n\nHere is an example of how you can transpile these features on webpack 4 using the `@babel/preset-env` preset:\n\n```diff\n // webpack.config.js\n\n module.exports = (env) => ({\n   // ...\n   module: {\n     rules: [\n       {\n         test: /\\.[jt]sx?$/,\n-        exclude: /node_modules/,\n+        exclude: [\n+          {\n+            test: path.resolve(__dirname, 'node_modules'),\n+            exclude: [path.resolve(__dirname, 'node_modules/@mui/x-charts')],\n+          },\n+        ],\n       },\n     ],\n   },\n });\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Renaming",
              "introduction": [
                "Renaming"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Types",
                  "introduction": [
                    "Types\n\nSome types have been renamed for coherence:\n\n| v6                                | v7                       |\n| :-- | :----- |\n| `ChartsTooltipSlotComponentProps` | `ChartsTooltipSlotProps` |\n| `ChartsTooltipSlotsComponent`     | `ChartsTooltipSlots`     |"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Props",
                  "introduction": [
                    "Props\n\nThe Pie Chart `onClick` prop has been renamed `onItemClick` for consistency with other components.\nThe behavior of this prop remains the same."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Animation",
              "introduction": [
                "Animation\n\nThe Line Chart now have animation by default.\nYou can disable it with `skipAnimation` prop.\nSee [animation documentation](/x/react-charts/lines/#animation) for more information."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "migration->migration-charts-v7",
      "introduction": [
        "# Migration from v7 to v8\n\n<p class=\"description\">This guide describes the changes needed to migrate Charts from v7 to v8.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference guide for upgrading `@mui/x-charts` from v7 to v8.\nThe change between v7 and v8 is mostly here to match the version with other MUI X packages.\nNo big breaking changes are expected."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Start using the new release",
          "introduction": [
            "Start using the new release\n\nIn `package.json`, change the version of the charts package to `next`.\n\n```diff\n-\"@mui/x-charts\": \"^7.0.0\",\n+\"@mui/x-charts\": \"next\",\n\n-\"@mui/x-charts-pro\": \"^7.0.0\",\n+\"@mui/x-charts-pro\": \"next\",\n```\n\nUsing `next` ensures that it will always use the latest v8 pre-release version, but you can also use a fixed version, like `8.0.0-alpha.0`."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Breaking changes",
          "introduction": [
            "Breaking changes\n\nSince v8 is a major release, it contains some changes that affect the public API.\nThese changes were done for consistency, improve stability and make room for new features.\nBelow are described the steps you need to make to migrate from v7 to v8."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Run codemods",
          "introduction": [
            "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v8. You can run `v8.0.0/charts/preset-safe` targeting only Charts or `v8.0.0/preset-safe` to target the other packages as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n<!-- #default-branch-switch -->\n\n```bash\n# Charts-specific\nnpx @mui/x-codemod@latest v8.0.0/charts/preset-safe <path>\n\n# Target the other packages as well\nnpx @mui/x-codemod@latest v8.0.0/preset-safe <path>\n```\n\n:::info\nIf you want to run the transformers one by one, check out the transformers included in the [preset-safe codemod for the Charts](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/README.md#preset-safe-for-charts-v800) for more details.\n:::\n\nBreaking changes that are handled by this codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen.\n\nIf you have already applied the `v8.0.0/charts/preset-safe` (or `v8.0.0/preset-safe`) codemod, then you should not need to take any further action on these items.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading or cross-file dependencies, the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<PieChart {...chartProps} /> // The codemod will not modify the content of `chartProps`.\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Series properties renaming",
          "introduction": [
            "Series properties renaming\n\nSome properties were deprecated in v7 in favor of a more consistent naming convention.\nThose deprecated properties have been removed in v8.\n\nThe impacted properties are:\n\n- The `xAxisKey`, `yAxisKey`, and `zAxisKey` have been renamed `xAxisId`, `yAxisId`, and `zAxisId`.\n- The `highlighted` and `faded` properties of `series.highlightScope` have been renamed `highlight` and `fade`."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Legend props propagation ✅",
          "introduction": [
            "Legend props propagation ✅\n\nThe `legend` prop of charts single components has been removed.\nTo pass props to the legend, use the `slotProps.legend`.\n\n```diff\n-<PieChart legend={{ ... }} />\n+<PieChart slotProps={{ legend: { ... } }} />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Legend direction value change ✅",
          "introduction": [
            "Legend direction value change ✅\n\nThe `direction` prop of the legend has been changed to accept `'vertical'` and `'horizontal'` instead of `'column'` and `'row'`.\n\n```diff\n <PieChart\n   slotProps={{\n     legend: {\n-      direction: 'column'\n+      direction: 'vertical'\n     }\n   }}\n />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "The `getSeriesToDisplay` function was removed",
          "introduction": [
            "The `getSeriesToDisplay` function was removed\n\nThe `getSeriesToDisplay` function was removed in favor of the `useLegend` hook. You can check the [HTML Components example](/x/react-charts/components/#html-components) for usage information."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Removing ResponsiveChartContainer ✅",
          "introduction": [
            "Removing ResponsiveChartContainer ✅\n\nThe `ResponsiveChartContainer` has been removed.\nYou can now use `ChartContainer` as a responsive container which works now exactly the same way.\n\n```diff\n-import { ResponsiveChartContainer } from '@mui/x-charts/ResponsiveChartContainer';\n-import { ResponsiveChartContainerPro } from '@mui/x-charts-pro/ResponsiveChartContainerPro';\n+import { ChartContainer } from '@mui/x-charts/ResponsiveChartContainer';\n+import { ChartContainerPro } from '@mui/x-charts-pro/ResponsiveChartContainerPro';\n\n-<ResponsiveChartContainer>\n+<ChartContainer>\n   <BarPlot />\n-</ResponsiveChartContainer>\n+</ChartContainer>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "New DOM structure for ChartContainer",
          "introduction": [
            "New DOM structure for ChartContainer\n\nThe `<ChartContainer />` now wraps the `svg` component into a `div`.\n\nThis change should not impact your codebase except for some CSS selector edge cases."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Remove Pie Chart axes",
          "introduction": [
            "Remove Pie Chart axes\n\nThe `<PieChart />` by error had the code to render axes.\nThis code has been removed in v8, which implies removing the following props: `axisHighlight`, `topAxis`, `rightAxis`, `bottomAxis`, and `leftAxis`.\n\nThis should not impact your code.\nIf you used axes in a pie chart please open an issue, we would be curious to get more information about the use case."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Remove `resolveSizeBeforeRender` prop",
          "introduction": [
            "Remove `resolveSizeBeforeRender` prop\n\nThe `resolveSizeBeforeRender` prop has been removed from all components.\nIf you were using this prop, you can safely remove it."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Rename `labelFontSize` and `tickFontSize` props ✅",
          "introduction": [
            "Rename `labelFontSize` and `tickFontSize` props ✅\n\nThe `labelFontSize` and `tickFontSize` props have been removed in favor of the style objects `labelStyle` and `tickStyle` respectively.\n\n```diff\n  <ChartsXAxis\n-   labelFontSize={18}\n+   labelStyle={{\n+     fontSize: 18\n+   }}\n-   tickFontSize={20}\n+   tickStyle={{\n+     fontSize: 20\n+   }}\n  />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "migration->migration-pickers-lab",
      "introduction": [
        "# Migration from the lab\n\n<p class=\"description\">Material UI Date and Time Pickers are now available on MUI X!</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Introduction",
          "introduction": [
            "Introduction\n\nThis is a reference for migrating your site's pickers from `@mui/lab` to `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`.\nThis migration is about the npm packages used, it **does not** affect the behavior of the components in your application.\nYou can find why we are moving in this direction in the [announcement blog post](/blog/lab-date-pickers-to-mui-x/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "License",
          "introduction": [
            "License\n\nMost of our components remains MIT and are accessible for free in `@mui/x-date-pickers`.\n\nThe range-picker components: `DateRangePicker`, `DateRangePickerDay`, `DesktopDateRangePicker`, `MobileDateRangePicker` and `StaticDateRangePicker`\nwere marked as \"intended for MUI X Pro\" in our documentation and are now part of MUI X Pro.\n\nIf you are using one of these components, you will have to take a Pro license in order to migrate to `@mui/x-date-pickers-pro` (see the [Pricing](https://mui.com/pricing/) page for more information).\n\n:::info\nIf you already have a license for `@mui/x-data-grid-pro`, you can use the same one for `@mui/x-date-pickers-pro` with no additional fee!\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Migration steps",
          "introduction": [
            "Migration steps"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "1. Install MUI X packages",
              "introduction": [
                "1. Install MUI X packages"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Community plan",
                  "introduction": [
                    "Community plan\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/x-date-pickers\n```\n\n```bash pnpm\npnpm add @mui/x-date-pickers\n```\n\n```bash yarn\nyarn add @mui/x-date-pickers\n```\n\n</codeblock>"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Pro plan",
                  "introduction": [
                    "Pro plan\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/x-date-pickers-pro @mui/x-license-pro\n```\n\n```bash pnpm\npnpm add @mui/x-date-pickers-pro @mui/x-license-pro\n```\n\n```bash yarn\nyarn add @mui/x-date-pickers-pro @mui/x-license-pro\n```\n\n</codeblock>\n\nWhen you purchase a commercial license, you'll receive a license key by email.\nYou must set the license key before rendering the first component.\n\n```jsx\nimport { LicenseInfo } from '@mui/x-license-pro';\n\nLicenseInfo.setLicenseKey('YOUR_LICENSE_KEY');\n```\n\nLearn more on [the Licensing page](/x/introduction/licensing/#license-key)."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "2. Run the code mod",
              "introduction": [
                "2. Run the code mod\n\nWe have prepared a codemod to help you migrate your codebase.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n```bash\nnpx @mui/codemod v5.0.0/date-pickers-moved-to-x <path>\n```\n\nWhich will transform the imports like this:\n\n```diff\n-import DatePicker from '@mui/lab/DatePicker';\n+import { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n-import DateRangePicker from '@mui/lab/DateRangePicker';\n+import { DateRangePicker } from '@mui/x-date-pickers-pro/DateRangePicker';\n\n-import { DatePicker, DateRangePicker } from '@mui/lab';\n+import { DatePicker } from '@mui/x-date-pickers'; // DatePicker is also available in `@mui/x-date-pickers-pro`\n+import { DateRangePicker } from '@mui/x-date-pickers-pro';\n```\n\nComponents of the Community plan such as `<DatePicker />` can be imported from both `@mui/x-date-pickers-pro` and `@mui/x-date-pickers`.\n[Date adapters](/x/react-date-pickers/getting-started/#installation) such as `AdapterDayjs` can only be imported from `@mui/x-date-pickers/[adapterName]`."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "3. Handle breaking changes introduced in alpha",
              "introduction": [
                "3. Handle breaking changes introduced in alpha\n\nDuring the migration from `@mui/lab` to MUI X, we've focused on enhancing stability and developer experience.\nSome APIs were improved to be more coherent and customizable.\n\nPlease check the complete list of the API changes before migrating from `@mui/x-date-pickers` 5.0.0-alpha.0 to the last v5.0.0."
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Props renaming",
                  "introduction": [
                    "Props renaming\n\nThe `disableCloseOnSelect` prop has been replaced by a new `closeOnSelect` prop which has the opposite behavior.\nThe default behavior remains the same (close after the last step on desktop but not on mobile).\n\n```diff\n // If you don't want to close after the last step\n-<DatePicker disableCloseOnSelect={false} />\n+<DatePicker closeOnSelect />\n\n // If you want to close after the last step\n-<DatePicker disableCloseOnSelect />\n+<DatePicker closeOnSelect={false} />\n```\n\nThe props of `MonthPicker`, `YearPicker` and `DayPicker` have been reworked to make them more consistent for a standalone usage.\n\n- **MonthPicker**: The prop `onMonthChange` has been removed, you can use `onChange` instead since every change is a month change.\n- **YearPicker**: The prop `onYearChange` has been removed, you can use `onChange` instead since every change is a year change.\n- **DayPicker**: The prop `isDateDisabled` has been removed, you can now use the same validation props as for the other components (`maxDate`, `minDate`, `shouldDisableDate`, `disableFuture` and `disablePast`)."
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Translation",
                  "introduction": [
                    "Translation\n\nProps for translation have been either deprecated or removed in favor of a [global localization](/x/react-date-pickers/localization/) similar to the one used by the Data Grid.\nWe already have ten locales provided by the community. (Thank you!)"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Use slot for `ActionBar`",
                  "introduction": [
                    "Use slot for `ActionBar`\n\nThe props related to the action bar buttons (`clearable`, `showTodayButton`, `cancelText`, `okText`) have been removed.\n\nTo decide which button must be displayed and in which order, you can now use the `actions` prop of the `actionBar` component slot props.\n\n```jsx\n<DatePicker\n  componentsProps={{\n    // The actions will be the same between desktop and mobile\n    actionBar: {\n      actions: ['clear'],\n    },\n    // The actions will be different between desktop and mobile\n    actionBar: ({ wrapperVariant }) => ({\n      actions: wrapperVariant === 'desktop' ? [] : ['clear'],\n    }),\n  }}\n/>\n```\n\nThe build-in `ActionBar` component supports 4 different actions: `'clear'`, `'cancel'`, `'accept'`, and `'today'`.\nBy default, the pickers will render the cancel and accept button on mobile and no action on desktop.\n\nIf you need other actions, you can provide your own component to the `ActionBar` component slot\n\n```jsx\n<DatePicker components={{ ActionBar: CustomActionBar }} />\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "data-grid->demo",
      "introduction": [
        "# Data Grid Demo\n\n<p class=\"description\">Explore all of the Data Grid features and understand which plan they're available in.</p>\n\n:::info\nNote that this demo itself uses the Data Grid with features such as filtering, sorting, and grouping!\n:::"
      ],
      "code_path": [
        "PopularFeaturesDemo.js"
      ],
      "children": [
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->row-spanning",
      "introduction": [
        "# Data Grid - Row spanning 🧪\n\n<p class=\"description\">Span cells across several rows.</p>\n\nBy default, each cell in a Data Grid takes up the height of one row.\nThe row spanning feature makes it possible for a cell to fill multiple rows in a single column.\n\nTo enable, pass the `rowSpanning` prop to the Data Grid.\nThe Data Grid will automatically merge consecutive cells with repeating values in the same column, as shown in the demo below—switch off the toggle button to see the actual rows:",
        ":::info\nIn this demo, the `quantity` column has been deliberately excluded from the row spanning computation using the `colDef.rowSpanValueGetter` prop.\n\nSee the [Customizing row-spanning cells](#customizing-row-spanning-cells) section for more details.\n:::\n\n:::warning\nRow spanning works by increasing the height of the spanned cell by a factor of `rowHeight`—it won't work properly with a variable or dynamic height.\n:::"
      ],
      "code_path": [
        "RowSpanning.js",
        null
      ],
      "children": [
        {
          "name": "Customizing row-spanning cells",
          "introduction": [
            "Customizing row-spanning cells\n\nYou can customize how row spanning works using two props:\n\n- `colDef.rowSpanValueGetter`: Controls which values are used for row spanning\n- `colDef.valueGetter`: Controls both the row spanning logic and the cell value\n\nThis lets you prevent unwanted row spanning when there are repeating values that shouldn't be merged.\n\nIn the following example, `rowSpanValueGetter` is used to avoid merging `age` cells that don't belong to the same person."
          ],
          "code_path": [
            "RowSpanningCustom.js"
          ],
          "children": []
        },
        {
          "name": "Usage with column spanning",
          "introduction": [
            "Usage with column spanning\n\nRow spanning can be used in conjunction with column spanning to create cells that span multiple rows and columns simultaneously, as shown in the demo below:",
            ":::warning\nRow spanning works well with features like [sorting](/x/react-data-grid/sorting/) and [filtering](/x/react-data-grid/filtering/), but be sure to check that everything works as expected when using it with [column spanning](/x/react-data-grid/column-spanning/).\n:::"
          ],
          "code_path": [
            "RowSpanningClassSchedule.js",
            null
          ],
          "children": []
        },
        {
          "name": "Demo",
          "introduction": [
            "Demo\n\nThe demo below recreates the calendar from the [column spanning documentation](/x/react-data-grid/column-spanning/#function-signature) using the row spanning feature:"
          ],
          "code_path": [
            "RowSpanningCalendar.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->row-recipes",
      "introduction": [
        "# Data Grid - Row customization recipes\n\n<p class=\"description\">Advanced row customization recipes.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "One expanded detail panel at a time",
          "introduction": [
            "One expanded detail panel at a time\n\nBy default, the [Master detail <span class=\"plan-pro\" />](/x/react-data-grid/master-detail/) feature supports multiple expanded detail panels simultaneously.\n\nHowever, you can [control the expanded detail panels](/x/react-data-grid/master-detail/#controlling-expanded-detail-panels) to have only one detail panel expanded at a time."
          ],
          "code_path": [
            "DetailPanelOneExpandedRow.js"
          ],
          "children": []
        },
        {
          "name": "Expand or collapse all detail panels",
          "introduction": [
            "Expand or collapse all detail panels\n\nThe following demo shows how to create a custom header element that expands or collapses all detail panels at once.\n\nHere's how it works:\n\nThe custom header uses `gridRowsLookupSelector` to find all rows with a detail panel.\nIt checks the status of open panels using the [`useGridSelector` hook](/x/react-data-grid/state/#with-usegridselector) to access the grid's state.\nWhen clicked, it uses [`setExpandedDetailPanels`](/x/api/data-grid/grid-api/#grid-api-prop-setExpandedDetailPanels) from the [Grid API](/x/react-data-grid/api-object/#how-to-use-the-api-object) to expand or collapse all detail panels."
          ],
          "code_path": [
            "DetailPanelExpandCollapseAll.js"
          ],
          "children": []
        },
        {
          "name": "Toggling detail panels on row click",
          "introduction": [
            "Toggling detail panels on row click\n\nIn the demo below, you can toggle the detail panel by clicking anywhere on the row:"
          ],
          "code_path": [
            "DetailPanelExpandOnRowClick.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->aggregation",
      "introduction": [
        "# Data Grid - Aggregation [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\n<p class=\"description\">Add aggregation functions to the Data Grid so users can combine row values.</p>\n\nYou can aggregate rows through the Data Grid interface by opening the column menu and selecting from the items under **Aggregation**.\n\nThe aggregated values are rendered in a footer row at the bottom of the Data Grid.",
        ":::info\nIf you're looking for aggregation on the server side, see [Server-side data—Aggregation](/x/react-data-grid/server-side-data/aggregation/).\n:::"
      ],
      "code_path": [
        "AggregationInitialState.js",
        null
      ],
      "children": [
        {
          "name": "Pass aggregation to the Data Grid",
          "introduction": [
            "Pass aggregation to the Data Grid"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Structure of the model",
              "introduction": [
                "Structure of the model\n\nThe aggregation model is an object.\nThe keys correspond to the columns, and the values are the name of the aggregation functions to use."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Initialize aggregation",
              "introduction": [
                "Initialize aggregation\n\nTo initialize aggregation without controlling its state, provide the model to the `initialState` prop."
              ],
              "code_path": [
                "AggregationInitialState.js"
              ],
              "children": []
            },
            {
              "name": "Controlled aggregation",
              "introduction": [
                "Controlled aggregation\n\nUse the `aggregationModel` prop to control aggregation passed to the Data Grid.\n\nUse the `onAggregationModelChange` prop to listen to changes to aggregation and update the prop accordingly."
              ],
              "code_path": [
                "AggregationControlled.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Disable aggregation",
          "introduction": [
            "Disable aggregation"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "For all columns",
              "introduction": [
                "For all columns\n\nTo disable aggregation, set the `disableAggregation` prop to `true`.\nThis will disable all features related to aggregation, even if a model is provided."
              ],
              "code_path": [
                "AggregationDisabled.js"
              ],
              "children": []
            },
            {
              "name": "For some columns",
              "introduction": [
                "For some columns\n\nTo disable aggregation on a specific column, set the `aggregable` property on its column definition (`GridColDef`) to `false`.\n\nIn the example below, the **Year** column is not aggregable since its `aggregable` property is set to `false`."
              ],
              "code_path": [
                "AggregationColDefAggregable.js"
              ],
              "children": []
            },
            {
              "name": "Aggregating non-aggregable columns programmatically",
              "introduction": [
                "Aggregating non-aggregable columns programmatically\n\nTo apply aggregation programmatically on non-aggregable columns (columns with `aggregable: false` in the [column definition](/x/api/data-grid/grid-col-def/)), you can provide aggregation model in one of the following ways:\n\n1. Pass `aggregation.model` to the `initialState` prop. This will [initialize the aggregation](/x/react-data-grid/aggregation/#initialize-aggregation) with the provided model.\n2. Provide the `aggregationModel` prop. This will [control the aggregation](/x/react-data-grid/aggregation/#controlled-aggregation) with the provided model.\n3. Call the API method `setAggregationModel`. This will set the aggregation with the provided model.\n\nIn the demo below, although the **Year** column is not aggregable, yet it's aggregated in a read-only mode by providing an initial aggregation model."
              ],
              "code_path": [
                "AggregationColDefNonAggregable.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Usage with row grouping",
          "introduction": [
            "Usage with row grouping\n\nWhen row grouping is enabled, the aggregated values will be displayed in two places:\n\n1. On the grouping rows—the Data Grid will display each group aggregated value on its grouping row.\n2. On the top-level footer—the Data Grid will add a top-level footer to aggregate all the rows, as it would with a flat row list.",
            "Use the `getAggregationPosition` prop to customize this behavior.\nThis function takes the current group node as an argument (`null` for the root group) and returns the position of the aggregated value.\nThis position must be one of the three following values:\n\n1. `\"footer\"`—the Data Grid adds a footer to the group to aggregate its rows.\n2. `\"inline\"`—the Data Grid disables aggregation on the grouping row.\n3. `null`—the Data Grid doesn't aggregate the group.\n\n```tsx\n// Will aggregate the root group on the top-level footer and the other groups on their grouping row\n// (default behavior)\ngetAggregationPosition=(groupNode) => (groupNode == null ? 'footer' : 'inline'),\n\n// Will aggregate all the groups on their grouping row\n// The root will not be aggregated\ngetAggregationPosition={(groupNode) => groupNode == null ? null : 'inline'}\n\n// Will only aggregate the company groups on the grouping row\n// Director groups and the root will not be aggregated\ngetAggregationPosition={(groupNode) => groupNode?.groupingField === 'company' ? 'inline' : null}\n\n// Will only aggregate the company group \"Universal Pictures\" on the grouping row\ngetAggregationPosition={(groupNode) =>\n(groupNode?.groupingField === 'company' &&\n  groupNode?.groupingKey === 'Universal Pictures') ? 'inline' : null\n}\n\n// Will only aggregate the root group on the top-level footer\ngetAggregationPosition={(groupNode) => groupNode == null ? 'footer' : null}\n```\n\nThe demo below shows the **SUM** aggregation on the footer of each group but not on the top-level footer:"
          ],
          "code_path": [
            "AggregationRowGrouping.js",
            "AggregationGetAggregationPosition.js"
          ],
          "children": []
        },
        {
          "name": "Usage with tree data",
          "introduction": [
            "Usage with tree data\n\nAs with row grouping, you can display the aggregated values either in the footer or in the grouping row.\n\n:::info\nIf the aggregated value is displayed in the grouping row, it always has priority over the row data.\n\nThis means that the data from groups explicitly provided in the dataset are ignored in favor of their aggregated values.\n:::\n\nThe demo below shows the **SUM** aggregation on the **Size** column and the **MAX** aggregation on the **Last modification** column:"
          ],
          "code_path": [
            "AggregationTreeData.js"
          ],
          "children": []
        },
        {
          "name": "Filtering",
          "introduction": [
            "Filtering\n\nBy default, aggregation only uses the filtered rows.\nTo use all rows, set the `aggregationRowsScope` to `\"all\"`.\n\nIn the example below, the movie _Avatar_ doesn't pass the filters but is still used for the **MAX** aggregation of the **Gross** column:"
          ],
          "code_path": [
            "AggregationFiltering.js"
          ],
          "children": []
        },
        {
          "name": "Aggregation functions",
          "introduction": [
            "Aggregation functions"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Basic structure",
              "introduction": [
                "Basic structure\n\nAn aggregation function is an object describing how to combine a given set of values.\n\n```ts\nconst minAgg: GridAggregationFunction<number | Date> = {\n  // Aggregates the `values` into a single value.\n  apply: ({ values }) => Math.min(...values.filter((value) => value != null)),\n  // This aggregation function is only compatible with numerical values.\n  columnTypes: ['number'],\n};\n```\n\nYou can find full typing details on the [GridAggregationFunction API page](/x/api/data-grid/grid-aggregation-function/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Built-in functions",
              "introduction": [
                "Built-in functions\n\nThe `@mui/x-data-grid-premium` package comes with a set of built-in aggregation functions to cover the basic use cases:\n\n| Name   | Behavior                                                   | Supported column types       |\n| : | :--- |\n| `sum`  | Returns the sum of all values in the group                 | `number`                     |\n| `avg`  | Returns the non-rounded average of all values in the group | `number`                     |\n| `min`  | Returns the smallest value of the group                    | `number`, `date`, `dateTime` |\n| `max`  | Returns the largest value of the group                     | `number`, `date`, `dateTime` |\n| `size` | Returns the number of cells in the group                   | all                          |"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove a built-in function",
              "introduction": [
                "Remove a built-in function"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "For all columns",
                  "introduction": [
                    "For all columns\n\nTo remove specific aggregation functions from all columns, pass a filtered object to the `aggregationFunctions` prop.\nIn the example below, the **SUM** function has been removed:"
                  ],
                  "code_path": [
                    "AggregationRemoveFunctionAllColumns.js"
                  ],
                  "children": []
                },
                {
                  "name": "For one column",
                  "introduction": [
                    "For one column\n\nTo limit the aggregation options in a given column, pass the `availableAggregationFunctions` property to the column definition.\n\nThis lets you specify which options will be available, as shown below:\n\n```ts\nconst column = {\n  field: 'year',\n  type: 'number',\n  availableAggregationFunctions: ['max', 'min'],\n};\n```\n\nIn the example below, you can aggregate the **Year** column using the **MAX** and **MIN** functions, whereas all functions are available for the **Gross** column:"
                  ],
                  "code_path": [
                    "AggregationRemoveFunctionOneColumn.js"
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Create custom functions",
              "introduction": [
                "Create custom functions\n\nPass custom aggregation functions to the `aggregationFunctions` prop.\n\nAn aggregation function is an object with the following shape:\n\n```ts\nconst firstAlphabeticalAggregation: GridAggregationFunction<string, string | null> =\n  {\n    // The `apply` method takes the values to aggregate and returns the aggregated value\n    apply: (params) => {\n      if (params.values.length === 0) {\n        return null;\n      }\n\n      const sortedValue = params.values.sort((a = '', b = '') => a.localeCompare(b));\n\n      return sortedValue[0];\n    },\n    // The `label` property defines the label displayed in the column header when this aggregation is being used.\n    label: 'firstAlphabetical',\n    // The `types` property defines which type of columns can use this aggregation function.\n    // Here, we only want to propose this aggregation function for `string` columns.\n    // If not defined, aggregation will be available for all column types.\n    columnTypes: ['string'],\n  };\n```\n\nIn the example below, the Data Grid has two additional custom aggregation functions for `string` columns: `firstAlphabetical` and `lastAlphabetical`:"
              ],
              "code_path": [
                "AggregationCustomFunction.js"
              ],
              "children": []
            },
            {
              "name": "Aggregating data from multiple row fields",
              "introduction": [
                "Aggregating data from multiple row fields\n\nBy default, the `apply` method of the aggregation function receives an array of values that represent a single field value of each row.\nFor example, the `sum` aggregation function receives the values of the `gross` field.\n\nIn the example below, the values in the `profit` column are derived from the `gross` and `budget` fields of the row:\n\n```tsx\n{\n  field: 'profit',\n  type: 'number',\n  valueGetter: (value, row) => {\n    if (!row.gross || !row.budget) {\n      return null;\n    }\n    return (row.gross - row.budget) / row.budget;\n  }\n}\n```\n\nTo aggregate the `profit` column, you have to calculate the sum of the `gross` and `budget` fields separately, and then use the formula from the example above to calculate the aggregated `profit` value.\n\nTo do so, use the `getCellValue` callback on the aggregation function to transform the data that are being passed to the `apply` method:\n\n```tsx\nconst profit: GridAggregationFunction<{ gross: number; budget: number }, number> = {\n  label: 'profit',\n  getCellValue: ({ row }) => ({ budget: row.budget, gross: row.gross }),\n  apply: ({ values }) => {\n    let budget = 0;\n    let gross = 0;\n    values.forEach((value) => {\n      if (value) {\n        gross += value.gross;\n        budget += value.budget;\n      }\n    });\n    return (gross - budget) / budget;\n  },\n  columnTypes: ['number'],\n};\n```"
              ],
              "code_path": [
                "AggregationMultipleRowFields.js"
              ],
              "children": []
            },
            {
              "name": "Custom value formatter",
              "introduction": [
                "Custom value formatter\n\nBy default, the aggregated cell uses the value formatter of its column.\nBut for some columns, the format of the aggregated value may need to differ from the format of the other cell values.\n\nProvide a `valueFormatter` method to the aggregation function to override the column's default formatting:\n\n```ts\nconst aggregationFunction: GridAggregationFunction = {\n  apply: () => {\n    /* */\n  },\n  valueFormatter: (params) => {\n    /* format the aggregated value */\n  },\n};\n```"
              ],
              "code_path": [
                "AggregationValueFormatter.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Custom rendering",
          "introduction": [
            "Custom rendering\n\nIf the column used to display aggregation has a `renderCell` property, the aggregated cell calls it with a `params.aggregation` object to let you decide how you want to render it.\n\nThis object contains a `hasCellUnit` which lets you know if the current aggregation has the same unit as the rest of the column's data—for instance, if the column is in `$`, is the aggregated value is also in `$`?\n\nIn the example below, you can see that all the aggregation functions are rendered with the rating UI aside from `size`, because it's not a valid rating:"
          ],
          "code_path": [
            "AggregationRenderCell.js"
          ],
          "children": []
        },
        {
          "name": "Selectors",
          "introduction": [
            "Selectors\n\n{{\"component\": \"modules/components/SelectorsDocs.js\", \"category\": \"Aggregation\"}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)\n- [GridAggregationFunction](/x/api/data-grid/grid-aggregation-function/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->row-pinning",
      "introduction": [
        "# Data Grid - Row pinning [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Pin rows to keep them visible at all times.</p>\n\nPinned (or frozen, locked, or floating) rows are those visible at all times while the user scrolls the Data Grid vertically.\n\nYou can pin rows at the top or bottom of the Data Grid by passing pinned rows data through the `pinnedRows` prop:\n\n```tsx\nconst pinnedRows: GridPinnedRowsProp = {\n  top: [{ id: 0, brand: 'Nike' }],\n  bottom: [\n    { id: 1, brand: 'Adidas' },\n    { id: 2, brand: 'Puma' },\n  ],\n};\n\n<DataGridPro pinnedRows={pinnedRows} />;\n```\n\nThe data format for pinned rows is the same as for the `rows` prop (see [Feeding data](/x/react-data-grid/row-definition/#feeding-data)).\n\nPinned rows data should also meet [Row identifier](/x/react-data-grid/row-definition/#row-identifier) requirements.",
        ":::warning\nJust like the `rows` prop, `pinnedRows` prop should keep the same reference between two renders.\nOtherwise, the Data Grid will re-apply heavy work like sorting and filtering.\n:::"
      ],
      "code_path": [
        "RowPinning.js",
        null
      ],
      "children": [
        {
          "name": "Controlling pinned rows",
          "introduction": [
            "Controlling pinned rows\n\nYou can control which rows are pinned by changing `pinnedRows`.\n\nIn the demo below we use `actions` column type to add buttons to pin a row either at the top or bottom and change `pinnedRows` prop dynamically."
          ],
          "code_path": [
            "RowPinningWithActions.js"
          ],
          "children": []
        },
        {
          "name": "Usage with other features",
          "introduction": [
            "Usage with other features\n\nPinned rows are not affected by sorting and filtering.\n\nPagination does not impact pinned rows as well - they stay pinned regardless the page number or page size.",
            ":::info\nPinned rows do not support the following features:\n\n- selection\n- row grouping\n- tree data\n- row reordering\n- master detail\n\nbut you can still use these features with the rows that aren't pinned.\n:::"
          ],
          "code_path": [
            "RowPinningWithPagination.js",
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->pagination",
      "introduction": [
        "# Data Grid - Pagination\n\n<p class=\"description\">Easily paginate your rows and only fetch what you need.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Enabling pagination",
          "introduction": [
            "Enabling pagination\n\nThe default pagination behavior depends on your plan:\n\n:::info\nExported CSV and Excel files include all data and disregard pagination by default.\nTo apply pagination to exported files, review the available [row selectors](/x/react-data-grid/export/#exported-rows).\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Community plan",
              "introduction": [
                "Community plan\n\nFor the Community Data Grid, pagination is enabled by default and cannot be disabled."
              ],
              "code_path": [
                "PaginationCommunityNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Pro [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan') and Premium [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')",
              "introduction": [
                "Pro [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan') and Premium [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\nFor the Pro and Premium Data Grid, pagination is disabled by default; use the `pagination` prop to enable it."
              ],
              "code_path": [
                "PageSizeAutoPremium.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Size of the page",
          "introduction": [
            "Size of the page\n\nThe Data Grid (MIT license) is limited to pages of up to 100 rows.\nIf you want larger pages, you will need to upgrade to [Pro plan](/x/introduction/licensing/#pro-plan) or above.\n\nBy default, each page contains 100 rows. The user can change the size of the page through the selector in the footer."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Page size options",
              "introduction": [
                "Page size options\n\nYou can customize the options shown in the \"Rows per page\" select using the `pageSizeOptions` prop.\nYou should provide an array of items, each item should be one of these types:\n\n- **number**, each number will be used for the option's label and value.\n\n  ```jsx\n  <DataGrid pageSizeOptions={[5, 10, 25]}>\n  ```\n\n- **object**, the `value` and `label` keys will be used respectively for the value and label of the option. Define `value` as `-1` to display all results.\n\n  ```jsx\n  <DataGrid pageSizeOptions={[10, 100, { value: 1000, label: '1,000' }, { value: -1, label: 'All' }]}>\n  ```"
              ],
              "code_path": [
                "PageSizeCustomOptions.js"
              ],
              "children": []
            },
            {
              "name": "Automatic page size",
              "introduction": [
                "Automatic page size\n\nUse the `autoPageSize` prop to auto-scale the `pageSize` to match the container height and the max number of rows that can be displayed without a vertical scroll bar.\n\n:::warning\nYou cannot use both the `autoPageSize` and `autoHeight` props at the same time because `autoHeight` scales the height of the Data Grid according to the `pageSize`.\n:::"
              ],
              "code_path": [
                "PageSizeAuto.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Pagination model",
          "introduction": [
            "Pagination model\n\nThe pagination model is an object containing the current page and the size of the page. The default value is `{ page: 0, pageSize: 100 }`. To change the default value, make it controlled by `paginationModel` prop or initialize a custom value using `initialState.pagination.paginationModel`."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Initializing the pagination model",
              "introduction": [
                "Initializing the pagination model\n\nTo initialize the pagination model without controlling it, provide the `paginationModel` to the `initialState` prop. If you don't provide a value for one of the properties, the default value will be used.\n\n```tsx\n<DataGrid\n  initialState={{\n    pagination: {\n      paginationModel: { pageSize: 25, page: 0 },\n    },\n  }}\n/>\n```"
              ],
              "code_path": [
                "PaginationModelInitialState.js"
              ],
              "children": []
            },
            {
              "name": "Controlled pagination model",
              "introduction": [
                "Controlled pagination model\n\nPass the `paginationModel` prop to control the size and current page of the grid. You can use the `onPaginationModelChange` prop to listen to changes to the `paginationModel` and update the prop accordingly.\n\n```tsx\nconst [paginationModel, setPaginationModel] = React.useState({\n  pageSize: 25,\n  page: 0,\n});\n\n<DataGrid\n  paginationModel={paginationModel}\n  onPaginationModelChange={setPaginationModel}\n/>;\n```"
              ],
              "code_path": [
                "PaginationModelControlled.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Server-side pagination",
          "introduction": [
            "Server-side pagination\n\nBy default, the pagination is handled on the client.\nThis means you have to give the rows of all pages to the Data Grid.\nIf your dataset is too big, and you want to fetch the pages on demand, you can use server-side pagination.\n\nIn general, the server-side pagination could be categorized into two types:\n\n- Index-based pagination\n- Cursor-based pagination\n\n:::info\nCheck out [Selection—Usage with server-side pagination](/x/react-data-grid/row-selection/#usage-with-server-side-pagination) for more details.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Index-based pagination",
              "introduction": [
                "Index-based pagination\n\nThe index-based pagination uses the `page` and `pageSize` to fetch the data from the server page by page.\n\nTo enable server-side pagination, you need to:\n\n- Set the `paginationMode` prop to `server`\n- Use the `onPaginationModelChange` prop to react to the page changes and load the data from the server\n\nThe server-side pagination can be further categorized into sub-types based on the availability of the total number of rows or `rowCount`.\n\nThe Data Grid uses the `rowCount` to calculate the number of pages and to show the information about the current state of the pagination in the footer.\nYou can provide the `rowCount` in one of the following ways:\n\n- **Initialize.**\n  Use the `initialState.pagination.rowCount` prop to initialize the `rowCount`.\n- **Control.**\n  Use the `rowCount` prop along with `onRowCountChange` to control the `rowCount` and reflect the changes when the row count is updated.\n- **Set using the API.**\n  Use the `apiRef.current.setRowCount` method to set the `rowCount` after the Grid is initialized.\n\nThere can be three different possibilities regarding the availability of the `rowCount` on the server-side:\n\n1. Row count is available (known)\n2. Row count is not available (unknown)\n3. Row count is available but is not accurate and may update later on (estimated)\n\n:::warning\nThe `rowCount` prop is used in server-side pagination mode to inform the DataGrid about the total number of rows in your dataset.\nThis prop is ignored when the `paginationMode` is set to `client`, that is when the pagination is handled on the client-side.\n:::\n\nYou can configure `rowCount`, `paginationMeta.hasNextPage`, and `estimatedRowCount` props to handle the above scenarios.\n\n|                     | `rowCount` | `paginationMeta.hasNextPage` | `estimatedRowCount` |\n| : | : | : |\n| Known row count     | `number`   | —                            | —                   |\n| Unknown row count   | `-1`       | `boolean`                    | —                   |\n| Estimated row count | `-1`       | `boolean`                    | `number`            |"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Known row count",
                  "introduction": [
                    "Known row count\n\nPass the props to the Data Grid as explained in the table above to handle the case when the actual row count is known, as the following example demonstrates.",
                    ":::warning\nIf the value `rowCount` becomes `undefined` during loading, it will reset the page to zero.\nTo avoid this issue, you can memoize the `rowCount` value to ensure it doesn't change during loading:\n\n```jsx\nconst rowCountRef = React.useRef(pageInfo?.totalRowCount || 0);\n\nconst rowCount = React.useMemo(() => {\n  if (pageInfo?.totalRowCount !== undefined) {\n    rowCountRef.current = pageInfo.totalRowCount;\n  }\n  return rowCountRef.current;\n}, [pageInfo?.totalRowCount]);\n\n<DataGrid rowCount={rowCount} />;\n```\n\n:::"
                  ],
                  "code_path": [
                    "ServerPaginationGrid.js",
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Unknown row count",
                  "introduction": [
                    "Unknown row count\n\nPass the props to the Data Grid as explained in the table above to handle the case when the actual row count is unknown, as the following example demonstrates.",
                    ":::warning\nThe value of the `hasNextPage` variable might become `undefined` during loading if it's handled by some external fetching hook resulting in unwanted computations, one possible solution could be to memoize the `paginationMeta`:\n\n```tsx\nconst paginationMetaRef = React.useRef<GridPaginationMeta>();\n\nconst paginationMeta = React.useMemo(() => {\n  if (\n    hasNextPage !== undefined &&\n    paginationMetaRef.current?.hasNextPage !== hasNextPage\n  ) {\n    paginationMetaRef.current = { hasNextPage };\n  }\n  return paginationMetaRef.current;\n}, [hasNextPage]);\n```\n\n:::"
                  ],
                  "code_path": [
                    "ServerPaginationGridNoRowCount.js",
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Estimated row count",
                  "introduction": [
                    "Estimated row count\n\nEstimated row count could be considered a hybrid approach that switches between the \"Known row count\" and \"Unknown row count\" use cases.\n\nInitially, when an `estimatedRowCount` is set and `rowCount={-1}`, the Data Grid behaves as in the \"Unknown row count\" use case, but with the `estimatedRowCount` value shown in the pagination footer.\n\nIf the number of rows loaded exceeds the `estimatedRowCount`, the Data Grid ignores the `estimatedRowCount` and the behavior is identical to the \"Unknown row count\" use case.\n\nWhen the `hasNextPage` returns `false` or `rowCount` is set to a positive number, the Data Grid switches to the \"Known row count\" behavior.\n\nIn the following example, the actual row count is `1000` but the Data Grid is initially provided with `estimatedRowCount={100}`.\nYou can set the `rowCount` to the actual row count by pressing the \"Set Row Count\" button.",
                    ":::warning\nThe `hasNextPage` must not be set to `false` until there are _actually_ no records left to fetch, because when `hasNextPage` becomes `false`, the Grid considers this as the last page and tries to set the `rowCount` value to a finite value.\n\nIf an external data fetching library sets the values to undefined during loading, you can memoize the `paginationMeta` value to ensure it doesn't change during loading as shown in the \"Unknown row count\" section.\n:::\n\n:::info\n\n🌍 **Localization of the estimated row count**\n\nThe Data Grid uses the [Table Pagination](/material-ui/api/table-pagination/) component from the Material UI library which doesn't support `estimated` row count. Until this is supported natively by the Table Pagination component, a workaround to make the localization work is to provide the `labelDisplayedRows` function to the `localeText.MuiTablePagination` property as per the locale you are interested in.\n\nThe Grid injects an additional variable `estimated` to the `labelDisplayedRows` function which you can use to accommodate the estimated row count.\nThe following example demonstrates how to show the estimated row count in the pagination footer in the Croatian (hr-HR) language.\n\n```jsx\nconst labelDisplayedRows = ({ from, to, count, estimated }) => {\n  if (!estimated) {\n    return `${from}–${to} od ${count !== -1 ? count : `više nego ${to}`}`;\n  }\n  const estimateLabel =\n    estimated && estimated > to ? `oko ${estimated}` : `više nego ${to}`;\n  return `${from}–${to} od ${count !== -1 ? count : estimateLabel}`;\n};\n\n<DataGrid\n  {...data}\n  localeText={{\n    MuiTablePagination: {\n      labelDisplayedRows,\n    },\n  }}\n/>;\n```\n\nFor more information, see the [Translation keys](/x/react-data-grid/localization/#translation-keys) section of the localization documentation.\n\n:::"
                  ],
                  "code_path": [
                    "ServerPaginationGridEstimated.js",
                    null
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Cursor-based pagination",
              "introduction": [
                "Cursor-based pagination\n\nYou can also handle servers with cursor-based pagination.\nTo do so, you just have to keep track of the next cursor associated with each page you fetched."
              ],
              "code_path": [
                "CursorPaginationGrid.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Custom pagination UI",
          "introduction": [
            "Custom pagination UI\n\nYou can customize the rendering of the pagination in the footer following [the component section](/x/react-data-grid/components/#pagination) of the documentation."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "apiRef",
          "introduction": [
            "apiRef\n\nThe Data Grid exposes a set of methods that enables all of these features using the imperative `apiRef`. To know more about how to use it, check the [API Object](/x/react-data-grid/api-object/) section.\n\n:::warning\nOnly use this API as the last option. Give preference to the props to control the Data Grid.\n:::"
          ],
          "code_path": [
            "PaginationApiNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "Selectors",
          "introduction": [
            "Selectors\n\n{{\"component\": \"modules/components/SelectorsDocs.js\", \"category\": \"Pagination\"}}\n\nMore information about the selectors and how to use them on the [dedicated page](/x/react-data-grid/state/#access-the-state)"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->row-ordering",
      "introduction": [
        "# Data Grid - Row ordering [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Drag and drop your rows to reorder them.</p>\n\nRow reordering lets users rearrange rows by dragging the special reordering cell.\n\nBy default, row reordering is disabled.\nTo enable it, you need to add the `rowReordering` prop.\n\n```tsx\n<DataGridPro rowReordering />\n```",
        "To capture changes in the order of the dragged row, you can pass a callback to the `onRowOrderChange` prop. This callback is called with a `GridRowOrderChangeParams` object.\n\nIn addition, you can import the following events to customize the row reordering experience:\n\n- `rowDragStart`: emitted when dragging of a row starts.\n- `rowDragOver`: emitted when dragging a row over another row.\n- `rowDragEnd`: emitted when dragging of a row stops."
      ],
      "code_path": [
        "RowOrderingGrid.js",
        null
      ],
      "children": [
        {
          "name": "Customizing the reorder value",
          "introduction": [
            "Customizing the reorder value\n\nBy default, when you start dragging a row, the `id` is displayed in the draggable box.\nTo change this, you can give a value to the `__reorder__` field for each row.\n\n```tsx\nconst columns: GridColDef[] = [{ field: 'brand' }];\n\nconst rows: GridRowsProp = [\n  { id: 0, brand: 'Nike', __reorder__: 'Nike' },\n  { id: 1, brand: 'Adidas', __reorder__: 'Adidas' },\n  { id: 2, brand: 'Puma', __reorder__: 'Puma' },\n];\n\n<DataGridPro rows={rows} columns={columns} rowReordering />;\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Customizing the row reordering icon",
          "introduction": [
            "Customizing the row reordering icon\n\nTo change the icon used for the row reordering, you can provide a different component for the [icon slot](/x/react-data-grid/components/#icons) as follow:\n\n```tsx\n<DataGridPro\n  slots={{\n    rowReorderIcon: CustomMoveIcon,\n  }}\n/>\n```\n\nAnother way to customize is to add a column with `field: __reorder__` to your set of columns.\nThat way, you can overwrite any of the properties from the `GRID_REORDER_COL_DEF` column.\nThe grid will detect that there is already a reorder column defined and it will not add another one in the default position.\nIf you only set the `field`, then it is up to you to configure the remaining options (for example disable the column menu, filtering, sorting).\nTo start with our suggested configuration, spread `GRID_REORDER_COL_DEF` when defining the column.\n\n```tsx\n<DataGridPro\n  columns={[\n    {\n      ...GRID_REORDER_COL_DEF, // Already contains the right field\n      width: 40,\n    },\n  ]}\n/>\n```\n\nThis approach can also be used to change the location of the toggle column.\n\n:::warning\nFor now, row reordering is disabled if sorting is applied to the Data Grid.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Reordering rows with row grouping 🚧",
          "introduction": [
            "Reordering rows with row grouping 🚧\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\n👍 Upvote [issue #4821](https://github.com/mui/mui-x/issues/4821) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Reordering rows with tree data 🚧",
          "introduction": [
            "Reordering rows with tree data 🚧\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\n👍 Upvote [issue #4821](https://github.com/mui/mui-x/issues/4821) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->pivoting",
      "introduction": [
        "# Data Grid - Pivoting [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')🚧\n\n<p class=\"description\">Turn a column values into columns.</p>\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\n👍 Upvote [issue #214](https://github.com/mui/mui-x/issues/214) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::\n\nPivoting will allow you to take a columns values and turn them into columns."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->virtualization",
      "introduction": [
        "# Data Grid - Virtualization\n\n<p class=\"description\">The grid is high performing thanks to its rows and columns virtualization engine.</p>\n\nDOM virtualization is the feature that allows the Data Grid to handle an unlimited\\* number of rows and columns.\nThis is a built-in feature of the rendering engine and greatly improves rendering performance.\n\n_\\*unlimited: Browsers set a limit on the number of pixels a scroll container can host: 17.5 million pixels on Firefox, 33.5 million pixels on Chrome, Edge, and Safari. A [reproduction](https://codesandbox.io/s/beautiful-silence-1yifo?file=/src/App.js)._"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Row virtualization [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Row virtualization [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nRow virtualization is the insertion and removal of rows as the Data Grid scrolls vertically.\n\nThe grid renders some additional rows above and below the visible rows. You can use `rowBufferPx` prop to hint to the Data Grid the area to render, but this value may not be respected in certain situations, for example during high-speed scrolling.\nRow virtualization is limited to 100 rows in the Data Grid component.\n\n:::warning\nRow virtualization does not work with the `autoHeight` prop enabled.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Column virtualization",
          "introduction": [
            "Column virtualization\n\nColumn virtualization is the insertion and removal of columns as the Data Grid scrolls horizontally.\n\n- Overscanning by at least one column allows the arrow key to focus on the next (not yet visible) item.\n- Overscanning slightly can reduce or prevent a flash of empty space when a user first starts scrolling.\n- Overscanning more allows the built-in search feature of the browser to find more matching cells.\n- Overscanning too much can negatively impact performance.\n\nBy default, columns coming under 150 pixels region are rendered outside of the viewport. You can change this option with the `columnBufferPx` prop. As for `rowBufferPx`, the value may be ignored in some situations. The following demo renders 1,000 columns in total:",
            "You can disable column virtualization by calling `apiRef.current.unstable_setColumnVirtualization(false)`, or by setting the [`columnBufferPx`](/x/api/data-grid/data-grid/#data-grid-prop-columnBufferPx) to a high value.\n\n:::info\nColumn virtualization is disabled when dynamic row height is enabled.\nSee [dynamic row height and column virtualization](/x/react-data-grid/row-height/#column-virtualization) to learn more.\n:::"
          ],
          "code_path": [
            "ColumnVirtualizationGrid.js",
            null
          ],
          "children": []
        },
        {
          "name": "Disable virtualization",
          "introduction": [
            "Disable virtualization\n\nThe virtualization can be disabled completely using the `disableVirtualization` prop.\nYou may want to turn it off to be able to test the Data Grid with a headless browser, like jsdom.\n\n```tsx\n<DataGrid {...data} disableVirtualization />\n```\n\n:::warning\nDisabling the virtualization will increase the size of the DOM and drastically reduce the performance.\nUse it only for testing purposes or on small datasets.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->recipes-editing",
      "introduction": [
        "# Data Grid - Editing recipes\n\n<p class=\"description\">Advanced grid customization recipes.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Multiline editing",
          "introduction": [
            "Multiline editing\n\nYou can have columns with multiline text and edit them by creating a custom edit component.\n\nIn the demo below, the **Bio** column is composed of multiple lines.\nTo persist the changes, use <kbd><kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">Enter</kbd></kbd> (or <kbd><kbd class=\"key\">⌘ Command</kbd>+<kbd class=\"key\">Enter</kbd></kbd> on macOS)."
          ],
          "code_path": [
            "MultilineEditing.js"
          ],
          "children": []
        },
        {
          "name": "Conditional validation",
          "introduction": [
            "Conditional validation\n\nWhen all cells in a row are in edit mode, you can validate fields by comparing their values against one another.\nTo do this, start by adding the `preProcessEditCellProps` as explained in the [validation](/x/react-data-grid/editing/#validation) section.\nWhen the callback is called, it will have an additional `otherFieldsProps` param containing the props from the other fields in the same row.\nUse this param to check if the value from the current column is valid or not.\nReturn the modified `props` containing the error as you would for cell editing.\nOnce at the least one field has the `error` attribute set to a truthy value, the row will not exit edit mode.\n\nThe following demo requires a value for the **Payment method** column only if the **Is paid?** column is checked:"
          ],
          "code_path": [
            "ConditionalValidationGrid.js"
          ],
          "children": []
        },
        {
          "name": "Linked fields",
          "introduction": [
            "Linked fields\n\nThe options available for one field may depend on the value of another field.\nFor instance, if the `singleSelect` column is used, you can provide a function to `valueOptions` returning the relevant options for the value selected in another field, as exemplified below.\n\n```tsx\nconst columns: GridColDef[] = [\n  {\n    field: 'account',\n    type: 'singleSelect',\n    valueOptions: ({ row }) => {\n      if (!row) {\n        // The row is not available when filtering this column\n        return ['Sales', 'Investments', 'Ads', 'Taxes', 'Payroll', 'Utilities'];\n      }\n\n      return row.type === 'Income' // Gets the value of the \"type\" field\n        ? ['Sales', 'Investments', 'Ads']\n        : ['Taxes', 'Payroll', 'Utilities'];\n    },\n  },\n];\n```\n\nThe code above is already enough to display different options in the **Account** column based on the value selected in the **Type** column.\nThe only task left is to reset the account once the type is changed.\nThis is needed because the previously selected account will not exist now in the options.\nTo solve that, you can create a custom edit component, reusing the built-in one, and pass a function to the `onValueChange` prop.\nThis function should call `apiRef.current.setEditCellValue()` to reset the value of the other field.\n\n```tsx\nconst CustomTypeEditComponent = (props: GridEditSingleSelectCellProps) => {\n  const apiRef = useGridApiContext();\n\n  const handleValueChange = async () => {\n    await apiRef.current.setEditCellValue({\n      id: props.id,\n      field: 'account',\n      value: '',\n    });\n  };\n\n  return <GridEditSingleSelectCell onValueChange={handleValueChange} {...props} />;\n};\n```\n\nThe demo below combines the steps showed above.\nYou can experiment it by changing the value of any cell in the **Type** column.\nThe **Account** column is automatically updated with the correct options.",
            ":::warning\nThe call to `apiRef.current.setEditCellValue()` returns a promise that must be awaited.\nFor instance, if the `singleSelect` column type is used, not awaiting will cause the other column to be rendered with a `value` that is not in the options.\n\n```ts\nconst handleChange = async () => {\n  await apiRef.current.setEditCellValue({\n    id: props.id,\n    field: 'account',\n    value: '',\n  });\n};\n```\n\n:::\n\nA similar behavior can be reproduced with cell editing.\nInstead of `apiRef.current.setEditCellValue()`, the `rows` prop must be updated or `apiRef.current.updateRows()` be used.\nNote that the `onCellEditStart` and `onCellEditStop` props also have to be used to revert the value of the cell changed, in case the user cancels the edit."
          ],
          "code_path": [
            "LinkedFieldsRowEditing.js",
            "LinkedFieldsCellEditing.js"
          ],
          "children": []
        },
        {
          "name": "Single click editing",
          "introduction": [
            "Single click editing\n\nBy default, one of the ways to [enter the edit mode](/x/react-data-grid/editing/#start-editing) is by double-clicking a cell.\nUsing the [controlled mode](/x/react-data-grid/editing/#controlled-model) and listening to click events, you can also enter the edit mode with just a single click.\nThe following demo implements this behavior."
          ],
          "code_path": [
            "SingleClickEditing.js"
          ],
          "children": []
        },
        {
          "name": "Bulk editing",
          "introduction": [
            "Bulk editing\n\nThe Data Grid [Editing](/x/react-data-grid/editing/) API exposes [the `processRowUpdate` callback](/x/react-data-grid/editing/persistence/#the-processrowupdate-callback) which is commonly used to persist edits on per-row basis.\nYou can utilize this callback to batch edits locally and then choose to either persist or discard them in bulk.\n\nThe demo below stores edited and deleted rows in the `unsavedChangesRef`.\nThese changes are saved or discarded when the user clicks the **Save** or **Discard** buttons respectively."
          ],
          "code_path": [
            "BulkEditing.js"
          ],
          "children": [
            {
              "name": "With commercial features [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')",
              "introduction": [
                "With commercial features [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\nWhen using [Data Grid Premium](/x/react-data-grid/#premium-plan), bulk editing applies to row updates from [Clipboard paste](/x/react-data-grid/clipboard/#clipboard-paste) automatically, since [Clipboard paste uses Editing API for persistence](/x/react-data-grid/clipboard/#persisting-pasted-data):"
              ],
              "code_path": [
                "BulkEditingPremiumNoSnap.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "data-grid->column-groups",
      "introduction": [
        "# Data Grid - Column groups\n\n<p class=\"description\">Group your columns.</p>\n\nGrouping columns allows you to have a multi-level hierarchy of columns in your header."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Define column groups",
          "introduction": [
            "Define column groups\n\nYou can define column groups with the `columnGroupingModel` prop.\nThis prop receives an array of column groups.\n\nA column group is defined by at least two properties:\n\n- `groupId`: a string used to identify the group\n- `children`: an array containing the children of the group\n\nThe `children` attribute can contain two types of objects:\n\n- leafs with type `{ field: string }`, which add the column with the corresponding `field` to this group.\n- other column groups which allows you to have nested groups.\n\n:::warning\nA column can only be associated with one group.\n:::\n\n```jsx\n<DataGrid\n  columnGroupingModel={[\n    {\n      groupId: 'internal data',\n      children: [{ field: 'id' }],\n    },\n    {\n      groupId: 'character',\n      children: [\n        {\n          groupId: 'naming',\n          children: [{ field: 'lastName' }, { field: 'firstName' }],\n        },\n        { field: 'age' },\n      ],\n    },\n  ]}\n/>\n```"
          ],
          "code_path": [
            "BasicGroupingDemo.js"
          ],
          "children": []
        },
        {
          "name": "Customize column group",
          "introduction": [
            "Customize column group\n\nIn addition to the required `groupId` and `children`, you can use the following optional properties to customize a column group:\n\n- `headerName`: the string displayed as the column's name (instead of `groupId`).\n- `description`: a text for the tooltip.\n- `headerClassName`: a CSS class for styling customization.\n- `renderHeaderGroup`: a function returning custom React component."
          ],
          "code_path": [
            "CustomizationDemo.js"
          ],
          "children": []
        },
        {
          "name": "Group header height",
          "introduction": [
            "Group header height\n\nBy default, column group headers are the same height as [column headers](/x/react-data-grid/column-header/#header-height). This will be the default 56 pixels or a custom value set with the `columnHeaderHeight` prop.\n\nThe `columnGroupHeaderHeight` prop can be used to size column group headers independently of column headers."
          ],
          "code_path": [
            "GroupHeaderHeight.js"
          ],
          "children": []
        },
        {
          "name": "Column reordering [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Column reordering [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nBy default, the columns that are part of a group cannot be dragged to outside their group.\nYou can customize this behavior on specific groups by setting `freeReordering: true` in a column group object.\n\nIn the example below, the `Full name` column group can be divided, but not other column groups."
          ],
          "code_path": [
            "BreakingGroupDemo.js"
          ],
          "children": []
        },
        {
          "name": "Collapsible column groups",
          "introduction": [
            "Collapsible column groups\n\nThe demo below uses [`renderHeaderGroup`](/x/react-data-grid/column-groups/#customize-column-group) to add a button to collapse/expand the column group."
          ],
          "code_path": [
            "CollapsibleColumnGroups.js"
          ],
          "children": []
        },
        {
          "name": "Manage group visibility 🚧",
          "introduction": [
            "Manage group visibility 🚧\n\nThe column group should allow to switch between an extended/collapsed view which hide/show some columns.\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\n👍 Upvote [issue #6651](https://github.com/mui/mui-x/issues/6651) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Column group ordering [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')🚧",
          "introduction": [
            "Column group ordering [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')🚧\n\nUsers could drag and drop group header to move all the group children at once, [like they can already do it with normal columns](/x/react-data-grid/column-ordering/).\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\n👍 Upvote [issue #9448](https://github.com/mui/mui-x/issues/9448) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->filtering",
      "introduction": [
        "# Data Grid - Multi filters [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Apply multiple filters at the same time.</p>\n\nMulti filters allow filtering rows by multiple columns with multiple criteria.\nTo add more filters, use the `Add Filter` button on the filter panel.\n\nThe following demo lets you filter the rows according to several criteria at the same time."
      ],
      "code_path": [
        "BasicExampleDataGridPro.js"
      ],
      "children": [
        {
          "name": "One filter per column",
          "introduction": [
            "One filter per column\n\nYou can also limit to only one filter per column while still allowing to filter other columns. For this, use the [`filterColumns`](/x/api/data-grid/grid-filter-form/) and [`getColumnForNewFilter`](/x/api/data-grid/grid-filter-panel/) props available in `slotProps.filterPanel`."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Use cases",
              "introduction": [
                "Use cases\n\n- Sometimes it's a limitation of some server-side filtering APIs to only allow one filter per column.\n- You can also write custom logic to prevent some columns from being shown as possible filters.\n\nThis demo implements a basic use case to prevent showing multiple filters for one column."
              ],
              "code_path": [
                "DisableMultiFiltersDataGridPro.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Disable action buttons",
          "introduction": [
            "Disable action buttons\n\nTo disable `Add filter` or `Remove all` buttons, pass `disableAddFilterButton` or `disableRemoveAllButton` to `componentsProps.filterPanel`."
          ],
          "code_path": [
            "DisableActionButtonsDataGridPro.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [GridFilterPanel](/x/api/data-grid/grid-filter-panel/)\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->column-menu",
      "introduction": [
        "# Data Grid - Column menu\n\n<p class=\"description\">Customize your columns menu.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Column menu",
          "introduction": [
            "Column menu\n\nEach column header comes with a column menu with quickly accessible Data Grid features like column visibility, sorting, filtering, and others.\n\nIt can be accessed by clicking on the 3-dots icon that appears on hover on a header cell or when focusing on a column header and pressing <kbd><kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">Enter</kbd></kbd> (or <kbd><kbd class=\"key\">⌘ Command</kbd>+<kbd class=\"key\">Enter</kbd></kbd> on macOS)."
          ],
          "code_path": [
            "ColumnMenuGrid.js"
          ],
          "children": []
        },
        {
          "name": "Customize column menu items",
          "introduction": [
            "Customize column menu items\n\nYou can customize the column menu items by passing the `slots` and `slotProps` props to the `<GridColumnMenu />` component:\n\n- `slots` - use this prop to override default column menu slots or add new slots.\n- `slotProps` - use this prop to override or pass [`displayOrder`](/x/react-data-grid/column-menu/#reordering-menu-items) for column menu items. You can also use this to pass extra props to custom column menu slots."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Adding a menu item",
              "introduction": [
                "Adding a menu item\n\nTo add a new menu item, create a new item slot and pass it to the `slots` prop. In the example below, the new slot is called `columnMenuUserItem` but you can choose any name and it'll be added to the menu automatically.\nYou can also set the `displayOrder` (default `100`) or pass new props to the slots using the `slotProps` prop.\n\n```tsx\nfunction CustomColumnMenu(props: GridColumnMenuProps) {\n  return (\n    <GridColumnMenu\n      {...props}\n      slots={{\n        // Add new item\n        columnMenuUserItem: CustomUserItem,\n      }}\n      slotProps={{\n        columnMenuUserItem: {\n          // set `displayOrder` for the new item\n          displayOrder: 15,\n          // Additional props\n          myCustomValue: 'Do custom action',\n          myCustomHandler: () => alert('Custom handler fired'),\n        },\n      }}\n    />\n  );\n}\n```"
              ],
              "code_path": [
                "AddNewColumnMenuGrid.js"
              ],
              "children": []
            },
            {
              "name": "Overriding default menu items",
              "introduction": [
                "Overriding default menu items\n\nUse the `slots` prop to override default menu items.\nCheck [this table](/x/react-data-grid/column-menu/#default-column-menu-items) to know the overridable slot name for each menu item.\n\n```tsx\nfunction CustomColumnMenu(props: GridColumnMenuProps) {\n  return (\n    <GridColumnMenu\n      {...props}\n      slots={{\n        // Override `columnMenuFilterItem` component\n        columnMenuFilterItem: CustomFilterItem,\n      }}\n    />\n  );\n}\n```"
              ],
              "code_path": [
                "OverrideColumnMenuGrid.js"
              ],
              "children": []
            },
            {
              "name": "Hiding a menu item",
              "introduction": [
                "Hiding a menu item\n\nTo hide a menu item, you can set its respective slot in `slots` to `null`.\nCheck [this table](/x/react-data-grid/column-menu/#default-column-menu-items) to know the slot name for each menu item.\n\n```tsx\nfunction CustomColumnMenu(props: GridColumnMenuProps) {\n  return (\n    <GridColumnMenu\n      {...props}\n      slots={{\n        // Hide `columnMenuColumnsItem`\n        columnMenuColumnsItem: null,\n      }}\n    />\n  );\n}\n```"
              ],
              "code_path": [
                "HideColumnMenuGrid.js"
              ],
              "children": []
            },
            {
              "name": "Reordering menu items",
              "introduction": [
                "Reordering menu items\n\nEvery item is assigned a `displayOrder` based on which it is shown before or after other items. It works in ascending order; the smaller the number is, the earlier it is displayed on the list. For new items default value for `displayOrder` is **100**.\n\nYou can override `displayOrder` for the default or new items in `slotProps`.\n\nCheck [this table](/x/react-data-grid/column-menu/#default-column-menu-items) to see default `displayOrder` for each menu item.\n\n```tsx\nfunction CustomColumnMenu(props: GridColumnMenuProps) {\n  return (\n    <GridColumnMenu\n      {...props}\n      slotProps={{\n        // Swap positions of filter and sort items\n        columnMenuFilterItem: {\n          displayOrder: 0, // Previously `10`\n        },\n        columnMenuSortItem: {\n          displayOrder: 10, // Previously `0`\n        },\n      }}\n    />\n  );\n}\n```"
              ],
              "code_path": [
                "ReorderColumnMenuGrid.js"
              ],
              "children": []
            },
            {
              "name": "Default column menu items",
              "introduction": [
                "Default column menu items\n\nAs a reference, here are the column menu `slots` along with the default item components and `displayOrder`."
              ],
              "code_path": [
                "ColumnMenuGridReferencesNoSnap.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Custom menu component",
          "introduction": [
            "Custom menu component\n\nYou can also customize and replace the column menu by [passing a fully custom component](/x/react-data-grid/components/#component-slots) to the `columnMenu` slot of the Data Grid. If you want to add some of the default menu items to your custom component, you can import and re-use them.",
            ":::info\n<strong>Tip</strong>: The `columnMenu` component and its components slots receive the `colDef` prop corresponding to the current column; you can use this to conditionally render some items or change some logic.\n:::"
          ],
          "code_path": [
            "CustomColumnMenuGrid.js",
            null
          ],
          "children": []
        },
        {
          "name": "Disable column menu",
          "introduction": [
            "Disable column menu\n\nBy default, each column header has the column menu enabled. To disable the column menu, set the prop `disableColumnMenu={true}`."
          ],
          "code_path": [
            "DisabledColumnMenuGrid.js"
          ],
          "children": []
        },
        {
          "name": "Column menu with Pro/Premium features [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')[<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')",
          "introduction": [
            "Column menu with Pro/Premium features [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')[<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\nIn the following demo, in addition to Data Grid MIT features, you can see commercial features like [grouping](/x/react-data-grid/row-grouping/), and [aggregation](/x/react-data-grid/aggregation/) in action. Try tweaking the values from respective column menu items."
          ],
          "code_path": [
            "ColumnMenuGridPremium.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->faq",
      "introduction": [
        "# Frequently asked questions\n\n<p class=\"description\">Can't find what you are looking for? The FAQ section has answers to some of the most frequent questions and challenges.</p>\n\nIf you still have trouble, you can refer to the [support page](/x/introduction/support/)."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "How to pass props to the Data Grid for better performance?",
          "introduction": [
            "How to pass props to the Data Grid for better performance?\n\nThe Data Grid is a complex component that renders a lot of elements. As a general rule, all the non-primitive props should keep a stable reference between renders to avoid unnecessary re-renders.\n\nThis is especially important for the `columns` prop. The columns are designed to be definitions, to never change once the component is mounted. Otherwise, you take the risk of losing elements like column width or order.\n\nThis can be achieved by one of the following ways:\n\n1. If the columns do not depend on something within the component scope, you can define them outside of the component and pass them as a prop.\n\n   ```tsx\n   const columns = [\n     { field: 'id' },\n     { field: 'firstName' },\n     { field: 'lastName' },\n     { field: 'age' },\n     { field: 'fullName' },\n   ];\n\n   function App() {\n     return <DataGrid columns={columns} {...other} />;\n   }\n   ```\n\n2. If the columns require something within the component scope, like a state value or a prop, you can use the `useMemo` hook to keep a stable reference between renders.\n\n   ```tsx\n   function App(props) {\n     const renderCell = React.useCallback(\n       (params) => {\n         return (\n           <strong>\n             {params.value} {props.someValue}\n           </strong>\n         );\n       },\n       [props.someValue],\n     );\n\n     const columns = React.useMemo(\n       () => [\n         { field: 'id' },\n         { field: 'firstName' },\n         { field: 'lastName' },\n         { field: 'age' },\n         { field: 'fullName', renderCell },\n       ],\n       [renderCell],\n     );\n\n     return <DataGrid columns={columns} {...other} />;\n   }\n   ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "What is the difference between renderCell, valueGetter, and valueFormatter? Which one should I use?",
          "introduction": [
            "What is the difference between renderCell, valueGetter, and valueFormatter? Which one should I use?\n\nThe Data Grid provides several ways to customize the content of a cell. Each of them has a different purpose and should be used in different situations. Here is a summary of their differences:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "`renderCell`",
              "introduction": [
                "`renderCell`\n\nIt is the most powerful way to customize the content of a cell. It allows you to render anything you want inside the cell. It is the only way to render a React component inside a cell. It is also the only way to customize the cell's behavior (for instance, add a click handler). It is the most flexible way to customize a cell, but it is also the most expensive one. It should be used only when the other options are not enough.\n\nHere's an example for a cell that displays a button:\n\n```tsx\nconst columns: GridColDef[] = [\n  {\n    field: 'date',\n    headerName: 'Year',\n    renderCell: (params: GridRenderCellParams<any, Date>) => (\n      <strong>\n        {params.value.getFullYear()}\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          style={{ marginLeft: 16 }}\n          tabIndex={params.hasFocus ? 0 : -1}\n        >\n          Open\n        </Button>\n      </strong>\n    ),\n  },\n];\n```\n\nSee more about the `renderCell` method in the [rendering cells](/x/react-data-grid/column-definition/#rendering-cells) section."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "`valueGetter`",
              "introduction": [
                "`valueGetter`\n\nIt is a function that allows you to derive the cell value from the row data. It is the most performant way to customize the cell content. It is also the only way to customize the cell value without changing the row data. It should be used when you need to derive the cell value from the row data. Common use cases are:\n\n- Transforming the value (for example convert a decimal value to a percentage value)\n- Deriving the value from multiple fields (for example concatenating first name and last name)\n- Deriving the value from a nested field (for example `user.address.city`)\n\nThis value is also used internally in the Grid to filter, sort, and render (if no `renderCell` or `valueFormatter` is provided). You can learn more about it in the [value getter](/x/react-data-grid/column-definition/#value-getter) section."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "`valueFormatter`",
              "introduction": [
                "`valueFormatter`\n\nIt is a function that allows you to format the cell value. It could be used to customize the cell value without changing the row data. It should be used when you need to format the cell value.\n\nA few common use-cases are:\n\n- Formatting a date to a custom display format\n- Formatting a decimal value to percentage and show `%` sign\n- Formatting a boolean value to `Yes` or `No`\n\nIt only impacts the rendering part and does not impact the internal calculations like filtering or sorting. You can know more about it in the [value formatter](/x/react-data-grid/column-definition/#value-formatter) section."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "What is the purpose of useDemoData hook used in the documentation examples?",
          "introduction": [
            "What is the purpose of useDemoData hook used in the documentation examples?\n\nThe `useDemoData` hook is a utility hook from the `@mui/x-data-grid-generator` package.\nIt contains columns definitions and generates random data for the Data Grid.\nIt is often used in our demos to provide realistic data without polluting the code with data generation logic.\n\n:::success\nLooking for the column definitions and custom cell renderers from the `useDemoData` hook?\n\nCheck out the [Custom columns demo](/x/react-data-grid/custom-columns/#full-example) where you can copy them from the demo source code.\n:::\n\nHere's how it's used:\n\n```tsx\nimport * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useDemoData } from '@mui/x-data-grid-generator';\n\nexport default function Demo() {\n  const { data } = useDemoData({ dataSet: 'Commodity', rowLength: 100 });\n\n  return <DataGrid {...data} />;\n}\n```\n\nIt comes with two datasets: `Commodity` and `Employee`. You can customize the data generation by passing the custom options of type [`UseDemoDataOptions`](https://github.com/mui/mui-x/blob/6aad22644ee710690b90dc2ac6bbafceb91fecf0/packages/x-data-grid-generator/src/hooks/useDemoData.ts#L29-L36).\n\n:::error\n`@mui/x-data-grid-generator` is a development-only package and should not be used in production.\nYou can use it to create a reproduction of a bug or generate demo data in your development environment.\nYou should not rely on its API – we don't follow semver for this package.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->overlays",
      "introduction": [
        "# Data Grid - Overlays\n\n<p class=\"description\">The various Data Grid overlays.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Loading overlay",
          "introduction": [
            "Loading overlay\n\nTo display a loading overlay and signify that the Data Grid is in a loading state, set the `loading` prop to `true`.\n\nThe Data Grid supports 3 loading overlay variants out of the box:\n\n- `skeleton`: an animated placeholder of the Data Grid.\n- `linear-progress`: an indeterminate linear progress bar.\n- `circular-progress`: a circular loading spinner.\n\nThe type of loading overlay to display can be set via `slotProps.loadingOverlay` for the following two props:\n\n- `variant` (default: `linear-progress`): when `loading` and there are rows in the table.\n- `noRowsVariant` (default: `skeleton`): when `loading` and there are not any rows in the table.\n\n```tsx\n<DataGrid\n  {...data}\n  loading\n  slotProps={{\n    loadingOverlay: {\n      variant: 'linear-progress',\n      noRowsVariant: 'skeleton',\n    },\n  }}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Skeleton",
              "introduction": [
                "Skeleton\n\nAn animated placeholder of the Data Grid."
              ],
              "code_path": [
                "LoadingOverlaySkeleton.js"
              ],
              "children": []
            },
            {
              "name": "Linear progress",
              "introduction": [
                "Linear progress\n\nAn indeterminate linear progress bar."
              ],
              "code_path": [
                "LoadingOverlayLinearProgress.js"
              ],
              "children": []
            },
            {
              "name": "Circular progress",
              "introduction": [
                "Circular progress\n\nA circular loading spinner."
              ],
              "code_path": [
                "LoadingOverlayCircularProgress.js"
              ],
              "children": []
            },
            {
              "name": "Custom component",
              "introduction": [
                "Custom component\n\nIf you want to customize the no-rows overlay, a component can be passed to the `loadingOverlay` slot.\n\nIn the following demo, a labeled determinate [CircularProgress](/material-ui/react-progress/#circular-determinate) component is rendered in place of the default loading overlay, with some additional _Loading rows…_ text."
              ],
              "code_path": [
                "LoadingOverlayCustom.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "No rows overlay",
          "introduction": [
            "No rows overlay\n\nThe no-rows overlay is displayed when the Data Grid has no rows."
          ],
          "code_path": [
            "NoRowsOverlay.js"
          ],
          "children": [
            {
              "name": "Custom component",
              "introduction": [
                "Custom component\n\nIf you want to customize the no-rows overlay, a component can be passed to the `noRowsOverlay` slot and rendered in place.\n\nIn the following demo, an illustration is added on top of the default \"No rows\" message."
              ],
              "code_path": [
                "NoRowsOverlayCustom.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "No results overlay",
          "introduction": [
            "No results overlay\n\nThe no-results overlay is displayed when the Data Grid has no results after filtering."
          ],
          "code_path": [
            "NoResultsOverlay.js"
          ],
          "children": [
            {
              "name": "Custom component",
              "introduction": [
                "Custom component\n\nIf you want to customize the no results overlay, a component can be passed to the `noResults` slot and rendered in place.\n\nIn the following demo, an illustration is added on top of the default \"No results found\" message."
              ],
              "code_path": [
                "NoResultsOverlayCustom.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->layout",
      "introduction": [
        "# Data Grid - Layout\n\n<p class=\"description\">The Data Grid offers multiple layout modes.</p>\n\n:::error\nBy default, the Data Grid has **no intrinsic dimensions**.\nInstead, it takes up the space given by its parent.\nThe Data Grid will raise an error in the console if its container has no intrinsic dimensions.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Flex parent container",
          "introduction": [
            "Flex parent container\n\nThe Data Grid can be placed inside a flex container with `flex-direction: column`.\nWithout setting the minimum and maximum height, the Data Grid takes as much space as it needs to display all rows.\n\n:::warning\nConsider setting `maxHeight` on the flex parent container, otherwise row virtualization will not be able to improve performance by limiting the number of elements rendered in the DOM.\n:::",
            ":::success\nThe flex parent in the demo above is effectively equivalent [`autoHeight`](/x/react-data-grid/layout/#auto-height) prop, but with the added benefit of being able to set the minimum and maximum height of the parent container.\n:::"
          ],
          "code_path": [
            "FlexGrid.js",
            null
          ],
          "children": [
            {
              "name": "Minimum and maximum height",
              "introduction": [
                "Minimum and maximum height\n\nIn the demo below, the Data Grid is placed inside a flex container with a minimum height of `200px` and a maximum height of `400px` and adapts its height when the number of rows changes."
              ],
              "code_path": [
                "MinMaxHeightGrid.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Percentage dimensions",
          "introduction": [
            "Percentage dimensions\n\nWhen using percentages (%) for height or width, make sure that the Data Grid's parent container has intrinsic dimensions.\nBrowsers adjust the element based on a percentage of its parent's size.\nIf the parent has no size, the percentage will be zero."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Predefined dimensions",
          "introduction": [
            "Predefined dimensions\n\nYou can predefine dimensions for the parent of the Data Grid."
          ],
          "code_path": [
            "FixedSizeGrid.js"
          ],
          "children": []
        },
        {
          "name": "Overlay height",
          "introduction": [
            "Overlay height\n\nWhen data grid has no content, overlays (such as\n[\"Loading\"](/x/react-data-grid/overlays/#loading-overlay) or\n[\"No rows\"](/x/react-data-grid/overlays/#no-rows-overlay))\ntake the height of two rows by default.\n\nTo customize the overlay height, use the `--DataGrid-overlayHeight` CSS variable."
          ],
          "code_path": [
            "GridOverlayHeight.js"
          ],
          "children": []
        },
        {
          "name": "Auto height",
          "introduction": [
            "Auto height\n\n:::error\nThis prop is deprecated, use the [flex parent container](/x/react-data-grid/layout/#flex-parent-container) instead.\n:::\n\nThe `autoHeight` prop enables the Data Grid to adjust its size based on its content.\nThis means that the Data Grid's height will be determined by the number of rows, ensuring that all rows will be visible to the user simultaneously."
          ],
          "code_path": [
            "AutoHeightGrid.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->cell-selection",
      "introduction": [
        "# Data Grid - Cell selection [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\n<p class=\"description\">Let users select individual cells or a range of cells.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Enabling cell selection",
          "introduction": [
            "Enabling cell selection\n\nBy default, the Data Grid lets users select individual rows.\nWith the Data Grid Premium, you can apply the `cellSelection` prop to let users select individual cells or ranges of cells.\n\n```tsx\n<DataGridPremium cellSelection />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Selecting cells",
          "introduction": [
            "Selecting cells\n\nWith the `cellSelection` prop applied, users can select a single cell by clicking on it, or by pressing <kbd class=\"key\">Shift</kbd>+<kbd class=\"key\">Space</kbd> when the cell is in focus.\nSelect multiple cells by holding <kbd class=\"key\">Cmd</kbd> (or <kbd class=\"key\">Ctrl</kbd> on Windows) while clicking on them.\nHold <kbd class=\"key\">Cmd</kbd> (or <kbd class=\"key\">Ctrl</kbd> on Windows) and click on a selected cell to deselect it.\n\nTo select a range of cells, users can:\n\n- Click on a cell, drag the mouse over nearby cells, and then release.\n- Click on a cell, then hold <kbd class=\"key\">Shift</kbd> and click on another cell. If a third cell is clicked then the selection will restart from the last clicked cell.\n- Use the arrow keys to focus on a cell, then hold <kbd class=\"key\">Shift</kbd> and navigate to another cell—if <kbd class=\"key\">Shift</kbd> is released and pressed again then the selection will restart from the last focused cell.\n\nTry out the various actions to select cells in the demo below—you can toggle [row selection](/x/react-data-grid/row-selection/) on and off to see how these two selection features can work in parallel."
          ],
          "code_path": [
            "CellSelectionGrid.js"
          ],
          "children": []
        },
        {
          "name": "Controlling cell selection",
          "introduction": [
            "Controlling cell selection\n\nYou can control which cells are selected using the `cellSelectionModel` prop.\nThis prop accepts an object with keys corresponding to the row IDs that contain selected cells.\nThe value of each key is itself an object, which has a column field for a key and a boolean value for its selection state.\nYou can set this to `true` to select a cell or `false` to deselect it.\nRemoving the field from the object also deselects the cell.\n\n```tsx\n// Selects the cell with field=name from row with id=1\n<DataGridPremium cellSelectionModel={{ 1: { name: true } }} />\n\n// Unselects the cell with field=name from row with id=1\n<DataGridPremium cellSelectionModel={{ 1: { name: false } }} />\n```\n\nWhen a new selection is made, the callback passed to the `onCellSelectionModelChange` prop is called with the updated model.\nUse this value to update the current model.\n\nThe following demo shows how these props can be combined to create an Excel-like formula field—try updating multiple cells at once by selecting them and entering a new value in the field at the top."
          ],
          "code_path": [
            "CellSelectionFormulaField.js"
          ],
          "children": []
        },
        {
          "name": "Customizing range styles",
          "introduction": [
            "Customizing range styles\n\nWhen multiple selected cells form a continuous range of any size, the following class names are applied to the cells at the edges:\n\n- `MuiDataGrid-cell--rangeTop`: to all cells in the first row of the range\n- `MuiDataGrid-cell--rangeBottom`: to all cells in the last row of the range\n- `MuiDataGrid-cell--rangeLeft`: to all cells in the first column of the range\n- `MuiDataGrid-cell--rangeRight`: to all cells in the last column of the range\n\n:::info\nWhen a single cell is selected, all classes above are applied to that element.\n:::\n\nYou can use these classes to create CSS selectors targeting specific corners of each range—for example, the demo below adds a border around the outside of the range."
          ],
          "code_path": [
            "CellSelectionRangeStyling.js"
          ],
          "children": []
        },
        {
          "name": "apiRef",
          "introduction": [
            "apiRef\n\nThe Data Grid exposes a set of methods via the `apiRef` object that are used in the implementation of the cell selection feature.\nThe reference below describes the relevant functions.\nSee [API object](/x/react-data-grid/api-object/) for more details.\n\n:::warning\nThis API should only be used as a last resort—give preference to props for controlling the Data Grid.\n:::"
          ],
          "code_path": [
            "CellSelectionApiNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->recipes-row-grouping",
      "introduction": [
        "# Data Grid - Row grouping recipes [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\n<p class=\"description\">Advanced grid customization recipes.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Toggling groups on row click",
          "introduction": [
            "Toggling groups on row click\n\nIn the demo below, you can toggle the group by clicking anywhere on the grouping row:"
          ],
          "code_path": [
            "RowGroupingExpandOnRowClick.js"
          ],
          "children": []
        },
        {
          "name": "Pinning a grouped column",
          "introduction": [
            "Pinning a grouped column\n\nUse `GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD` to pin a grouped column. In the demo below, the `Company` column is pinned:"
          ],
          "code_path": [
            "RowGroupingPinning.js"
          ],
          "children": []
        },
        {
          "name": "Sorting row groups by the number of child rows",
          "introduction": [
            "Sorting row groups by the number of child rows\n\nBy default, the row grouping column uses `sortComparator` of the grouping column for sorting.\n\nTo sort the row groups by the number of child rows, you can override it using `groupingColDef.sortComparator`:"
          ],
          "code_path": [
            "RowGroupingSortByChildRows.js"
          ],
          "children": []
        },
        {
          "name": "Displaying child row count in footer",
          "introduction": [
            "Displaying child row count in footer\n\nBy default, the row count in the footer is the number of top level rows that are visible after filtering.\n\nIn the demo below, a `CustomFooterRowCount` component is added to the `footerRowCount` slot. This component uses the `gridFilteredDescendantRowCountSelector` to get the number of child rows and display it alongside the number of groups."
          ],
          "code_path": [
            "RowGroupingChildRowCount.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->column-visibility",
      "introduction": [
        "# Data Grid - Column visibility\n\n<p class=\"description\">Define which columns are visible.</p>\n\nBy default, all the columns are visible.\nThe column's visibility can be switched through the user interface in two ways:\n\n- By opening the column menu and clicking the _Hide_ menu item.\n- By clicking the _Columns_ menu and toggling the columns to show or hide.\n\nYou can prevent the user from hiding a column through the user interface by setting the `hideable` in `GridColDef` to `false`.\n\nIn the following demo, the \"username\" column cannot be hidden."
      ],
      "code_path": [
        "VisibleColumnsBasicExample.js"
      ],
      "children": [
        {
          "name": "Initialize the visible columns",
          "introduction": [
            "Initialize the visible columns\n\nTo initialize the visible columns without controlling them, provide the model to the `initialState` prop.\n\n:::info\n\nPassing the visible columns to the `initialState` prop will only have an impact when the Data Grid is rendered for the first time. In order to update the visible columns after the first render, you need to use the [`columnVisibilityModel`](#controlled-visible-columns) prop.\n\n:::\n\n```tsx\n<DataGrid\n  initialState={{\n    columns: {\n      columnVisibilityModel: {\n        // Hide columns status and traderName, the other columns will remain visible\n        status: false,\n        traderName: false,\n      },\n    },\n  }}\n/>\n```"
          ],
          "code_path": [
            "VisibleColumnsModelInitialState.js"
          ],
          "children": []
        },
        {
          "name": "Controlled visible columns",
          "introduction": [
            "Controlled visible columns\n\nUse the `columnVisibilityModel` prop to control the visible columns.\nYou can use the `onColumnVisibilityModelChange` prop to listen to the changes to the visible columns and update the prop accordingly.\n\n```tsx\n<DataGrid\n  columnVisibilityModel={{\n    // Hide columns status and traderName, the other columns will remain visible\n    status: false,\n    traderName: false,\n  }}\n/>\n```"
          ],
          "code_path": [
            "VisibleColumnsModelControlled.js"
          ],
          "children": []
        },
        {
          "name": "Column visibility panel",
          "introduction": [
            "Column visibility panel\n\nThe column visibility panel allows the user to control which columns are visible in the Data Grid.\n\nThe panel can be opened by:\n\n- Clicking the _Columns_ button in the [toolbar](/x/react-data-grid/components/#toolbar).\n- Clicking the _Manage columns_ button in the [column menu](/x/react-data-grid/column-menu/)."
          ],
          "code_path": [
            "ColumnSelectorGrid.js"
          ],
          "children": [
            {
              "name": "Disable the column visibility panel",
              "introduction": [
                "Disable the column visibility panel\n\nSometimes, the intention is to disable the columns panel or control the visible columns programmatically based on the application state.\nTo disable the column visibility panel, set the prop `disableColumnSelector={true}` and use the [`columnVisibilityModel`](#controlled-visible-columns) prop to control the visible columns.\n\n```tsx\n<DataGrid disableColumnSelector columnVisibilityModel={columnVisibilityModel} />\n```\n\nIn the following demo, the columns panel is disabled, and access to columns `id`, `quantity`, and `filledQuantity` is only allowed for the `Admin` type user."
              ],
              "code_path": [
                "ColumnSelectorDisabledGrid.js"
              ],
              "children": []
            },
            {
              "name": "Customize the list of columns in columns management",
              "introduction": [
                "Customize the list of columns in columns management\n\nTo show or hide specific columns in the column visibility panel, use the `slotProps.columnsManagement.getTogglableColumns` prop. It should return an array of column field names.\n\n```tsx\nimport {\n  DataGridPremium,\n  GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD,\n} from '@mui/x-data-grid-premium';\n\n// stop `id`, GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD, and `status` columns to be togglable\nconst hiddenFields = ['id', GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD, 'status'];\n\nconst getTogglableColumns = (columns: GridColDef[]) => {\n  return columns\n    .filter((column) => !hiddenFields.includes(column.field))\n    .map((column) => column.field);\n};\n\n<DataGridPremium\n  slots={{\n    toolbar: GridToolbar,\n  }}\n  slotProps={{\n    columnsManagement: {\n      getTogglableColumns,\n    },\n  }}\n/>;\n```"
              ],
              "code_path": [
                "ColumnSelectorGridCustomizeColumns.js"
              ],
              "children": []
            },
            {
              "name": "Disable actions in footer",
              "introduction": [
                "Disable actions in footer\n\nTo disable `Show/Hide All` checkbox or `Reset` button in the footer of the columns management component, pass `disableShowHideToggle` or `disableResetButton` to `slotProps.columnsManagement`.\n\n```tsx\n<DataGrid\n  slots={{\n    toolbar: GridToolbar,\n  }}\n  slotProps={{\n    columnsManagement: {\n      disableShowHideToggle: true,\n      disableResetButton: true,\n    },\n  }}\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Customize action buttons behavior when search is active",
              "introduction": [
                "Customize action buttons behavior when search is active\n\nBy default, the `Show/Hide All` checkbox toggles the visibility of all columns, including the ones that are not visible in the current search results.\n\nTo only toggle the visibility of the columns that are present in the current search results, pass `toggleAllMode: 'filteredOnly'` to `slotProps.columnsManagement`.\n\n```tsx\n<DataGrid\n  slotProps={{\n    columnsManagement: {\n      toggleAllMode: 'filteredOnly',\n    },\n  }}\n/>\n```"
              ],
              "code_path": [
                "ColumnSelectorGridToggleAllMode.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->style-recipes",
      "introduction": [
        "# Data Grid - Styling recipes\n\n<p class=\"description\">Advanced grid styling recipes.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Remove cell focus outline",
          "introduction": [
            "Remove cell focus outline\n\nThe Data Grid cells are actionable elements and visually indicate the `focus` state by default.\nYou can remove the focus outline by overriding the `:focus` and `:focus-within` styles for the cells and header cells.\n\n:::warning\nRemoving the visible `focus` state hurts the accessibility of the grid.\n:::"
          ],
          "code_path": [
            "CellFocusNoOutline.js"
          ],
          "children": []
        },
        {
          "name": "Remove drag handle for columns that are not resizeable",
          "introduction": [
            "Remove drag handle for columns that are not resizeable\n\nIn the MUI Data Grid, each column has a resize handle that allows users to adjust the width of the column.\nHowever, there might be cases where you want to disable this feature for certain columns.\n\nTo hide the drag handles on columns that are not resizable, you can use the resizable property in the GridColDef object.\nWhen the column is not resizable, the drag handle will not have the `columnSeparator--resizable` class.\nWe can use that to hide the separator."
          ],
          "code_path": [
            "ColumnHeaderHideSeparator.js"
          ],
          "children": []
        },
        {
          "name": "Styling Cells without impacting aggregation cells [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')",
          "introduction": [
            "Styling Cells without impacting aggregation cells [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\nAggregation cells do not receive a special class, so styling cells without impacting them needs a small workaround in the `getClassName` function."
          ],
          "code_path": [
            "StylingAllCellsButAggregation.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->row-height",
      "introduction": [
        "# Data Grid - Row height\n\n<p class=\"description\">Customize the height of your rows.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Static row height",
          "introduction": [
            "Static row height\n\nBy default, the rows have a height of 52 pixels.\nThis matches the normal height in the [Material Design guidelines](https://m2.material.io/components/data-tables).\n\nUse the `rowHeight` prop to change this default value, as shown below:"
          ],
          "code_path": [
            "DenseHeightGrid.js"
          ],
          "children": []
        },
        {
          "name": "Variable row height",
          "introduction": [
            "Variable row height\n\nIf you need some rows to have different row heights, this can be achieved using the `getRowHeight` prop.\nThis function is called for each visible row and if the return value is a `number` then that `number` will be set as that row's `rowHeight`.\nIf the return value is `null` or `undefined`, then the `rowHeight` prop will take effect for the given row.",
            ":::warning\nChanging the Data Grid density does not affect the rows with variable row height.\nYou can access the density factor from the params provided to the `getRowHeight` prop\n:::\n\n:::warning\nAlways memoize the function provided to `getRowHeight`.\nThe Data Grid bases on the referential value of these props to cache their values and optimize the rendering.\n:::\n\n```tsx\nconst getRowHeight = React.useCallback(() => { ... }, []);\n\n<DataGridPro getRowHeight={getRowHeight} />\n```"
          ],
          "code_path": [
            "VariableRowHeightGrid.js",
            null
          ],
          "children": []
        },
        {
          "name": "Dynamic row height",
          "introduction": [
            "Dynamic row height\n\nInstead of a fixed row height, you can let the Data Grid calculate the height of each row based on its content.\nTo do so, return `\"auto\"` on the function passed to the `getRowHeight` prop.\n\n```tsx\n<DataGrid getRowHeight={() => 'auto'} />\n```\n\nThe following demo shows this feature in action:",
            "The dynamic row height implementation is based on a lazy approach, which means that the rows are measured as they are rendered.\nBecause of this, you may see the size of the scrollbar thumb changing during scroll.\nThis side effect happens because a row height estimation is used while a row is not rendered, then this value is replaced once the true measurement is obtained.\nYou can configure the estimated value used by passing a function to the `getEstimatedRowHeight` prop.\nIf not provided, the default row height of `52px` is used as estimation.\nIt's recommended to pass this prop if the content deviates too much from the default value.\n\n```tsx\n<DataGrid getRowHeight={() => 'auto'} getEstimatedRowHeight={() => 200} />\n```",
            ":::warning\nWhen the height of a row is set to `\"auto\"`, the final height will follow exactly the content size and ignore the density.\nAdd padding to the cells to increase the space between the content and the cell borders.\n\n```tsx\n<DataGrid\n  sx={{\n    '&.MuiDataGrid-root--densityCompact .MuiDataGrid-cell': { py: '8px' },\n    '&.MuiDataGrid-root--densityStandard .MuiDataGrid-cell': { py: '15px' },\n    '&.MuiDataGrid-root--densityComfortable .MuiDataGrid-cell': { py: '22px' },\n  }}\n/>\n```\n\n:::"
          ],
          "code_path": [
            "DynamicRowHeightGrid.js",
            "ExpandableCells.js",
            null
          ],
          "children": [
            {
              "name": "Column virtualization",
              "introduction": [
                "Column virtualization\n\nBy default, the virtualization of the columns is disabled to force all columns to be rendered at the same time and calculate the row height correctly.\nHowever, this can lead to poor performance when rendering a lot of columns.\n\nIf you need column virtualization, you can set the `virtualizeColumnsWithAutoRowHeight` prop to `true`.\nWith this approach, the Data Grid measures the row height based on the visible columns.\nHowever, the row height might change during horizontal scrolling."
              ],
              "code_path": [
                "VirtualizeColumnsWithAutoRowHeight.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Row density",
          "introduction": [
            "Row density\n\nGive your users the option to change the default row density to match their preferences—compact, standard, or comfortable.\nDensity is calculated based on the `rowHeight` and/or `columnHeaderHeight` props, when present.\nSee [Density](https://mui.com/x/react-data-grid/accessibility/#density) for details."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Row spacing",
          "introduction": [
            "Row spacing\n\nYou can use the `getRowSpacing` prop to increase the spacing between rows.\nThis prop is called with a [`GridRowSpacingParams`](/x/api/data-grid/grid-row-spacing-params/) object.\n\n```tsx\nconst getRowSpacing = React.useCallback((params: GridRowSpacingParams) => {\n  return {\n    top: params.isFirstVisible ? 0 : 5,\n    bottom: params.isLastVisible ? 0 : 5,\n  };\n}, []);\n```",
            "By default, setting `getRowSpacing` will change the `marginXXX` CSS properties of each row.\nTo add a border instead, set `rowSpacingType` to `\"border\"` and customize the color and style.\n\n```tsx\n<DataGrid\n  getRowSpacing={...}\n  rowSpacingType=\"border\"\n  sx={{ '& .MuiDataGrid-row': { borderTopColor: 'yellow', borderTopStyle: 'solid' } }}\n/>\n```\n\n:::success\nAdding a bottom margin or border to rows that also have a [detail panel](/x/react-data-grid/master-detail/) is not recommended because the detail panel relies on the bottom margin to work.\n\nAs an alternative, you can use the top spacing to define the space between rows.\nIt's easier to always increase the next row spacing no matter if the detail panel is expanded or not, but you can use `gridDetailPanelExpandedRowIdsSelector` to apply a spacing depending on the open state.\n:::"
          ],
          "code_path": [
            "RowMarginGrid.js",
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->style",
      "introduction": [
        "# Data Grid - Styling\n\n<p class=\"description\">The grid CSS can be easily overwritten.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Using the `sx` prop",
          "introduction": [
            "Using the `sx` prop\n\nFor one-off styles, the `sx` prop can be used.\nIt allows to apply simple to complex customizations directly onto the Data Grid element.\nThe keys accepted can be any CSS property as well as the custom properties provided by MUI.\nFor more details, visit the [`sx` prop page](/system/getting-started/the-sx-prop/).\n\n```tsx\n<DataGrid sx={{ m: 2 }} /> // Sets the margin to 2 times the spacing unit = 16px\n```"
          ],
          "code_path": [
            "SxProp.js"
          ],
          "children": []
        },
        {
          "name": "Styling column headers",
          "introduction": [
            "Styling column headers\n\nThe `GridColDef` type has properties to apply class names and custom CSS on the header.\n\n- `headerClassName`: to apply class names into the column header. It can also be a function, which is called with a `GridColumnHeaderParams` object.\n- `headerAlign`: to align the content of the header. It must be 'left' | 'right' | 'center'.\n\n```tsx\nconst columns: GridColDef[] = [\n  {\n    field: 'first',\n    headerClassName: 'super-app-theme--header',\n    headerAlign: 'center',\n  },\n  {\n    field: 'last',\n    headerClassName: 'super-app-theme--header',\n    headerAlign: 'center',\n  },\n];\n```"
          ],
          "code_path": [
            "StylingHeaderGrid.js"
          ],
          "children": []
        },
        {
          "name": "Styling rows",
          "introduction": [
            "Styling rows\n\nThe `getRowClassName` prop can be used to apply a custom CSS class on each row. It's called with a `GridRowParams` object and must return a string. Sometimes it might be needed to override the existing rules using higher specificity CSS selectors.\n\n```tsx\ninterface GridRowParams<R extends GridRowModel = GridRowModel> {\n  /**\n   * The grid row id.\n   */\n  id: GridRowId;\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: R;\n  /**\n   * All grid columns.\n   */\n  columns: GridColDef[];\n}\n```"
          ],
          "code_path": [
            "StylingRowsGrid.js"
          ],
          "children": []
        },
        {
          "name": "Styling cells",
          "introduction": [
            "Styling cells\n\nThere are multiple ways to apply a custom CSS class on a cell.\n\n1. Using the`cellClassName` property of `GridColDef`:\n\nThis property allows to set a CSS class that is applied on every cell of the column it was defined.\nIt can also be a function, which is called with a `GridCellParams` object.\n\n```tsx\nconst columns: GridColDef[] = [\n  {\n    field: 'name',\n    cellClassName: 'super-app-theme--cell',\n  },\n  {\n    field: 'score',\n    type: 'number',\n    cellClassName: (params: GridCellParams<number>) =>\n      clsx('super-app', {\n        negative: params.value < 0,\n        positive: params.value > 0,\n      }),\n  },\n];\n```",
            "2. Using the `getCellClassName` prop:\n\nThis prop is called for every cell in every column.\nDifferent from the first option, this prop is defined at the Data Grid level, not column level.\nIt is also called with a `GridCellParams` object."
          ],
          "code_path": [
            "StylingCellsGrid.js",
            "StylingAllCells.js"
          ],
          "children": []
        },
        {
          "name": "Cell alignment",
          "introduction": [
            "Cell alignment\n\nUse the `align` property in `GridColDef` to change the alignment of content of the cells.\nChoose between one of the following values: 'left' | 'right' | 'center'.\n\n:::warning\nYou must use `headerAlign` to align the content of the header.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Striped rows",
          "introduction": [
            "Striped rows\n\nYou can use the `indexRelativeToCurrentPage` param passed to `getRowClassName` to apply alternating styles to the rows.\n\nThe following demo illustrates how this can be achieved."
          ],
          "code_path": [
            "StripedGrid.js"
          ],
          "children": []
        },
        {
          "name": "Theme header and pinned sections",
          "introduction": [
            "Theme header and pinned sections\n\nBy default, the Data Grid uses the Material UI `theme.palette.background.default` color for the background of its header and pinned sections. These elements require a solid color to hide the scrollable content behind them. You can override that color with the following configuration:\n\n```tsx\nimport { createTheme } from '@mui/material/styles';\nimport type {} from '@mui/x-data-grid/themeAugmentation';\n\nconst theme = createTheme({\n  mixins: {\n    MuiDataGrid: {\n      // Pinned columns sections\n      pinnedBackground: '#340606',\n      // Headers, and top & bottom fixed rows\n      containerBackground: '#343434',\n    },\n  },\n});\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Custom theme",
          "introduction": [
            "Custom theme\n\nThe following demo leverages the CSS customization API to match the Ant Design specification."
          ],
          "code_path": [
            "AntDesignGrid.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->filtering-recipes",
      "introduction": [
        "# Data Grid - Filtering customization recipes\n\n<p class=\"description\">Advanced filtering customization recipes.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Persisting filters in local storage",
          "introduction": [
            "Persisting filters in local storage\n\nYou can persist the filters in the local storage to keep the filters applied after the page is reloaded.\n\nIn the demo below, the [`React.useSyncExternalStore` hook](https://react.dev/reference/react/useSyncExternalStore) is used to synchronize the filters with the local storage."
          ],
          "code_path": [
            "FilteringLocalStorage.js"
          ],
          "children": []
        },
        {
          "name": "Quick filter outside of the grid",
          "introduction": [
            "Quick filter outside of the grid\n\nThe [Quick Filter](/x/react-data-grid/filtering/quick-filter/) component is typically used in the Data Grid's Toolbar component slot.\n\nSome use cases may call for placing components like the Quick Filter outside of the Grid.\nThis requires certain considerations due to the Grid's context structure.\nThe following example shows how to accomplish this:"
          ],
          "code_path": [
            "QuickFilterOutsideOfGrid.js"
          ],
          "children": []
        },
        {
          "name": "Calculating filtered rows in advance",
          "introduction": [
            "Calculating filtered rows in advance\n\nThe [Grid API](/x/react-data-grid/api-object/#how-to-use-the-api-object) provides the [`getFilterState`](/x/api/data-grid/grid-api/#grid-api-prop-getFilterState) method, which allows you to display the row count for predefined filters upfront without applying filters to the Data Grid:"
          ],
          "code_path": [
            "FilteredRowCount.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->state",
      "introduction": [
        "# Data Grid - State\n\n<p class=\"description\">Initialize and read the state of the Data Grid.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Initialize the state",
          "introduction": [
            "Initialize the state\n\nSome state keys can be initialized with the `initialState` prop.\nThis prop has the same format as the returned value of `apiRef.current.exportState()`.\n\n:::warning\nThe `initialState` can only be used to set the initial value of the state.\nThe Data Grid will not react if you change the `initialState` value later on.\n\nIf you need to fully control specific models, use the control props instead (for example [`prop.filterModel`](/x/react-data-grid/filtering/#controlled-filters) or [`prop.sortModel`](/x/react-data-grid/sorting/#controlled-sort-model)).\nYou can find more information on the corresponding feature documentation page.\n:::"
          ],
          "code_path": [
            "InitialState.js"
          ],
          "children": []
        },
        {
          "name": "Access the state",
          "introduction": [
            "Access the state\n\nThe state is exposed on the `apiRef` object.\n\n:::warning\nDo not access state values directly.\nThe state itself is not considered a public API and its structure can change.\n:::\n\nThe `@mui/x-data-grid-pro` package exposes a set of state selectors that take the `apiRef.current.state` as an argument and return a value.\nYou can use them to get data from the state without worrying about its internal structure."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Direct selector access",
              "introduction": [
                "Direct selector access\n\nThe simplest way to use a selector is to call it as a function with `apiRef` as its first argument:\n\n```tsx\nconst paginationModel = gridPaginationModelSelector(apiRef);\n```\n\n:::warning\nCalling with `apiRef.current.state` also works, but may cause side effects when multiple Data Grid instances are present on a single page.\nIf you still need to call it with the state, don't forget to pass the instance ID as the example:\n\n```tsx\nconst paginationModel = gridPaginationModelSelector(\n  apiRef.current.state,\n  apiRef.current.instanceId,\n);\n```\n\n:::"
              ],
              "code_path": [
                "DirectSelector.js"
              ],
              "children": []
            },
            {
              "name": "With useGridSelector",
              "introduction": [
                "With useGridSelector\n\nIf you only need to access the state value in the render of your components, use the `useGridSelector` hook.\nThis hook ensures there is a reactive binding such that when the state changes, the component in which this hook is used is re-rendered.\n\n```tsx\nconst paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n```\n\n:::warning\nThis hook can only be used inside the context of the Data Grid, such as within custom components.\nOtherwise, you will get an error saying that the state is not initialized during the first render.\n:::"
              ],
              "code_path": [
                "UseGridSelector.js"
              ],
              "children": []
            },
            {
              "name": "Catalog of selectors",
              "introduction": [
                "Catalog of selectors\n\nSome selectors have not yet been documented.\n\n{{\"component\": \"modules/components/SelectorsDocs.js\"}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Save and restore the state",
          "introduction": [
            "Save and restore the state\n\nThe current state of the Data Grid can be exported using `apiRef.current.exportState()`.\nIt can then be restored by either passing the returned value to the `initialState` prop or to the `apiRef.current.restoreState()` method.\n\nWatch out for controlled models and their callbacks (`onFilterModelChange` if you use `filterModel`, for instance), as the Data Grid calls those callbacks when restoring the state.\nBut if the callback is not defined or if calling it does not update the prop value, then the restored value will not be applied."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Restore the state with initialState",
              "introduction": [
                "Restore the state with initialState\n\nYou can pass the state returned by `apiRef.current.exportState()` to the `initialState` prop.\n\nIn the demo below, clicking on **Recreate the 2nd grid** will re-mount the second Data Grid with the current state of the first Grid.",
                ":::warning\nIf you restore the page using `initialState` before the data is fetched, the Data Grid will automatically move to the first page.\n:::"
              ],
              "code_path": [
                "RestoreStateInitialState.js",
                null
              ],
              "children": []
            },
            {
              "name": "Save and restore the state from external storage",
              "introduction": [
                "Save and restore the state from external storage\n\nYou can use `apiRef.current.exportState()` to save a snapshot of the state to an external storage (for example using local storage or redux).\nThis way the state can be persisted on refresh or navigating to another page.\n\nIn the following demo, the state is saved to `localStorage` and restored when the page is refreshed.\nThis is done by listening on the `beforeunload` event.\nWhen the component is unmounted, the `useLayoutEffect` cleanup function is being used instead."
              ],
              "code_path": [
                "SaveAndRestoreStateInitialState.js"
              ],
              "children": []
            },
            {
              "name": "Restore the state with apiRef",
              "introduction": [
                "Restore the state with apiRef\n\nYou can pass the state returned by `apiRef.current.exportState()` to the `apiRef.current.restoreState` method.\nIn the demo below, clicking on **Save current view** will create a snapshot of the changes made in the state, considering the initial state.\nYou can apply these changes on the Data Grid later selecting a saved view in the **Custom view** menu."
              ],
              "code_path": [
                "RestoreStateApiRef.js"
              ],
              "children": [
                {
                  "name": "Restore part of the state",
                  "introduction": [
                    "Restore part of the state\n\nIt is possible to restore specific properties of the state using the `apiRef.current.restoreState()` method.\nFor instance, to only restore the pinned columns:\n\n```ts\napiRef.current.restoreState({\n  pinnedColumns: ['brand'],\n});\n```\n\n:::warning\nMost of the state keys are not fully independent.\n\nRestoring pagination without restoring filters or sorting will work, but the rows displayed after the re-import will not be the same as before the export.\n:::"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->column-spanning",
      "introduction": [
        "# Data Grid - Column spanning\n\n<p class=\"description\">Span cells across several columns.</p>\n\nBy default, each cell takes up the width of one column.\nYou can modify this behavior with column spanning.\nIt allows cells to span multiple columns.\nThis is very close to the \"column spanning\" in an HTML `<table>`.\n\nTo change the number of columns a cell should span, use the `colSpan` property available in `GridColDef`:\n\n```ts\ninterface GridColDef {\n  /**\n   * Number of columns a cell should span.\n   * @default 1\n   */\n  colSpan?: number | ((params: GridCellParams<R, V, F>) => number | undefined);\n  …\n}\n```\n\n:::warning\nWhen using `colSpan`, some other features may be pointless or may not work as expected (depending on the data model).\nTo avoid a confusing grid layout, consider disabling the following features for any columns that are affected by `colSpan`:\n\n- [sorting](/x/react-data-grid/sorting/#disable-the-sorting)\n- [filtering](/x/react-data-grid/filtering/#disable-the-filters)\n- [column reorder](/x/react-data-grid/column-ordering/)\n- [hiding columns](/x/react-data-grid/column-visibility/)\n- [column pinning](/x/react-data-grid/column-pinning/#disable-column-pinning)\n\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Number signature",
          "introduction": [
            "Number signature\n\nThe number signature sets **all cells in the column** to span a given number of columns.\n\n```ts\ninterface GridColDef {\n  colSpan?: number;\n}\n```"
          ],
          "code_path": [
            "ColumnSpanningNumber.js"
          ],
          "children": []
        },
        {
          "name": "Function signature",
          "introduction": [
            "Function signature\n\nThe function signature allows spanning only **specific cells** in the column.\nThe function receives [`GridCellParams`](/x/api/data-grid/grid-cell-params/) as argument.\n\n```ts\ninterface GridColDef {\n  colSpan?: (params: GridCellParams<R, V, F>) => number | undefined;\n}\n```",
            "Function signature can also be useful to derive `colSpan` value from row data:"
          ],
          "code_path": [
            "ColumnSpanningFunction.js",
            "ColumnSpanningDerived.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->list-view",
      "introduction": [
        "# Data Grid - List view [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')🧪\n\n<p class=\"description\">Display data in a single-column list view. Can be used to present a more compact grid on smaller screens and mobile devices.</p>\n\n:::warning\nThis feature is marked as **unstable**. While you can use this feature in production, the API could change in the future.\n:::\n\nList view can be enabled by providing the `unstable_listView` prop.\n\nUnlike the default grid view, the list view makes no assumptions on how data is presented to end users.\n\nIn order to display data in a list view, a `unstable_listColumn` prop must be provided with a `renderCell` function.\n\n```tsx\nfunction ListViewCell(params: GridRenderCellParams) {\n  return <>{params.row.id}</>;\n}\n\nconst listColDef: GridListColDef = {\n  field: 'listColumn',\n  renderCell: ListViewCell,\n};\n\n<DataGridPro unstable_listColumn={listColDef} unstable_listView={true} />;\n```"
      ],
      "code_path": [
        "ListView.js"
      ],
      "children": [
        {
          "name": "Enable with a media query",
          "introduction": [
            "Enable with a media query\n\nUse the `useMediaQuery` hook from `@mui/material` to enable the list view feature at a specified breakpoint.\n\nThe demo below automatically switches to a list layout when the viewport width is below the `md` breakpoint."
          ],
          "code_path": [
            "ListViewMediaQuery.js"
          ],
          "children": []
        },
        {
          "name": "Editable rows",
          "introduction": [
            "Editable rows\n\nThe [editing feature](/x/react-data-grid/editing/) is not supported in list view, but it is possible to build an editing experience from within your custom cell renderer, as shown below."
          ],
          "code_path": [
            "ListViewEdit.js"
          ],
          "children": []
        },
        {
          "name": "Advanced usage",
          "introduction": [
            "Advanced usage\n\nThe list view feature can be combined with [custom subcomponents](/x/react-data-grid/components/) to provide an improved user experience on small screens, as shown below."
          ],
          "code_path": [
            "ListViewAdvanced.js"
          ],
          "children": []
        },
        {
          "name": "Feature compatibility",
          "introduction": [
            "Feature compatibility\n\nThe list view feature can be used in combination with the following features:\n\n- ✅ [Sorting](/x/react-data-grid/sorting/)\n- ✅ [Filtering](/x/react-data-grid/filtering/)\n- ✅ [Pagination](/x/react-data-grid/pagination/)\n- ✅ [Row selection](/x/react-data-grid/row-selection/)\n- ✅ [Multi filters](/x/react-data-grid/filtering/multi-filters/) [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n- ✅ [Row pinning](/x/react-data-grid/row-pinning/) [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n- ✅ [Cell selection](/x/react-data-grid/cell-selection/) [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\n:::warning\nFeatures not listed may not work as expected, or may not work at all.\n\nIf you're using a feature that's listed above and it's not working as expected, please [open a bug report](https://github.com/mui/mui-x/issues/new?assignees=&labels=status%3A+waiting+for+maintainer%2Cbug+%F0%9F%90%9B&projects=&template=1.bug.yml).\n\nIf you need to use list view with any other features, please [open a feature request](https://github.com/mui/mui-x/issues/new?assignees=&labels=status%3A+waiting+for+maintainer%2Cnew+feature&projects=&template=2.feature.yml).\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)\n- [GridListColDef](/x/api/data-grid/grid-list-col-def/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->column-dimensions",
      "introduction": [
        "# Data Grid - Column dimensions\n\n<p class=\"description\">Customize the dimensions and resizing behavior of your columns.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Column width",
          "introduction": [
            "Column width\n\nBy default, the columns have a width of 100px.\nThis is an arbitrary, easy-to-remember value.\nTo change the width of a column, use the `width` property available in `GridColDef`."
          ],
          "code_path": [
            "ColumnWidthGrid.js"
          ],
          "children": [
            {
              "name": "Minimum width",
              "introduction": [
                "Minimum width\n\nBy default, the columns have a minimum width of 50px.\nThis is an arbitrary, easy-to-remember value.\nTo change the minimum width of a column, use the `minWidth` property available in `GridColDef`."
              ],
              "code_path": [
                "ColumnMinWidthGrid.js"
              ],
              "children": []
            },
            {
              "name": "Fluid width",
              "introduction": [
                "Fluid width\n\nColumn fluidity or responsiveness can be achieved by setting the `flex` property in `GridColDef`.\n\nThe `flex` property accepts a value between 0 and ∞.\nIt works by dividing the remaining space in the Data Grid among all flex columns in proportion to their `flex` value.\n\nFor example, consider a grid with a total width of 500px that has three columns: the first with `width: 200`; the second with `flex: 1`; and the third with `flex: 0.5`.\nThe first column will be 200px wide, leaving 300px remaining. The column with `flex: 1` is twice the size of `flex: 0.5`, which means that final sizes will be: 200px, 200px, 100px.\n\nTo set a minimum and maximum width for a `flex` column set the `minWidth` and the `maxWidth` property in `GridColDef`.\n\n:::warning\nBefore using fluid width, note that:\n\n- `flex` doesn't work together with `width`. If you set both `flex` and `width` in `GridColDef`, `flex` will override `width`.\n- `flex` doesn't work if the combined width of the columns that have `width` is more than the width of the Data Grid itself. If that is the case a scroll bar will be visible, and the columns that have `flex` will default back to their base value of 100px.\n\n:::"
              ],
              "code_path": [
                "ColumnFluidWidthGrid.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Resizing",
          "introduction": [
            "Resizing\n\nBy default, Data Grid allows all columns to be resized by dragging the right portion of the column separator.\n\nTo prevent the resizing of a column, set `resizable: false` in the `GridColDef`.\nAlternatively, to disable all columns resize, set the prop `disableColumnResize={true}`.\n\nTo restrict resizing a column under a certain width set the `minWidth` property in `GridColDef`.\n\nTo restrict resizing a column above a certain width set the `maxWidth` property in `GridColDef`.",
            "To capture changes in the width of a column there are two callbacks that are called:\n\n- `onColumnResize`: Called while a column is being resized.\n- `onColumnWidthChange`: Called after the width of a column is changed, but not during resizing."
          ],
          "code_path": [
            "ColumnSizingGrid.js",
            null
          ],
          "children": []
        },
        {
          "name": "Autosizing",
          "introduction": [
            "Autosizing\n\nData Grid allows to autosize the columns' dimensions based on their content. Autosizing is enabled by default. To turn it off, pass the `disableAutosize` prop to the Data Grid.\n\nAutosizing can be used by one of the following methods:\n\n- Adding the `autosizeOnMount` prop,\n- Double-clicking a column header separator on the grid,\n- Calling the `apiRef.current.autosizeColumns(options)` API method.\n\nYou can pass options directly to the API method when you call it. To configure autosize for the other two methods, provide the options in the `autosizeOptions` prop.\n\nNote that for the separator double-click method, the `autosizeOptions.columns` will be replaced by the respective column user double-clicked on.\n\nIn all the cases, the `colDef.minWidth` and `colDef.maxWidth` options will be respected.\n\n```tsx\n<DataGrid\n  {...otherProps}\n  autosizeOptions={{\n    columns: ['name', 'status', 'createdBy'],\n    includeOutliers: true,\n    includeHeaders: false,\n  }}\n/>\n```",
            ":::warning\nThe Data Grid can only autosize based on the currently rendered cells.\n\nDOM access is required to accurately calculate dimensions, so unmounted cells (when [virtualization](/x/react-data-grid/virtualization/) is on) cannot be sized. If you need a bigger row sample, [open an issue](https://github.com/mui/mui-x/issues) to discuss it further.\n:::"
          ],
          "code_path": [
            "ColumnAutosizing.js",
            null
          ],
          "children": [
            {
              "name": "Autosizing asynchronously",
              "introduction": [
                "Autosizing asynchronously\n\nThe `autosizeColumns` method from the `apiRef` can be used as well to adjust the column size on specified events, for example when receiving row data from the server.",
                ":::warning\nThis example uses `ReactDOM.flushSync`. If used incorrectly it can hurt the performance of your application. Please refer to the official [React docs](https://react.dev/reference/react-dom/flushSync) for further information.\n:::"
              ],
              "code_path": [
                "ColumnAutosizingAsync.js",
                null
              ],
              "children": []
            },
            {
              "name": "Autosizing with dynamic row height",
              "introduction": [
                "Autosizing with dynamic row height\n\nColumn autosizing is compatible with the [Dynamic row height](/x/react-data-grid/row-height/#dynamic-row-height) feature.",
                ":::warning\nWhen autosizing columns with long content, consider setting the `maxWidth` for the column to avoid it becoming too wide.\n:::"
              ],
              "code_path": [
                "ColumnAutosizingDynamicRowHeight.js",
                null
              ],
              "children": []
            },
            {
              "name": "Autosizing with grouped rows [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')",
              "introduction": [
                "Autosizing with grouped rows [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\nWhen using [row grouping](/x/react-data-grid/row-grouping/) you can utilize the `autosizeColumns` method to adjust the column width of the expanded rows dynamically.\nThe demo below shows how you can subscribe to the `rowExpansionChange` event. The provided handler function then calls the `autosizeColumns` method from the gridApi."
              ],
              "code_path": [
                "ColumnAutosizingGroupedRows.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->components",
      "introduction": [
        "# Data Grid - Custom slots and subcomponents\n\n<p class=\"description\">Learn how to override parts of the grid.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Interacting with the Data Grid",
          "introduction": [
            "Interacting with the Data Grid\n\nThe grid exposes two hooks to help you access the Data Grid data while overriding component slots.\n\nThey can be used as below:\n\n- `useGridApiContext`: returns the `apiRef` object (more details on the [API object page](/x/react-data-grid/api-object/#inside-the-data-grid)).\n- `useGridSelector`: returns the result of a selector on the current state (more details on the [State page](/x/react-data-grid/state/#access-the-state)).\n\n```tsx\nfunction CustomPagination() {\n  const apiRef = useGridApiContext();\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\n\n  return (\n    <Pagination\n      count={pageCount}\n      page={paginationModel.page + 1}\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\n    />\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Component slots",
          "introduction": [
            "Component slots\n\n:::success\n\n- See [Common concepts—Slots and subcomponents](/x/common-concepts/custom-components/) to learn how to use slots.\n- See [`GridSlotsComponent`](/x/api/data-grid/data-grid/#slots) to learn about the available slots.\n\n  :::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Columns panel",
              "introduction": [
                "Columns panel\n\nIn the following demo, the columns panel is replaced with a custom component that represents the [column groups](/x/react-data-grid/column-groups/) as a nested list."
              ],
              "code_path": [
                "CustomColumnsPanel.js"
              ],
              "children": []
            },
            {
              "name": "Column menu",
              "introduction": [
                "Column menu\n\nAs mentioned above, the column menu is a component slot that can be recomposed easily and customized on each column as in the demo below."
              ],
              "code_path": [
                "CustomColumnMenu.js"
              ],
              "children": []
            },
            {
              "name": "Toolbar",
              "introduction": [
                "Toolbar\n\nTo enable the toolbar you need to add the `toolbar: GridToolbar` to the Data Grid `slots` prop.\nThis demo showcases how this can be achieved.",
                "You can also compose your own toolbar. Each button in the toolbar is wrapped with a tooltip component.\nIn order to override some of the props corresponding to the toolbar buttons, you can use the `slotProps` prop.\n\nThe following demo shows how to override the tooltip title of the density selector and the variant of the export button.\n\n```jsx\nfunction CustomToolbar() {\n  return (\n    <GridToolbarContainer>\n      <GridToolbarColumnsButton />\n      <GridToolbarFilterButton />\n      <GridToolbarDensitySelector\n        slotProps={{ tooltip: { title: 'Change density' } }}\n      />\n      <Box sx={{ flexGrow: 1 }} />\n      <GridToolbarExport\n        slotProps={{\n          tooltip: { title: 'Export data' },\n          button: { variant: 'outlined' },\n        }}\n      />\n    </GridToolbarContainer>\n  );\n}\n```"
              ],
              "code_path": [
                "ToolbarGrid.js",
                "CustomToolbarGrid.js"
              ],
              "children": []
            },
            {
              "name": "Footer",
              "introduction": [
                "Footer\n\nThe grid exposes props to hide specific elements of the UI:\n\n- `hideFooter`: If `true`, the footer component is hidden.\n- `hideFooterRowCount`: If `true`, the row count in the footer is hidden.\n- `hideFooterSelectedRowCount`: If `true`, the selected row count in the footer is hidden.\n- `hideFooterPagination`: If `true`, the pagination component in the footer is hidden."
              ],
              "code_path": [
                "CustomFooter.js"
              ],
              "children": []
            },
            {
              "name": "Pagination",
              "introduction": [
                "Pagination\n\nThe default pagination component is exported as `GridPagination`.\nThis component is an extension of the [TablePagination](/material-ui/react-pagination/#table-pagination) component, and it renders the page size control, the number of rows in the page and also the buttons to go to the previous and next page.\nYou can replace the pagination component completely or reuse the default one.\n\nThe next demo reuses `GridPagination` but replaces the previous and next page buttons with [Pagination](/material-ui/react-pagination/), which renders a dedicated button for each page."
              ],
              "code_path": [
                "CustomPaginationGrid.js"
              ],
              "children": []
            },
            {
              "name": "Row",
              "introduction": [
                "Row\n\nThe `slotProps.row` prop can be used to pass additional props to the row component.\nOne common use case might be to listen for events not exposed by [default](/x/react-data-grid/events/#catalog-of-events).\nThe demo below shows a context menu when a row is right-clicked."
              ],
              "code_path": [
                "RowContextMenu.js"
              ],
              "children": []
            },
            {
              "name": "Cell",
              "introduction": [
                "Cell\n\nThe following demo uses the `slotProps.cell` prop to listen for specific events emitted by the cells.\nTry it by hovering a cell with the mouse and it should display the number of characters each cell has."
              ],
              "code_path": [
                "CellWithPopover.js"
              ],
              "children": []
            },
            {
              "name": "Icons",
              "introduction": [
                "Icons\n\nAs any component slot, every icon can be customized. However, it is not yet possible to use the `slotProps` with icons."
              ],
              "code_path": [
                "CustomSortIcons.js"
              ],
              "children": []
            },
            {
              "name": "Overlays",
              "introduction": [
                "Overlays\n\nSee the [Overlays](/x/react-data-grid/overlays/) documentation on how to customize the `loadingOverlay`, `noRowsOverlay`, and `noResultsOverlay`."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Custom slot props with TypeScript",
          "introduction": [
            "Custom slot props with TypeScript\n\n:::success\nThis section focuses on module augmentation.\n\nSee [Custom slots and subcomponents—Usage with TypeScript](/x/common-concepts/custom-components/#usage-with-typescript) if you don't want to use this approach.\n:::\n\nIf the custom component requires additional props to work properly, TypeScript may throw type errors.\nTo solve these type errors, use [module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) to enhance the props interface.\n\nThe naming of overridable interfaces uses a pattern like this:\n\n```js\n`${slotNameInPascalCase}PropsOverrides`;\n```\n\nFor example, for `columnMenu` slot, the interface name would be `ColumnMenuPropsOverrides`.\n\nThis [file](https://github.com/mui/mui-x/blob/-/packages/x-data-grid/src/models/gridSlotsComponentsProps.ts) lists all the interfaces for each slot that could be used for augmentation.\n\n<codeblock storageKey=\"pricing-plan\">\n\n```tsx Community\n// augment the props for the toolbar slot\ndeclare module '@mui/x-data-grid' {\n  interface ToolbarPropsOverrides {\n    someCustomString: string;\n    someCustomNumber: number;\n  }\n}\n\n<DataGrid\n  slots={{\n    // custom component passed to the toolbar slot\n    toolbar: CustomGridToolbar,\n  }}\n  slotProps={{\n    toolbar: {\n      // props used by CustomGridToolbar\n      someCustomString: 'Hello',\n      someCustomNumber: 42,\n    },\n  }}\n/>;\n```\n\n```tsx Pro\n// augment the props for the toolbar slot\ndeclare module '@mui/x-data-grid-pro' {\n  interface ToolbarPropsOverrides {\n    someCustomString: string;\n    someCustomNumber: number;\n  }\n}\n\n<DataGridPro\n  slots={{\n    // custom component passed to the toolbar slot\n    toolbar: CustomGridToolbar,\n  }}\n  slotProps={{\n    toolbar: {\n      // props used by CustomGridToolbar\n      someCustomString: 'Hello',\n      someCustomNumber: 42,\n    },\n  }}\n/>;\n```\n\n```tsx Premium\n// augment the props for the toolbar slot\ndeclare module '@mui/x-data-grid-premium' {\n  interface ToolbarPropsOverrides {\n    someCustomString: string;\n    someCustomNumber: number;\n  }\n}\n\n<DataGridPremium\n  slots={{\n    // custom component passed to the toolbar slot\n    toolbar: CustomGridToolbar,\n  }}\n  slotProps={{\n    toolbar: {\n      // props used by CustomGridToolbar\n      someCustomString: 'Hello',\n      someCustomNumber: 42,\n    },\n  }}\n/>;\n```\n\n</codeblock>\n\nThis demo below shows how to use the `slotProps` prop and module augmentation to pass a new prop `status` to the `footer` slot."
          ],
          "code_path": [
            "CustomFooter.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->editing",
      "introduction": [
        "# Data Grid - Custom edit component\n\n<p class=\"description\">Creating custom edit component.</p>\n\nEach of the built-in column types provides a component to edit the value of the cells.\nTo customize column types, or override the existing components, you can provide a new edit component through the `renderEditCell()` property in the column definition.\nThis property works like the `renderCell()` property, which is rendered while cells are in view mode.\n\n```tsx\nfunction CustomEditComponent(props: GridRenderEditCellParams) {\n  return <input type=\"text\" value={params.value} onValueChange={...} />;\n}\n\nconst columns: GridColDef[] = [\n  {\n    field: 'firstName',\n    renderEditCell: (params: GridRenderEditCellParams) => (\n      <CustomEditComponent {...params} />\n    ),\n  },\n];\n```\n\nThe `renderEditCell()` property receives all params from `GridRenderEditCellParams`, which extends `GridCellParams`.\nAdditionally, the props added during [pre-processing](#validation) are also available in the params.\nThese are the most important params to consider:\n\n- `value`: contains the current value of the cell in edit mode, overriding the value from `GridCellParams`\n- `error`: the error added during validation\n- `isProcessingProps`: whether `preProcessEditCellProps()` is being executed or not\n\nOnce a new value is entered into the input, it must be sent to the data grid.\nTo do this, pass the row ID, the column field, and the new cell value to a call to `apiRef.current.setEditCellValue()`.\nThe new value will be parsed and validated, and the `value` prop will reflect the changes in the next render.\n\n```tsx\nfunction CustomEditComponent(props: GridRenderEditCellParams) {\n  const { id, value, field } = props;\n  const apiRef = useGridApiContext();\n\n  const handleValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value; // The new value entered by the user\n    apiRef.current.setEditCellValue({ id, field, value: newValue });\n  };\n\n  return <input type=\"text\" value={value} onChange={handleValueChange} />;\n}\n```\n\nThe following demo implements a custom edit component, based on the [`Rating`](https://mui.com/material-ui/react-rating/) component from `@mui/material`, for the **Rating** column."
      ],
      "code_path": [
        "CustomEditComponent.js"
      ],
      "children": [
        {
          "name": "With debounce",
          "introduction": [
            "With debounce\n\nBy default, each call to `apiRef.current.setEditCellValue()` triggers a new render.\nIf the edit component requires the user to type a new value, re-rendering the data grid too often will drastically reduce performance.\nOne way to avoid this is to debounce the API calls.\nYou can use `apiRef.current.setEditCellValue()` to handle debouncing by setting the `debounceMs` param to a positive integer that defines a set time period in milliseconds.\nNo matter how many times the API method is called, the data grid will only be re-rendered after that period of time has passed.\n\n```tsx\napiRef.current.setEditCellValue({ id, field, value: newValue, debounceMs: 200 });\n```\n\nWhen the data grid is only set to re-render after a given period of time has passed, the `value` prop will not be updated on each `apiRef.current.setEditCellValue()` call.\nTo avoid a frozen UI, the edit component can keep the current value in an internal state and sync it once `value` changes.\nModify the edit component to enable this feature:\n\n```diff\n function CustomEditComponent(props: GridRenderEditCellParams) {\n-  const { id, value, field } = props;\n+  const { id, value: valueProp, field } = props;\n+  const [value, setValue] = React.useState(valueProp);\n   const apiRef = useGridApiContext();\n\n   const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n     const newValue = event.target.value; // The new value entered by the user\n-    apiRef.current.setEditCellValue({ id, field, value: newValue });\n+    apiRef.current.setEditCellValue({ id, field, value: newValue, debounceMs: 200 });\n+    setValue(newValue);\n   };\n\n+  React.useEffect(() => {\n+    setValue(valueProp);\n+  }, [valueProp]);\n+\n   return <input type=\"text\" value={value} onChange={handleChange} />;\n }\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "With auto-stop",
          "introduction": [
            "With auto-stop\n\nAn edit component has \"auto-stop\" behavior when it stops edit mode as soon as the value is changed.\nTo picture better, imagine an edit component with a combo, created following the normal steps.\nBy default, it would require two clicks to change the value of the cell: one click inside the cell to select a new value, and another click outside the cell to save.\nThis second click can be avoided if the first click also stops the edit mode.\nTo create an edit component with auto-stop, call `apiRef.current.stopCellEditMode()` after setting the new value.\nSince `apiRef.current.setEditCellValue()` may do additional processing, you must wait for it to resolve before stopping the edit mode.\nAlso, it is a good practice to check if `apiRef.current.setEditCellValue()` has returned `true`.\nIt will be `false` if `preProcessEditProps()` set an error during [validation](#validation).\n\n```tsx\nconst handleChange = async (event: SelectChangeEvent) => {\n  const isValid = await apiRef.current.setEditCellValue({\n    id,\n    field,\n    value: event.target.value,\n  });\n\n  if (isValid) {\n    apiRef.current.stopCellEditMode({ id, field });\n  }\n};\n```\n\nThe following demo implements an edit component with auto-stop, based on a native [`Select`](/material-ui/react-select/) component for the **Role** column.",
            ":::warning\nAvoid using edit components with auto-stop in columns that use long-running `preProcessEditCellProps()` because the UI will freeze while waiting for `apiRef.current.setEditCellValue()`.\nInstead, use the provided interactions to exit edit mode.\n:::"
          ],
          "code_path": [
            "AutoStopEditComponent.js",
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->getting-started",
      "introduction": [
        "# Data Grid - Getting started\n\n<p class=\"description\">Get started with the last React Data Grid you will need. Install the package, configure the columns, provide rows, and you are set.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Installation",
          "introduction": [
            "Installation\n\nUsing your favorite package manager, install `@mui/x-data-grid-pro` or `@mui/x-data-grid-premium` for the commercial version, or `@mui/x-data-grid` for the free community version.\n\n<!-- #default-branch-switch -->\n\n{{\"component\": \"modules/components/DataGridInstallationInstructions.js\"}}\n\nThe Data Grid package has a peer dependency on `@mui/material`.\nIf you are not already using it in your project, you can install it with:\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n```bash pnpm\npnpm add @mui/material @emotion/react @emotion/styled\n```\n\n```bash yarn\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n</codeblock>\n\n<!-- #react-peer-version -->\n\nPlease note that [react](https://www.npmjs.com/package/react) and [react-dom](https://www.npmjs.com/package/react-dom) are peer dependencies too:\n\n```json\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n},\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Style engine",
              "introduction": [
                "Style engine\n\nMaterial UI is using [Emotion](https://emotion.sh/docs/introduction) as a styling engine by default. If you want to use [`styled-components`](https://styled-components.com/) instead, run:\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/styled-engine-sc styled-components\n```\n\n```bash pnpm\npnpm add @mui/styled-engine-sc styled-components\n```\n\n```bash yarn\nyarn add @mui/styled-engine-sc styled-components\n```\n\n</codeblock>\n\n:::info\nTake a look at the [Styled Components guide](/material-ui/integrations/styled-components/) for more information about how to configure `styled-components` as the style engine.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Quickstart",
          "introduction": [
            "Quickstart\n\nFirst, you have to import the component as below.\nTo avoid name conflicts the component is named Data Grid Pro for the full-featured enterprise grid, and Data Grid for the free community version.\n\n```js\nimport { DataGrid } from '@mui/x-data-grid';\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Define rows",
              "introduction": [
                "Define rows\n\nRows are key-value pair objects, mapping column names as keys with their values.\nYou should also provide an `id` property on each row to allow delta updates and better performance.\n\nHere is an example\n\n```js\nconst rows: GridRowsProp = [\n  { id: 1, col1: 'Hello', col2: 'World' },\n  { id: 2, col1: 'DataGridPro', col2: 'is Awesome' },\n  { id: 3, col1: 'MUI', col2: 'is Amazing' },\n];\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Define columns",
              "introduction": [
                "Define columns\n\nComparable to rows, columns are objects defined with a set of attributes of the `GridColDef` interface.\nThey are mapped to the rows through their `field` property.\n\n```tsx\nconst columns: GridColDef[] = [\n  { field: 'col1', headerName: 'Column 1', width: 150 },\n  { field: 'col2', headerName: 'Column 2', width: 150 },\n];\n```\n\nYou can import `GridColDef` to see all column properties."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Demo",
              "introduction": [
                "Demo\n\nPutting it together, this is all you need to get started, as you can see in this live and interactive demo:\n\n```tsx\nimport * as React from 'react';\nimport { DataGrid, GridRowsProp, GridColDef } from '@mui/x-data-grid';\n\nconst rows: GridRowsProp = [\n  { id: 1, col1: 'Hello', col2: 'World' },\n  { id: 2, col1: 'DataGridPro', col2: 'is Awesome' },\n  { id: 3, col1: 'MUI', col2: 'is Amazing' },\n];\n\nconst columns: GridColDef[] = [\n  { field: 'col1', headerName: 'Column 1', width: 150 },\n  { field: 'col2', headerName: 'Column 2', width: 150 },\n];\n\nexport default function App() {\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid rows={rows} columns={columns} />\n    </div>\n  );\n}\n```"
              ],
              "code_path": [
                "Codesandbox.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "TypeScript",
          "introduction": [
            "TypeScript\n\nIn order to benefit from the [CSS overrides](/material-ui/customization/theme-components/#theme-style-overrides) and [default prop customization](/material-ui/customization/theme-components/#theme-default-props) with the theme, TypeScript users need to import the following types.\nInternally, it uses module augmentation to extend the default theme structure.\n\n```tsx\nimport type {} from '@mui/x-data-grid/themeAugmentation';\nimport type {} from '@mui/x-data-grid-pro/themeAugmentation';\nimport type {} from '@mui/x-data-grid-premium/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    // Use `MuiDataGrid` on DataGrid, DataGridPro and DataGridPremium\n    MuiDataGrid: {\n      styleOverrides: {\n        root: {\n          backgroundColor: 'red',\n        },\n      },\n    },\n  },\n});\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Licenses",
          "introduction": [
            "Licenses\n\nWhile our Core libraries are entirely licensed under MIT, MUI X serves a part of its components under a commercial license.\nPlease pay attention to the license."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Plans",
              "introduction": [
                "Plans\n\nThe component comes [in different plans](https://mui.com/pricing/):\n\n- **Community** Plan: [`@mui/x-data-grid`](https://www.npmjs.com/package/@mui/x-data-grid), published under the [MIT license](https://www.tldrlegal.com/license/mit-license) and [free forever](https://mui-org.notion.site/Stewardship-542a2226043d4f4a96dfb429d16cf5bd).\n- **Pro** Plan: [`@mui/x-data-grid-pro`](https://www.npmjs.com/package/@mui/x-data-grid-pro) published under a [Commercial license](https://mui.com/legal/mui-x-eula/).\n- **Premium** Plan: [`@mui/x-data-grid-premium`](https://www.npmjs.com/package/@mui/x-data-grid-premium) published under a [Commercial license](https://mui.com/legal/mui-x-eula/).\n\nYou can find more information about the plans in [the Licensing page](/x/introduction/licensing/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Feature comparison",
              "introduction": [
                "Feature comparison\n\nThe following table summarizes the features available in the community Data Grid and enterprise Data Grid Pro components.\nAll the features of the community version are available in the enterprise one.\nThe enterprise components come in two plans: Pro and Premium.\n\n| Features                                                                               | Community | Pro [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan') | Premium [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan') |\n| :- | :-: | :-----: |\n| **Column**                                                                             |           |                                                                                      |                                                                                                      |\n| [Column groups](/x/react-data-grid/column-groups/)                                     |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Column spanning](/x/react-data-grid/column-spanning/)                                 |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Column resizing](/x/react-data-grid/column-dimensions/#resizing)                      |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Column autosizing](/x/react-data-grid/column-dimensions/#autosizing)                  |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Column reorder](/x/react-data-grid/column-ordering/)                                  |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| [Column pinning](/x/react-data-grid/column-pinning/)                                   |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| **Row**                                                                                |           |                                                                                      |                                                                                                      |\n| [Row height](/x/react-data-grid/row-height/)                                           |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Row spanning](/x/react-data-grid/row-spanning/)                                       |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Row reordering](/x/react-data-grid/row-ordering/)                                     |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| [Row pinning](/x/react-data-grid/row-pinning/)                                         |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| **Selection**                                                                          |           |                                                                                      |                                                                                                      |\n| [Single row selection](/x/react-data-grid/row-selection/#single-row-selection)         |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Checkbox selection](/x/react-data-grid/row-selection/#checkbox-selection)             |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Multiple row selection](/x/react-data-grid/row-selection/#multiple-row-selection)     |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| [Cell range selection](/x/react-data-grid/cell-selection/)                             |    ❌     |                                          ❌                                          |                                                  ✅                                                  |\n| **Filtering**                                                                          |           |                                                                                      |                                                                                                      |\n| [Quick filter](/x/react-data-grid/filtering/quick-filter/)                             |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Column filters](/x/react-data-grid/filtering/#single-and-multi-filters)               |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Multi-column filtering](/x/react-data-grid/filtering/multi-filters/)                  |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| [Header filtering](/x/react-data-grid/filtering/header-filters/)                       |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| **Sorting**                                                                            |           |                                                                                      |                                                                                                      |\n| [Column sorting](/x/react-data-grid/sorting/)                                          |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Multi-column sorting](/x/react-data-grid/sorting/#multi-sorting)                      |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| **Pagination**                                                                         |           |                                                                                      |                                                                                                      |\n| [Pagination](/x/react-data-grid/pagination/)                                           |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Pagination > 100 rows per page](/x/react-data-grid/pagination/#size-of-the-page)      |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| **Editing**                                                                            |           |                                                                                      |                                                                                                      |\n| [Row editing](/x/react-data-grid/editing/#row-editing)                                 |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Cell editing](/x/react-data-grid/editing/)                                            |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| **Import & export**                                                                    |           |                                                                                      |                                                                                                      |\n| [CSV export](/x/react-data-grid/export/#csv-export)                                    |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Print](/x/react-data-grid/export/#print-export)                                       |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Clipboard copy](/x/react-data-grid/clipboard/#clipboard-copy)                         |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Clipboard paste](/x/react-data-grid/clipboard/#clipboard-paste)                       |    ❌     |                                          ❌                                          |                                                  ✅                                                  |\n| [Excel export](/x/react-data-grid/export/#excel-export)                                |    ❌     |                                          ❌                                          |                                                  ✅                                                  |\n| **Rendering**                                                                          |           |                                                                                      |                                                                                                      |\n| [Customizable components](/x/react-data-grid/components/)                              |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Column virtualization](/x/react-data-grid/virtualization/#column-virtualization)      |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Row virtualization > 100 rows](/x/react-data-grid/virtualization/#row-virtualization) |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| **Group & Pivot**                                                                      |           |                                                                                      |                                                                                                      |\n| [Tree data](/x/react-data-grid/tree-data/)                                             |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| [Master detail](/x/react-data-grid/master-detail/)                                     |    ❌     |                                          ✅                                          |                                                  ✅                                                  |\n| [Row grouping](/x/react-data-grid/row-grouping/)                                       |    ❌     |                                          ❌                                          |                                                  ✅                                                  |\n| [Aggregation](/x/react-data-grid/aggregation/)                                         |    ❌     |                                          ❌                                          |                                                  ✅                                                  |\n| [Pivoting](/x/react-data-grid/pivoting/)                                               |    ❌     |                                          ❌                                          |                                                  🚧                                                  |\n| **Misc**                                                                               |           |                                                                                      |                                                                                                      |\n| [Accessibility](/x/react-data-grid/accessibility/)                                     |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Keyboard navigation](/x/react-data-grid/accessibility/#keyboard-navigation)           |    ✅     |                                          ✅                                          |                                                  ✅                                                  |\n| [Localization](/x/react-data-grid/localization/)                                       |    ✅     |                                          ✅                                          |                                                  ✅                                                  |"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->prompt",
      "introduction": [
        "# Data Grid - Prompt [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\n<p class=\"description\">Translate natural language into a set of grid state updates and apply them to the Data Grid component.</p>\n\n:::warning\nTo use this feature, you need to have a prompt processing backend. MUI offers this service as a part of a premium package add-on. Check [licensing page](/x/introduction/licensing/) for more information.\n:::\n\nThe prompt feature allows users to interact with the Data Grid component using natural language. The user can type commands like \"sort by name\" or \"show amounts larger than 1000\" in the prompt input field, and the Data Grid will update accordingly.\n\nTo increase the accuracy of the prompt processing, the user should provide example values for the available columns.\nThis can be done in following ways.\n\n:::info\nPrompt demos use a utility function `mockPromptResolver` to simulate the api that resolves the user prompts.\nIn a real-world scenario, you should replace this with your own api.\n\n`mockPromptResolver` can handle a predefined set of prompts:\n\n- `sort by name`\n- `sort by company name and employee name`\n- `show people from the EU`\n- `order companies by amount of people`\n\n  :::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Custom examples",
          "introduction": [
            "Custom examples\n\nThe user can provide custom examples for the prompt processing through the `unstable_examples` prop of the column in the `columns` array.\nThe `unstable_examples` prop should be an array of values that are possible values for that column."
          ],
          "code_path": [
            "PromptWithExamples.js"
          ],
          "children": []
        },
        {
          "name": "Use row data for examples",
          "introduction": [
            "Use row data for examples\n\nIf you pass `allowDataSampling` flag to the `Unstable_GridToolbarPromptControl`, it uses the row data to generate examples for the prompt processing.\nThis is useful if you are dealing with non-sensitive data and want to skip creating custom examples for each column."
          ],
          "code_path": [
            "PromptWithDataSampling.js"
          ],
          "children": []
        },
        {
          "name": "Using Server-side data",
          "introduction": [
            "Using Server-side data\n\nAn example of combining prompt toolbar with the [Server-side data](/x/react-data-grid/server-side-data/)"
          ],
          "code_path": [
            "PromptWithDataSource.js"
          ],
          "children": []
        },
        {
          "name": "Integration with MUI's API",
          "introduction": [
            "Integration with MUI's API\n\nTo integrate with MUI's API, an API key would be needed.\nAs the key cannot be exposed to the client, a small proxy server could be used that would receive prompt processing requests, add the `x-api-key` header, and pass the request further to the MUI's API.\n\nThis is an example of a Fastify proxy for the prompt requests\n\n```ts\nfastify.register(proxy, {\n  upstream: process.env.MUI_DATAGRID_API_URL,\n  prefix: '/api/datagrid/prompt',\n  rewritePrefix: '/api/v1/datagrid/prompt',\n  replyOptions: {\n    rewriteRequestHeaders: (_, headers) => ({\n      ...headers,\n      'x-api-key': process.env.MUI_DATAGRID_API_KEY,\n    }),\n  },\n});\n```\n\nTo make the integration easier, use the `unstable_gridDefaultPromptResolver` from `@mui/x-data-grid-premium` package.\nIt will add necessary headers and stringify the body in the right format for you.\n\nThe example below shows a code that adds an additional prompt context for better results and uses `unstable_gridDefaultPromptResolver` to avoid dealing with the request details.\n\n```ts\nconst PROMPT_RESOLVER_PROXY_BASE_URL =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:3000'\n    : 'https://api.my-proxy.com';\n\nfunction processPrompt(context: string, query: string) {\n  const extendedContext = `The rows represent: List of employees with their company, position and start date\\n\\n${context}`;\n\n  return unstable_gridDefaultPromptResolver(\n    `${PROMPT_RESOLVER_PROXY_BASE_URL}/api/datagrid/prompt`,\n    extendedContext,\n    query,\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->column-ordering",
      "introduction": [
        "# Data Grid - Column ordering [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Drag and drop your columns to reorder them.</p>\n\n:::warning\nThere is [a known issue with Firefox v129](https://github.com/mui/mui-x/issues/14263) that impacts this feature.\nReordering does not work on that specific version of Firefox because the value for `event.dataTransfer` is `null` which results in an error.\n\nYou must upgrade to Firefox v130 or higher to avoid this issue.\n:::\n\nBy default, columns are ordered according to the order they are included in the `columns` array.\n\nBy default, Data Grid Pro allows all column reordering by dragging the header cells and moving them left or right.",
        "To disable reordering on all columns, set the prop `disableColumnReorder={true}`.\n\nTo disable reordering in a specific column, set the `disableReorder` property to true in the `GridColDef` of the respective column.",
        "In addition, column reordering emits the following events that can be imported:\n\n- `columnHeaderDragStart`: emitted when dragging of a header cell starts.\n- `columnHeaderDragEnter`: emitted when the cursor enters another header cell while dragging.\n- `columnHeaderDragOver`: emitted when dragging a header cell over another header cell.\n- `columnHeaderDragEnd`: emitted when dragging of a header cell stops."
      ],
      "code_path": [
        "ColumnOrderingGrid.js",
        "ColumnOrderingDisabledGrid.js",
        null
      ],
      "children": [
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->column-header",
      "introduction": [
        "# Data Grid - Column header\n\n<p class=\"description\">Customize your columns header.</p>\n\nYou can configure the headers with:\n\n- `headerName`: The title of the column rendered in the column header cell.\n- `description`: The description of the column rendered as tooltip if the column header name is not fully displayed."
      ],
      "code_path": [
        "HeaderColumnsGrid.js"
      ],
      "children": [
        {
          "name": "Custom header renderer",
          "introduction": [
            "Custom header renderer\n\nYou can customize the look of each header with the `renderHeader` method.\nIt takes precedence over the `headerName` property.\n\n```tsx\nconst columns: GridColDef[] = [\n  {\n    field: 'date',\n    width: 150,\n    type: 'date',\n    renderHeader: (params: GridColumnHeaderParams) => (\n      <strong>\n        {'Birthday '}\n        <span role=\"img\" aria-label=\"enjoy\">\n          🎂\n        </span>\n      </strong>\n    ),\n  },\n];\n```"
          ],
          "code_path": [
            "RenderHeaderGrid.js"
          ],
          "children": []
        },
        {
          "name": "Header height",
          "introduction": [
            "Header height\n\nBy default, column headers have a height of 56 pixels. This matches the height from the [Material Design guidelines](https://m2.material.io/components/data-tables).\n\nThe `columnHeaderHeight` prop can be used to override the default value."
          ],
          "code_path": [
            "HeaderHeight.js"
          ],
          "children": []
        },
        {
          "name": "Styling header",
          "introduction": [
            "Styling header\n\nYou can check the [styling header](/x/react-data-grid/style/#styling-column-headers) section for more information."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->tree-data",
      "introduction": [
        "# Data Grid - Tree data [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Use Tree data to handle rows with parent / child relationship.</p>\n\nTo enable the Tree data, you simply have to use the `treeData` prop as well as provide a `getTreeDataPath` prop.\nThe `getTreeDataPath` function returns an array of strings which represents the path to a given row.\n\n```tsx\n// The following examples will both render the same tree\n// - Sarah\n//     - Thomas\n//         - Robert\n//         - Karen\n\nconst columns: GridColDef[] = [{ field: 'jobTitle', width: 250 }];\n\n// Without transformation\nconst rows: GridRowsProp = [\n  { path: ['Sarah'], jobTitle: 'CEO', id: 0 },\n  { path: ['Sarah', 'Thomas'], jobTitle: 'Head of Sales', id: 1 },\n  { path: ['Sarah', 'Thomas', 'Robert'], jobTitle: 'Sales Person', id: 2 },\n  { path: ['Sarah', 'Thomas', 'Karen'], jobTitle: 'Sales Person', id: 3 },\n];\n\nconst getTreeDataPath: DataGridProProps['getTreeDataPath'] = (row) => row.path;\n\n<DataGridPro\n  treeData\n  getTreeDataPath={getTreeDataPath}\n  rows={rows}\n  columns={columns}\n/>;\n\n// With transformation\nconst rows: GridRowsProp = [\n  { path: 'Sarah', jobTitle: 'CEO', id: 0 },\n  { path: 'Sarah/Thomas', jobTitle: 'Head of Sales', id: 1 },\n  { path: 'Sarah/Thomas/Robert', jobTitle: 'Sales Person', id: 2 },\n  { path: 'Sarah/Thomas/Karen', jobTitle: 'Sales Person', id: 3 },\n];\n\nconst getTreeDataPath: DataGridProProps['getTreeDataPath'] = (row) =>\n  row.path.split('/');\n\n<DataGridPro\n  treeData\n  getTreeDataPath={getTreeDataPath}\n  rows={rows}\n  columns={columns}\n/>;\n```\n\n:::warning\nThe `getTreeDataPath` prop should keep the same reference between two renders.\nIf it changes, the Data Grid will consider that the data has changed and will recompute the tree resulting in collapsing all the rows.\n:::"
      ],
      "code_path": [
        "TreeDataSimple.js"
      ],
      "children": [
        {
          "name": "Custom grouping column",
          "introduction": [
            "Custom grouping column\n\nSame behavior as for the [Row grouping](/x/react-data-grid/row-grouping/#grouping-columns) except for the `leafField` and `mainGroupingCriteria` which are not applicable for the Tree data."
          ],
          "code_path": [
            "TreeDataCustomGroupingColumn.js"
          ],
          "children": [
            {
              "name": "Accessing the grouping column field",
              "introduction": [
                "Accessing the grouping column field\n\nIf you want to access the grouping column field, for instance, to use it with column pinning, the `GRID_TREE_DATA_GROUPING_FIELD` constant is available.\n\n```tsx\n<DataGridPro\n  treeData\n  initialState={{\n    pinnedColumns: {\n      left: [GRID_TREE_DATA_GROUPING_FIELD],\n    },\n  }}\n  {...otherProps}\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Group expansion",
          "introduction": [
            "Group expansion\n\nSame behavior as for the [Row grouping](/x/react-data-grid/row-grouping/#group-expansion)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Automatic parents and children selection",
          "introduction": [
            "Automatic parents and children selection\n\nSame behavior as for the [Row grouping](/x/react-data-grid/row-grouping/#automatic-parents-and-children-selection)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Gaps in the tree",
          "introduction": [
            "Gaps in the tree\n\nIf some entries are missing to build the full tree, the Data Grid Pro will automatically create rows to fill those gaps."
          ],
          "code_path": [
            "TreeDataWithGap.js"
          ],
          "children": []
        },
        {
          "name": "Filtering",
          "introduction": [
            "Filtering\n\nA node is included if one of the following criteria is met:\n\n- at least one of its descendants is passing the filters\n- it is passing the filters\n\nBy default, the filtering is applied to every depth of the tree.\nYou can limit the filtering to the top-level rows with the `disableChildrenFiltering` prop."
          ],
          "code_path": [
            "TreeDataDisableChildrenFiltering.js"
          ],
          "children": []
        },
        {
          "name": "Sorting",
          "introduction": [
            "Sorting\n\nBy default, the sorting is applied to every depth of the tree.\nYou can limit the sorting to the top-level rows with the `disableChildrenSorting` prop.",
            ":::warning\nIf you are using `sortingMode=\"server\"`, the children of a row must always immediately follow their parent.\nFor instance:\n\n```ts\n// ✅ The row A.A is immediately after its parent\nconst validRows = [{ path: ['A'] }, { path: ['A', 'A'] }, { path: ['B'] }];\n\n// ❌ The row A.A is not immediately after its parent\nconst invalidRows = [{ path: ['A'] }, { path: ['B'] }, { path: ['A', 'A'] }];\n```\n\n:::"
          ],
          "code_path": [
            "TreeDataDisableChildrenSorting.js",
            null
          ],
          "children": []
        },
        {
          "name": "Children lazy-loading",
          "introduction": [
            "Children lazy-loading\n\nCheck the [Server-side tree data](/x/react-data-grid/server-side-data/tree-data/) section for more information about lazy-loading tree data children."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Full example",
          "introduction": [
            "Full example"
          ],
          "code_path": [
            "TreeDataFullExample.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->scrolling",
      "introduction": [
        "# Data Grid - Scrolling\n\n<p class=\"description\">This section presents how to programmatically control the scroll.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Scrolling to specific cells",
          "introduction": [
            "Scrolling to specific cells\n\nYou can scroll to a specific cell by calling `apiRef.current.scrollToIndexes()`.\nThe only argument that must be passed is an object containing the row index and the column index of the cell to scroll.\nIf the row or column index is not present, the Data Grid will not do any movement in the missing axis.\n\nThe following demo explores the usage of this API:"
          ],
          "code_path": [
            "ScrollPlayground.js"
          ],
          "children": []
        },
        {
          "name": "Scroll restoration",
          "introduction": [
            "Scroll restoration\n\nYou can restore scroll to a previous position by definining `initialState.scroll` values `{ top: number, left: number }`. The Data Grid will mount at the specified scroll offset in pixels.\n\nThe following demo explores the usage of scroll restoration:"
          ],
          "code_path": [
            "ScrollRestoration.js"
          ],
          "children": []
        },
        {
          "name": "apiRef",
          "introduction": [
            "apiRef\n\nThe grid exposes a set of methods that enables all of these features using the imperative `apiRef`. To know more about how to use it, check the [API Object](/x/react-data-grid/api-object/) section.\n\n:::warning\nOnly use this API as the last option. Give preference to the props to control the Data Grid.\n:::"
          ],
          "code_path": [
            "ScrollApiNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->custom-columns",
      "introduction": [
        "# Data Grid - Custom columns\n\n<p class=\"description\">Create custom column types.</p>\n\nYou can extend the [built-in column types](/x/react-data-grid/column-definition/#column-types) with your own by simply spreading the necessary properties.\n\nThe demo below defines a new column type: `usdPrice` that extends the native `number` column type.\n\n```ts\nconst usdPrice: GridColTypeDef = {\n  type: 'number',\n  width: 130,\n  valueFormatter: (value) => valueFormatter.format(Number(value)),\n  cellClassName: 'font-tabular-nums',\n};\n```",
        ":::info\nIf an unsupported column type is used, the `string` column type will be used instead.\n:::"
      ],
      "code_path": [
        "CustomColumnTypesGrid.js",
        null
      ],
      "children": [
        {
          "name": "Sparkline",
          "introduction": [
            "Sparkline\n\nSparkline charts can be useful as an overview of data trends.\n\nIn the demo below, we create a custom column type using the `GridColTypeDef` interface and use the [Sparkline](/x/react-charts/sparkline/) component from [`@mui/x-charts`](/x/react-charts/) package in the [`renderCell`](/x/react-data-grid/column-definition/#rendering-cells) property."
          ],
          "code_path": [
            "SparklineColumn.js"
          ],
          "children": []
        },
        {
          "name": "Date pickers",
          "introduction": [
            "Date pickers\n\nBy default, the Data Grid uses native browser inputs for editing `date` and `dateTime` columns.\n\nWhile [MUI X Date / Time Pickers](/x/react-date-pickers/getting-started/) are not supported by the Data Grid out of the box yet, it is easy to integrate them by creating [custom edit components](/x/react-data-grid/editing/custom-edit-component/) and [custom filter operators](/x/react-data-grid/filtering/customization/#create-a-custom-operator).\n\nThe example below uses `@mui/x-date-pickers` for both `date` and `dateTime` column types:",
            ":::info\nYou can change the date format by importing different locale (`en-US` locale is used in the example above).\nSee [Localization](/x/react-date-pickers/localization/) for more information.\n:::"
          ],
          "code_path": [
            "EditingWithDatePickers.js",
            null
          ],
          "children": []
        },
        {
          "name": "Full example",
          "introduction": [
            "Full example\n\nThe demo below shows the most common custom column renderers used across our demos.\n\n:::success\nYou can copy the column definitions and custom cell renderers from the demo source code.\n\nAll column definitions are located in the main component file, while each cell renderer is in a separate file.\n:::"
          ],
          "code_path": [
            "CustomColumnFullExample.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->server-side-data",
      "introduction": [
        "# Data Grid - Server-side lazy loading [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')🧪\n\n<p class=\"description\">Learn how to implement lazy-loading rows with a server-side data source.</p>\n\nLazy loading changes the way pagination works by removing page controls and loading data dynamically (in a single list) as the user scrolls through the grid.\n\nYou can enable it with the `unstable_lazyLoading` prop paired with the `unstable_dataSource` prop.\n\nInitially, data for the first page is fetched and displayed in the grid.\nThe value of the total row count determines when the next page's data is loaded:\n\n- If the total row count is known, the Data Grid is filled with skeleton rows and fetches more data if one of the skeleton rows falls into the rendering context.\n  This loading strategy is often referred to as [**viewport loading**](#viewport-loading).\n\n- If the total row count is unknown, the Data Grid fetches more data when the user scrolls to the bottom.\n  This loading strategy is often referred to as [**infinite loading**](#infinite-loading).\n\n:::info\nYou can provide the row count through one of the following ways:\n\n- Pass it as the [`rowCount`](/x/api/data-grid/data-grid/#data-grid-prop-rowCount) prop\n- Return `rowCount` in the `getRows()` method of the [data source](/x/react-data-grid/server-side-data/#data-source)\n- Set the `rowCount` using the [`setRowCount()`](/x/api/data-grid/grid-api/#grid-api-prop-setRowCount) API method\n\nThese options are presented in order of precedence, which means if the row count is set using the API, that value is overridden once a new value is returned by the `getRows()` method unless it's `undefined`.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Viewport loading",
          "introduction": [
            "Viewport loading\n\nViewport loading mode is enabled when the row count is known (and is greater than or equal to zero).\nThe Grid fetches the first page immediately and adds skeleton rows to match the total row count.\nOther pages are fetched once the user starts scrolling and moves a skeleton row inside the rendering context (with the index range defined by [virtualization](/x/react-data-grid/virtualization/)).\n\nIf the user scrolls too fast, the Grid loads multiple pages with one request (by adjusting `start` and `end` parameters) to reduce the server load.\n\nThe demo below shows how viewport loading mode works:",
            ":::info\nThe data source demos use a `useMockServer` utility function to simulate server-side data fetching.\nIn a real-world scenario you would replace this with your own server-side data-fetching logic.\n\nOpen the Info section of your browser console to see the requests being made and the data being fetched in response.\n:::"
          ],
          "code_path": [
            "ServerSideLazyLoadingViewport.js",
            null
          ],
          "children": [
            {
              "name": "Request throttling",
              "introduction": [
                "Request throttling\n\nAs a user scrolls through the Grid, the rendering context changes and the Grid tries to fill in any missing rows by making a new server request.\nIt also throttles new data fetches to avoid making unnecessary requests.\nThe default throttle time is 500 milliseconds.\nUse the `unstable_lazyLoadingRequestThrottleMs` prop to set a custom time, as shown below:"
              ],
              "code_path": [
                "ServerSideLazyLoadingRequestThrottle.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Infinite loading",
          "introduction": [
            "Infinite loading\n\nInfinite loading mode is enabled when the row count is unknown (either `-1` or `undefined`).\nA new page is loaded when the scroll reaches the bottom of the viewport area.\n\nYou can use the `scrollEndThreshold` prop to change the area that triggers new requests.\n\nThe demo below shows how infinite loading mode works.\nPage size is set to `15` and the mock server is configured to return a total of 100 rows.\nWhen the response contains no new rows, the Grid stops requesting new data."
          ],
          "code_path": [
            "ServerSideLazyLoadingInfinite.js"
          ],
          "children": []
        },
        {
          "name": "Updating the loading mode",
          "introduction": [
            "Updating the loading mode\n\nThe Grid changes the loading mode dynamically if the total row count gets updated by changing the `rowCount` prop, returning different `rowCount` in `GridGetRowsResponse` or via `setRowCount()` API.\n\nBased on the previous and the new value for the total row count, the following scenarios are possible:\n\n- **Unknown `rowCount` to known `rowCount`**: When the row count is set to a valid value from an unknown value, the Data Grid switches to viewport loading mode. It checks the number of already fetched rows and adds skeleton rows to match the provided row count.\n\n- **Known `rowCount` to unknown `rowCount`**: If the row count is updated and set to `-1`, the Data Grid resets, fetches the first page, then sets itself to infinite loading mode.\n\n- **Known `rowCount` greater than the actual row count**: This can happen either by reducing the value of the row count after more rows were already fetched, or if the row count was unknown and the Grid (while in the infinite loading mode) already fetched more rows. In this case, the Grid resets, fetches the first page, and then continues in one mode or the other depending on the new value of the `rowCount`.\n\n:::warning\n`rowCount` is expected to be static.\nChanging its value can cause the Grid to reset and the cache to be cleared which may lead to performance and UX degradation.\n:::\n\nThe demo below serves as a showcase of the behavior described above, and is not representative of something you would implement in a real-world scenario."
          ],
          "code_path": [
            "ServerSideLazyLoadingModeUpdate.js"
          ],
          "children": []
        },
        {
          "name": "Nested lazy loading 🚧",
          "introduction": [
            "Nested lazy loading 🚧\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\n👍 Upvote [issue #14527](https://github.com/mui/mui-x/issues/14527) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the issue to help influence what gets built—especially if you already have a use case for this feature, or if you're facing a specific pain point with your current solution.\n:::\n\nWhen completed, it will be possible to use the `unstable_lazyLoading` flag in combination with [tree data](/x/react-data-grid/server-side-data/tree-data/) and [row grouping](/x/react-data-grid/server-side-data/row-grouping/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Error handling",
          "introduction": [
            "Error handling\n\nTo handle errors, use the `unstable_onDataSourceError()` prop as described in [Server-side data—Error handling](/x/react-data-grid/server-side-data/#error-handling).\n\nYou can pass the second parameter of type `GridGetRowsParams` to the `getRows()` method of the [`unstable_dataSource`](/x/api/data-grid/grid-api/#grid-api-prop-unstable_dataSource) to retry the request.\nIf successful, the Data Grid uses `rows` and `rowCount` data to determine if the rows should be appended at the end of the grid or if the skeleton rows should be replaced.\n\nThe following demo gives an example how to use `GridGetRowsParams` to retry a failed request."
          ],
          "code_path": [
            "ServerSideLazyLoadingErrorHandling.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->sorting",
      "introduction": [
        "# Data Grid - Sorting\n\n<p class=\"description\">Easily sort your rows based on one or several criteria.</p>\n\nSorting is enabled by default to the Data Grid users and works out of the box without any explicit configuration.\nUsers can set a sorting rule simply by clicking on a column header.\nFollowing clicks change the column's sorting direction. You can see the applied direction on the header's arrow indicator."
      ],
      "code_path": [
        "BasicExampleDataGrid.js"
      ],
      "children": [
        {
          "name": "Single and multi-sorting",
          "introduction": [
            "Single and multi-sorting\n\n:::warning\nThe Data Grid can only sort the rows according to one criterion at a time.\n\nTo use multi-sorting, you need to upgrade to [Pro plan](/x/introduction/licensing/#pro-plan) or above.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Multi-sorting [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Multi-sorting [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nThe following demo lets you sort the rows according to several criteria at the same time.\n\nHold down the <kbd class=\"key\">Ctrl</kbd> or <kbd class=\"key\">Shift</kbd> (use <kbd class=\"key\">⌘ Command</kbd> on macOS) key while clicking the column header."
          ],
          "code_path": [
            "BasicExampleDataGridPro.js"
          ],
          "children": []
        },
        {
          "name": "Pass sorting rules to the Data Grid",
          "introduction": [
            "Pass sorting rules to the Data Grid"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Structure of the model",
              "introduction": [
                "Structure of the model\n\nThe sort model is a list of sorting items.\nEach item represents a sorting rule and is composed of several elements:\n\n- `sortingItem.field`: the field on which the rule applies.\n- `sortingItem.sort`: the direction of the sorting (`'asc'`, `'desc'`, `null` or `undefined`). If `null` or `undefined`, the rule doesn't apply."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Initialize the sort model",
              "introduction": [
                "Initialize the sort model\n\nSorting is enabled by default to the user.\nBut if you want to set an initial sorting order, simply provide the model to the `initialState` prop.\n\n```jsx\n<DataGrid\n  initialState={{\n    sorting: {\n      sortModel: [{ field: 'rating', sort: 'desc' }],\n    },\n  }}\n/>\n```"
              ],
              "code_path": [
                "InitialSort.js"
              ],
              "children": []
            },
            {
              "name": "Controlled sort model",
              "introduction": [
                "Controlled sort model\n\nUse the `sortModel` prop to control the state of the sorting rules.\n\nYou can use the `onSortModelChange` prop to listen to changes in the sorting rules and update the prop accordingly."
              ],
              "code_path": [
                "ControlledSort.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Disable the sorting",
          "introduction": [
            "Disable the sorting"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "For all columns",
              "introduction": [
                "For all columns\n\nSorting is enabled by default, but you can easily disable this feature by setting the `disableColumnSorting` prop.\n\n```jsx\n<DataGrid disableColumnSorting />\n```"
              ],
              "code_path": [
                "DisableSortingGridAllColumns.js"
              ],
              "children": []
            },
            {
              "name": "For some columns",
              "introduction": [
                "For some columns\n\nBy default, all columns are sortable.\nTo disable sorting on a column, set the `sortable` property of `GridColDef` to `false`.\nIn the following demo, the user cannot sort the _rating_ column from the UI.\n\n```tsx\n<DataGrid columns={[...columns, { field: 'rating', sortable: false }]} />\n```"
              ],
              "code_path": [
                "DisableSortingGrid.js"
              ],
              "children": []
            },
            {
              "name": "Sorting non-sortable columns programmatically",
              "introduction": [
                "Sorting non-sortable columns programmatically\n\nThe columns with `colDef.sortable` set to `false` are not sortable from the grid UI but could still be sorted programmatically. To add a sort rule to such a column, you could initialize the `sortModel`, use the `sortModel` prop, or use the API methods `sortColumn` or `setSortModel`.\n\nIn the following demo, the `firstName` column is not sortable by the default grid UI, but it is sorted programmatically by a custom built UI."
              ],
              "code_path": [
                "ReadOnlySortingGrid.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Custom comparator",
          "introduction": [
            "Custom comparator\n\nA comparator determines how two cell values should be sorted.\n\nEach column type comes with a default comparator method.\nYou can re-use them by importing the following functions:\n\n- `gridStringOrNumberComparator` (used by the `string` and `singleSelect` columns)\n- `gridNumberComparator` (used by the `number` and `boolean` columns)\n- `gridDateComparator` (used by the `date` and `date-time` columns)\n\nTo extend or modify this behavior in a specific column, you can pass in a custom comparator, and override the `sortComparator` property of the `GridColDef` interface."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Create a comparator from scratch",
              "introduction": [
                "Create a comparator from scratch\n\nIn the following demo, the \"Created on\" column sorting is based on the day of the month of the `createdOn` field.\nIt is a fully custom sorting comparator."
              ],
              "code_path": [
                "FullyCustomSortComparator.js"
              ],
              "children": []
            },
            {
              "name": "Combine built-in comparators",
              "introduction": [
                "Combine built-in comparators\n\nIn the following demo, the \"Name\" column combines the `name` and `isAdmin` fields.\nThe sorting is based on `isAdmin` and then on `name`, if necessary. It re-uses the built-in sorting comparator."
              ],
              "code_path": [
                "ExtendedSortComparator.js"
              ],
              "children": []
            },
            {
              "name": "Asymmetric comparator",
              "introduction": [
                "Asymmetric comparator\n\nThe Data Grid considers the `sortComparator` function symmetric, automatically reversing the return value for descending sorting by multiplying it by `-1`.\n\nWhile this is sufficient for most use cases, it is possible to define an asymmetric comparator using the `getSortComparator` function – it receives the sorting direction as an argument and returns a comparator function.\n\nIn the demo below, the `getSortComparator` function is used in the \"Quantity\" column to keep the `null` values at the bottom when sorting is applied (regardless of the sorting direction):"
              ],
              "code_path": [
                "GetSortComparator.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Custom sort order",
          "introduction": [
            "Custom sort order\n\nBy default, the sort order cycles between these three different modes:\n\n```jsx\nconst sortingOrder = ['asc', 'desc', null];\n```\n\nIn practice, when you click a column that is not sorted, it will sort ascending (`asc`).\nThe next click will make it sort descending (`desc`). Another click will remove the sort (`null`), reverting to the order that the data was provided in."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "For all columns",
              "introduction": [
                "For all columns\n\nThe default sort order can be overridden for all columns with the `sortingOrder` prop.\nIn the following demo, columns are only sortable in descending or ascending order."
              ],
              "code_path": [
                "OrderSortingGrid.js"
              ],
              "children": []
            },
            {
              "name": "Per column",
              "introduction": [
                "Per column\n\nSort order can be configured (and overridden) on a per-column basis by setting the `sortingOrder` property of the `GridColDef` interface:\n\n```tsx\nconst columns: GridColDef = [\n  { field: 'rating', sortingOrder: ['desc', 'asc', null] },\n];\n```"
              ],
              "code_path": [
                "OrderSortingPerColumnGrid.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Server-side sorting",
          "introduction": [
            "Server-side sorting\n\nSorting can be run server-side by setting the `sortingMode` prop to `server`, and implementing the `onSortModelChange` handler."
          ],
          "code_path": [
            "ServerSortingGrid.js"
          ],
          "children": []
        },
        {
          "name": "apiRef",
          "introduction": [
            "apiRef\n\n:::warning\nOnly use this API as the last option. Give preference to the props to control the Data Grid.\n:::"
          ],
          "code_path": [
            "SortingApiNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "Selectors",
          "introduction": [
            "Selectors\n\n{{\"component\": \"modules/components/SelectorsDocs.js\", \"category\": \"Sorting\"}}\n\nMore information about the selectors and how to use them on the [dedicated page](/x/react-data-grid/state/#access-the-state)"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->export",
      "introduction": [
        "# Data Grid - Export\n\n<p class=\"description\">Easily export the rows in various file formats such as CSV, Excel, or PDF.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Enabling export",
          "introduction": [
            "Enabling export"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Default Toolbar",
              "introduction": [
                "Default Toolbar\n\nTo enable the export menu, pass the `GridToolbar` component in the `Toolbar` [component slot](/x/react-data-grid/components/#toolbar)."
              ],
              "code_path": [
                "ExportDefaultToolbar.js"
              ],
              "children": []
            },
            {
              "name": "Custom Toolbar",
              "introduction": [
                "Custom Toolbar\n\nThe export menu is provided in a stand-alone component named `GridToolbarExport`. You can use it in a custom toolbar component as follows.\n\n```jsx\nfunction CustomToolbar() {\n  return (\n    <GridToolbarContainer>\n      <GridToolbarExport />\n    </GridToolbarContainer>\n  );\n}\n```"
              ],
              "code_path": [
                "ExportCustomToolbar.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Export options",
          "introduction": [
            "Export options\n\nBy default, the export menu displays all the available export formats, according to your license, which are\n\n- [Print](#print-export)\n- [CSV](#csv-export)\n- [Excel](#excel-export) [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n- [Clipboard](#clipboard) [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan') (🚧 Not delivered yet)\n\nYou can customize their respective behavior by passing an options object either to the `GridToolbar` or to the `GridToolbarExport` as a prop.\n\n```tsx\n<DataGrid slotProps={{ toolbar: { csvOptions } }} />\n\n// same as\n\n<GridToolbarExport csvOptions={csvOptions} />\n```\n\nEach export option has its own API page:\n\n- [`csvOptions`](/x/api/data-grid/grid-csv-export-options/)\n- [`printOptions`](/x/api/data-grid/grid-print-export-options/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Disabled format",
          "introduction": [
            "Disabled format\n\nYou can remove an export format from the toolbar by setting its option property `disableToolbarButton` to `true`.\nIn the following example, the print export is disabled.\n\n```jsx\n<DataGrid\n  slotProps={{ toolbar: { printOptions: { disableToolbarButton: true } } }}\n/>\n```"
          ],
          "code_path": [
            "RemovePrintExport.js"
          ],
          "children": []
        },
        {
          "name": "Exported columns",
          "introduction": [
            "Exported columns\n\nBy default, the export will only contain the visible columns of the Data Grid.\nThere are a few ways to include or hide other columns.\n\n- Set the `disableExport` attribute to `true` in `GridColDef` for columns you don't want to be exported.\n\n```jsx\n<DataGrid columns={[{ field: 'name', disableExport: true }, { field: 'brand' }]} />\n```\n\n- Set `allColumns` in export option to `true` to also include hidden columns. Those with `disableExport=true` will not be exported.\n\n```jsx\n<DataGrid slotProps={{ toolbar: { csvOptions: { allColumns: true } } }} />\n```\n\n- Set the exact columns to be exported in the export option. Setting `fields` overrides the other properties. Such that the exported columns are exactly those in `fields` in the same order.\n\n```jsx\n<DataGrid slotProps={{ toolbar: { csvOptions: { fields: ['name', 'brand'] } } }} />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Exported rows",
          "introduction": [
            "Exported rows\n\nBy default, the Data Grid exports the selected rows if there are any.\nIf not, it exports all rows except the footers (filtered and sorted rows, according to active rules), including the collapsed ones."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Customizing the rows to export",
              "introduction": [
                "Customizing the rows to export\n\nAlternatively, you can set the `getRowsToExport` function and export any rows you want, as in the following example.\nThe grid exports a few [selectors](/x/react-data-grid/state/#access-the-state) that can help you get the rows for the most common use-cases:\n\n| Selector                                       | Behavior                                                                                                                                                                                                                   |\n| :---- |\n| `gridRowIdsSelector`                           | The rows in their original order.                                                                                                                                                                                          |\n| `gridSortedRowIdsSelector`                     | The rows after applying the sorting rules.                                                                                                                                                                                 |\n| `gridFilteredSortedRowIdsSelector`             | The rows after applying the sorting rules, and the filtering rules.                                                                                                                                                        |\n| `gridExpandedSortedRowIdsSelector`             | The rows after applying the sorting rules, the filtering rules, and without the collapsed rows.                                                                                                                            |\n| `gridPaginatedVisibleSortedGridRowIdsSelector` | The rows after applying the sorting rules, the filtering rules, without the collapsed rows and only for the current page (**Note**: If the pagination is disabled, it will still take the value of `page` and `pageSize`). |",
                "When using [Row grouping](/x/react-data-grid/row-grouping/), it can be useful to remove the groups from the CSV export."
              ],
              "code_path": [
                "CsvGetRowsToExport.js",
                "CsvGetRowsToExportRowGrouping.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "CSV export",
          "introduction": [
            "CSV export"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Exported cells",
              "introduction": [
                "Exported cells\n\nWhen the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.\nYou can provide a [`valueFormatter`](/x/react-data-grid/column-definition/#value-formatter) with a string representation to be used.\n\n```jsx\n<DataGrid\n  columns={[\n    {\n      field: 'progress',\n      valueFormatter: (value) => `${value * 100}%`,\n      renderCell: ({ value }) => <ProgressBar value={value} />,\n    },\n  ]}\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "File encoding",
              "introduction": [
                "File encoding\n\nYou can use `csvOptions` to specify the format of the export, such as the `delimiter` character used to separate fields, the `fileName`, or `utf8WithBom` to prefix the exported file with UTF-8 Byte Order Mark (BOM).\nFor more details on these options, please visit the [`csvOptions` API page](/x/api/data-grid/grid-csv-export-options/).\n\n```jsx\n<GridToolbarExport\n  csvOptions={{\n    fileName: 'customerDataBase',\n    delimiter: ';',\n    utf8WithBom: true,\n  }}\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Escape formulas",
              "introduction": [
                "Escape formulas\n\nBy default, the formulas in the cells are escaped.\nThis is to prevent the formulas from being executed when [the CSV file is opened in Excel](https://owasp.org/www-community/attacks/CSV_Injection).\n\nIf you want to keep the formulas working, you can set the `escapeFormulas` option to `false`.\n\n```jsx\n<DataGrid slotProps={{ toolbar: { csvOptions: { escapeFormulas: false } } }} />\n\n// or\n\n<GridToolbarExport csvOptions={{ escapeFormulas: false }} />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Print export",
          "introduction": [
            "Print export"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Modify the Data Grid style",
              "introduction": [
                "Modify the Data Grid style\n\nBy default, the printed grid is equivalent to printing a page containing only the Data Grid.\nTo modify the styles used for printing, such as colors, you can either use the `@media print` media query or the `pageStyle` property of `printOptions`.\n\nFor example, if the Data Grid is in dark mode, the text color will be inappropriate for printing (too light).\n\nWith media query, you have to start your `sx` object with `@media print` key, such that all the style inside are only applied when printing.\n\n```jsx\n<DataGrid\n  sx={{\n    '@media print': {\n      '.MuiDataGrid-main': { color: 'rgba(0, 0, 0, 0.87)' },\n    },\n  }}\n  {/* ... */}\n/>\n```\n\nWith `pageStyle` option, you can override the main content color with a [more specific selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity).\n\n```jsx\n<DataGrid\n  slotProps={{\n    toolbar: {\n      printOptions:{\n        pageStyle: '.MuiDataGrid-root .MuiDataGrid-main { color: rgba(0, 0, 0, 0.87); }',\n      }\n    }\n  }}\n  {/* ... */}\n/>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Customize grid display",
              "introduction": [
                "Customize grid display\n\nBy default, the print export displays all the DataGrid. It is possible to remove the footer and the toolbar by setting respectively `hideFooter` and `hideToolbar` to `true`.\n\n```jsx\n<GridToolbarExport\n  printOptions={{\n    hideFooter: true,\n    hideToolbar: true,\n  }}\n/>\n```\n\nIf rows are selected when exporting, the checkboxes will not be included in the printed page. To export the checkboxes you can set `includeCheckboxes` to `true`.\n\n```jsx\n<GridToolbarExport\n  printOptions={{\n    includeCheckboxes: true,\n  }}\n/>\n```\n\nFor more options to customize the print export, please visit the [`printOptions` API page](/x/api/data-grid/grid-print-export-options/)."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Custom export format",
          "introduction": [
            "Custom export format\n\nYou can add custom export formats by creating your own export menu.\nTo simplify its creation, you can use `<GridToolbarExportContainer />` which contains the menu logic.\nThe default `<GridToolbarExport />` is defined as follow:\n\n```jsx\nconst GridToolbarExport = ({ csvOptions, printOptions, ...other }) => (\n  <GridToolbarExportContainer {...other}>\n    <GridCsvExportMenuItem options={csvOptions} />\n    <GridPrintExportMenuItem options={printOptions} />\n  </GridToolbarExportContainer>\n);\n```\n\nEach child of the `<GridToolbarExportContainer />` receives a prop `hideMenu` to close the export menu after the export.\nThe demo below shows how to add a JSON export."
          ],
          "code_path": [
            "CustomExport.js"
          ],
          "children": []
        },
        {
          "name": "Excel export [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')",
          "introduction": [
            "Excel export [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\nThis feature relies on [exceljs](https://github.com/exceljs/exceljs).\nThe Excel export allows translating columns' type and tree structure of a DataGrid to an Excel file.\n\nColumns with types `'boolean'`, `'number'`, `'singleSelect'`, `'date'`, and `'dateTime'` are exported in their corresponding type in Excel. Please ensure the `rows` values have the correct type, you can always [convert them](/x/react-data-grid/column-definition/#converting-types) as needed."
          ],
          "code_path": [
            "ExcelExport.js"
          ],
          "children": [
            {
              "name": "Customization",
              "introduction": [
                "Customization"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Customizing the columns",
                  "introduction": [
                    "Customizing the columns\n\nYou can use the `columnsStyles` property to customize the column style.\nThis property accepts an object in which keys are the column field and values an [exceljs style object](https://github.com/exceljs/exceljs#styles).\n\nThis can be used to specify value formatting or to add some colors.\n\n```jsx\n<GridToolbarExport\n  excelOptions={{\n    columnsStyles: {\n      // replace the dd.mm.yyyy default date format\n      recruitmentDay: { numFmt: 'dd/mm/yyyy' },\n      // set this column in green\n      incomes: { font: { argb: 'FF00FF00' } },\n    },\n  }}\n/>\n```"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Customizing the document",
                  "introduction": [
                    "Customizing the document\n\nYou can customize the document using two callback functions:\n\n- `exceljsPreProcess` called **before** adding the rows' dataset.\n- `exceljsPostProcess` called **after** the dataset has been exported to the document.\n\nBoth functions receive `{ workbook, worksheet }` as input.\nThey are [exceljs](https://github.com/exceljs/exceljs#interface) objects and allow you to directly manipulate the Excel file.\n\nThanks to these two methods, you can modify the metadata of the exported spreadsheet.\nYou can also use it to add custom content on top or bottom of the worksheet, as follows:\n\n```jsx\nfunction exceljsPreProcess({ workbook, worksheet }) {\n  workbook.created = new Date(); // Add metadata\n  worksheet.name = 'Monthly Results'; // Modify worksheet name\n\n  // Write on first line the date of creation\n  worksheet.getCell('A1').value = `Values from the`;\n  worksheet.getCell('A2').value = new Date();\n}\n\nfunction exceljsPostProcess({ worksheet }) {\n  // Add a text after the data\n  worksheet.addRow(); // Add empty row\n\n  const newRow = worksheet.addRow();\n  newRow.getCell(1).value = 'Those data are for internal use only';\n}\n\n// ...\n\n<GridToolbarExport\n  excelOptions={{\n    exceljsPreProcess,\n    exceljsPostProcess,\n  }}\n/>;\n```\n\nSince `exceljsPreProcess` is applied before adding the content of the Data Grid, you can use it to add some informative rows on top of the document.\nThe content of the Data Grid will start on the next row after those added by `exceljsPreProcess`.\n\nTo customize the rows after the Data Grid content, you should use `exceljsPostProcess`. As it is applied after adding the content, you can also use it to access the generated cells.\n\nIn the following demo, both methods are used to set a custom header and a custom footer."
                  ],
                  "code_path": [
                    "ExcelCustomExport.js"
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Using a web worker",
              "introduction": [
                "Using a web worker\n\n:::warning\nThis feature only works with `@mui/styled-engine` v5.11.8 or newer.\nMake sure that the Material UI version you are using is also installing the correct version for this dependency.\n:::\n\nInstead of generating the Excel file in the main thread, you can delegate the task to a web worker.\nThis method reduces the amount of time that the main thread remains frozen, allowing to interact with the grid while the data is exported in background.\nTo start using web workers for the Excel export, first you need to create a file with the content below.\nThis file will be later used as the worker script, so it must be accessible by a direct URL.\n\n```tsx\n// in file ./worker.ts\nimport { setupExcelExportWebWorker } from '@mui/x-data-grid-premium';\n\nsetupExcelExportWebWorker();\n```\n\nThe final step is to pass the path to the file created to `GridToolbarExport` or the API method:\n\n```tsx\n<GridToolbarExport\n  excelOptions={{\n    worker: () => new Worker('/worker.ts'),\n  }}\n/>;\n\n// or\n\napiRef.current.exportDataAsExcel({\n  worker: () => new Worker('/worker.ts'),\n});\n```\n\n:::info\nIf you are using Next.js or webpack 5, use the following syntax instead.\nMake sure to pass the **relative path**, considering the current file, to the worker script.\n\n```tsx\n<GridToolbarExport\n  excelOptions={{\n    worker: () => new Worker(new URL('./worker.ts', import.meta.url)),\n  }}\n/>;\n\n// or\n\napiRef.current.exportDataAsExcel({\n  worker: () => new Worker(new URL('./worker.ts', import.meta.url)),\n});\n```\n\nIt is not necessary to make the script public because [webpack](https://webpack.js.org/guides/web-workers/) will handle that automatically for you.\n:::\n\nSince the main thread is not locked while the data is exported, it is important to give feedback for users that something is in progress.\nYou can pass a callback to the `onExcelExportStateChange` prop and display a message or loader.\nThe following demo contains an example using a [Snackbar](/material-ui/react-snackbar/):",
                ":::info\nWhen opening the demo above in CodeSandbox or StackBlitz you need to manually create the `worker.ts` script.\n:::\n\n:::warning\nIf you want to use the `exceljsPreProcess` and `exceljsPostProcess` options to customize the final spreadsheet, as shown in the [Customization](/x/react-data-grid/export/#customization) section above, you have to pass them to `setupExcelExportWebWorker` instead.\nThis is necessary because [functions](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#things_that_dont_work_with_structured_clone) cannot be passed to the web worker.\n\n```tsx\n// Instead of\n<GridToolbarExport\n  excelOptions={{\n    exceljsPreProcess,\n    exceljsPostProcess,\n  }}\n/>;\n\n// Do the following in the ./worker.ts file\nsetupExcelExportWebWorker({\n  exceljsPreProcess,\n  exceljsPostProcess,\n});\n```\n\n:::"
              ],
              "code_path": [
                "ExcelExportWithWebWorker.js",
                null
              ],
              "children": []
            },
            {
              "name": "Escape formulas",
              "introduction": [
                "Escape formulas\n\nBy default, the formulas in the cells are escaped.\nThis is to prevent the formulas from being executed when [the file is opened in Excel](https://owasp.org/www-community/attacks/CSV_Injection).\n\nIf you want to keep the formulas working, you can set the `escapeFormulas` option to `false`.\n\n```jsx\n<DataGridPremium slotProps={{ toolbar: { excelOptions: { escapeFormulas: false } } }} />\n\n// or\n\n<GridToolbarExport excelOptions={{ escapeFormulas: false }} />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Clipboard",
          "introduction": [
            "Clipboard\n\nThe clipboard export allows you to copy the content of the Data Grid to the clipboard.\nFor more information, check the [Clipboard copy](/x/react-data-grid/clipboard/#clipboard-copy) docs."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "apiRef",
          "introduction": [
            "apiRef\n\nThe grid exposes a set of methods that enables all of these features using the imperative `apiRef`. To know more about how to use it, check the [API Object](/x/react-data-grid/api-object/) section.\n\n:::warning\nOnly use this API as the last option. Give preference to the props to control the Data Grid.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "CSV",
              "introduction": [
                "CSV"
              ],
              "code_path": [
                "CsvExportApiNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Print",
              "introduction": [
                "Print"
              ],
              "code_path": [
                "PrintExportApiNoSnap.js"
              ],
              "children": []
            },
            {
              "name": "Excel [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')",
              "introduction": [
                "Excel [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')"
              ],
              "code_path": [
                "ExcelExportApiNoSnap.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [GridCsvExportOptions](/x/api/data-grid/grid-csv-export-options/)\n- [GridPrintExportOptions](/x/api/data-grid/grid-print-export-options/)\n- [GridExcelExportOptions](/x/api/data-grid/grid-excel-export-options/)\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->events",
      "introduction": [
        "# Data Grid - Events\n\n<p class=\"description\">Subscribe to the events emitted by the Data Grid to trigger custom behavior.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Subscribing to events",
          "introduction": [
            "Subscribing to events\n\nYou can subscribe to one of the [events emitted](/x/react-data-grid/events/#catalog-of-events) by providing an event handler to the Data Grid.\n\nThe handler is a method that's called with three arguments:\n\n1. the parameters containing the information related to the event\n2. the `MuiEvent` containing the DOM event or the React synthetic event, when available\n3. the `GridCallbackDetails` containing the `GridApi`—only if Data Grid Pro or Data Grid Premium is being used\n\nFor example, here is an event handler for the `rowClick` event:\n\n```tsx\nconst handleEvent: GridEventListener<'rowClick'> = (\n  params, // GridRowParams\n  event, // MuiEvent<React.MouseEvent<HTMLElement>>\n  details, // GridCallbackDetails\n) => {\n  setMessage(`Movie \"${params.row.title}\" clicked`);\n};\n```\n\nYou can provide this event handler to the Data Grid in several ways:"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "With the prop of the event",
              "introduction": [
                "With the prop of the event\n\n```tsx\n<DataGrid onRowClick={handleEvent} {...other} />\n```\n\n:::info\nNot all events have a dedicated prop.\nCheck out the examples in the [Catalog of events](#catalog-of-events) below to determine if a given event has a dedicated prop.\n:::\n\nThe following demo shows how to subscribe to the `rowClick` event using the `onRowClick` prop—try it out by clicking on any row:"
              ],
              "code_path": [
                "SubscribeToEventsProp.js"
              ],
              "children": []
            },
            {
              "name": "With `useGridApiEventHandler`",
              "introduction": [
                "With `useGridApiEventHandler`\n\n```tsx\nuseGridApiEventHandler(apiRef, 'rowClick', handleEvent);\n```\n\n:::warning\nThis hook can only be used inside the scope of the Data Grid (that is inside component slots or cell renderers).\n:::\n\nThe following demo shows how to subscribe to the `rowClick` event using `useGridApiEventHandler`—try it out by clicking on any row:"
              ],
              "code_path": [
                "SubscribeToEventsHook.js"
              ],
              "children": []
            },
            {
              "name": "With `apiRef.current.subscribeEvent`",
              "introduction": [
                "With `apiRef.current.subscribeEvent`\n\n```tsx\napiRef.current.subscribeEvent('rowClick', handleEvent);\n```\n\nThe following demo shows how to subscribe to the `rowClick` event using `apiRef.current.subscribeEvent`—try it out by clicking on any row:",
                ":::warning\nThe `apiRef.current.subscribeEvent` method returns a cleaning callback that unsubscribes the given handler when called.\nFor instance, when used inside a `useEffect` hook, you should always return the cleaning callback.\nOtherwise, you will have multiple registrations of the same event handler.\n:::"
              ],
              "code_path": [
                "SubscribeToEventsApiRef.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Disabling the default behavior",
          "introduction": [
            "Disabling the default behavior\n\nDepending on the use case, it might be necessary to disable the default action taken by an event.\nThe `MuiEvent` passed to the event handler has a `defaultMuiPrevented` property to control when the default behavior can be executed or not.\nSet it to `true` to block the default handling of an event and implement your own.\n\n```tsx\n<DataGrid\n  onCellClick={(params: GridCellParams, event: MuiEvent<React.MouseEvent>) => {\n    event.defaultMuiPrevented = true;\n  }}\n/>\n```\n\nUsually, double-clicking a cell will put it into [edit mode](/x/react-data-grid/editing/).\nThe following example changes this behavior by also requiring the end user to press the <kbd class=\"key\">Ctrl</kbd> key:"
          ],
          "code_path": [
            "DoubleClickWithCtrlToEdit.js"
          ],
          "children": []
        },
        {
          "name": "Catalog of events",
          "introduction": [
            "Catalog of events\n\nExpand the rows to see how to use each event."
          ],
          "code_path": [
            "CatalogOfEventsNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->performance",
      "introduction": [
        "# Data Grid - Performance\n\n<p class=\"description\">Improve the performance of the DataGrid using the recommendations from this guide.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Extract static objects and memoize root props",
          "introduction": [
            "Extract static objects and memoize root props\n\nThe Data Grid component uses `React.memo` to optimize its performance, which means itself and its subcomponents only\nre-render when their props change. But it's very easy to cause unnecessary re-renders if the root props of your\nData Grid aren't memoized. Take the example below, the `slots` and `initialState` objects are re-created on every\nrender, which means the Data Grid itself has no choice but to re-render as well.\n\n```tsx\nfunction Component(props) {\n  return (\n    <DataGrid\n      rows={props.rows}\n      slots={{\n        row: CustomRow,\n      }}\n      cellModesModel={{ [props.rows[0].id]: { name: { mode: GridCellModes.Edit } } }}\n    />\n  );\n}\n```\n\nAn easy way to prevent re-renders is to extract any object that can be a static object, and to memoize any object that\ndepends on another object. This applies to any prop that is an object or a function.\n\n```tsx\nconst slots = {\n  row: CustomRow,\n};\n\nfunction Component(props) {\n  const cellModesModel = React.useMemo(\n    () => ({ [props.rows[0].id]: { name: { mode: GridCellModes.Edit } } }),\n    [props.rows],\n  );\n\n  return (\n    <DataGrid rows={props.rows} slots={slots} cellModesModel={cellModesModel} />\n  );\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Visualization",
          "introduction": [
            "Visualization\n\nThe DataGrid memoizes some of its subcomponents to avoid re-rendering more than needed. Below is a visualization that\nshows you which cells re-render in reaction to your interaction with the grid."
          ],
          "code_path": [
            "GridVisualization.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->row-updates",
      "introduction": [
        "# Data Grid - Row updates\n\n<p class=\"description\">Always keep your rows up to date.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "The `rows` prop",
          "introduction": [
            "The `rows` prop\n\nThe simplest way to update the rows is to provide the new rows using the `rows` prop.\nIt replaces the previous values. This approach has some drawbacks:\n\n- You need to provide all the rows.\n- You might create a performance bottleneck when preparing the rows array to provide to the Data Grid.",
            ":::warning\nUpdating the `rows` prop causes the Data Grid to recompute the row tree, resulting in losing the current tree information like the expanded rows state.\nUnless the recomputation is explicitly required, the API method `updateRows()` should be used.\n:::"
          ],
          "code_path": [
            "UpdateRowsProp.js",
            null
          ],
          "children": []
        },
        {
          "name": "The `updateRows()` method",
          "introduction": [
            "The `updateRows()` method\n\nIf you want to only update part of the rows, you can use the `apiRef.current.updateRows()` method.",
            "The default behavior of `updateRows()` API is to upsert rows.\nSo if a row has an id that is not in the current list of rows then it will be added to the Data Grid.\n\nAlternatively, if you would like to delete a row, you would need to pass an extra `_action` property in the update object as below.\n\n```ts\napiRef.current.updateRows([{ id: 1, _action: 'delete' }]);\n```\n\n:::info\nThe community version of the Data Grid is limited to a single row update per `apiRef.current.updateRows()` call.\nMultiple row updates at a time are supported in [Pro](/x/introduction/licensing/#pro-plan) and [Premium](/x/introduction/licensing/#premium-plan) plans.\n:::"
          ],
          "code_path": [
            "UpdateRowsApiRef.js",
            null
          ],
          "children": []
        },
        {
          "name": "Infinite loading [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Infinite loading [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nThe grid provides a `onRowsScrollEnd` prop that can be used to load additional rows when the scroll reaches the bottom of the viewport area.\n\nIn addition, the area in which `onRowsScrollEnd` is called can be changed using `scrollEndThreshold`.",
            ":::info\nFor sorting and filtering to work properly with the infinite loading, they should be applied on the server-side.\nOtherwise, the sorting and filtering will only be applied to the subset of rows that have been loaded.\n:::"
          ],
          "code_path": [
            "InfiniteLoadingGrid.js",
            null
          ],
          "children": []
        },
        {
          "name": "Lazy loading [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Lazy loading [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nLazy Loading works like a pagination system, but instead of loading new rows based on pages, it loads them based on the viewport.\nIt loads new rows in chunks, as the user scrolls through the Data Grid and reveals empty rows.\n\nThe Data Grid builds the vertical scroll as if all the rows are already there, and displays empty (skeleton) rows while loading the data. Only rows that are displayed get fetched.\n\nTo enable lazy loading, there are a few steps you need to follow:\n\nFirst, set `rowsLoadingMode=\"server\"`.\nThen, set `rowCount` to reflect the number of available rows on the server.\nThird, set a callback function on `onFetchRows` to load the data corresponding to the row indices passed within `GridFetchRowsParams`.\nFinally, replace the empty rows with the newly fetched ones using `apiRef.current.unstable_replaceRows()` like in the demo below.",
            ":::warning\nThe `onFetchRows` callback is called every time a new row is in the viewport, so when you scroll, you can easily send multiple requests to your backend. We recommend developers limit those by implementing debouncing.\n:::\n\n:::warning\nFor now, lazy loading rows does not work with row grouping or tree data.\n:::\n\n:::info\nIn order for filtering and sorting to work you need to set their modes to `server`.\nYou can find out more information about how to do that on the [server-side filter page](/x/react-data-grid/filtering/server-side/) and on the [server-side sorting page](/x/react-data-grid/sorting/#server-side-sorting).\n:::"
          ],
          "code_path": [
            "LazyLoadingGrid.js",
            null
          ],
          "children": []
        },
        {
          "name": "High frequency [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "High frequency [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nWhenever the rows are updated, the Data Grid has to apply the sorting and filters. This can be a problem if you have high frequency updates. To maintain good performances, the Data Grid allows to batch the updates and only apply them after a period of time. The `throttleRowsMs` prop can be used to define the frequency (in milliseconds) at which rows updates are applied.\n\nWhen receiving updates more frequently than this threshold, the Data Grid will wait before updating the rows.\n\nThe following demo updates the rows every 10 ms, but they are only applied every 2 seconds."
          ],
          "code_path": [
            "ThrottledRowsGrid.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->row-selection",
      "introduction": [
        "# Data Grid - Row selection\n\n<p class=\"description\">Row selection allows the user to select and highlight a single or multiple rows that they can then take action on.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Single row selection",
          "introduction": [
            "Single row selection\n\nSingle row selection comes enabled by default for the MIT Data Grid component.\nYou can select a row by clicking it, or using the [keyboard shortcuts](/x/react-data-grid/accessibility/#selection).\nTo unselect a row, hold the <kbd class=\"key\">Ctrl</kbd> (<kbd class=\"key\">Cmd</kbd> on MacOS) key and click on it."
          ],
          "code_path": [
            "SingleRowSelectionGrid.js"
          ],
          "children": []
        },
        {
          "name": "Multiple row selection [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Multiple row selection [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nOn the Data Grid Pro and Data Grid Premium components, you can select multiple rows in two ways:\n\n- To select multiple independent rows, hold the <kbd class=\"key\">Ctrl</kbd> (<kbd class=\"key\">Cmd</kbd> on MacOS) key while selecting rows.\n- To select a range of rows, hold the <kbd class=\"key\">Shift</kbd> key while selecting rows.\n- To disable multiple row selection, use `disableMultipleRowSelection={true}`."
          ],
          "code_path": [
            "MultipleRowSelectionGrid.js"
          ],
          "children": []
        },
        {
          "name": "Disable row selection on click",
          "introduction": [
            "Disable row selection on click\n\nYou might have interactive content in the cells and need to disable the selection of the row on click. Use the `disableRowSelectionOnClick` prop in this case."
          ],
          "code_path": [
            "DisableClickSelectionGrid.js"
          ],
          "children": []
        },
        {
          "name": "Disable selection on certain rows",
          "introduction": [
            "Disable selection on certain rows\n\nUse the `isRowSelectable` prop to indicate if a row can be selected.\nIt's called with a `GridRowParams` object and should return a boolean value.\nIf not specified, all rows are selectable.\n\nIn the demo below only rows with quantity above 50,000 can be selected:"
          ],
          "code_path": [
            "DisableRowSelection.js"
          ],
          "children": []
        },
        {
          "name": "Row selection with filtering",
          "introduction": [
            "Row selection with filtering\n\nBy default, when the rows are filtered the selection is cleared from the rows that don't meet the filter criteria.\nTo keep those rows selected even when they're not visible, set the `keepNonExistentRowsSelected` prop."
          ],
          "code_path": [
            "KeepNonExistentRowsSelected.js"
          ],
          "children": []
        },
        {
          "name": "Controlled row selection",
          "introduction": [
            "Controlled row selection\n\nUse the `rowSelectionModel` prop to control the selection.\nEach time this prop changes, the `onRowSelectionModelChange` callback is called with the new selection value."
          ],
          "code_path": [
            "ControlledSelectionGrid.js"
          ],
          "children": []
        },
        {
          "name": "Checkbox selection",
          "introduction": [
            "Checkbox selection\n\nTo activate checkbox selection set `checkboxSelection={true}`."
          ],
          "code_path": [
            "CheckboxSelectionGrid.js"
          ],
          "children": [
            {
              "name": "Custom checkbox column",
              "introduction": [
                "Custom checkbox column\n\nIf you provide a custom checkbox column to the Data Grid with the `GRID_CHECKBOX_SELECTION_FIELD` field, the Data Grid will not add its own.\n\nWe strongly recommend to use the `GRID_CHECKBOX_SELECTION_COL_DEF` variable instead of re-defining all the custom properties yourself.\n\nIn the following demo, the checkbox column has been moved to the right and its width has been increased to 100px.",
                ":::warning\nAlways set the `checkboxSelection` prop to `true` even when providing a custom checkbox column.\nOtherwise, the Data Grid might remove your column.\n:::"
              ],
              "code_path": [
                "CheckboxSelectionCustom.js",
                null
              ],
              "children": []
            },
            {
              "name": "Visible rows selection [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
              "introduction": [
                "Visible rows selection [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nBy default, when you click the \"Select All\" checkbox, all rows in the Data Grid are selected.\nIf you want to change this behavior and only select the rows that are currently visible on the page, you can use the `checkboxSelectionVisibleOnly` prop."
              ],
              "code_path": [
                "CheckboxSelectionVisibleOnlyGrid.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Usage with server-side pagination",
          "introduction": [
            "Usage with server-side pagination\n\nUsing the controlled selection with `paginationMode=\"server\"` may result in selected rows being lost when the page is changed.\nThis happens because the Data Grid cross-checks with the `rows` prop and only calls `onRowSelectionModelChange` with existing row IDs.\nDepending on your server-side implementation, when the page changes and the new value for the `rows` prop does not include previously selected rows, the Data Grid will call `onRowSelectionModelChange` with an empty value.\nTo prevent this, enable the `keepNonExistentRowsSelected` prop to keep the rows selected even if they do not exist.\n\n```tsx\n<DataGrid keepNonExistentRowsSelected />\n```\n\nBy using this approach, clicking in the **Select All** checkbox may still leave some rows selected.\nIt is up to you to clean the selection model, using the `rowSelectionModel` prop.\nThe following demo shows the prop in action:"
          ],
          "code_path": [
            "ControlledSelectionServerPaginationGrid.js"
          ],
          "children": []
        },
        {
          "name": "apiRef",
          "introduction": [
            "apiRef\n\nThe grid exposes a set of methods that enables all of these features using the imperative `apiRef`. To know more about how to use it, check the [API Object](/x/react-data-grid/api-object/) section.\n\n:::warning\nOnly use this API as the last option. Give preference to the props to control the Data Grid.\n:::"
          ],
          "code_path": [
            "RowSelectionApiNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->overview",
      "introduction": [
        "# MUI X Data Grid\n\n<p class=\"description\">A fast and extendable React data table and React data grid. It's a feature-rich component available with MIT or commercial licenses.</p>\n\nThe Data Grid component is built with React and TypeScript to provide a smooth UX for manipulating an unlimited set of data.\nIt features an intuitive API for real-time updates as well as theming and custom templates—all with blazing-fast performance."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Overview",
          "introduction": [
            "Overview\n\nThe Data Grid presents information in a structured format of rows and columns.\nThe data is displayed in a user-friendly interface for efficient editing, reviewing, and analysis.\n\n:::info\nVisit the [installation guide](/x/react-data-grid/getting-started/#installation) to learn how to install the correct package version and dependencies.\n:::\n\nThe component comes in three different versions, one available under MIT license and two available under commercial license."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "MIT license (free forever)",
          "introduction": [
            "MIT license (free forever)\n\nThe MIT-licensed version (also referred to as the \"Community version\") is a stronger alternative to [plain data tables](/material-ui/react-table/#sorting-amp-selecting).\nIt's a clean abstraction with basic features like editing, pagination, column grouping, and single-column sorting and filtering.\n\n```js\nimport { DataGrid } from '@mui/x-data-grid';\n```"
          ],
          "code_path": [
            "DataGridDemo.js"
          ],
          "children": []
        },
        {
          "name": "Commercial licenses",
          "introduction": [
            "Commercial licenses\n\nThe commercially licensed versions are available in two plans: Pro and Premium."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Pro plan [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
              "introduction": [
                "Pro plan [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nThe Pro plan extends the features available in the Community version to support more complex use cases.\nIt adds features like advanced filtering, column pinning, column and row reordering, support for tree data, and virtualization to handle bigger datasets.\n\nThe demo below displays 31 columns and 100,000 rows—over 3 million cells in total.\n\n```js\nimport { DataGridPro } from '@mui/x-data-grid-pro';\n```"
              ],
              "code_path": [
                "DataGridProDemo.js"
              ],
              "children": []
            },
            {
              "name": "Premium plan [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')",
              "introduction": [
                "Premium plan [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\nThe Premium plan includes everything from Pro, as well as advanced features for data analysis and large dataset management, like row grouping with aggregation functions (such as sum and average) and the ability to export to Excel files.\n\nVisit the [showcase page](/x/react-data-grid/demo/) for a comprehensive overview of all features exclusive to this plan.\n\nThe demo below groups rows by commodity name, and uses an aggregation function to calculate the sum of quantities for each group and in total (displayed in a summary row).\nYou can experiment with grouping other columns in the columns' header menus.\n\nAnd since you're here, try exporting to Excel and copying and pasting data from-to Excel tables.\n\n```js\nimport { DataGridPremium } from '@mui/x-data-grid-premium';\n```"
              ],
              "code_path": [
                "DataGridPremiumDemo.js"
              ],
              "children": []
            },
            {
              "name": "MIT vs. commercial",
              "introduction": [
                "MIT vs. commercial\n\nPlease see [the Licensing page](/x/introduction/licensing/) for details."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Features",
          "introduction": [
            "Features\n\n- Built with and exclusively for React ⚛️\n- High performance 🚀\n- [Column groups](/x/react-data-grid/column-groups/)\n- [Column resizing](/x/react-data-grid/column-dimensions/#resizing)\n- [Column autosizing](/x/react-data-grid/column-dimensions/#autosizing)\n- [Filtering](/x/react-data-grid/filtering/), [multi-filters](/x/react-data-grid/filtering/multi-filters/) <span class=\"plan-pro\"></span>, and [header filters](/x/react-data-grid/filtering/header-filters/) <span class=\"plan-pro\"></span>\n- [Pagination](/x/react-data-grid/pagination/)\n- [Row & Cell editing](/x/react-data-grid/editing/)\n- [Sorting](/x/react-data-grid/sorting/) and [multi-sorting](/x/react-data-grid/sorting/#multi-sorting) <span class=\"plan-pro\"></span>\n- [Row selection](/x/react-data-grid/row-selection/)\n- [Cell selection](/x/react-data-grid/cell-selection/) <span class=\"plan-premium\"></span>\n- [Column virtualization](/x/react-data-grid/virtualization/#column-virtualization) and [rows virtualization](/x/react-data-grid/virtualization/#row-virtualization) <span class=\"plan-pro\"></span>\n- [Row grouping](/x/react-data-grid/row-grouping/) <span class=\"plan-premium\"></span>\n- [Aggregation](/x/react-data-grid/aggregation/) <span class=\"plan-premium\"></span>\n- [Excel export](/x/react-data-grid/export/#excel-export) <span class=\"plan-premium\"></span>\n- [Tree data](/x/react-data-grid/tree-data/) <span class=\"plan-pro\"></span>\n- [Master detail](/x/react-data-grid/master-detail/) <span class=\"plan-pro\"></span>\n- [100% customizable](/x/react-data-grid/style/)\n- Server-side data\n- [Column hiding](/x/react-data-grid/column-visibility/)\n- [Column pinning](/x/react-data-grid/column-pinning/) <span class=\"plan-pro\"></span>\n- [Row pinning](/x/react-data-grid/row-pinning/) <span class=\"plan-pro\"></span>\n- [Accessible](/x/react-data-grid/accessibility/)\n- [Localization](/x/react-data-grid/localization/)"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Upcoming features 🚧",
              "introduction": [
                "Upcoming features 🚧\n\nPlanned features include:\n\n- Headless implementation (hooks only)\n- [Pivoting](/x/react-data-grid/pivoting/) <span class=\"plan-premium\"></span>\n- [Charts integration](/x/react-charts/) <span class=\"plan-premium\"></span>\n\nYou can find more details on, the [feature comparison](/x/react-data-grid/getting-started/#feature-comparison), our living quarterly [roadmap](https://github.com/orgs/mui/projects/35) as well as on the open [GitHub issues](https://github.com/mui/mui-x/issues?q=is%3Aopen+label%3A%22component%3A+DataGrid%22+label%3Aenhancement)."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Resources",
          "introduction": [
            "Resources\n\nHere are some resources to learn more about the Data Grid:\n\n- The [source code on GitHub](https://github.com/mui/mui-x/tree/HEAD/packages/)\n- The [Material Design](https://m2.material.io/components/data-tables) specification\n- The [WAI-ARIA Authoring Practices](https://www.w3.org/WAI/ARIA/apg/patterns/grid/) accessibility reference\n- The [Material UI Design Kits](https://mui.com/design-kits/), available for Figma, Adobe XD, and Sketch"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->accessibility",
      "introduction": [
        "# Data Grid - Accessibility\n\n<p class=\"description\">Learn how the Data Grid implements accessibility features and guidelines, including keyboard navigation that follows international standards.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Guidelines",
          "introduction": [
            "Guidelines\n\nCommon conformance guidelines for accessibility include:\n\n- Globally accepted standard: [WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/)\n- US:\n  - [ADA](https://www.ada.gov/) - US Department of Justice\n  - [Section 508](https://www.section508.gov/) - US federal agencies\n- Europe: [EAA](https://employment-social-affairs.ec.europa.eu/policies-and-activities/social-protection-social-inclusion/persons-disabilities/union-equality-strategy-rights-persons-disabilities-2021-2030/european-accessibility-act_en) (European Accessibility Act)\n\nWCAG 2.1 has three levels of conformance: A, AA, and AAA.\nLevel AA exceeds the basic criteria for accessibility and is a common target for most organizations, so this is what we aim to support.\n\nThe [WAI-ARIA Authoring Practices](https://www.w3.org/WAI/ARIA/apg/patterns/grid/) provide valuable information on how to optimize the accessibility of a Data Grid."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Density",
          "introduction": [
            "Density\n\nYou can change the density of the rows and the column header."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Density selection from the toolbar",
              "introduction": [
                "Density selection from the toolbar\n\nTo enable the density selection from the toolbar, you can do one of the following:\n\n1. Enable the default toolbar component by passing the `slots.toolbar` prop to the Data Grid.\n2. Create a specific toolbar containing only the `GridToolbarDensitySelector` component and apply it using the `toolbar` property in the Data Grid's `slots` prop.\n\nThe user can then change the density of the Data Grid by using the density selection menu from the toolbar, as the following demo illustrates:",
                "To disable the density selection menu, pass the `disableDensitySelector` prop to the Data Grid."
              ],
              "code_path": [
                "DensitySelectorGrid.js",
                null
              ],
              "children": []
            },
            {
              "name": "Set the density programmatically",
              "introduction": [
                "Set the density programmatically\n\nThe Data Grid exposes the `density` prop which supports the following values:\n\n- `standard` (default)\n- `compact`\n- `comfortable`\n\nYou can set the density programmatically in one of the following ways:\n\n1. Uncontrolled – initialize the density with the `initialState.density` prop.\n\n   ```tsx\n   <DataGrid\n     initialState={{\n       density: 'compact',\n     }}\n   />\n   ```\n\n2. Controlled – pass the `density` and `onDensityChange` props. For more advanced use cases, you can also subscribe to the `densityChange` grid event.\n\n   ```tsx\n   const [density, setDensity] = React.useState<GridDensity>('compact');\n\n   return (\n     <DataGrid\n       density={density}\n       onDensityChange={(newDensity) => setDensity(newDensity)}\n     />\n   );\n   ```\n\nThe `density` prop applies the values determined by the `rowHeight` and `columnHeaderHeight` props, if supplied.\nThe user can override this setting with the optional toolbar density selector.\n\nThe following demo shows a Data Grid with the controlled density set to `compact` and outputs the current density to the console when the user changes it using the density selector from the toolbar:"
              ],
              "code_path": [
                "DensitySelectorSmallGrid.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Keyboard navigation",
          "introduction": [
            "Keyboard navigation\n\nThe Data Grid listens for keyboard interactions from the user and emits events in response to key presses within cells."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Tab sequence",
              "introduction": [
                "Tab sequence\n\nAccording to [WAI-ARIA Authoring Practices](https://www.w3.org/WAI/ARIA/apg/patterns/grid/), only one of the focusable elements contained by a composite widget should be included in the page tab sequence.\nFor an element to be included in the tab sequence, it needs to have a `tabIndex` value of zero or greater.\n\nWhen a user focuses on a Data Grid cell, the first inner element with `tabIndex={0}` receives the focus.\nIf there is no element with `tabIndex={0}`, the focus is set on the cell itself.\n\nThe two Data Grids below illustrate how the user experience is impacted by improper management of the page tab sequence, making it difficult to navigate through the data set:",
                "If you customize cell rendering with the [`renderCell`](/x/react-data-grid/column-definition/#rendering-cells) method, you become responsible for removing focusable elements from the page tab sequence.\nUse the `tabIndex` prop passed to the `renderCell` params to determine if the rendered cell has focus and if, as a result, the inner elements should be removed from the tab sequence:\n\n```jsx\nrenderCell: (params) => (\n  <div>\n    <Link tabIndex={params.tabIndex} href=\"/#\">\n      more info\n    </Link>\n  </div>\n);\n```"
              ],
              "code_path": [
                "FocusManagement.js",
                null
              ],
              "children": []
            },
            {
              "name": "Navigation",
              "introduction": [
                "Navigation\n\n:::info\nThe key assignments in the table below apply to Windows and Linux users.\n\nOn macOS replace:\n\n- <kbd class=\"key\">Ctrl</kbd> with <kbd class=\"key\">⌘ Command</kbd>\n- <kbd class=\"key\">Alt</kbd> with <kbd class=\"key\">⌥ Option</kbd>\n\nSome devices may lack certain keys, requiring the use of key combinations. In this case, replace:\n\n- <kbd class=\"key\">Page Up</kbd> with <kbd class=\"key\">Fn</kbd>+<kbd class=\"key\">Arrow Up</kbd>\n- <kbd class=\"key\">Page Down</kbd> with <kbd class=\"key\">Fn</kbd>+<kbd class=\"key\">Arrow Down</kbd>\n- <kbd class=\"key\">Home</kbd> with <kbd class=\"key\">Fn</kbd>+<kbd class=\"key\">Arrow Left</kbd>\n- <kbd class=\"key\">End</kbd> with <kbd class=\"key\">Fn</kbd>+<kbd class=\"key\">Arrow Right</kbd>\n\n:::\n\n|                                                               Keys | Description                                                 |\n| - |\n|                                  <kbd class=\"key\">Arrow Left</kbd> | Navigate between cell elements                              |\n|                                  <kbd class=\"key\">Arrow Down</kbd> | Navigate between cell elements                              |\n|                                 <kbd class=\"key\">Arrow Right</kbd> | Navigate between cell elements                              |\n|                                    <kbd class=\"key\">Arrow Up</kbd> | Navigate between cell elements                              |\n|                                        <kbd class=\"key\">Home</kbd> | Navigate to the first cell of the current row               |\n|                                         <kbd class=\"key\">End</kbd> | Navigate to the last cell of the current row                |\n| <kbd><kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">Home</kbd></kbd> | Navigate to the first cell of the first row                 |\n|  <kbd><kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">End</kbd></kbd> | Navigate to the last cell of the last row                   |\n|                                       <kbd class=\"key\">Space</kbd> | Navigate to the next scrollable page                        |\n|                                     <kbd class=\"key\">Page Up</kbd> | Navigate to the previous scrollable page                    |\n|                                   <kbd class=\"key\">Page Down</kbd> | Navigate to the next scrollable page                        |\n|                                       <kbd class=\"key\">Space</kbd> | Toggle row children expansion when grouping cell is focused |"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Selection",
              "introduction": [
                "Selection\n\n|                                                                         Keys | Description                                                          |\n| ---- |\n| <kbd><kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">Enter</kbd></kbd> | Toggle the detail panel of a row |"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->row-definition",
      "introduction": [
        "# Data Grid - Row definition\n\n<p class=\"description\">Define your rows.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Feeding data",
          "introduction": [
            "Feeding data\n\nThe rows can be defined with the `rows` prop, which expects an array of objects.\n\n:::warning\nThe `rows` prop should keep the same reference between two renders except when you want to apply new rows.\nOtherwise, the Data Grid will re-apply heavy work like sorting and filtering.\n:::"
          ],
          "code_path": [
            "RowsGrid.js"
          ],
          "children": []
        },
        {
          "name": "Row identifier",
          "introduction": [
            "Row identifier\n\nEach row must have a unique identifier.\n\nThis identifier is used internally to identify the row in the various models—for instance, the row selection model—and to track the row across updates.\n\nBy default, the Data Grid looks for a property named `id` in the data set to get that identifier.\n\nIf the row's identifier is not called `id`, then you need to use the `getRowId` prop to tell the Data Grid where it's located.\n\nThe following demo shows how to use `getRowId` to grab the unique identifier from a property named `internalId`:\n\n```tsx\nfunction getRowId(row) {\n  return row.internalId;\n}\n\n<DataGrid getRowId={getRowId} />;\n```",
            "If no such unique identifier exists in the data set, then you must create it by some other means, but this scenario should be avoided because it leads to issues with other features of the Data Grid.\n\nNote that it is not necessary to create a column to display the unique identifier data.\nThe Data Grid pulls this information directly from the data set itself, not from anything displayed on the screen.\n\n:::warning\nJust like the `rows` prop, the `getRowId` function should keep the same JavaScript reference between two renders.\nOtherwise, the Data Grid will re-apply heavy work like sorting and filtering.\n\nIt could be achieved by either defining the prop outside the component scope or by memoizing using the `React.useCallback` hook if the function reuses something from the component scope.\n:::"
          ],
          "code_path": [
            "RowsGridWithGetRowId.js",
            null
          ],
          "children": []
        },
        {
          "name": "Styling rows",
          "introduction": [
            "Styling rows\n\nYou can check the [styling rows](/x/react-data-grid/style/#styling-rows) section for more information."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->api-object",
      "introduction": [
        "# Data Grid - API object\n\n<p class=\"description\">Interact with the Data Grid using its API.</p>\n\nThe API object is an interface containing the state and all the methods available to programmatically interact with the Data Grid.\n\nYou can find the list of all the API methods on the [GridApi page](/x/api/data-grid/grid-api/).\n\n:::warning\nAll methods prefixed by `unstable_` are related to experimental features and may be removed, renamed, or reworked at any time.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "How to use the API object",
          "introduction": [
            "How to use the API object\n\nThe API object is accessible through the `apiRef` variable.\nTo access this variable, use `useGridApiContext` (inside the Data Grid) or `useGridApiRef` (outside the Data Grid)."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Inside the Data Grid",
              "introduction": [
                "Inside the Data Grid\n\nTo access the API object inside component slots or inside renders (for instance, `renderCell` or `renderHeader`), use the `useGridApiContext` hook:\n\n```tsx\nfunction CustomFooter() {\n  const apiRef = useGridApiContext();\n\n  return <Button onClick={() => apiRef.current.setPage(1)}>Go to page 1</Button>;\n}\n```\n\n:::info\nYou don't need to initialize the API object using `useGridApiRef` to be able to use it inside the Data Grid components.\n:::"
              ],
              "code_path": [
                "UseGridApiContext.js"
              ],
              "children": []
            },
            {
              "name": "Outside the Data Grid",
              "introduction": [
                "Outside the Data Grid\n\nWhen using the API object outside the Data Grid components, you need to initialize it using the `useGridApiRef` hook.\nYou can then pass it to the Data Grid's `apiRef` prop:\n\n```tsx\nfunction CustomDataGrid(props) {\n  const apiRef = useGridApiRef();\n\n  return (\n    <div>\n      <Button onClick={() => apiRef.current.setPage(1)}>Go to page 1</Button>\n      <DataGrid apiRef={apiRef} {...other} />\n    </div>\n  );\n}\n```\n\n:::warning\nThe API object is populated by the Data Grid's various plugins during the first render of the component.\nIf you try to use it in the first render of the component, it will crash because not all methods are registered yet.\n:::"
              ],
              "code_path": [
                "UseGridApiRef.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Common use cases",
          "introduction": [
            "Common use cases"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Access the disabled column features",
              "introduction": [
                "Access the disabled column features\n\nYou can control the disabled features of a column (for example hiding, sorting, filtering, pinning, grouping, etc) programmatically using `initialState`, controlled models, or the API object.\n\nIn the example below, API object is used to build a custom sorting for the _firstName_ column which is not sortable by the default grid UI (i.e `colDef.sortable` property is set to `false`).\n\n```tsx\nconst columns = [{ field: 'rating', sortable: false }, ...otherColumns];\n\nfunction CustomDataGrid(props) {\n  const apiRef = useGridApiRef();\n\n  return (\n    <div>\n      <Button onClick={() => apiRef.current.sortColumn('firstName', 'asc')}>\n        Sort by ASC\n      </Button>\n      <Button onClick={() => apiRef.current.sortColumn('firstName', 'desc')}>\n        Sort by DESC\n      </Button>\n      <Button onClick={() => apiRef.current.sortColumn('firstName', null)}>\n        Clear sort\n      </Button>\n      <DataGrid columns={columns} apiRef={apiRef} {...other} />\n    </div>\n  );\n}\n```"
              ],
              "code_path": [
                "AccessDisabledColumnFeatures.js"
              ],
              "children": []
            },
            {
              "name": "Retrieve data from the state",
              "introduction": [
                "Retrieve data from the state\n\nYou can find a detailed example on the [State page](/x/react-data-grid/state/#access-the-state)."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Listen to grid events",
              "introduction": [
                "Listen to grid events\n\nYou can find a detailed example on the [Events page](/x/react-data-grid/events/#subscribing-to-events)."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [GridApi](/x/api/data-grid/grid-api/)\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->localization",
      "introduction": [
        "# Data Grid - Translated components\n\n<p class=\"description\">The Data Grid allows to support users from different locales, with formatting, and localized strings.</p>\n\nThe default locale of MUI X is English (United States). If you want to use other locales, follow the instructions below."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Translation keys",
          "introduction": [
            "Translation keys\n\nYou can use the `localeText` prop to pass in your own text and translations.\nYou can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/-/packages/x-data-grid/src/constants/localeTextConstants.ts)\nin the GitHub repository.\nIn the following example, the labels of the density selector are customized.",
            ":::warning\nIt's important to note that because the Data Grid uses components from the Material UI library, some translation keys need to be accessed using that component key.\n\nOne example is the table pagination component used in the Data Grid footer when pagination is enabled. All the keys provided to the `MuiTablePagination` object are applied as props directly to the [Table Pagination](/material-ui/api/table-pagination/) component.\n\n```jsx\n<DataGrid\n  {...data}\n  localeText={{\n    MuiTablePagination: {\n      labelDisplayedRows: ({ from, to, count }) =>\n        `${from} - ${to} of ${count === -1 ? `more than ${to}` : count}`,\n    },\n  }}\n/>\n```\n\n:::"
          ],
          "code_path": [
            "CustomLocaleTextGrid.js",
            null
          ],
          "children": []
        },
        {
          "name": "Locale text",
          "introduction": [
            "Locale text\n\nThe default locale of MUI X is English (United States).\n\nYou can use the theme to configure the locale text:\n\n```jsx\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { bgBG } from '@mui/x-data-grid/locales';\n// Or import { bgBG } from '@mui/x-data-grid-pro/locales';\n// Or import { bgBG } from '@mui/x-data-grid-premium/locales';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  bgBG,\n);\n\n<ThemeProvider theme={theme}>\n  <DataGrid />\n</ThemeProvider>;\n```\n\nNote that `createTheme()` accepts any number of arguments.\nIf you are already using the [translations of the core components](/material-ui/guides/localization/#locale-text), you can add `bgBG` as a new argument.\nThe same import works for Data Grid Pro as it's an extension of Data Grid.\n\n```jsx\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { bgBG } from '@mui/x-data-grid/locales';\nimport { bgBG as pickersBgBG } from '@mui/x-date-pickers/locales';\nimport { bgBG as coreBgBG } from '@mui/material/locale';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  bgBG, // x-data-grid translations\n  pickersBgBG, // x-date-pickers translations\n  coreBgBG, // core translations\n);\n\n<ThemeProvider theme={theme}>\n  <DataGrid />\n</ThemeProvider>;\n```\n\nIf you want to pass language translations directly to the Data Grid without using `createTheme()` and `ThemeProvider`, you can directly load the language translations from `@mui/x-data-grid/locales`.\n\n```jsx\nimport { DataGrid } from '@mui/x-data-grid';\nimport { nlNL } from '@mui/x-data-grid/locales';\n\n<DataGrid localeText={nlNL.components.MuiDataGrid.defaultProps.localeText} />;\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Supported locales",
              "introduction": [
                "Supported locales",
                "You can [find the source](https://github.com/mui/mui-x/tree/HEAD/packages/x-data-grid/src/locales) in the GitHub repository.\n\nTo create your own translation or to customize the English text, copy this file to your project, make any changes needed and import the locale from there.\nNote that these translations of the Data Grid component depend on the [Localization strategy](/material-ui/guides/localization/) of the whole library."
              ],
              "code_path": [
                "DataGridLocalisationTableNoSnap.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "RTL Support",
          "introduction": [
            "RTL Support\n\nRight-to-left languages such as Arabic, Persian, or Hebrew are supported.\nFollow [this guide](/material-ui/customization/right-to-left/) to use them.\n\nThe example below demonstrates how to use an RTL language (Arabic) with the Data Grid."
          ],
          "code_path": [
            "DataGridRTL.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->row-grouping",
      "introduction": [
        "# Data Grid - Row grouping [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\n<p class=\"description\">Group your rows according to some column values.</p>\n\nFor when you need to group rows based on repeated column values, and/or custom functions.\nIn the following example, movies are grouped based on their production `company`:",
        ":::info\nIf you are looking for row grouping on the server-side, see [server-side row grouping](/x/react-data-grid/server-side-data/row-grouping/).\n:::"
      ],
      "code_path": [
        "RowGroupingBasicExample.js",
        null
      ],
      "children": [
        {
          "name": "Grouping criteria",
          "introduction": [
            "Grouping criteria"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Initialize the row grouping",
              "introduction": [
                "Initialize the row grouping\n\nThe easiest way to get started with the feature is to provide its model to the `initialState` prop:\n\n```ts\n<DataGridPremium\n  initialState={{\n    rowGrouping: {\n      model: ['company', 'director'],\n    },\n  }}\n/>\n```\n\nThe basic parameters are the columns you want to check for repeating values.\nThis example groups all the movies matching the same company name, followed by a second group matching the director's name."
              ],
              "code_path": [
                "RowGroupingInitialState.js"
              ],
              "children": []
            },
            {
              "name": "Controlled row grouping",
              "introduction": [
                "Controlled row grouping\n\nIf you need to control the state of the criteria used for grouping, use the `rowGroupingModel` prop.\nYou can use the `onRowGroupingModelChange` prop to listen to changes to the grouping criteria and update the prop accordingly."
              ],
              "code_path": [
                "RowGroupingControlled.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Grouping columns",
          "introduction": [
            "Grouping columns"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Single grouping column",
              "introduction": [
                "Single grouping column\n\nBy default, the Data Grid will display a single column holding all grouping columns.\nIf you have multiple grouping criteria, this column name will be set to \"Group.\""
              ],
              "code_path": [
                "RowGroupingSingleGroupingCol.js"
              ],
              "children": []
            },
            {
              "name": "Multiple grouping columns",
              "introduction": [
                "Multiple grouping columns\n\nTo display a column for each grouping criterion, set the `rowGroupingColumnMode` prop to `multiple`."
              ],
              "code_path": [
                "RowGroupingMultipleGroupingCol.js"
              ],
              "children": []
            },
            {
              "name": "Custom grouping column",
              "introduction": [
                "Custom grouping column\n\nTo customize the rendering of the grouping column, use the `groupingColDef` prop.\nYou can override the **headerName** or any property of the `GridColDef` interface, except the `field`, the `type`, and the properties related to inline edition.",
                "By default, when using the object format, the properties will be applied to all Grouping columns. This means that if you have `rowGroupingColumnMode` set to `multiple`, all the columns will share the same `groupingColDef` properties.\n\nIf you wish to override properties of specific grouping columns or to apply different overrides based on the current grouping criteria, you can pass a callback function to `groupingColDef`, instead of an object with its config.\nThe callback is called for each grouping column, and it receives the respective column's \"fields\" as parameter."
              ],
              "code_path": [
                "RowGroupingCustomGroupingColDefObject.js",
                "RowGroupingCustomGroupingColDefCallback.js"
              ],
              "children": []
            },
            {
              "name": "Grouping rows with custom cell renderer",
              "introduction": [
                "Grouping rows with custom cell renderer\n\nBy default, when rows are grouped by a column with a custom cell component (`GridColDef['renderCell']`), the same custom cell component is used in the grouping column.",
                "You can opt out of this default behavior by returning `params.value` in `renderCell` for grouping rows instead:\n\n```tsx\nconst ratingColDef: GridColDef = {\n  // ...\n  renderCell: (params) => {\n    if (params.rowNode.type === 'group') {\n      return params.value;\n    }\n\n    return (\n      // ...\n    );\n  },\n};\n```"
              ],
              "code_path": [
                "RowGroupingCustomCell.js",
                "RowGroupingCustomCellDefault.js"
              ],
              "children": []
            },
            {
              "name": "Show values for the leaves",
              "introduction": [
                "Show values for the leaves\n\nBy default, the grouped rows display no value on their grouping columns' cells. Those cells are called \"leaves.\"\n\nIf you want to display some value, you can provide a `leafField` property to the `groupingColDef`."
              ],
              "code_path": [
                "RowGroupingLeafWithValue.js"
              ],
              "children": []
            },
            {
              "name": "Hide the descendant count",
              "introduction": [
                "Hide the descendant count\n\nUse the `hideDescendantCount` property of the `groupingColDef` to hide the number of descendants of a grouping row."
              ],
              "code_path": [
                "RowGroupingHideDescendantCount.js"
              ],
              "children": []
            },
            {
              "name": "Hide the grouped columns",
              "introduction": [
                "Hide the grouped columns\n\nBy default, the columns used to group the rows remains visible.\nFor instance if you group by `\"director\"`, you have two columns titled **Director**:\n\n- The grouped column (the column from which you grouped the rows)\n- The grouping column on which you can toggle the groups\n\nTo automatically hide the grouped columns, use the `useKeepGroupedColumnsHidden` utility hook.\nThe hook automatically hides the columns when added to the model, and displays them when removed from it.\n\n:::warning\nThis hook is not compatible with the deprecated column property `hide`.\n\nYou can manage column visibility with `columnVisibilityModel`, `initialState`, or both together.\nTo do so, pass them to the hook parameters.\n:::\n\nBelow are two examples about how to use `columnVisibilityModel` or `initialState` with `useKeepGroupedColumnsHidden` hook.\nYou can mix the two examples to support both at the same time.\n\n```tsx\n// Usage with the initial state\nconst apiRef = useGridApiRef();\n\nconst initialState = useKeepGroupedColumnsHidden({\n  apiRef,\n  initialState: {\n    rowGrouping: {\n      model: ['company'],\n    },\n    columns: {\n      // Other hidden columns\n      columnVisibilityModel: { gross: false },\n    },\n  },\n});\n\nreturn <DataGridPremium {...data} apiRef={apiRef} initialState={initialState} />;\n```\n\n```tsx\n// Usage with the controlled model\nconst apiRef = useGridApiRef();\n\nconst [rowGroupingModel, setRowGroupingModel] = React.useState([\n  'company',\n  'director',\n]);\n\nconst initialState = useKeepGroupedColumnsHidden({\n  apiRef,\n  rowGroupingModel,\n});\n\nreturn (\n  <DataGridPremium\n    {...data}\n    apiRef={apiRef}\n    initialState={initialState}\n    rowGroupingModel={rowGroupingModel}\n  />\n);\n```"
              ],
              "code_path": [
                "RowGroupingUseKeepGroupedColumnsHidden.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Disable the row grouping",
          "introduction": [
            "Disable the row grouping"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "For all columns",
              "introduction": [
                "For all columns\n\nYou can disable row grouping by setting the `disableRowGrouping` prop to true.\n\nIt will disable all the features related to the row grouping, even if a model is provided."
              ],
              "code_path": [
                "RowGroupingDisabled.js"
              ],
              "children": []
            },
            {
              "name": "For some columns",
              "introduction": [
                "For some columns\n\nIn case you need to disable grouping on specific column(s), set the `groupable` property on the respective column definition (`GridColDef`) to `false`.\nIn the example below, the `director` column cannot be grouped. In all examples, the `title` and `gross` columns cannot be grouped."
              ],
              "code_path": [
                "RowGroupingColDefCanBeGrouped.js"
              ],
              "children": []
            },
            {
              "name": "Grouping non-groupable columns programmatically",
              "introduction": [
                "Grouping non-groupable columns programmatically\n\nTo apply row grouping programmatically on non-groupable columns (columns with `groupable: false` in the [column definition](/x/api/data-grid/grid-col-def/)), you can provide row grouping model in one of the following ways:\n\n1. Pass `rowGrouping.model` to the `initialState` prop. This will [initialize the grouping](/x/react-data-grid/row-grouping/#initialize-the-row-grouping) with the provided model.\n2. Provide the `rowGroupingModel` prop. This will [control the grouping](/x/react-data-grid/row-grouping/#controlled-row-grouping) with the provided model.\n3. Call the API method `setRowGroupingModel`. This will set the aggregation with the provided model.\n\nIn the following example, the column `company` is not groupable from the UI but the `rowGroupingModel` prop is passed to generate a read-only row group."
              ],
              "code_path": [
                "RowGroupingReadOnly.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Using `groupingValueGetter` for complex grouping value",
          "introduction": [
            "Using `groupingValueGetter` for complex grouping value\n\nThe grouping value has to be either a `string`, a `number`, `null`, or `undefined`.\nIf your cell value is more complex, pass a `groupingValueGetter` property to the column definition to convert it into a valid value.\n\n```ts\nconst columns: GridColDef[] = [\n  {\n    field: 'composer',\n    groupingValueGetter: (value) => value.name,\n  },\n  // ...\n];\n```",
            ":::info\nIf your column also has a `valueGetter` property, the value passed to the `groupingValueGetter` method will still be the row value from the `row[field]`.\n:::"
          ],
          "code_path": [
            "RowGroupingGroupingValueGetter.js",
            null
          ],
          "children": []
        },
        {
          "name": "Rows with missing groups",
          "introduction": [
            "Rows with missing groups\n\nIf the grouping key of a grouping criteria is `null` or `undefined` for a row, the Data Grid will consider that this row does not have a value for this group. and will inline it for those groups."
          ],
          "code_path": [
            "RowGroupingRowsWithMissingGroups.js"
          ],
          "children": []
        },
        {
          "name": "Group expansion",
          "introduction": [
            "Group expansion\n\nBy default, all groups are initially displayed collapsed. You can change this behavior by setting the `defaultGroupingExpansionDepth` prop to expand all the groups up to a given depth when loading the data.\nIf you want to expand the whole tree, set `defaultGroupingExpansionDepth = -1`",
            "If you want to expand groups by default according to a more complex logic, use the `isGroupExpandedByDefault` prop which is a callback receiving the node as an argument.\nWhen defined, this callback will always have priority over the `defaultGroupingExpansionDepth` prop.\n\n```tsx\nisGroupExpandedByDefault={\n  node => node.groupingField === 'company' && node.groupingKey === '20th Century Fox'\n}\n```",
            "Use the `setRowChildrenExpansion` method on `apiRef` to programmatically set the expansion of a row. Changing the expansion of a row emits a `rowExpansionChange` event, listen to it to react to the expansion change.",
            ":::warning\nThe `apiRef.current.setRowChildrenExpansion` method is not compatible with the [server-side tree data](/x/react-data-grid/server-side-data/tree-data/) and [server-side row grouping](/x/react-data-grid/server-side-data/row-grouping/). Use `apiRef.current.unstable_dataSource.fetchRows` instead.\n:::"
          ],
          "code_path": [
            "RowGroupingDefaultExpansionDepth.js",
            "RowGroupingIsGroupExpandedByDefault.js",
            "RowGroupingSetChildrenExpansion.js",
            null
          ],
          "children": [
            {
              "name": "Customize grouping cell indent",
              "introduction": [
                "Customize grouping cell indent\n\nTo change the default cell indent, you can use the `--DataGrid-cellOffsetMultiplier` CSS variable:\n\n```tsx\n<DataGridPremium\n  sx={{\n    // default value is 2\n    '--DataGrid-cellOffsetMultiplier': 6,\n  }}\n/>\n```"
              ],
              "code_path": [
                "RowGroupingCustomCellIndent.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Sorting / Filtering",
          "introduction": [
            "Sorting / Filtering"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Single grouping column",
              "introduction": [
                "Single grouping column\n\nWhen using `rowGroupingColumnMode = \"single\"`, the default behavior is to:\n\n- sort each grouping criteria using the `sortComparator` of the column\n- apply the `filterOperators` of the top-level grouping criteria\n\nIf you are rendering leaves with the `leafField` property of `groupingColDef`, the sorting and filtering will be applied on the leaves based on the `sortComparator` and `filterOperators` of their original column.\n\nYou can force the filtering to be applied on another grouping criteria with the `mainGroupingCriteria` property of `groupingColDef`"
              ],
              "code_path": [
                "RowGroupingFilteringSingleGroupingColDef.js"
              ],
              "children": []
            },
            {
              "name": "Multiple grouping columns",
              "introduction": [
                "Multiple grouping columns\n\nWhen using `rowGroupingColumnMode = \"multiple\"`, the default behavior is to apply the `sortComparator` and `filterOperators` of the grouping criteria of each grouping column.\n\nIf you are rendering leaves on one of those columns with the `leafField` property of `groupingColDef`, the sorting and filtering will be applied on the leaves for this grouping column based on the `sortComparator` and `filterOperators` of the leave's original column.\n\nIf you want to render leaves but apply the sorting and filtering on the grouping criteria of the column, you can force it by setting the `mainGroupingCriteria` property `groupingColDef` to be equal to the grouping criteria.\n\nIn the example below:\n\n- the sorting and filtering of the `company` grouping column is applied on the `company` field\n- the sorting and filtering of the `director` grouping column is applied on the `director` field even though it has leaves",
                ":::warning\nIf you are dynamically switching the `leafField` or `mainGroupingCriteria`, the sorting and filtering models will not be cleaned up automatically, and the sorting/filtering will not be re-applied.\n:::"
              ],
              "code_path": [
                "RowGroupingSortingMultipleGroupingColDef.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Automatic parents and children selection",
          "introduction": [
            "Automatic parents and children selection\n\nBy default, selecting a parent row selects all its descendants automatically.\nYou can customize this behavior by using the `rowSelectionPropagation` prop.\n\nHere's how it's structured:\n\n```ts\ntype GridRowSelectionPropagation = {\n  descendants?: boolean; // default: true\n  parents?: boolean; // default: true\n};\n```\n\nWhen `rowSelectionPropagation.descendants` is set to `true`.\n\n- Selecting a parent selects all its filtered descendants automatically.\n- Deselecting a parent row deselects all its filtered descendants automatically.\n\nWhen `rowSelectionPropagation.parents` is set to `true`.\n\n- Selecting all the filtered descendants of a parent selects the parent automatically.\n- Deselecting a descendant of a selected parent deselects the parent automatically.\n\nThe example below demonstrates the usage of the `rowSelectionPropagation` prop.",
            ":::info\nThe row selection propagation also affects the \"Select all\" checkbox like any other group checkbox.\n:::\n\n:::info\nThe selected rows that do not pass the filtering criteria are automatically deselected when the filter is applied. Row selection propagation is not applied to the unfiltered rows.\n:::\n\n:::warning\nIf `props.disableMultipleRowSelection` is set to `true`, the row selection propagation doesn't apply.\n:::\n\n:::warning\nRow selection propagation is a client-side feature and is not supported with the [server-side data source](/x/react-data-grid/server-side-data/).\n:::"
          ],
          "code_path": [
            "RowGroupingPropagateSelection.js",
            null
          ],
          "children": []
        },
        {
          "name": "Get the rows in a group",
          "introduction": [
            "Get the rows in a group\n\nYou can use the `apiRef.current.getRowGroupChildren` method to get the id of all rows contained in a group.\nIt will not contain the autogenerated rows (that is the subgroup rows or the aggregation footers).\n\n```ts\nconst rows: GridRowId[] = apiRef.current.getRowGroupChildren({\n  groupId: params.id,\n\n  // If true, the rows will be in the order displayed on screen\n  applySorting: true,\n\n  // If true, only the rows matching the current filters will be returned\n  applyFiltering: true,\n});\n```\n\nIf you want to get the row ids of a group given its grouping criteria, use `getGroupRowIdFromPath`\n\n```ts\nconst rows = apiRef.current.getRowGroupChildren({\n  groupId: getGroupRowIdFromPath([{ field: 'company', key: 'Disney Studios' }]),\n});\n```",
            ":::warning\nThe `apiRef.current.getRowGroupChildren` method is not compatible with the [server-side row grouping](/x/react-data-grid/server-side-data/row-grouping/) since all the rows might not be available to get at a given instance.\n:::"
          ],
          "code_path": [
            "RowGroupingGetRowGroupChildren.js",
            null
          ],
          "children": []
        },
        {
          "name": "Row group panel 🚧",
          "introduction": [
            "Row group panel 🚧\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\n👍 Upvote [issue #5235](https://github.com/mui/mui-x/issues/5235) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::\n\nWith this panel, your users will be able to control which columns are used for grouping just by dragging them inside the panel."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Full example",
          "introduction": [
            "Full example"
          ],
          "code_path": [
            "RowGroupingFullExample.js"
          ],
          "children": []
        },
        {
          "name": "Advanced use cases",
          "introduction": [
            "Advanced use cases\n\nSee [Row grouping recipes](/x/react-data-grid/recipes-row-grouping/) for more advanced use cases."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "apiRef",
          "introduction": [
            "apiRef\n\nThe grid exposes a set of methods that enables all of these features using the imperative `apiRef`. To know more about how to use it, check the [API Object](/x/react-data-grid/api-object/) section."
          ],
          "code_path": [
            "RowGroupingApiNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->column-recipes",
      "introduction": [
        "# Data Grid - Column customization recipes\n\n<p class=\"description\">Advanced column customization recipes.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Persisting column width and order",
          "introduction": [
            "Persisting column width and order\n\nWhen the `columns` prop reference is updated, the column width and order is reset to the `colDef.width` and the order of the `colDef` object and any updates will be lost.\nThis is because the Data Grid considers update of the columns prop as a new set of columns, and the previous state is discarded.\n\nTo persist the column width and order when the `columns` prop is updated, consider persisting the state of the columns in the userland.",
            ":::warning\n[Column ordering](/x/react-data-grid/column-ordering/) is a Pro feature, to use it you must be on a Pro or Premium plan.\n:::"
          ],
          "code_path": [
            "ColumnSizingPersistWidthOrder.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->master-detail",
      "introduction": [
        "# Data Grid - Master detail [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Expand your rows to display additional information.</p>\n\nThe master detail feature allows expanding a row to display additional information inside a panel.\nTo use this feature, pass a function to the `getDetailPanelContent` prop with the content to be rendered inside the panel.\nAny valid React element can be used as the row detail, even another grid.\n\nBy default, the detail panel height is 500px.\nYou can customize it by passing a function to the `getDetailPanelHeight` prop.\nThis function must return either a number or the `\"auto\"` string.\nIf it returns a number, then the panel will use that value (in pixels) for the height.\nIf it returns `\"auto\"`, then the height will be [derived](#infer-height-from-the-content) from the content.\n\n```tsx\n<DataGridPro\n  getDetailPanelContent={({ row }) => <div>Row ID: {row.id}</div>}\n  getDetailPanelHeight={({ row }) => 100} // Optional, default is 500px.\n/>\n\n// or\n\n<DataGridPro\n  getDetailPanelContent={({ row }) => <div>Row ID: {row.id}</div>}\n  getDetailPanelHeight={({ row }) => 'auto'} // Height based on the content.\n/>\n```\n\n:::info\nBoth props are called with a [`GridRowParams`](/x/api/data-grid/grid-row-params/) object, which lets you return a different value for each row.\n:::\n\nTo expand a row, click on the **+** icon or press <kbd class=\"key\">Space</kbd> inside the detail toggle column.\nReturning `null` or `undefined` as the value of `getDetailPanelContent` will prevent the respective row from being expanded.",
        ":::warning\nAlways memoize the function provided to `getDetailPanelContent` and `getDetailPanelHeight`.\nThe Data Grid depends on the referential value of these props to cache their values and optimize the rendering.\n\n```tsx\nconst getDetailPanelContent = React.useCallback(() => { ... }, []);\n\n<DataGridPro getDetailPanelContent={getDetailPanelContent} />\n```\n\n:::"
      ],
      "code_path": [
        "BasicDetailPanels.js",
        null
      ],
      "children": [
        {
          "name": "Infer height from the content",
          "introduction": [
            "Infer height from the content\n\nLike [dynamic row height](/x/react-data-grid/row-height/#dynamic-row-height), you can also derive the detail panel height from its content.\nFor this, pass a function to the `getDetailPanelHeight` prop returning `\"auto\"`, as below:\n\n```tsx\n<DataGridPro getDetailPanelHeight={() => 'auto'} />\n```\n\nThe following example demonstrates this option in action:"
          ],
          "code_path": [
            "DetailPanelAutoHeight.js"
          ],
          "children": []
        },
        {
          "name": "Controlling expanded detail panels",
          "introduction": [
            "Controlling expanded detail panels\n\nTo control which rows are expanded, pass a set of row IDs to the `detailPanelExpandedRowIds` prop.\nPassing a callback to the `onDetailPanelExpandedRowIds` prop can be used to detect when a row gets expanded or collapsed.\n\nOn the other hand, if you only want to initialize the Data Grid with some rows already expanded, use the `initialState` prop as follows:\n\n```tsx\n<DataGridPro initialState={{ detailPanel: { expandedRowIds: new Set([1, 2, 3]) } }}>\n```"
          ],
          "code_path": [
            "ControlMasterDetail.js"
          ],
          "children": []
        },
        {
          "name": "Lazy loading detail panel content",
          "introduction": [
            "Lazy loading detail panel content\n\nYou don't need to provide the content for detail panels upfront.\nInstead, you can load it lazily when the row is expanded.\n\nIn the following example, the `DetailPanelContent` component is fetching the data on mount.\nThis component is used by the `getDetailPanelContent` prop to render the detail panel content."
          ],
          "code_path": [
            "LazyLoadingDetailPanel.js"
          ],
          "children": []
        },
        {
          "name": "Using a detail panel as a form",
          "introduction": [
            "Using a detail panel as a form\n\nAs an alternative to the built-in [row editing](/x/react-data-grid/editing/#row-editing), a form component can be rendered inside the detail panel, allowing the user to edit the current row values.\n\nThe following demo shows integration with [react-hook-form](https://react-hook-form.com/), but other form libraries are also supported."
          ],
          "code_path": [
            "FormDetailPanel.js"
          ],
          "children": []
        },
        {
          "name": "Customizing the detail panel toggle",
          "introduction": [
            "Customizing the detail panel toggle\n\nTo change the icon used for the toggle, you can provide a different component for the [icon slot](/x/react-data-grid/components/#icons) as follow:\n\n```tsx\n<DataGridPro\n  slots={{\n    detailPanelExpandIcon: CustomExpandIcon,\n    detailPanelCollapseIcon: CustomCollapseIcon,\n  }}\n/>\n```\n\nIf this is not sufficient, the entire toggle component can be overridden.\nTo fully customize it, add another column with `field: GRID_DETAIL_PANEL_TOGGLE_FIELD` to your set of columns.\nThe grid will detect that there is already a toggle column defined and it will not add another toggle in the default position.\nThe new toggle component can be provided via [`renderCell`](/x/react-data-grid/column-definition/#rendering-cells) in the same as any other column.\nBy only setting the `field`, is up to you to configure the remaining options (for example disable the column menu, filtering, sorting).\nTo already start with a few suggested options configured, spread `GRID_DETAIL_PANEL_TOGGLE_COL_DEF` when defining the column.\n\n```tsx\n<DataGridPro\n  columns={[\n    {\n      field: GRID_DETAIL_PANEL_TOGGLE_FIELD,\n      renderCell: (params) => <CustomDetailPanelToggle {...params} />\n    },\n  ]}\n/>\n\n// or\n\n<DataGridPro\n  columns={[\n    {\n      ...GRID_DETAIL_PANEL_TOGGLE_COL_DEF, // Already contains the right field\n      renderCell: (params) => <CustomDetailPanelToggle {...params}>\n    },\n  ]}\n/>\n```\n\nThis approach can also be used to change the location of the toggle column, as shown below.",
            ":::info\nAs any ordinary cell renderer, the `value` prop is also available, and it corresponds to the state of the row: `true` when expanded and `false` when collapsed.\n:::"
          ],
          "code_path": [
            "CustomizeDetailPanelToggle.js",
            null
          ],
          "children": []
        },
        {
          "name": "Custom header for detail panel column",
          "introduction": [
            "Custom header for detail panel column\n\nTo render a custom header for the detail panel column, use the [`renderHeader`](/x/react-data-grid/column-header/#custom-header-renderer) property in the column definition.\nThis property receives a `GridRenderHeaderParams` object that contains `colDef` (the column definition) and `field`.\nThe following example demonstrates how to render a custom header for the detail panel column:\n\n```tsx\nconst columns = [\n  {\n    ...GRID_DETAIL_PANEL_TOGGLE_COL_DEF,\n    renderHeader: (params) => (\n      <div>\n        <span>{params.colDef.headerName}</span>\n        <button onClick={() => console.log('Custom action')}>Custom action</button>\n      </div>\n    ),\n  },\n  //... other columns\n];\n```\n\n:::info\nFor a more advanced example check out the [Expand or collapse all detail panels](/x/react-data-grid/row-recipes/#expand-or-collapse-all-detail-panels) recipe.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Disable detail panel content scroll",
          "introduction": [
            "Disable detail panel content scroll\n\nBy default, the detail panel has a width that is the sum of the widths of all columns.\nThis means that when a horizontal scrollbar is present, scrolling it will also scroll the panel content.\nTo avoid this behavior, set the size of the detail panel to the outer size of the Data Grid.\nUse `apiRef.current.getRootDimensions()` to get the latest dimension values.\nFinally, to prevent the panel from scrolling, set `position: sticky` and `left: 0`.\n\nThe following demo shows how this can be achieved.\nNotice that the toggle column is pinned to make sure that it will always be visible when the Data Grid is scrolled horizontally."
          ],
          "code_path": [
            "FullWidthDetailPanel.js"
          ],
          "children": []
        },
        {
          "name": "Recipes",
          "introduction": [
            "Recipes\n\nMore examples of how to customize the detail panel:\n\n- [One expanded detail panel at a time](/x/react-data-grid/row-recipes/#one-expanded-detail-panel-at-a-time)\n- [Expand or collapse all detail panels](/x/react-data-grid/row-recipes/#expand-or-collapse-all-detail-panels)\n- [Toggling detail panels on row click](/x/react-data-grid/row-recipes/#toggling-detail-panels-on-row-click)"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "apiRef",
          "introduction": [
            "apiRef\n\nThe grid exposes a set of methods that enables all of these features using the imperative `apiRef`. To know more about how to use it, check the [API Object](/x/react-data-grid/api-object/) section."
          ],
          "code_path": [
            "DetailPanelApiNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->column-pinning",
      "introduction": [
        "# Data Grid - Column pinning [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Pin columns to keep them visible at all time.</p>\n\nPinned (or frozen, locked, or sticky) columns are columns that are visible at all time while the user scrolls the Data Grid horizontally.\nThey can be pinned either to the left or right side and cannot be reordered.\n\nTo pin a column, there are a few ways:\n\n- Using the `initialState` prop\n- [Controlling](#controlling-the-pinned-columns) the `pinnedColumns` and `onPinnedColumnsChange` props\n- Dedicated buttons in the column menu\n- Accessing the [imperative](#apiref) API"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Initializing the pinned columns",
          "introduction": [
            "Initializing the pinned columns\n\nTo set pinned columns via `initialState`, pass an object with the following shape to this prop:\n\n```ts\ninterface GridPinnedColumnFields {\n  left?: string[]; // Optional field names to pin to the left\n  right?: string[]; // Optional field names to pin to the right\n}\n```\n\nThe following demos illustrates how this approach works:",
            ":::info\nThe column pinning feature can be completely disabled with `disableColumnPinning`.\n\n```tsx\n<DataGridPro disableColumnPinning />\n```\n\n:::\n\n:::warning\nYou may encounter issues if the sum of the widths of the pinned columns is larger than the width of the Grid.\nMake sure that the Data Grid can properly accommodate these columns at a minimum.\n:::"
          ],
          "code_path": [
            "BasicColumnPinning.js",
            null
          ],
          "children": []
        },
        {
          "name": "Controlling the pinned columns",
          "introduction": [
            "Controlling the pinned columns\n\nWhile the `initialState` prop only works for setting pinned columns during the initialization, the `pinnedColumns` prop allows you to modify which columns are pinned at any time.\nThe value passed to it follows the same shape from the previous approach.\nUse it together with `onPinnedColumnsChange` to know when a column is pinned or unpinned."
          ],
          "code_path": [
            "ControlPinnedColumns.js"
          ],
          "children": []
        },
        {
          "name": "Disable column pinning",
          "introduction": [
            "Disable column pinning"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "For all columns",
              "introduction": [
                "For all columns\n\nColumn pinning is enabled by default, but you can easily disable this feature by setting the `disableColumnPinning` prop.\n\n```tsx\n<DataGridPro disableColumnPinning />\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "For some columns",
              "introduction": [
                "For some columns\n\nTo disable the pinning of a single column, set the `pinnable` property in `GridColDef` to `false`.\n\n```tsx\n<DataGridPro columns={[{ field: 'id', pinnable: false }]} /> // Default is `true`.\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Pin non-pinnable columns programmatically",
              "introduction": [
                "Pin non-pinnable columns programmatically\n\nIt may be desirable to allow one or more columns to be pinned or unpinned programmatically that cannot be pinned or unpinned on the UI (that is columns for which prop `disableColumnPinning = true` or `colDef.pinnable = false`).\nThis can be done in one of the following ways.\n\n- (A) Initializing the pinned columns\n- (B) Controlling the pinned columns\n- (C) Using the API method `setPinnedColumns` to set the pinned columns\n\n```tsx\n// (A) Initializing the pinning\n<DataGridPro\n  disableColumnPinning\n  initialState={{ pinnedColumns: { left: ['name'] } }}\n/>\n\n// (B) Controlling the pinned columns\n<DataGridPro\n  disableColumnPinning\n  pinnedColumns={{ left: ['name'] }}\n/>\n\n// (C) Using the API method `setPinnedColumns` to set the pinned columns\n<React.Fragment>\n  <DataGridPro disableColumnPinning />\n  <Button onClick={() => apiRef.current.setPinnedColumns({ left: ['name'] })}>\n    Pin name column\n  </Button>\n</React.Fragment>\n```\n\nThe following demo uses method (A) to initialize the state of the pinned columns which pins a column `name` although the pinning feature is disabled.",
                ":::info\nAnother alternate option to disable pinning actions on the UI is to disable the pinning options in the column menu in one of the following ways.\n\n1. Use [`disableColumnMenu` prop](/x/react-data-grid/column-menu/#disable-column-menu) to completely disable the column menu.\n2. Use column menu API to hide the pinning options in the column menu. See [Column Menu - Hiding a menu item](/x/react-data-grid/column-menu/#hiding-a-menu-item) for more details.\n\n:::"
              ],
              "code_path": [
                "DisableColumnPinningButtons.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Pinning the checkbox selection column",
          "introduction": [
            "Pinning the checkbox selection column\n\nTo pin the checkbox column added when using `checkboxSelection`, add `GRID_CHECKBOX_SELECTION_COL_DEF.field` to the list of pinned columns."
          ],
          "code_path": [
            "ColumnPinningWithCheckboxSelection.js"
          ],
          "children": []
        },
        {
          "name": "Usage with dynamic row height",
          "introduction": [
            "Usage with dynamic row height\n\nYou can have both pinned columns and [dynamic row height](/x/react-data-grid/row-height/#dynamic-row-height) enabled at the same time.\nHowever, if the rows change their content after the initial calculation, you may need to trigger a manual recalculation to avoid incorrect measurements.\nYou can do this by calling `apiRef.current.resetRowHeights()` every time that the content changes.\n\nThe demo below contains an example of both features enabled:"
          ],
          "code_path": [
            "ColumnPinningDynamicRowHeight.js"
          ],
          "children": []
        },
        {
          "name": "apiRef",
          "introduction": [
            "apiRef\n\nThe grid exposes a set of methods that enables all of these features using the imperative `apiRef`. To know more about how to use it, check the [API Object](/x/react-data-grid/api-object/) section."
          ],
          "code_path": [
            "ColumnPinningApiNoSnap.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->column-definition",
      "introduction": [
        "# Data Grid - Column definition\n\n<p class=\"description\">Define your columns.</p>\n\nThe columns are defined with the `columns` prop which has the type `GridColDef[]`.\n\n`field` is the only required property since it's the column identifier. It's also used to match with `GridRowModel` values.\n\n```ts\ninterface GridColDef {\n  /**\n   * The column identifier. It's used to match with [[GridRowModel]] values.\n   */\n  field: string;\n  …\n}\n```",
        ":::warning\nThe `columns` prop should keep the same reference between two renders.\nThe columns are designed to be definitions, to never change once the component is mounted.\nOtherwise, you take the risk of losing elements like column width or order.\nYou can create the array outside the render function or memoize it.\n:::"
      ],
      "code_path": [
        "BasicColumnsGrid.js",
        null
      ],
      "children": [
        {
          "name": "Providing content",
          "introduction": [
            "Providing content\n\nBy default, the Data Grid uses the field of a column to get its value.\nFor instance, the column with field `name` will render the value stored in `row.name`.\nBut for some columns, it can be useful to manually get and format the value to render."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Value getter",
              "introduction": [
                "Value getter\n\n:::warning\nNote that the signature of `valueGetter` has changed in v7 – see the [migration guide](https://mui.com/x/migration/migration-data-grid-v6/) for details.\n\nIf you're using v6, please use the [v6 documentation](https://v6.mui.com/x/react-data-grid/column-definition/#value-getter).\n:::\n\nSometimes a column might not have a desired value.\nYou can use the `valueGetter` attribute of `GridColDef` to:\n\n1. Transform the value\n\n   ```tsx\n   const columns: GridColDef[] = [\n     {\n       field: 'taxRate',\n       valueGetter: (value) => {\n         if (!value) {\n           return value;\n         }\n         // Convert the decimal value to a percentage\n         return value * 100;\n       },\n     },\n   ];\n   ```\n\n2. Render a combination of different fields\n\n   ```tsx\n   const columns: GridColDef[] = [\n     {\n       field: 'fullName',\n       valueGetter: (value, row) => {\n         return `${row.firstName || ''} ${row.lastName || ''}`;\n       },\n     },\n   ];\n   ```\n\n3. Derive a value from a complex value\n\n   ```tsx\n   const columns: GridColDef[] = [\n     {\n       field: 'profit',\n       valueGetter: (value, row) => {\n         if (!row.gross || !row.costs) {\n           return null;\n         }\n         return row.gross - row.costs;\n       },\n     },\n   ];\n   ```\n\nThe value returned by `valueGetter` is used for:\n\n- Filtering\n- Sorting\n- Rendering (unless enhanced further by [`valueFormatter`](/x/react-data-grid/column-definition/#value-formatter) or [`renderCell`](/x/react-data-grid/column-definition/#rendering-cells))",
                ":::warning\n`valueGetter` can be called for autogenerated rows, which are created when features like [row grouping](/x/react-data-grid/row-grouping/) or [aggregation](/x/react-data-grid/aggregation/) are used.\nRead more in the [handling autogenerated rows](/x/react-data-grid/column-definition/#autogenerated-rows) section.\n:::\n\n:::warning\n[Row grouping](/x/react-data-grid/row-grouping/) uses the [`groupingValueGetter()`](/x/react-data-grid/row-grouping/#using-groupingvaluegetter-for-complex-grouping-value) instead of `valueGetter` to get the value for the grouping.\nThe value passed to the `groupingValueGetter()` is the raw row value (`row[field]`) even if the column definition has a `valueGetter` defined.\n:::"
              ],
              "code_path": [
                "ValueGetterGrid.js",
                null
              ],
              "children": []
            },
            {
              "name": "Value formatter",
              "introduction": [
                "Value formatter\n\n:::warning\nNote that the signature of `valueFormatter` has changed in v7 – see the [migration guide](https://mui.com/x/migration/migration-data-grid-v6/) for details.\n\nIf you're using v6, please use the [v6 documentation](https://v6.mui.com/x/react-data-grid/column-definition/#value-formatter).\n:::\n\nThe value formatter allows you to convert the value before displaying it.\nCommon use cases include converting a JavaScript `Date` object to a date string or a `Number` into a formatted number (for example \"1,000.50\").\n\nNote, that the value returned by `valueFormatter` is only used for rendering purposes.\nFiltering and sorting are based on the raw value (`row[field]`) or the value returned by [`valueGetter`](/x/react-data-grid/column-definition/#value-getter).\n\nIn the following demo, `valueGetter` is used to convert the tax rate (for example `0.2`) to a decimal value (for example `20`),\nand `valueFormatter` is used to display it as a percentage (for example `20%`).",
                ":::warning\n`valueFormatter` can be called for autogenerated rows, which are created when features like [row grouping](/x/react-data-grid/row-grouping/) or [aggregation](/x/react-data-grid/aggregation/) are used.\nRead more in the [handling autogenerated rows](/x/react-data-grid/column-definition/#autogenerated-rows) section.\n:::"
              ],
              "code_path": [
                "ValueFormatterGrid.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Rendering cells",
          "introduction": [
            "Rendering cells\n\nBy default, the Data Grid renders the value as a string in the cell.\nIt resolves the rendered output in the following order:\n\n1. `renderCell() => ReactElement`\n2. `valueFormatter() => string`\n3. `valueGetter() => string`\n4. `row[field]`\n\nThe `renderCell` method of the column definitions is similar to `valueFormatter`.\nHowever, it trades to be able to only render in a cell in exchange for allowing to return a React node (instead of a string).\n\n```tsx\nconst columns: GridColDef[] = [\n  {\n    field: 'date',\n    headerName: 'Year',\n    renderCell: (params: GridRenderCellParams<any, Date>) => (\n      <strong>\n        {params.value.getFullYear()}\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          style={{ marginLeft: 16 }}\n          tabIndex={params.hasFocus ? 0 : -1}\n        >\n          Open\n        </Button>\n      </strong>\n    ),\n  },\n];\n```",
            ":::warning\nWhen using `renderCell`, if the type of the value returned by `valueGetter` does not correspond to the column's `type`, you should:\n\n- handle [sorting](/x/react-data-grid/sorting/#custom-comparator) by providing `sortComparator` to the column.\n- set a `valueFormatter` providing a representation for the value to be used when [exporting](/x/react-data-grid/export/#exported-cells) the data.\n\n:::\n\n:::warning\n`renderCell` can be called for autogenerated rows, which are created when features like [row grouping](/x/react-data-grid/row-grouping/) or [aggregation](/x/react-data-grid/aggregation/) are used.\nRead more in the [handling autogenerated rows](/x/react-data-grid/column-definition/#autogenerated-rows) section.\n:::"
          ],
          "code_path": [
            "RenderCellGrid.js",
            null
          ],
          "children": [
            {
              "name": "Styling cells",
              "introduction": [
                "Styling cells\n\nYou can check the [styling cells](/x/react-data-grid/style/#styling-cells) section for more information."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Making accessible cells",
              "introduction": [
                "Making accessible cells\n\nCell content should not be in the tab sequence except if cell is focused.\nYou can check the [tab sequence](/x/react-data-grid/accessibility/#tab-sequence) section for more information."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Using hooks inside a renderer",
              "introduction": [
                "Using hooks inside a renderer\n\nThe `renderCell` property is a function that returns a React node, not a React component.\n\nIf you want to use React hooks inside your renderer, you should wrap them inside a component.\n\n```tsx\n// ❌ Not valid\nconst column = {\n  // ...other properties,\n  renderCell: () => {\n    const [count, setCount] = React.useState(0);\n\n    return (\n      <Button onClick={() => setCount((prev) => prev + 1)}>{count} click(s)</Button>\n    );\n  },\n};\n\n// ✅ Valid\nconst CountButton = () => {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <Button onClick={() => setCount((prev) => prev + 1)}>{count} click(s)</Button>\n  );\n};\n\nconst column = {\n  // ...other properties,\n  renderCell: () => <CountButton />,\n};\n```\n\n:::warning\nBecause of pagination and virtualization, cells can be unmounted when scrolling or switching pages.\nThe internal state of the component returned by renderCell will be lost.\n\nIf you want the cell information to persist, you should save it either in the Data Grid state or in the Data Grid parent.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Expand cell renderer",
              "introduction": [
                "Expand cell renderer\n\nBy default, the Data Grid cuts the content of a cell and renders an ellipsis if the content of the cell does not fit in the cell.\nAs a workaround, you can create a cell renderer that will allow seeing the full content of the cell in the Data Grid.",
                ":::warning\nBecause of pagination and virtualization, cells can be unmounted when scrolling or switching pages.\nThe internal state of the component returned by `renderCell` will be lost.\n\nIf you want to persist cell information, you should save it either in the Data Grid parent or in the row model.\nUpdating the row will rerender the row and so call renderCell with updated params.\n:::"
              ],
              "code_path": [
                "RenderExpandCellGrid.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Column types",
          "introduction": [
            "Column types\n\nTo facilitate the configuration of the columns, some column types are predefined.\nBy default, columns are assumed to hold strings, so the default column string type will be applied. As a result, column sorting will use the string comparator, and the column content will be aligned to the left side of the cell. Some column types require that their value have a specific type.\n\nThe following are the native column types with their required value types:\n\n| Column type          | Value type                 |\n| :- | :- |\n| `'string'` (default) | `string`                   |\n| `'number'`           | `number`                   |\n| `'date'`             | `Date() object`            |\n| `'dateTime'`         | `Date() object`            |\n| `'boolean'`          | `boolean`                  |\n| `'singleSelect'`     | A value in `.valueOptions` |\n| `'actions'`          | Not applicable             |"
          ],
          "code_path": [
            "ColumnTypesGrid.js"
          ],
          "children": [
            {
              "name": "Converting types",
              "introduction": [
                "Converting types\n\nDefault methods, such as filtering and sorting, assume that the type of the values will match the type of the column specified in `type`.\nFor example, values of column with `type: 'dateTime'` are expecting to be stored as a `Date()` objects.\nIf for any reason, your data type is not the correct one, you can use `valueGetter` to parse the value to the correct type.\n\n```tsx\n{\n  field: 'lastLogin',\n  type: 'dateTime',\n  valueGetter: (value) => value && new Date(value),\n}\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Special properties",
              "introduction": [
                "Special properties\n\nTo use most of the column types, you only need to define the `type` property in your column definition.\nHowever, some types require additional properties to be set to make them work correctly:"
              ],
              "code_path": [
                null
              ],
              "children": [
                {
                  "name": "Single select",
                  "introduction": [
                    "Single select\n\nIf the column type is `'singleSelect'`, you also need to set the `valueOptions` property in the respective column definition. These values are options used for filtering and editing.\n\n```tsx\n{\n  field: 'country',\n  type: 'singleSelect',\n  valueOptions: ['United Kingdom', 'Spain', 'Brazil']\n}\n```\n\n:::warning\nWhen using objects values for `valueOptions` you need to provide the `value` and `label` attributes for each option.\nHowever, you can customize which attribute is used as value and label by using `getOptionValue` and `getOptionLabel`, respectively.\n\n```tsx\n// Without getOptionValue and getOptionLabel\n{\n  valueOptions: [\n    { value: 'BR', label: 'Brazil' },\n    { value: 'FR', label: 'France' }\n  ]\n}\n\n// With getOptionValue and getOptionLabel\n{\n  getOptionValue: (value: any) => value.code,\n  getOptionLabel: (value: any) => value.name,\n  valueOptions: [\n    { code: 'BR', name: 'Brazil' },\n    { code: 'FR', name: 'France' }\n  ]\n}\n```\n\n:::"
                  ],
                  "code_path": [
                    null
                  ],
                  "children": []
                },
                {
                  "name": "Actions",
                  "introduction": [
                    "Actions\n\nIf the column type is `'actions'`, you need to provide a `getActions` function that returns an array of actions available for each row (React elements).\nYou can add the `showInMenu` prop on the returned React elements to signal the Data Grid to group these actions inside a row menu.\n\n```tsx\n{\n  field: 'actions',\n  type: 'actions',\n  getActions: (params: GridRowParams) => [\n    <GridActionsCellItem icon={...} onClick={...} label=\"Delete\" />,\n    <GridActionsCellItem icon={...} onClick={...} label=\"Print\" showInMenu />,\n  ]\n}\n```\n\nBy default, actions shown in the menu will close the menu on click.\nBut in some cases, you might want to keep the menu open after clicking an action.\nYou can achieve this by setting the `closeMenuOnClick` prop to `false`.\n\nIn the following example, the \"Delete\" action opens a confirmation dialog and therefore needs to keep the menu mounted:"
                  ],
                  "code_path": [
                    "ActionsWithModalGrid.js"
                  ],
                  "children": []
                }
              ]
            },
            {
              "name": "Custom column types",
              "introduction": [
                "Custom column types\n\nPlease refer to the [custom columns](/x/react-data-grid/custom-columns/) page for documentation and integration examples."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Autogenerated rows",
          "introduction": [
            "Autogenerated rows\n\nSome features like [row grouping](/x/react-data-grid/row-grouping/) or [aggregation](/x/react-data-grid/aggregation/) create autogenerated rows.\nThese rows also call functions like `valueGetter`, `valueFormatter` and `renderCell`, and that can cause issues if you're not expecting it because the `row` parameter will be an empty object and the `value` parameter will be `undefined`.\nIf we take for example the movie dataset, you can detect autogenerated rows using `isAutogeneratedRow()`:\n\n```tsx\n{\n  field: 'title',\n  valueGetter: (value, row) => {\n    if (isAutogeneratedRow(row)) {\n      return '[this is an autogenerated row]';\n    }\n    return `title: ${value}`;\n  },\n}\n```"
          ],
          "code_path": [
            "AutogeneratedRows.js"
          ],
          "children": []
        },
        {
          "name": "Selectors",
          "introduction": [
            "Selectors"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Visible columns",
              "introduction": [
                "Visible columns\n\nThose selectors do not take into account hidden columns.\n\n{{\"component\": \"modules/components/SelectorsDocs.js\", \"category\": \"Visible Columns\"}}"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Defined columns",
              "introduction": [
                "Defined columns\n\nThose selectors consider all the defined columns, including hidden ones.\n\n{{\"component\": \"modules/components/SelectorsDocs.js\", \"category\": \"Columns\"}}\n\nMore information about the selectors and how to use them on the [dedicated page](/x/react-data-grid/state/#access-the-state)."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "data-grid->clipboard",
      "introduction": [
        "# Data Grid - Copy and paste\n\n<p class=\"description\">Copy and paste data using clipboard.</p>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Clipboard copy",
          "introduction": [
            "Clipboard copy\n\nYou can copy selected grid data to the clipboard using the <kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">C</kbd> (<kbd class=\"key\">⌘ Command</kbd>+<kbd class=\"key\">C</kbd> on macOS) keyboard shortcut.\nThe copied cell values are separated by a tab (`\\t`) character and the rows are separated by a new line (`\\n`) character.\n\nThe priority of the data copied to the clipboard is the following, from highest to lowest:\n\n1. If more than one cell is selected (see [Cell selection<span class=\"plan-premium\" title=\"Premium plan\"></span>](/x/react-data-grid/cell-selection/)), the selected cells are copied\n2. If one or more rows are selected (see [Row selection](/x/react-data-grid/row-selection/)), the selected rows are copied\n3. If there is a single cell selected, the single cell is copied"
          ],
          "code_path": [
            "ClipboardCopy.js"
          ],
          "children": []
        },
        {
          "name": "Clipboard paste [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')",
          "introduction": [
            "Clipboard paste [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\n:::info\n\n<details style=\"margin: 0\">\n  <summary markdown=\"span\">Video preview</summary>\n  <video muted loop playsinline controls style=\"margin-top: 8px\">\n    <source src=\"https://github-production-user-asset-6210df.s3.amazonaws.com/13808724/237996024-abfcb5c6-9db6-4677-9ba7-ae97de441080.mov\" type=\"video/mp4\" />\n  </video>\n</details>\n:::\n\n:::warning\nTo make sure the copied cells are formatted correctly and can be parsed,\nit is recommended to set the `ignoreValueFormatterDuringExport` prop to `true`.\nDuring clipboard copy operation, the raw cell values will be copied instead of the formatted values,\nso that the values can be parsed correctly during the paste operation.\n\n```tsx\n<DataGridPremium ignoreValueFormatterDuringExport />\n```\n\n:::\n\nYou can paste data from clipboard using the <kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">V</kbd> (<kbd class=\"key\">⌘ Command</kbd>+<kbd class=\"key\">V</kbd> on macOS) keyboard shortcut.\nThe paste operation only affects cells in the columns that are [`editable`](/x/react-data-grid/editing/#making-a-column-editable).\n\nSame as with editing, you can use `valueParser` to modify the pasted value and `valueSetter` to update the row with new values.\nSee [Value parser and value setter](/x/react-data-grid/editing/#value-parser-and-value-setter) section of the editing documentation for more details.\n\nThe behavior of the clipboard paste operation depends on the selection state of the Data Grid and the data pasted from clipboard.\nThe priority is the following, from highest to lowest:\n\n1. If multiple cells are selected (see [Cell selection<span class=\"plan-premium\" title=\"Premium plan\"></span>](/x/react-data-grid/cell-selection/)), the selected cells are updated with the pasted values.\n2. If one or more rows are selected (see [Row selection](/x/react-data-grid/row-selection/)), the selected rows are updated with the pasted values.\n3. If a single cell is selected, the values are pasted starting from the selected cell."
          ],
          "code_path": [
            "ClipboardPaste.js"
          ],
          "children": [
            {
              "name": "Disable clipboard paste",
              "introduction": [
                "Disable clipboard paste\n\nTo disable clipboard paste, set the `disableClipboardPaste` prop to `true`:"
              ],
              "code_path": [
                "ClipboardPasteDisabled.js"
              ],
              "children": []
            },
            {
              "name": "Persisting pasted data",
              "introduction": [
                "Persisting pasted data\n\nClipboard paste uses the same API for persistence as [Editing](/x/react-data-grid/editing/persistence/)—use the `processRowUpdate` prop to persist the updated row in your data source:\n\n```tsx\nprocessRowUpdate?: (newRow: R, oldRow: R) => Promise<R> | R;\n```\n\nThe row will be updated with a value returned by the `processRowUpdate` callback.\nIf the callback throws or returns a rejected promise, the row will not be updated.\n\nThe demo below shows how to persist the pasted data in the browser's `sessionStorage`."
              ],
              "code_path": [
                "ClipboardPastePersistence.js"
              ],
              "children": []
            },
            {
              "name": "Events",
              "introduction": [
                "Events\n\nThe following events are fired during the clipboard paste operation:\n\n- `clipboardPasteStart` - fired when the clipboard paste operation starts\n- `clipboardPasteEnd` - fired when all row updates from clipboard paste have been processed\n\nFor convenience, you can also listen to these events using their respective props:\n\n- `onClipboardPasteStart`\n- `onClipboardPasteEnd`\n\nAdditionally, there is the `onBeforeClipboardPasteStart` prop, which is called before the clipboard paste operation starts\nand can be used to cancel or confirm the paste operation:\n\n```tsx\nconst onBeforeClipboardPasteStart = async () => {\n  const confirmed = window.confirm('Are you sure you want to paste?');\n  if (!confirmed) {\n    throw new Error('Paste operation cancelled');\n  }\n};\n\n<DataGridPremium onBeforeClipboardPasteStart={onBeforeClipboardPasteStart} />;\n```\n\nThe demo below uses the [`Dialog`](/material-ui/react-dialog/) component for paste confirmation.\nIf confirmed, the Data Grid displays a loading indicator during the paste operation."
              ],
              "code_path": [
                "ClipboardPasteEvents.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Format of the clipboard data",
          "introduction": [
            "Format of the clipboard data\n\nBy default, the clipboard copy and paste operations use the following format:\n\n- The cell values are separated by a tab (`\\t`) character.\n- The rows are separated by a new line (`\\n`) character.\n\nYou can use `clipboardCopyCellDelimiter` and `splitClipboardPastedText` props to change the format:\n\n```tsx\n<DataGridPremium\n  {...otherProps}\n  // support comma separated values\n  clipboardCopyCellDelimiter={','}\n  splitClipboardPastedText={(text) => text.split('\\n').map((row) => row.split(','))}\n/>\n```\n\nThe demo below uses `,` (comma) character as a cell delimiter for both copy and paste operations:"
          ],
          "code_path": [
            "ClipboardPasteDelimiter.js"
          ],
          "children": []
        },
        {
          "name": "API",
          "introduction": [
            "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    }
  ]
}