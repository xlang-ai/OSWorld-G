{
  "name": "date-pickers->date-picker",
  "introduction": [
    "# Date Picker\n\n<p class=\"description\">The Date Picker component lets users select a date.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basic usage",
      "introduction": [
        "Basic usage"
      ],
      "code_path": [
        "BasicDatePicker.js"
      ],
      "children": []
    },
    {
      "name": "Component composition",
      "introduction": [
        "Component composition\n\nThe component is built using the `DateField` for the keyboard editing and the `DateCalendar` for the view editing.\n\nCheck-out their documentation page for more information:\n\n- [Date Field](/x/react-date-pickers/date-field/)\n- [Date Calendar](/x/react-date-pickers/date-calendar/)\n\nYou can check the available props of the combined component on the dedicated [API page](/x/api/date-pickers/date-picker/#props).\nSome [DateField props](/x/api/date-pickers/date-field/#props) are not available on the Picker component, you can use `slotProps.field` to pass them to the field."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Uncontrolled vs. controlled value",
      "introduction": [
        "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
        ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
      ],
      "code_path": [
        "DatePickerValue.js",
        null
      ],
      "children": []
    },
    {
      "name": "Available components",
      "introduction": [
        "Available components\n\nThe component is available in four variants:\n\n- The `DesktopDatePicker` component which works best for mouse devices and large screens.\n  It renders the views inside a popover and a field for keyboard editing.\n\n- The `MobileDatePicker` component which works best for touch devices and small screens.\n  It renders the view inside a modal and a field for keyboard editing.\n\n- The `DatePicker` component which renders `DesktopDatePicker` or `MobileDatePicker` depending on the device it runs on.\n\n- The `StaticDatePicker` component which renders without the popover/modal and field.",
        "By default, the `DatePicker` component renders the desktop version if the media query [`@media (pointer: fine)`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/pointer) matches.\nThis can be customized with the `desktopModeMediaQuery` prop.\n\n:::warning\nResponsive components can suffer some inconsistencies between testing environments if media query is not supported.\nPlease refer to [this section](/x/react-date-pickers/base-concepts/#testing-caveats) for solutions.\n:::"
      ],
      "code_path": [
        "ResponsiveDatePickers.js",
        null
      ],
      "children": []
    },
    {
      "name": "Form props",
      "introduction": [
        "Form props\n\nThe component can be disabled or read-only."
      ],
      "code_path": [
        "FormPropsDatePickers.js"
      ],
      "children": []
    },
    {
      "name": "Views",
      "introduction": [
        "Views\n\nThe component supports three views: `day`, `month`, and `year`.\n\nBy default, the `day` and `year` views are enabled.\nUse the `views` prop to change this behavior:",
        "By default, the component renders the `day` view on mount.\nUse the `openTo` prop to change this behavior:",
        ":::success\nThe views will appear in the order defined by the `views` array.\nIf the view defined in `openTo` is not the first view, then the views before will not be included in the default flow\n(for example view the default behaviors, the `year` is only accessible when clicking on the toolbar).\n:::"
      ],
      "code_path": [
        "DatePickerViews.js",
        "DatePickerOpenTo.js",
        null
      ],
      "children": []
    },
    {
      "name": "Order of years",
      "introduction": [
        "Order of years\n\nBy default, years are displayed in ascending order, chronologically from the minimum year to the maximum.\nSet the `yearsOrder` prop to `desc` to show the years in descending order."
      ],
      "code_path": [
        "DatePickerYearsOrder.js"
      ],
      "children": []
    },
    {
      "name": "Landscape orientation",
      "introduction": [
        "Landscape orientation\n\nBy default, the Date Picker component automatically sets the orientation based on the `window.orientation` value.\nYou can force a specific orientation using the `orientation` prop:",
        ":::info\nYou can find more information about the layout customization in the [custom layout page](/x/react-date-pickers/custom-layout/).\n:::"
      ],
      "code_path": [
        "StaticDatePickerLandscape.js",
        null
      ],
      "children": []
    },
    {
      "name": "Helper text",
      "introduction": [
        "Helper text\n\nYou can show a helper text with the date format accepted:"
      ],
      "code_path": [
        "HelperText.js"
      ],
      "children": []
    },
    {
      "name": "Clearing the value",
      "introduction": [
        "Clearing the value\n\nYou can enable the clearable behavior:",
        ":::info\nSee [Field componentsâ€”Clearable behavior](/x/react-date-pickers/fields/#clearable-behavior) for more details.\n:::"
      ],
      "code_path": [
        "ClearableProp.js",
        null
      ],
      "children": []
    },
    {
      "name": "Localization",
      "introduction": [
        "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Validation",
      "introduction": [
        "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nYou can check out multiple examples of how to customize the date pickers and their subcomponents."
      ],
      "code_path": [
        "CustomizationExamplesNoSnap.js"
      ],
      "children": []
    }
  ]
}