{
  "name": "date-pickers->fields",
  "introduction": [
    "# Fields component\n\n<p class=\"description\">The field components let the user input date and time values with a keyboard and refined keyboard navigation.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Introduction",
      "introduction": [
        "Introduction\n\nThe fields are React components that let you enter a date or time with the keyboard, without using any popover or modal UI.\nThey provide refined navigation through arrow keys and support advanced behaviors like localization and validation."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Fields to edit a single element",
          "introduction": [
            "Fields to edit a single element"
          ],
          "code_path": [
            "SingleDateFieldExamples.js"
          ],
          "children": []
        },
        {
          "name": "Fields to edit a range [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Fields to edit a range [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nAll fields to edit a range are available in a single input version and in a multi input version."
          ],
          "code_path": [
            "DateRangeFieldExamples.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Advanced",
      "introduction": [
        "Advanced"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "What is a section?",
          "introduction": [
            "What is a section?\n\nIn the field components, the date is divided into several sections, each one responsible for the edition of a date token.\nFor example, if the format passed to the field is `MM/DD/YYYY`, the field will create 3 sections:\n\n- A `month` section for the token `MM`\n- A `day` section for the token `DD`\n- A `year` section for the token `YYYY`\n\nThose sections are independent, pressing <kbd class=\"key\">ArrowUp</kbd> while focusing the `day` section will add one day to the date, but it will never change the month or the year."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Control the selected sections",
          "introduction": [
            "Control the selected sections\n\nUse the `selectedSections` and `onSelectedSectionsChange` props to control which sections are currently being selected.\n\nThis prop accepts the following formats:\n\n1. If a number is provided, the section at this index will be selected.\n2. If `\"all\"` is provided, all the sections will be selected.\n3. If an object with a `startIndex` and `endIndex` fields are provided, the sections between those two indexes will be selected.\n4. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n5. If `null` is provided, no section will be selected\n\n:::warning\nYou need to make sure the input is focused before imperatively updating the selected sections.\n:::"
          ],
          "code_path": [
            "ControlledSelectedSections.js"
          ],
          "children": [
            {
              "name": "Usage with multi input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
              "introduction": [
                "Usage with multi input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nFor multi input range fields, you just have to make sure that the right input is focused before updating the selected section(s).\nOtherwise, the section(s) might be selected on the wrong input."
              ],
              "code_path": [
                "ControlledSelectedSectionsMultiInputRangeField.js"
              ],
              "children": []
            },
            {
              "name": "Usage with single input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
              "introduction": [
                "Usage with single input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nFor single input range fields, you won't be able to use the section name to select a single section because each section is present both in the start and in the end date.\nInstead, you can pass the index of the section using the `unstableFieldRef` prop to access the full list of sections:\n\n:::warning\nThe `unstableFieldRef` is not stable yet. More specifically, the shape of the `section` object might be modified in the near future.\nPlease only use it if needed.\n:::"
              ],
              "code_path": [
                "ControlledSelectedSectionsSingleInputRangeField.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Clearable behavior",
          "introduction": [
            "Clearable behavior\n\nYou can use the `clearable` prop to enable the clearing behavior on a field. You can also add an event handler using the `onClear` callback prop.\n\n:::info\nFor **multi-input** range fields the clearable behavior is not supported yet.\n:::",
            "You can also customize the icon you want to be displayed inside the clear `IconButton`."
          ],
          "code_path": [
            "ClearableBehavior.js",
            "CustomizeClearIcon.js"
          ],
          "children": []
        }
      ]
    }
  ]
}