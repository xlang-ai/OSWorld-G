{
  "name": "localization",
  "introduction": [
    "# Translated components\n\n<p class=\"description\">Date and Time Pickers support translations between languages.</p>\n\nAs with all MUI X components, you can modify text and translations inside the Date and Time Pickers.\nYou can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-date-pickers/src/locales/utils/pickersLocaleTextApi.ts)\nin the GitHub repository.\n\nThe default locale of MUI X is English (United States). If you want to use other locales, follow the instructions below.\n\n:::warning\nThis page focuses on translating the text inside the Date and Time Pickers.\nIf you need to change the formatting of the text to conform to a given locale, visit the [Date format and localization](/x/react-date-pickers/adapters-locale/) page.\n:::"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Set translations globally",
      "introduction": [
        "Set translations globally"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Using the theme",
          "introduction": [
            "Using the theme\n\nTo translate all your components from `@mui/x-date-pickers` and `@mui/x-date-pickers-pro`,\nimport the locale from `@mui/x-date-pickers` (see the [list of supported locales below](#supported-locales)).\n\n```jsx\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { deDE } from '@mui/x-date-pickers/locales';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  deDE, // use 'de' locale for UI texts (start, next month, ...)\n);\n\nfunction App({ children }) {\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n}\n```\n\nNote that `createTheme()` accepts any number of arguments.\nIf you are already using the [translations of the core components](/material-ui/guides/localization/#locale-text) or the [translations of the Data Grid](/x/react-data-grid/localization/#locale-text), you can add `deDE` as a new argument.\n\n```jsx\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { deDE as dataGridDeDE } from '@mui/x-data-grid';\nimport { deDE as coreDeDE } from '@mui/material/locale';\nimport { deDE } from '@mui/x-date-pickers/locales';\n\nconst theme = createTheme(\n  {\n    palette: {\n      primary: { main: '#1976d2' },\n    },\n  },\n  deDE, // x-date-pickers translations\n  dataGridDeDE, // x-data-grid translations\n  coreDeDE, // core translations\n);\n\nfunction App({ children }) {\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Using LocalizationProvider",
          "introduction": [
            "Using LocalizationProvider\n\nIf you want to pass language translations without using `createTheme()` and `ThemeProvider`,\nyou can directly load the language translations from the `@mui/x-date-pickers` or `@mui/x-date-pickers-pro` package and pass them to the `LocalizationProvider`.\n\n```jsx\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { deDE } from '@mui/x-date-pickers/locales';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n<LocalizationProvider\n  localeText={deDE.components.MuiLocalizationProvider.defaultProps.localeText}\n>\n  <DatePicker />\n</LocalizationProvider>;\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Set translations locally",
      "introduction": [
        "Set translations locally\n\nYou can also customize the translations of a single component.\n\nIf you want to customize some translations on specific component, you can use the `localeText` prop exposed by all our pickers.\n\n```jsx\n<DatePicker localeText={{ clearButtonLabel: 'Empty' }} />\n```\n\n:::info\nThis method can be combined with the ones shown above.\n\nIf you pass a localization through `LocalizationProvider` or the theme, and you provide translation keys through the `localeText` prop of a picker at the same time, then only the latter translation keys will be overridden.\n\n```tsx\n<LocalizationProvider\n  localeText={{ clearButtonLabel: 'Empty', todayButtonLabel: 'Now' }}\n>\n  <DatePicker\n    // ...other props\n    localeText={{\n      clearButtonLabel: 'Vider',\n    }}\n  />\n</LocalizationProvider>\n```\n\nThis will produce the following result:\n\n- \"Today\" button with text **Now** taken from the Localization Provider's `localeText` prop\n- \"Clear\" button with text **Vider** overridden by the Date Picker's `localeText` prop\n\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Supported locales",
      "introduction": [
        "Supported locales",
        "You can [find the source](https://github.com/mui/mui-x/tree/HEAD/packages/x-date-pickers/src/locales) in the GitHub repository.\n\nTo create your own translation or to customize the English text, copy this file to your project, make any changes needed and import the locale from there.\nNote that these translations of the date and time picker components depend on the [Localization strategy](/material-ui/guides/localization/) of the whole library."
      ],
      "code_path": [
        "PickersLocalisationTableNoSnap.js",
        null
      ],
      "children": []
    },
    {
      "name": "Access the translations in slots and subcomponents",
      "introduction": [
        "Access the translations in slots and subcomponents\n\nYou can use the `usePickerTranslations` hook to access the translations in your custom components.\n\n```tsx\nimport { usePickerTranslations } from '@mui/x-date-pickers/hooks';\n\nconst translations = usePickerTranslations();\n```\n\n:::info\nSee [Custom slots and subcomponents—Action bar](/x/react-date-pickers/custom-components/#component) for more details.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}