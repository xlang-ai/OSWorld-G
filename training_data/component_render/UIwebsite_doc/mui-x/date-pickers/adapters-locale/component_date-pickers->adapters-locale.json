{
  "name": "date-pickers->adapters-locale",
  "introduction": [
    "# Date format and localization\n\n<p class=\"description\">Date and Time Pickers support formats from different locales.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Getting started",
      "introduction": [
        "Getting started\n\nThe default locale of MUI¬†X is English (United States). If you want to use other locales, follow the instructions below.\n\n:::warning\nThis page focuses on date format localization.\nIf you need to translate text inside a component, check out the [Translated components](/x/react-date-pickers/localization/) page.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Set a custom locale",
      "introduction": [
        "Set a custom locale"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "With `dayjs`",
          "introduction": [
            "With `dayjs`\n\nFor `dayjs`, import the locale and then pass its name to `LocalizationProvider`:\n\n```tsx\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport 'dayjs/locale/de';\n\n<LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale=\"de\">\n  {children}\n</LocalizationProvider>;\n```"
          ],
          "code_path": [
            "LocalizationDayjs.js"
          ],
          "children": []
        },
        {
          "name": "With `date-fns`",
          "introduction": [
            "With `date-fns`\n\nFor `date-fns`, import the locale and pass it to `LocalizationProvider`:\n\n:::info\nWe support `date-fns` package v2.x, v3.x, and v4.x major versions.\n\nA single adapter cannot work for all `date-fns` versions, because the way functions are exported has been changed in v3.x.\n\nTo use `date-fns` v2.x, you need to import the adapter from `@mui/x-date-pickers/AdapterDateFnsV2` instead of `@mui/x-date-pickers/AdapterDateFns`.\n:::\n\n```tsx\n// with date-fns v3.x or v4.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n// with date-fns v2.x\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV2';\n// with date-fns v3.x or v4.x\nimport { de } from 'date-fns/locale/de';\n// with date-fns v2.x\nimport de from 'date-fns/locale/de';\n\n<LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={de}>\n  {children}\n</LocalizationProvider>;\n```"
          ],
          "code_path": [
            "LocalizationDateFns.js"
          ],
          "children": []
        },
        {
          "name": "With `luxon`",
          "introduction": [
            "With `luxon`\n\nFor `luxon`, pass the locale name to `LocalizationProvider`:\n\n```tsx\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\n\n<LocalizationProvider dateAdapter={AdapterLuxon} adapterLocale=\"de\">\n  {children}\n</LocalizationProvider>;\n```",
            ":::warning\n`AdapterLuxon` does not support `Settings.throwOnInvalid = true` [setting](https://moment.github.io/luxon/api-docs/index.html#settingsthrowoninvalid).\n\nüëç Upvote [issue #11853](https://github.com/mui/mui-x/issues/11853) if you need support for it.\n\nDon't hesitate to leave feedback on how you would like the data entry to behave.\n:::"
          ],
          "code_path": [
            "LocalizationLuxon.js",
            null
          ],
          "children": []
        },
        {
          "name": "With `moment`",
          "introduction": [
            "With `moment`\n\nFor `moment`, import the locale and then pass its name to `LocalizationProvider`:\n\n```tsx\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport 'moment/locale/de';\n\n<LocalizationProvider dateAdapter={AdapterMoment} adapterLocale=\"de\">\n  {children}\n</LocalizationProvider>;\n```"
          ],
          "code_path": [
            "LocalizationMoment.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Meridiem ‚Äî 12h/24h format",
      "introduction": [
        "Meridiem ‚Äî 12h/24h format\n\nAll the time and datetime components will automatically adjust to the locale's time setting, that is the 12-hour or 24-hour format.\nYou can override the default setting with the `ampm` prop:"
      ],
      "code_path": [
        "AmPMCustomization.js"
      ],
      "children": []
    },
    {
      "name": "Custom formats",
      "introduction": [
        "Custom formats\n\nThe format received by the props described below depends on the date library you are using.\nPlease refer to each library's documentation for the full format table:\n\n- [Day.js](https://day.js.org/docs/display/format)\n- [date-fns](https://date-fns.org/docs/format)\n- [Luxon](https://moment.github.io/luxon/#/formatting?id=table-of-tokens)\n- [Moment.js](https://momentjs.com/docs/#/displaying/format/)"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Custom field format",
          "introduction": [
            "Custom field format\n\nThe fields have a default format that depends on the picker being used, the views enabled, and the 12h/24h format.\n\nIf this default format does not suit you, you can customize it using the `format` prop:\n\n:::info\nThis prop is available on all fields and pickers.\n:::",
            ":::info\nYou can control the field format spacing using the [formatDensity](/x/react-date-pickers/custom-field/#change-the-format-density) prop.\n:::"
          ],
          "code_path": [
            "CustomFieldFormat.js",
            null
          ],
          "children": []
        },
        {
          "name": "Field-supported formats",
          "introduction": [
            "Field-supported formats\n\nSome formats might not yet be supported by the fields.\nFor example, they don't support day of the year or quarter.\n\nHere is the list of the currently supported formats:\n\n- The year\n  - ‚úÖ 2-digits values (for example, `23`)\n  - ‚úÖ 4-digits values (for example, `2023`)\n  - ‚ùå Values with ordinal (for example, `2023th`)\n- The month\n\n  - ‚úÖ 1-based digit (for example, `08`)\n  - ‚úÖ Multi-letter values (for example, `Aug`, `August`)\n  - ‚ùå 1-letter values (for example, `A`) because several months are represented with the same letter\n\n- The day of the month\n\n  - ‚úÖ 1-based digit values (for example, `24`)\n  - ‚úÖ 1-based digit values with ordinal (for example, `24th`)\n\n- The day of the week\n\n  - ‚úÖ 0-based digit values (for example, `03`)\n  - ‚úÖ 1-based digit values (for example, `04`)\n  - ‚úÖ Multi-letter values (for example, `Tue`, `Tuesday`)\n  - ‚ùå 1-letter values (for example, `T`) because several days of the week are represented with the same letter\n\n- The hours\n\n  - ‚úÖ 0-based 12-hours values (for example, `03`)\n  - ‚úÖ 0-based 24-hours values (for example, `15`)\n  - ‚ùå 1-based values (for example, `24` instead of `00`)\n\n- The minutes\n\n- The seconds\n\n- The meridiem\n\nIf you need to use some format that is not yet supported, please [open an issue](https://github.com/mui/mui-x/issues/new/choose) describing what is your exact use case.\nSome new formats might be supported in the future, depending on the complexity of the implementation."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Respect leading zeros in fields",
          "introduction": [
            "Respect leading zeros in fields\n\nBy default, the value rendered in the field always contains digit zeros, even if your format says otherwise.\nYou can force the field to respect your format information by setting the `shouldRespectLeadingZeros` prop to `true`.\n\n:::warning\nWhen `shouldRespectLeadingZeros={true}`, the field will add an invisible character on the sections containing a single digit to make sure `onChange` is fired.\nIf you need to get the clean value from the input, you can remove this character using `input.value.replace(/\\u200e/g, '')`.\n:::\n\n:::warning\nLuxon is not able to respect the leading zeroes when using macro tokens (for example \"DD\"), so `shouldRespectLeadingZeros={true}` might lead to inconsistencies when using `AdapterLuxon`.\n:::"
          ],
          "code_path": [
            "RespectLeadingZerosFieldFormat.js"
          ],
          "children": []
        },
        {
          "name": "Custom field placeholder",
          "introduction": [
            "Custom field placeholder\n\nWhen a section is empty, the fields displays its placeholder instead of an empty value.\nFor example, if you did not fill any value for the `year` section, the field will render the year placeholder.\n\nThese placeholders are based on your current component localization, not on your date localization.",
            "For more information on how to define your component localization, check out the [Translated components](/x/react-date-pickers/localization/) page.\n\n:::warning\nPlaceholders translations depend on locale.\nSome locales might keep using English placeholders, because that format is commonly used in a given locale.\n:::\n\nYou can customize the specific placeholder section translation to your needs.\nAll the available placeholder translation methods and their parameters are available in [the source file](https://github.com/mui/mui-x/blob/HEAD/packages/x-date-pickers/src/locales/utils/pickersLocaleTextApi.ts).\nYou can override them using the `localeText` prop defined on the `LocalizationProvider` or on a specific Picker component if you need more fine-grained control.\n\nA common use case is to change the placeholder of the month section to a short letter form (Jan, Feb, etc.).\nThe default translation implementation might not be what you want, so you can override it:\n\n```tsx\n<LocalizationProvider\n  dateAdapter={AdapterDayjs}\n  localeText={{\n    fieldMonthPlaceholder: (params) =>\n      params.contentType === 'digit' ? 'MM' : params.format,\n  }}\n>\n  <DatePicker />\n</LocalizationProvider>\n```"
          ],
          "code_path": [
            "FieldPlaceholder.js",
            null
          ],
          "children": []
        },
        {
          "name": "Custom toolbar format",
          "introduction": [
            "Custom toolbar format\n\nTo customize the format used in the toolbar, use the `toolbarFormat` prop of the `toolbar` slot.\n\n:::info\nThis prop is available on all pickers.\n:::"
          ],
          "code_path": [
            "CustomToolbarFormat.js"
          ],
          "children": []
        },
        {
          "name": "Custom day of week format",
          "introduction": [
            "Custom day of week format\n\nUse `dayOfWeekFormatter` to customize day names in the calendar header.\nThis prop takes two parameters, `day` (a string with the name of the day) and `date` ( the day in the format of your date library) and returns the formatted string to display.\nThe default formatter only keeps the first letter of the name and capitalises it.\n\n:::warning\nThe first parameter `day` will be removed in v7 in favor of the second parameter `date` for more flexibility.\n:::\n\n:::info\nThis prop is available on all components that render a day calendar, including the Date Calendar as well as all Date Pickers, Date Time Pickers, and Date Range Pickers.\n:::\n\nThe example below adds a dot at the end of each day in the calendar header:"
          ],
          "code_path": [
            "CustomDayOfWeekFormat.js"
          ],
          "children": []
        },
        {
          "name": "Custom calendar header format",
          "introduction": [
            "Custom calendar header format\n\nTo customize the format used on the calendar header, use the `format` prop of the `calendarHeader` slot.\n\n:::info\nThis prop is available on all components that render a day calendar, including the Date Calendar as well as all Date Pickers, Date Time Pickers, and Date Range Pickers.\n:::"
          ],
          "code_path": [
            "CustomCalendarHeaderFormat.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Custom start of week",
      "introduction": [
        "Custom start of week\n\nThe Date and Time Pickers are using the week settings provided by your date libraries.\nEach adapter uses its locale to define the start of the week.\n\nIf the default start of the week defined in your adapter's locale is not the one you want, you can override it as shown in the following examples.\n\n:::warning\nIf you want to update the start of the week after the first render of a component,\nyou will have to manually remount your component to apply the new locale configuration.\n\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "With `dayjs`",
          "introduction": [
            "With `dayjs`\n\nFor `dayjs`, use the `updateLocale` plugin:\n\n```ts\nimport updateLocale from 'dayjs/plugin/updateLocale';\n\ndayjs.extend(updateLocale);\n\n// Replace \"en\" with the name of the locale you want to update.\ndayjs.updateLocale('en', {\n  // Sunday = 0, Monday = 1.\n  weekStart: 1,\n});\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "With `date-fns`",
          "introduction": [
            "With `date-fns`\n\nFor `date-fns`, override the `options.weekStartsOn` of the used locale:\n\n```ts\nimport { Locale } from 'date-fns';\n// with date-fns v3.x or v4.x\nimport { enUS } from 'date-fns/locale/en-US';\n// with date-fns v2.x\nimport enUS from 'date-fns/locale/en-US';\n\nconst customEnLocale: Locale = {\n  ...enUS,\n  options: {\n    ...enUS.options,\n    // Sunday = 0, Monday = 1.\n    weekStartsOn: 1,\n  },\n};\n\n<LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={customEnLocale}>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "With `luxon`",
          "introduction": [
            "With `luxon`\n\nFor `luxon`, use the `Settings.defaultWeekSettings` object:\n\n```ts\nimport { Settings, Info } from 'luxon';\n\nSettings.defaultWeekSettings = {\n  // Sunday = 7, Monday = 1.\n  firstDay: 1,\n  // Makes sure we don't lose the other information from `defaultWeekSettings`\n  minimalDays: Info.getMinimumDaysInFirstWeek(),\n  weekend: Info.getWeekendWeekdays(),\n};\n```\n\n:::warning\nThe [browser API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo) used by Luxon to determine the start of the week in the current locale is not yet supported by Firefox.\nUsers on this browser will always see Monday as the start of the week.\nIf you want to have the same start of week on all browsers,\nyou will have to manually override the `defaultWeekSettings` to set the `firstDay` corresponding to your locale.\n\nFor example, when using the `en-US` locale:\n\n```ts\nSettings.defaultWeekSettings = {\n  firstDay: 7,\n  minimalDays: Info.getMinimumDaysInFirstWeek(),\n  weekend: Info.getWeekendWeekdays(),\n};\n```\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "With `moment`",
          "introduction": [
            "With `moment`\n\nFor `moment`, use the `moment.updateLocale` method:\n\n```ts\nimport moment from 'moment';\n\n// Replace \"en\" with the name of the locale you want to update.\nmoment.updateLocale('en', {\n  week: {\n    // Sunday = 0, Monday = 1.\n    dow: 1,\n  },\n});\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "RTL Support",
      "introduction": [
        "RTL Support\n\nRight-to-left languages such as Arabic, Persian, or Hebrew are supported.\nFollow [this guide](/material-ui/customization/right-to-left/) to use them.\n\nThe example below demonstrates how to use an RTL language (Arabic) with some of the Date and Time Pickers components."
      ],
      "code_path": [
        "PickersRTL.js"
      ],
      "children": []
    }
  ]
}