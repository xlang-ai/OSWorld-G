{
  "name": "date-pickers->custom-components",
  "introduction": [
    "# Custom slots and subcomponents\n\n<p class=\"description\">Learn how to override parts of the Date and Time Pickers.</p>\n\n:::info\nThe components that can be customized are listed under `slots` section in Date and Time Pickers [API Reference](/x/api/date-pickers/).\nFor example, available Date Picker slots can be found [here](/x/api/date-pickers/date-picker/#slots).\n:::\n\n:::success\nSee [Common conceptsâ€”Slots and subcomponents](/x/common-concepts/custom-components/) to learn how to use slots.\n:::"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Action bar",
      "introduction": [
        "Action bar"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Component props",
          "introduction": [
            "Component props\n\nThe action bar is available on all picker components.\nBy default, it contains no action on desktop, and the actions **Cancel** and **Accept** on mobile.\n\nYou can override the actions displayed by passing the `actions` prop to the `actionBar` within `slotProps`, as shown here:\n\n```jsx\n<DatePicker\n  slotProps={{\n    // The actions will be the same between desktop and mobile\n    actionBar: {\n      actions: ['clear'],\n    },\n    // The actions will be different between desktop and mobile\n    actionBar: ({ variant }) => ({\n      actions: variant === 'desktop' ? [] : ['clear'],\n    }),\n  }}\n/>\n```\n\nIn the example below, the action bar contains only one button, which resets the selection to today's date:"
          ],
          "code_path": [
            "ActionBarComponentProps.js"
          ],
          "children": [
            {
              "name": "Available actions",
              "introduction": [
                "Available actions\n\nThe built-in `ActionBar` component supports four different actions:\n\n| Action   | Behavior                                                               |\n| :- | :--- |\n| `accept` | Accept the current value and close the picker view                     |\n| `cancel` | Reset to the last accepted date and close the picker view              |\n| `clear`  | Reset to the empty value and close the picker view                     |\n| `today`  | Reset to today's date (and time if relevant) and close the picker view |"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Component",
          "introduction": [
            "Component\n\nIf you need to customize the date picker beyond the options described above, you can provide a custom component.\nThis can be used in combination with `slotProps`.\n\nIn the example below, the actions are the same as in the section above, but they are rendered inside a menu:"
          ],
          "code_path": [
            "ActionBarComponent.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Tabs",
      "introduction": [
        "Tabs\n\nThe tabs are available on all date time picker components.\nIt allows switching between date and time interfaces."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Component props",
          "introduction": [
            "Component props\n\nYou can override the icons displayed by passing props to the `tabs` within `slotProps`, as shown here:\n\n```jsx\n<DateTimePicker\n  slotProps={{\n    tabs: {\n      dateIcon: <LightModeIcon />,\n      timeIcon: <AcUnitIcon />,\n    },\n  }}\n/>\n```\n\nBy default, the tabs are `hidden` on desktop, and `visible` on mobile.\nThis behavior can be overridden by setting the `hidden` prop:\n\n```jsx\n<DateTimePicker\n  slotProps={{\n    tabs: {\n      hidden: false,\n    },\n  }}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Component",
          "introduction": [
            "Component\n\nIf you need to customize the date time picker beyond the options described above, you can provide a custom component.\nThis can be used in combination with `slotProps`.\n\nIn the example below, the tabs are using different icons and have an additional component:"
          ],
          "code_path": [
            "Tabs.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Toolbar",
      "introduction": [
        "Toolbar\n\nThe toolbar is available on all date time picker components.\nIt displays the current values and allows to switch between different views."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Component props",
          "introduction": [
            "Component props\n\nYou can customize how the toolbar displays the current value with `toolbarFormat`.\nBy default, empty values are replaced by `__`.\nThis can be modified by using `toolbarPlaceholder` props.\n\nBy default, the toolbar is `hidden` on desktop, and `visible` on mobile.\nThis behavior can be overridden by setting the `hidden` prop:\n\n```jsx\n<DatePicker\n  slotProps={{\n    toolbar: {\n      // Customize value display\n      toolbarFormat: 'YYYY',\n      // Change what is displayed given an empty value\n      toolbarPlaceholder: '??',\n      // Show the toolbar\n      hidden: false,\n    },\n  }}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Component",
          "introduction": [
            "Component\n\nEach component comes with its own toolbar (`DatePickerToolbar`, `TimePickerToolbar`, and `DateTimePickerToolbar`) that you can reuse and customize."
          ],
          "code_path": [
            "ToolbarComponent.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Calendar header",
      "introduction": [
        "Calendar header\n\nThe calendar header is available on any component that renders a calendar to select a date or a range of dates.\nIt allows the user to navigate through months and to switch to the month and year views when available."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Component props",
          "introduction": [
            "Component props\n\nYou can pass props to the calendar header as shown below:"
          ],
          "code_path": [
            "CalendarHeaderComponentProps.js"
          ],
          "children": []
        },
        {
          "name": "Component",
          "introduction": [
            "Component\n\nYou can pass a custom component to replace the header, as shown below:",
            "When used with a date range component,\nyou receive three additional props to let you handle scenarios where multiple months are rendered:\n\n- `calendars`: The number of calendars rendered\n- `month`: The month used for the header being rendered\n- `monthIndex`: The index of the month used for the header being rendered\n\nThe demo below shows how to navigate the months two by two:"
          ],
          "code_path": [
            "CalendarHeaderComponent.js",
            "CalendarHeaderComponentRange.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Year button",
      "introduction": [
        "Year button\n\nThis button allows users to change the selected year in the `year` view."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Component props",
          "introduction": [
            "Component props\n\nYou can pass props to the year button as shown below:"
          ],
          "code_path": [
            "YearButtonComponentProps.js"
          ],
          "children": []
        },
        {
          "name": "Component",
          "introduction": [
            "Component\n\nYou can pass a custom component to replace the year button, as shown below:"
          ],
          "code_path": [
            "YearButtonComponent.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Month button",
      "introduction": [
        "Month button\n\nThis button allows users to change the selected month in the `month` view.\n\n:::success\nYou can learn more on how to enable the `month` view on the [`DateCalendar` doc page](/x/react-date-pickers/date-calendar/#views).\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Component props",
          "introduction": [
            "Component props\n\nYou can pass props to the month button as shown below:"
          ],
          "code_path": [
            "MonthButtonComponentProps.js"
          ],
          "children": []
        },
        {
          "name": "Component",
          "introduction": [
            "Component\n\nYou can pass a custom component to replace the month button, as shown below:"
          ],
          "code_path": [
            "MonthButtonComponent.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Arrow switcher",
      "introduction": [
        "Arrow switcher\n\nThe following slots let you customize how to render the buttons and icons for an arrow switcher: the component used\nto navigate to the \"Previous\" and \"Next\" steps of the picker: `PreviousIconButton`, `NextIconButton`, `LeftArrowIcon`, `RightArrowIcon`."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Component props",
          "introduction": [
            "Component props\n\nYou can pass props to the icons and buttons as shown below:"
          ],
          "code_path": [
            "ArrowSwitcherComponentProps.js"
          ],
          "children": []
        },
        {
          "name": "Component",
          "introduction": [
            "Component\n\nYou can pass custom components to replace the icons, as shown below:"
          ],
          "code_path": [
            "ArrowSwitcherComponent.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Shortcuts",
      "introduction": [
        "Shortcuts\n\nYou can add shortcuts to every Picker component.\nFor more information, check the [dedicated page](/x/react-date-pickers/shortcuts/)."
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}