{
  "name": "time-picker",
  "introduction": [
    "# Time Picker\n\n<p class=\"description\">The Time Picker component lets the user select a time.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basic usage",
      "introduction": [
        "Basic usage"
      ],
      "code_path": [
        "BasicTimePicker.js"
      ],
      "children": []
    },
    {
      "name": "Component composition",
      "introduction": [
        "Component composition\n\nThe component is built using the `TimeField` for the keyboard editing, the `DigitalClock` for the desktop view editing, and the `TimeClock` for the mobile view editing.\n\nCheck-out their documentation page for more information:\n\n- [Time Field](/x/react-date-pickers/time-field/)\n- [Digital Clock](/x/react-date-pickers/digital-clock/)\n- [Time Clock](/x/react-date-pickers/time-clock/)\n\nYou can check the available props of the combined component on the dedicated [API page](/x/api/date-pickers/time-picker/#props).\nSome [TimeField props](/x/api/date-pickers/time-field/#props) are not available on the Picker component, you can use `slotProps.field` to pass them to the field."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Uncontrolled vs. controlled value",
      "introduction": [
        "Uncontrolled vs. controlled value\n\nThe value of the component can be uncontrolled or controlled.",
        ":::info\n\n- The value is **controlled** when its parent manages it by providing a `value` prop.\n- The value is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultValue` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
      ],
      "code_path": [
        "TimePickerValue.js",
        null
      ],
      "children": []
    },
    {
      "name": "Available components",
      "introduction": [
        "Available components\n\nThe component is available in four variants:\n\n- The `DesktopTimePicker` component which works best for mouse devices and large screens.\n  It renders the views inside a popover and a field for keyboard editing.\n\n- The `MobileTimePicker` component which works best for touch devices and small screens.\n  It renders the view inside a modal and a field for keyboard editing.\n\n- The `TimePicker` component which renders `DesktopTimePicker` or `MobileTimePicker` depending on the device it runs on.\n\n- The `StaticTimePicker` component which renders without the popover/modal and field.",
        "By default, the `TimePicker` component renders the desktop version if the media query [`@media (pointer: fine)`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/pointer) matches.\nThis can be customized with the `desktopModeMediaQuery` prop.\n\n:::warning\nResponsive components can suffer some inconsistencies between testing environments if media query is not supported.\nPlease refer to [this section](/x/react-date-pickers/base-concepts/#testing-caveats) for solutions.\n:::"
      ],
      "code_path": [
        "ResponsiveTimePickers.js",
        null
      ],
      "children": []
    },
    {
      "name": "Form props",
      "introduction": [
        "Form props\n\nThe component can be disabled or read-only."
      ],
      "code_path": [
        "FormPropsTimePickers.js"
      ],
      "children": []
    },
    {
      "name": "Views",
      "introduction": [
        "Views\n\nThe component supports three views: `hours`, `minutes` and `seconds`.\n\nBy default, the `hours` and `minutes` views are enabled.\nUse the `views` prop to change this behavior:",
        "By default, the `MobileTimePicker` component renders the `hours` view on mount.\nUse the `openTo` prop to change this behavior:",
        ":::success\nThe views will appear in the order defined by the `views` array.\nIf the view defined in `openTo` is not the first view, then the views before will not be included in the default flow.\n:::"
      ],
      "code_path": [
        "TimePickerViews.js",
        "TimePickerOpenTo.js",
        null
      ],
      "children": []
    },
    {
      "name": "Landscape orientation",
      "introduction": [
        "Landscape orientation\n\nBy default, the Time Picker component automatically sets the orientation based on the `window.orientation` value.\n\nYou can force a specific orientation using the `orientation` prop.",
        ":::info\nYou can find more information about the layout customization in the [custom layout page](/x/react-date-pickers/custom-layout/).\n:::"
      ],
      "code_path": [
        "StaticTimePickerLandscape.js",
        null
      ],
      "children": []
    },
    {
      "name": "Choose time view renderer",
      "introduction": [
        "Choose time view renderer\n\nYou can use the `viewRenderers` prop to change the view that is used for rendering a view.\nYou might be interested in using the [Time Clock](/x/react-date-pickers/time-clock/) instead of the [Digital Clock](/x/react-date-pickers/digital-clock/) on desktop as well as mobile."
      ],
      "code_path": [
        "TimePickerViewRenderers.js"
      ],
      "children": []
    },
    {
      "name": "Localization",
      "introduction": [
        "Localization\n\nSee the [Date format and localization](/x/react-date-pickers/adapters-locale/) and [Translated components](/x/react-date-pickers/localization/) documentation pages for more details."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Validation",
      "introduction": [
        "Validation\n\nSee the [Validation](/x/react-date-pickers/validation/) documentation page for more details."
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}