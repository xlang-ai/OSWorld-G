{
  "name": "date-pickers->timezone",
  "introduction": [
    "# UTC and timezones\n\n<p class=\"description\">Date and Time Pickers support UTC and timezones.</p>\n\n:::warning\nUTC and timezones support is an ongoing effort.\n\nOnly `AdapterDayjs`, `AdapterLuxon` and `AdapterMoment` are currently compatible with UTC dates and timezones.\n:::"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Overview",
      "introduction": [
        "Overview\n\nBy default, the components will always use the timezone of your `value` / `defaultValue` prop:",
        "You can use the `timezone` prop to explicitly define the timezone in which the value should be rendered:",
        "This will be needed if the component has no `value` or `defaultValue` to deduct the timezone from it or if you don't want to render the value in its original timezone."
      ],
      "code_path": [
        "BasicValueProp.js",
        "BasicTimezoneProp.js",
        null
      ],
      "children": []
    },
    {
      "name": "Supported timezones",
      "introduction": [
        "Supported timezones\n\n|            Timezone | Description                                                                                                                                                                                                                                                                                                                                                                                                    |\n| : | :- |\n|             `\"UTC\"` | Will use the [Coordinated Universal Time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time)                                                                                                                                                                                                                                                                                                            |\n|         `\"default\"` | Will use the default timezone of your date library, this value can be set using<br/>- [`dayjs.tz.setDefault`](https://day.js.org/docs/en/timezone/set-default-timezone) on dayjs<br/>- [`Settings.defaultZone`](https://moment.github.io/luxon/#/zones?id=changing-the-default-zone) on luxon<br/>- [`moment.tz.setDefault`](https://momentjs.com/timezone/docs/#/using-timezones/default-timezone/) on moment |\n|          `\"system\"` | Will use the system's local timezone                                                                                                                                                                                                                                                                                                                                                                           |\n| IANA standard zones | Example: `\"Europe/Paris\"`, `\"America/New_York\"`<br/>[List of all the IANA zones](https://timezonedb.com/time-zones)                                                                                                                                                                                                                                                                                            |\n|        Fixed offset | Example: `\"UTC+7\"`<br/>**Only available with Luxon**                                                                                                                                                                                                                                                                                                                                                           |"
      ],
      "code_path": [
        "TimezonePlayground.js"
      ],
      "children": []
    },
    {
      "name": "Usage with Day.js",
      "introduction": [
        "Usage with Day.js"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Day.js and UTC",
          "introduction": [
            "Day.js and UTC\n\nBefore using the UTC dates with Day.js, you have to enable the `utc` plugin:\n\n```tsx\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(utc);\n```\n\n:::info\n**How to create a UTC date with Day.js?**\n\nTo create a UTC date, use the `dayjs.utc` method\n\n```tsx\nconst date = dayjs.utc('2022-04-17T15:30');\n```\n\nYou can check out the documentation of the [UTC on Day.js](https://day.js.org/docs/en/plugin/utc) for more details.\n:::\n\nYou can then pass your UTC date to your picker:\n\n```tsx\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\ndayjs.extend(utc);\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DateTimePicker defaultValue={dayjs.utc('2022-04-17T15:30')} />\n    </LocalizationProvider>\n  );\n}\n```"
          ],
          "code_path": [
            "DayjsUTC.js"
          ],
          "children": []
        },
        {
          "name": "Day.js and timezones",
          "introduction": [
            "Day.js and timezones\n\nBefore using the timezone with Day.js, you have to enable both the `utc` and `timezone` plugins:\n\n```tsx\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n```\n\n:::info\n**How to create a date in a specific timezone with Day.js?**\n\nIf your whole application is using dates from the same timezone, set the default zone to your timezone name:\n\n```tsx\nimport { dayjs } from 'dayjs';\n\ndayjs.tz.setDefault('America/New_York');\n\nconst date = dayjs.tz('2022-04-17T15:30');\n```\n\nIf you only want to use dates with this timezone on some parts of your application, pass the timezone as the 2nd parameter of the `dayjs.tz` method:\n\n```tsx\nimport { dayjs } from 'dayjs';\n\nconst date = dayjs.tz('2022-04-17T15:30', 'America/New_York');\n```\n\nYou can check out the documentation of the [timezone on Day.js](https://day.js.org/docs/en/timezone/timezone) for more details.\n:::\n\nYou can then pass your date in the wanted timezone to your picker:\n\n```tsx\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\n\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <DateTimePicker\n        defaultValue={dayjs.tz('2022-04-17T15:30', 'America/New_York')}\n      />\n    </LocalizationProvider>\n  );\n}\n```",
            ":::info\nPlease check out the documentation of the [dayjs timezone plugin](https://day.js.org/docs/en/timezone/timezone) for more details on how to manipulate the timezones.\n:::"
          ],
          "code_path": [
            "DayjsTimezone.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Usage with Luxon",
      "introduction": [
        "Usage with Luxon"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Luxon and UTC",
          "introduction": [
            "Luxon and UTC\n\n:::info\n**How to create a UTC date with Luxon?**\n\nIf your whole application is using UTC dates, set the default zone to `\"UTC\"`:\n\n```tsx\nimport { DateTime, Settings } from 'luxon';\n\nSettings.defaultZone = 'UTC';\n\nconst date1 = DateTime.fromISO('2022-04-17T15:30');\nconst date2 = DateTime.fromSQL('2022-04-17 15:30:00');\n```\n\nIf you only want to use UTC dates on some parts of your application, create a UTC date using `DateTime.utc` or with the `zone` parameter of Luxon methods:\n\n```tsx\nimport { DateTime } from 'luxon';\n\nconst date1 = DateTime.utc(2022, 4, 17, 15, 30);\nconst date2 = DateTime.fromISO('2022-04-17T15:30', { zone: 'UTC' });\nconst date3 = DateTime.fromSQL('2022-04-17 15:30:00', { zone: 'UTC' });\n```\n\nPlease check out the documentation of the [UTC and timezones on Luxon](https://moment.github.io/luxon/#/zones) for more details.\n:::\n\nYou can then pass your UTC date to your picker:\n\n```tsx\nimport { DateTime } from 'luxon';\n\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterLuxon}>\n      <DateTimePicker\n        defaultValue={DateTime.fromISO('2022-04-17T15:30', { zone: 'UTC' })}\n      />\n    </LocalizationProvider>\n  );\n}\n```"
          ],
          "code_path": [
            "LuxonUTC.js"
          ],
          "children": []
        },
        {
          "name": "Luxon and timezone",
          "introduction": [
            "Luxon and timezone\n\n:::info\n**How to create a date in a specific timezone with Luxon?**\n\nIf your whole application is using dates from the same timezone, set the default zone to your timezone name:\n\n```tsx\nimport { DateTime, Settings } from 'luxon';\n\nSettings.defaultZone = 'America/New_York';\n\nconst date1 = DateTime.fromISO('2022-04-17T15:30');\nconst date2 = DateTime.fromSQL('2022-04-17 15:30:00');\n```\n\nIf you only want to use dates with this timezone on some parts of your application, create a date in this timezone using the `zone` parameter of Luxon methods:\n\n```tsx\nimport { DateTime } from 'luxon';\n\nconst date1 = DateTime.fromISO('2022-04-17T15:30', { zone: 'America/New_York' });\nconst date2 = DateTime.fromSQL('2022-04-17 15:30:00', { zone: 'America/New_York' });\n```\n\nPlease check out the documentation of the [UTC and timezones on Luxon](https://moment.github.io/luxon/#/zones) for more details.\n:::\n\nYou can then pass your date in the wanted timezone to your picker:\n\n```tsx\nimport { DateTime } from 'luxon';\n\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterLuxon}>\n      <DateTimePicker\n        defaultValue={DateTime.fromISO('2022-04-17T15:30', {\n          zone: 'America/New_York',\n        })}\n      />\n    </LocalizationProvider>\n  );\n}\n```",
            ":::info\nPlease check out the documentation of the [UTC and timezones on Luxon](https://moment.github.io/luxon/#/zones) for more details on how to manipulate the timezones.\n:::"
          ],
          "code_path": [
            "LuxonTimezone.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Usage with Moment",
      "introduction": [
        "Usage with Moment"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Moment and UTC",
          "introduction": [
            "Moment and UTC\n\n:::info\n**How to create a UTC date with Moment?**\n\nTo create a UTC date, use the `moment.utc` method\n\n```tsx\nconst date = moment.utc('2022-04-17T15:30');\n```\n\nPlease check out the documentation of the [UTC on Moment](https://momentjs.com/docs/#/parsing/utc/) for more details.\n:::\n\nYou can then pass your UTC date to your picker:\n\n```tsx\nimport moment from 'moment';\n\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterMoment}>\n      <DateTimePicker defaultValue={moment.utc('2022-04-17T15:30')} />\n    </LocalizationProvider>\n  );\n}\n```"
          ],
          "code_path": [
            "MomentUTC.js"
          ],
          "children": []
        },
        {
          "name": "Moment and timezone",
          "introduction": [
            "Moment and timezone\n\nBefore using the timezone with Moment, you have to pass the default export from `moment-timezone` to the `dateLibInstance` prop of `LocalizationProvider`:\n\n```tsx\nimport moment from 'moment-timezone';\n\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\n<LocalizationProvider dateAdapter={AdapterMoment} dateLibInstance={moment}>\n  {children}\n</LocalizationProvider>;\n```\n\n:::info\n**How to create a date in a specific timezone with Moment?**\n\nIf your whole application is using dates from the same timezone, set the default zone to your timezone name:\n\n```tsx\nimport moment from 'moment-timezone';\n\nmoment.tz.setDefault('America/New_York');\n\nconst date = moment('2022-04-17T15:30');\n```\n\nIf you only want to use dates with this timezone on some parts of your application, create a date using the `moment.tz` method:\n\n```tsx\nimport moment from 'moment-timezone';\n\nconst date = moment.tz('2022-04-17T15:30', 'America/New_York');\n```\n\nPlease check out the documentation of the [timezone on Moment](https://momentjs.com/timezone/) for more details.\n:::\n\nYou can then pass your date in the wanted timezone to your picker:\n\n```tsx\nimport moment from 'moment-timezone';\n\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nfunction App() {\n  return (\n    <LocalizationProvider dateAdapter={AdapterMoment} dateLibInstance={moment}>\n      <DateTimePicker\n        defaultValue={moment.tz('2022-04-17T15:30', 'America/New_York')}\n      />\n    </LocalizationProvider>\n  );\n}\n```"
          ],
          "code_path": [
            "MomentTimezone.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "More advanced examples",
      "introduction": [
        "More advanced examples\n\n:::info\nThe following examples are all built using `dayjs`.\nYou can achieve the exact same behavior using `luxon` or `moment`,\nplease refer to the sections above to know how to pass a UTC date or a date in a specific timezone to your component.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Store UTC dates but display in system's timezone",
          "introduction": [
            "Store UTC dates but display in system's timezone\n\nThe demo below shows how to store dates in UTC while displaying using the system timezone."
          ],
          "code_path": [
            "StoreUTCButDisplaySystemTimezone.js"
          ],
          "children": []
        },
        {
          "name": "Store UTC dates but display in another timezone",
          "introduction": [
            "Store UTC dates but display in another timezone\n\nThe demo below shows how to store dates in UTC while displaying using the `Pacific/Honolulu` timezone."
          ],
          "code_path": [
            "StoreUTCButDisplayOtherTimezone.js"
          ],
          "children": []
        }
      ]
    }
  ]
}