{
  "name": "date-pickers->shortcuts",
  "introduction": [
    "# Shortcuts\n\n<p class=\"description\">The date picker lets you add custom shortcuts.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Adding shortcuts",
      "introduction": [
        "Adding shortcuts\n\nBy default, pickers use the `PickersShortcuts` component to display shortcuts.\nThis component accepts a `shortcuts` prop as an array of `PickersShortcutsItem`.\nThose items are made of two required attributes:\n\n- `label`: The string displayed on the shortcut chip. This property must be unique.\n- `getValue`: A function that returns the value associated to the shortcut.\n\nYou can use `slotProps.shortcuts` to customize this prop. For example to add a shortcut to Christmas Day, you can do the following:\n\n```jsx\n<DatePicker\n  slotProps={{\n    shortcuts: {\n      items: [\n        {\n          label: 'Christmas',\n          getValue: () => {\n            return dayjs(new Date(2023, 11, 25));\n          },\n        },\n      ],\n    },\n  }}\n/>\n```"
      ],
      "code_path": [
        "BasicShortcuts.js"
      ],
      "children": []
    },
    {
      "name": "Disabled dates",
      "introduction": [
        "Disabled dates\n\nBy default, the shortcuts are disabled if the returned value does not pass validation.\nHere is an example where `minDate` is set to the middle of the year."
      ],
      "code_path": [
        "DisabledDatesShortcuts.js"
      ],
      "children": []
    },
    {
      "name": "Range shortcuts [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
      "introduction": [
        "Range shortcuts [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nShortcuts on range pickers require `getValue` property to return an array with two values."
      ],
      "code_path": [
        "BasicRangeShortcuts.js"
      ],
      "children": []
    },
    {
      "name": "Advanced shortcuts",
      "introduction": [
        "Advanced shortcuts"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Use validation to get the value",
          "introduction": [
            "Use validation to get the value\n\nThe `getValue` methods receive a `isValid` helper function.\nYou can use it to test if a value is valid or not based on the [validation props](/x/react-date-pickers/validation/).\n\nIn the following demonstration, it is used to get the next available week and weekend."
          ],
          "code_path": [
            "AdvancedRangeShortcuts.js"
          ],
          "children": []
        },
        {
          "name": "Know which shortcut has been selected",
          "introduction": [
            "Know which shortcut has been selected\n\nThe `onChange` callback receives the shortcut as a property of it's second argument.\nYou can use it to know, which shortcut has been chosen:"
          ],
          "code_path": [
            "OnChangeShortcutLabel.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Behavior when selecting a shortcut",
      "introduction": [
        "Behavior when selecting a shortcut\n\nYou can change the behavior when selecting a shortcut using the `changeImportance` property:\n\n- `\"accept\"` (_default value_): fires `onChange`, fires `onAccept` and closes the picker.\n- `\"set\"`: fires `onChange` but do not fire `onAccept` and does not close the picker."
      ],
      "code_path": [
        "ChangeImportance.js"
      ],
      "children": []
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nLike other [layout's subcomponent](/x/react-date-pickers/custom-layout/), the shortcuts can be customized.\nHere is an example with horizontal shortcuts."
      ],
      "code_path": [
        "CustomizedRangeShortcuts.js"
      ],
      "children": []
    }
  ]
}