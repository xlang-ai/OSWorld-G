{
  "name": "date-pickers->validation",
  "introduction": [
    "# Date and Time Pickers - Validation\n\n<p class=\"description\">Add custom validation to user inputs.</p>\n\nAll the date and time pickers have an API for adding validation constraints.\nBy default, they provide visual feedback if the component value doesn't meet the validation criteria.\n\n:::info\nThe validation props are showcased for each type of picker component using the responsive pickers (`DatePicker`, `TimePicker`, `DateTimePicker`, and `DateRangePicker`, etc.).\n\nBut the same props are available on:\n\n- all the other variants of this picker;\n\n  For example, the validation props showcased with `DatePicker` are also available on:\n\n  - `DesktopDatePicker`\n  - `MobileDatePicker`\n  - `StaticDatePicker`\n\n- the field used by this picker;\n\n  For example, the validation props showcased with `DatePicker` are also available on `DateField`.\n\n- the view components;\n\n  For example, the validation props showcased with `TimePicker` are also available on `TimeClock` and `DigitalClock`.\n\n:::"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Invalid values feedback",
      "introduction": [
        "Invalid values feedback\n\nOn the field, it enables its error state.",
        "On the calendar and clock views, the invalid values are displayed as disabled to prevent their selection."
      ],
      "code_path": [
        "ValidationBehaviorInput.js",
        "ValidationBehaviorView.js"
      ],
      "children": []
    },
    {
      "name": "Past and future validation",
      "introduction": [
        "Past and future validation\n\nAll pickers support the past and future validation.\n\nThe `disablePast` prop prevents the selection all values before today for date pickers and the selection of all values before the current time for time pickers.\nFor date time pickers, it will combine both.\n\n- On the `day` view, all the days before today won't be selectable.\n- On the `month` and `year` views, all the values ending before today won't be selectable.\n- On the `hours` and `minutes` views, all the values ending before the current time won't be selectable.\n- On the `seconds` view, all the values before the current second won't be selectable.",
        "The `disableFuture` prop prevents the selection all values after today for date pickers and the selection of all values after the current time for time pickers.\nFor date time pickers, it will combine both.\n\n- On the `day` view, all the days after today won't be selectable.\n- On the `month` and `year` views, all the values beginning after today won't be selectable.\n- On the `hours` and `minutes` views, all the values beginning after the current time won't be selectable.\n- On the `seconds` view, all the values after the current second won't be selectable.",
        ":::info\nThe current time is computed during the first render of the `LocalizationProvider`.\nIt will not change during the lifetime of the component.\n:::"
      ],
      "code_path": [
        "DateValidationDisablePast.js",
        "DateValidationDisableFuture.js",
        null
      ],
      "children": []
    },
    {
      "name": "Date validation",
      "introduction": [
        "Date validation\n\nAll the props described below are available on all the components supporting date edition."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Minimum and maximum date",
          "introduction": [
            "Minimum and maximum date\n\nThe `minDate` prop prevents the selection of all values before `props.minDate`.\n\n- On the `day` view, all the days before the `minDate` won't be selectable.\n- On the `month` and `year` views, all the values ending before the `minDate` won't be selectable.",
            ":::info\nThe default value of `minDate` is `1900-01-01`.\n:::\n\nThe `maxDate` prop prevents the selection of all values after `props.maxDate`.\n\n- On the `day` view, all the days after the `maxDate` won't be selectable.\n- On the `month` and `year` views, all the values starting after the `maxDate` won't be selectable.",
            ":::info\nThe default value of `maxDate` is `2099-12-31`.\n:::"
          ],
          "code_path": [
            "DateValidationMinDate.js",
            "DateValidationMaxDate.js",
            null
          ],
          "children": []
        },
        {
          "name": "Disable specific dates",
          "introduction": [
            "Disable specific dates\n\nThe `shouldDisableDate` prop prevents the selection of all dates for which it returns `true`.\n\nIn the example below, the weekends are not selectable:",
            ":::warning\n`shouldDisableDate` only prevents the selection of disabled dates on the `day` view.\nFor performance reasons, when rendering the `month` view, we are not calling the callback for every day of each month to see which one should be disabled (same for the `year` view).\n\nIf you know that all days of some months are disabled, you can provide the [`shouldDisableMonth`](#disable-specific-months) prop to disable them in the `month` view.\nSame with the [`shouldDisableYear`](#disable-specific-years) prop for the `year` view.\n:::\n\n:::success\nPlease note that `shouldDisableDate` will execute on every date rendered in the `day` view. Expensive computations in this validation function can impact performance.\n:::"
          ],
          "code_path": [
            "DateValidationShouldDisableDate.js",
            null
          ],
          "children": [
            {
              "name": "Disable specific dates in range components [<span class=\"pro-premium\"></span>](/x/introduction/licensing/#pro-plan)",
              "introduction": [
                "Disable specific dates in range components [<span class=\"pro-premium\"></span>](/x/introduction/licensing/#pro-plan)\n\nFor components supporting date range edition (`DateRangePicker`, `DateTimeRangePicker`), the `shouldDisableDate` prop receives a second argument to differentiate the start and the end date.\n\nIn the example below, the start date cannot be in the weekend but the end date can."
              ],
              "code_path": [
                "DateRangeValidationShouldDisableDate.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Disable specific months",
          "introduction": [
            "Disable specific months\n\nThe `shouldDisableMonth` prop prevents the selection of all dates in months for which it returns `true`.",
            ":::warning\n`shouldDisableMonth` only prevents the selection of disabled months on the `day` and `month` views.\nFor performance reasons, when rendering the `year` view, we are not calling the callback for every month of each year to see which one should be disabled.\n\nIf you know that all months of some years are disabled, you can provide the [`shouldDisableYear`](#disable-specific-years) prop to disable them in the `year` view.\n:::"
          ],
          "code_path": [
            "DateValidationShouldDisableMonth.js",
            null
          ],
          "children": []
        },
        {
          "name": "Disable specific years",
          "introduction": [
            "Disable specific years\n\nThe `shouldDisableYear` prop prevents the selection of all dates in years for which it returns `true`."
          ],
          "code_path": [
            "DateValidationShouldDisableYear.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Time validation",
      "introduction": [
        "Time validation"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Minimum and maximum time",
          "introduction": [
            "Minimum and maximum time\n\nThe `minTime` prop prevents the selection of all values between midnight and `props.minTime`.",
            "The `maxTime` prop prevents the selection of all values between `props.maxTime` and midnight.",
            ":::info\nThe validation only uses the time part of this prop value. It ignores the day / month / year.\nThe simplest way to use it is to pass today's date and only care about the hour / minute / seconds.\n\nFor example to disable the afternoon in `dayjs` you can pass `dayjs().set('hour', 12).startOf('hour')`.\n:::"
          ],
          "code_path": [
            "TimeValidationMinTime.js",
            "TimeValidationMaxTime.js",
            null
          ],
          "children": []
        },
        {
          "name": "Disable specific time",
          "introduction": [
            "Disable specific time\n\nThe `shouldDisableTime` prop prevents the selection of all values for which it returns `true`.\n\nThis callback receives the current view and the value to be tested:\n\n```tsx\n// Disables the hours between 12 AM and 3 PM.\nshouldDisableTime={(value, view) =>\n  view === 'hours' && value.hour() > 12 && value.hour() < 15\n}\n\n// Disables the last quarter of each hour.\nshouldDisableTime={(value, view) => view === 'minutes' && value.minute() >= 45}\n\n// Disables the second half of each minute.\nshouldDisableTime={(value, view) => view === 'seconds' && value.second() > 30}\n\n// Disable the hours before 10 AM every 3rd day\nshouldDisableTime={(value, view) =>\n  view === 'hours' && value.hour() < 10 && value.date() % 3 === 0\n}\n```\n\nIn the example below, the last quarter of each hour is not selectable."
          ],
          "code_path": [
            "TimeValidationShouldDisableTime.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Date and time validation",
      "introduction": [
        "Date and time validation"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Minimum and maximum date time",
          "introduction": [
            "Minimum and maximum date time\n\nThe `minDateTime` prop prevents the selection of all values before `props.minDateTime`.",
            "The `maxDateTime` prop prevents the selection of all values after `props.maxDateTime`.",
            ":::warning\nIf you want to put time boundaries independent of the date, use the [`time boundaries`](#set-time-boundaries) instead.\n\nFor now, you cannot use `maxDateTime` and `maxTime` together.\n`maxDateTime` will override the `maxTime` behavior, and the same goes for `minDateTime` and `minTime`.\n\n```tsx\n// Disable the values between 6 PM and midnight for every day\n// (tomorrow 5 PM is not disabled).\n<DateTimePicker maxTime={dayjs().set('hour', 18).startOf('hour')} />\n\n// Disable the values after today 6 PM (tomorrow 5 PM is disabled).\n<DateTimePicker maxDateTime={dayjs().set('hour', 18).startOf('hour')} />\n\n// Disable the values between midnight and 6 PM for every day\n// (yesterday 5 PM is not disabled).\n<DateTimePicker minTime={dayjs().set('hour', 18).startOf('hour')} />\n\n// Disable the values before today 6 PM (yesterday 5 PM is disabled).\n<DateTimePicker minDateTime={dayjs().set('hour', 18).startOf('hour')} />\n```\n\n:::"
          ],
          "code_path": [
            "DateTimeValidationMinDateTime.js",
            "DateTimeValidationMaxDateTime.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Show the error",
      "introduction": [
        "Show the error\n\nTo render the current error, you can subscribe to the `onError` callback which is called every time the error changes.\nYou can then use the `helperText` prop of the `TextField` to pass your error message to your input as shown below.\n\nTry to type a date that is inside the first quarter of 2022—the error will go away."
      ],
      "code_path": [
        "RenderErrorUnderField.js"
      ],
      "children": []
    }
  ]
}