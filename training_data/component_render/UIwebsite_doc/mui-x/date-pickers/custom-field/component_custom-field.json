{
  "name": "custom-field",
  "introduction": [
    "# Custom field\n\n<p class=\"description\">The Date and Time Pickers let you customize the field by passing props or custom components.</p>\n\n:::success\nSee [Common concepts—Slots and subcomponents](/x/common-concepts/custom-components/) to learn how to use slots.\n:::"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Customize the default field",
      "introduction": [
        "Customize the default field"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Customize the `TextField`",
          "introduction": [
            "Customize the `TextField`\n\nYou can use the `textField` slot to pass custom props to the `TextField`:"
          ],
          "code_path": [
            "TextFieldSlotProps.js"
          ],
          "children": []
        },
        {
          "name": "Customize the separator of multi input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Customize the separator of multi input range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nYou can use the `fieldSeparator` slot to pass custom props to the `Typography` rendered between the two `TextField`:"
          ],
          "code_path": [
            "MultiInputFieldSeparatorSlotProps.js"
          ],
          "children": []
        },
        {
          "name": "Customize the `start` and `end` fields differently [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Customize the `start` and `end` fields differently [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nYou can pass conditional props to the `textField` slot to customize the input styling based on the `position`."
          ],
          "code_path": [
            "MultiInputFieldTextFieldProps.js"
          ],
          "children": []
        },
        {
          "name": "Use single input fields on range pickers [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Use single input fields on range pickers [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nYou can pass the single input fields to the range picker to use it for keyboard editing:",
            "If you want to create a wrapper around the field, make sure to set the `fieldType` static property to `'single-input'`.\nOtherwise, the picker won't know your field is a single input one and use the multi input event listeners:",
            "You can manually add an `endAdornment` if you want your range picker to look exactly like on a simple picker:",
            ":::info\nThis adornment is purely decorative, the focus remains on the field when the picker is opened.\n:::"
          ],
          "code_path": [
            "SingleInputDateRangePicker.js",
            "SingleInputDateRangePickerWrapped.js",
            "SingleInputDateRangePickerWithAdornment.js",
            null
          ],
          "children": []
        },
        {
          "name": "Change the separator of range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Change the separator of range fields [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nYou can use the `dateSeparator` prop to change the separator rendered between the start and end dates:"
          ],
          "code_path": [
            "RangeFieldDateSeparator.js"
          ],
          "children": []
        },
        {
          "name": "Change the format density",
          "introduction": [
            "Change the format density\n\nYou can control the field format spacing using the `formatDensity` prop.\nSetting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character."
          ],
          "code_path": [
            "FieldFormatDensity.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "With Material UI",
      "introduction": [
        "With Material UI"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Wrapping `PickersTextField`",
          "introduction": [
            "Wrapping `PickersTextField`\n\nYou can import the `PickersTextField` component to create custom wrappers:",
            ":::success\nThis approach is only recommended if you need complex customizations on your `PickersTextField`.\n\nIf you just need to set some default props, you can use [the `slotProps` prop](/x/react-date-pickers/custom-field/#customize-the-textfield).\n:::"
          ],
          "code_path": [
            "MaterialV7FieldWrapped.js",
            null
          ],
          "children": []
        },
        {
          "name": "Using Material `TextField`",
          "introduction": [
            "Using Material `TextField`\n\nPass the `enableAccessibleFieldDOMStructure={false}` to any Field or Picker component to use an `<input />` for the editing instead of the new accessible DOM structure:",
            ":::warning\nThe non-accessible DOM structure will be deprecated in a follow up minor version and remove in `v9.x`.\nIf you are unable to migrate for some reason, please open an issue to describe what is missing from the new DOM structure so that we can improve it before dropping the old one.\n:::"
          ],
          "code_path": [
            "MaterialV6Field.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "With another Design System",
      "introduction": [
        "With another Design System"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Using a custom input",
          "introduction": [
            "Using a custom input\n\n:::warning\nYou will need to use a component that supports the `sx` prop as a wrapper for your input\nto be able to benefit from the **hover** and **focus** behavior of the clear button.\nYou will have access to the `clearable` and `onClear` props using native HTML elements,\nbut the on **focus** and **hover** behavior depends on styles applied via the `sx` prop.\n:::",
            "",
            ""
          ],
          "code_path": [
            "BrowserV7Field.js",
            "BrowserV7SingleInputRangeField.js",
            "BrowserV7MultiInputRangeField.js"
          ],
          "children": []
        },
        {
          "name": "Using Joy UI",
          "introduction": [
            "Using Joy UI\n\nYou can use the [Joy UI](https://mui.com/joy-ui/getting-started/) components instead of the Material UI ones:",
            "",
            "",
            ":::warning\nAll the Joy UI examples use the non-accessible DOM structure.\nThe new accessible DOM structure will become compatible with Joy UI in the future.\n:::"
          ],
          "code_path": [
            "JoyV6Field.js",
            "JoyV6SingleInputRangeField.js",
            "JoyV6MultiInputRangeField.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "With a custom editing experience",
      "introduction": [
        "With a custom editing experience"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Using an Autocomplete",
          "introduction": [
            "Using an Autocomplete\n\nIf your user can only select a value in a small list of available dates, you can replace the field with the [Autocomplete](/material-ui/react-autocomplete/) component to list those dates:"
          ],
          "code_path": [
            "behavior-autocomplete/MaterialDatePicker.js"
          ],
          "children": []
        },
        {
          "name": "Using a masked Text Field",
          "introduction": [
            "Using a masked Text Field\n\nIf you want to use a simple mask approach for the field editing instead of the built-in logic, you can replace the default field with the [TextField](/material-ui/react-text-field/) component using a masked input value built with the [rifm](https://github.com/realadvisor/rifm) package."
          ],
          "code_path": [
            "behavior-masked-text-field/MaskedMaterialTextField.js"
          ],
          "children": []
        },
        {
          "name": "Using a read-only Text Field",
          "introduction": [
            "Using a read-only Text Field\n\nIf you want users to select a value exclusively through the views\nbut you still want the UI to look like a Text Field, you can replace the field with a read-only [Text Field](/material-ui/react-text-field/) component:"
          ],
          "code_path": [
            "behavior-read-only-text-field/MaterialDatePicker.js"
          ],
          "children": []
        },
        {
          "name": "Using a read-only Text Field on mobile",
          "introduction": [
            "Using a read-only Text Field on mobile\n\nIf you want to keep the default behavior on desktop but have a read-only TextField on mobile, you can conditionally render the custom field presented in the previous section:"
          ],
          "code_path": [
            "behavior-read-only-mobile-text-field/MaterialDatePicker.js"
          ],
          "children": []
        },
        {
          "name": "Using a Button",
          "introduction": [
            "Using a Button\n\nIf you want users to select a value exclusively through the views\nand you don't want the UI to look like a Text Field, you can replace the field with the [Button](/material-ui/react-button/) component:",
            "The same logic can be applied to any Range Picker:"
          ],
          "code_path": [
            "behavior-button/MaterialDatePicker.js",
            "behavior-button/MaterialDateRangePicker.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Build your own custom field",
      "introduction": [
        "Build your own custom field\n\n:::success\nThe sections below show how to build a field for your Picker.\nUnlike the field components exposed by `@mui/x-date-pickers` and `@mui/x-date-pickers-pro`, those fields are not suitable for a standalone usage.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Typing",
          "introduction": [
            "Typing\n\nEach Picker component exposes an interface describing the props it passes to its field.\nYou can import it from the same endpoint as the Picker component and use it to type the props of your field:\n\n```tsx\nimport { DatePickerFieldProps } from '@mui/x-date-pickers/DatePicker';\nimport { DateRangePickerFieldProps } from '@mui/x-date-pickers-pro/DateRangePicker';\n\nfunction CustomDateField(props: DatePickerFieldProps) {\n  // Your custom field\n}\n\nfunction CustomDateRangeField(props: DateRangePickerFieldProps) {\n  // Your custom field\n}\n```"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Import",
              "introduction": [
                "Import\n\n|       Picker component | Field props interface           |\n| : | :--- |\n|            Date Picker | `import { validateDate } from '@mui/x-date-pickers/validation'`              |\n|            Time Picker | `import { validateTime } from '@mui/x-date-pickers/validation'`              |\n|       Date Time Picker | `import { validateDateTime } from '@mui/x-date-pickers/validation'`          |\n|      Date Range Picker | `import { validateDateRange } from '@mui/x-date-pickers-pro/validation'`     |\n| Date Time Range Picker | `import { validateDateTimeRange } from '@mui/x-date-pickers-pro/validation'` |"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Localized placeholder",
          "introduction": [
            "Localized placeholder\n\nYou can use the `useParsedFormat` to get a clean placeholder.\nThis hook applies two main transformations on the format:\n\n1. It replaces all the localized tokens (for example `L` for a date with `dayjs`) with their expanded value (`DD/MM/YYYY` for the same date with `dayjs`).\n2. It replaces each token with its token from the localization object (for example `YYYY` remains `YYYY` for the English locale but becomes `AAAA` for the French locale).\n\n:::warning\nThe format returned by `useParsedFormat` cannot be parsed by your date library.\n:::\n\n```js\nimport { useParsedFormat } from '@mui/x-date-pickers/hooks';\n\n// Uses the format defined by your Picker\nconst parsedFormat = useParsedFormat();\n\n// Uses the custom format provided\nconst parsedFormat = useParsedFormat({ format: 'MM/DD/YYYY' });\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Spread props to the DOM",
          "introduction": [
            "Spread props to the DOM\n\nThe field receives a lot of props that cannot be forwarded to the DOM element without warnings.\nYou can use the `useSplitFieldProps` hook to get the props that can be forwarded safely to the DOM:\n\n```tsx\nconst { internalProps, forwardedProps } = useSplitFieldProps(\n  // The props received by the field component\n  props,\n  // The value type (\"date\", \"time\" or \"date-time\")\n  'date',\n);\n\nreturn (\n  <TextField {...forwardedProps} value={inputValue} onChange={handleChange}>\n)\n```\n\n:::success\nThe `forwardedProps` contains the `sx` which is specific to MUI.\nYou can omit it if the component your are forwarding the props to does not support this concept:\n\n```jsx\nconst { sx, ...other } = props;\nconst { internalProps, forwardedProps } = useSplitFieldProps(other, 'date');\n\nreturn (\n  <input {...forwardedProps} value={inputValue} onChange={handleChange}>\n)\n```\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Pass the field to the Picker",
          "introduction": [
            "Pass the field to the Picker\n\nYou can pass your custom field to your Picker using the `field` slot:\n\n```tsx\nfunction DatePickerWithCustomField() {\n  return (\n    <DatePicker slots={{ field: CustomDateField }}>\n  )\n}\n\n// Also works with the other variants of the component\nfunction DesktopDatePickerWithCustomField() {\n  return (\n    <DesktopDatePicker slots={{ field: CustomDateField }}>\n  )\n}\n\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Full custom example",
          "introduction": [
            "Full custom example\n\nHere is a live demo of the example created in all the previous sections:"
          ],
          "code_path": [
            "behavior-tutorial/MaterialDatePicker.js"
          ],
          "children": []
        }
      ]
    }
  ]
}