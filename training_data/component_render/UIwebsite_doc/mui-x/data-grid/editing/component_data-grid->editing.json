{
  "name": "data-grid->editing",
  "introduction": [
    "# Data Grid - Custom edit component\n\n<p class=\"description\">Creating custom edit component.</p>\n\nEach of the built-in column types provides a component to edit the value of the cells.\nTo customize column types, or override the existing components, you can provide a new edit component through the `renderEditCell()` property in the column definition.\nThis property works like the `renderCell()` property, which is rendered while cells are in view mode.\n\n```tsx\nfunction CustomEditComponent(props: GridRenderEditCellParams) {\n  return <input type=\"text\" value={params.value} onValueChange={...} />;\n}\n\nconst columns: GridColDef[] = [\n  {\n    field: 'firstName',\n    renderEditCell: (params: GridRenderEditCellParams) => (\n      <CustomEditComponent {...params} />\n    ),\n  },\n];\n```\n\nThe `renderEditCell()` property receives all params from `GridRenderEditCellParams`, which extends `GridCellParams`.\nAdditionally, the props added during [pre-processing](#validation) are also available in the params.\nThese are the most important params to consider:\n\n- `value`: contains the current value of the cell in edit mode, overriding the value from `GridCellParams`\n- `error`: the error added during validation\n- `isProcessingProps`: whether `preProcessEditCellProps()` is being executed or not\n\nOnce a new value is entered into the input, it must be sent to the data grid.\nTo do this, pass the row ID, the column field, and the new cell value to a call to `apiRef.current.setEditCellValue()`.\nThe new value will be parsed and validated, and the `value` prop will reflect the changes in the next render.\n\n```tsx\nfunction CustomEditComponent(props: GridRenderEditCellParams) {\n  const { id, value, field } = props;\n  const apiRef = useGridApiContext();\n\n  const handleValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value; // The new value entered by the user\n    apiRef.current.setEditCellValue({ id, field, value: newValue });\n  };\n\n  return <input type=\"text\" value={value} onChange={handleValueChange} />;\n}\n```\n\nThe following demo implements a custom edit component, based on the [`Rating`](https://mui.com/material-ui/react-rating/) component from `@mui/material`, for the **Rating** column."
  ],
  "code_path": [
    "CustomEditComponent.js"
  ],
  "children": [
    {
      "name": "With debounce",
      "introduction": [
        "With debounce\n\nBy default, each call to `apiRef.current.setEditCellValue()` triggers a new render.\nIf the edit component requires the user to type a new value, re-rendering the data grid too often will drastically reduce performance.\nOne way to avoid this is to debounce the API calls.\nYou can use `apiRef.current.setEditCellValue()` to handle debouncing by setting the `debounceMs` param to a positive integer that defines a set time period in milliseconds.\nNo matter how many times the API method is called, the data grid will only be re-rendered after that period of time has passed.\n\n```tsx\napiRef.current.setEditCellValue({ id, field, value: newValue, debounceMs: 200 });\n```\n\nWhen the data grid is only set to re-render after a given period of time has passed, the `value` prop will not be updated on each `apiRef.current.setEditCellValue()` call.\nTo avoid a frozen UI, the edit component can keep the current value in an internal state and sync it once `value` changes.\nModify the edit component to enable this feature:\n\n```diff\n function CustomEditComponent(props: GridRenderEditCellParams) {\n-  const { id, value, field } = props;\n+  const { id, value: valueProp, field } = props;\n+  const [value, setValue] = React.useState(valueProp);\n   const apiRef = useGridApiContext();\n\n   const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n     const newValue = event.target.value; // The new value entered by the user\n-    apiRef.current.setEditCellValue({ id, field, value: newValue });\n+    apiRef.current.setEditCellValue({ id, field, value: newValue, debounceMs: 200 });\n+    setValue(newValue);\n   };\n\n+  React.useEffect(() => {\n+    setValue(valueProp);\n+  }, [valueProp]);\n+\n   return <input type=\"text\" value={value} onChange={handleChange} />;\n }\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "With auto-stop",
      "introduction": [
        "With auto-stop\n\nAn edit component has \"auto-stop\" behavior when it stops edit mode as soon as the value is changed.\nTo picture better, imagine an edit component with a combo, created following the normal steps.\nBy default, it would require two clicks to change the value of the cell: one click inside the cell to select a new value, and another click outside the cell to save.\nThis second click can be avoided if the first click also stops the edit mode.\nTo create an edit component with auto-stop, call `apiRef.current.stopCellEditMode()` after setting the new value.\nSince `apiRef.current.setEditCellValue()` may do additional processing, you must wait for it to resolve before stopping the edit mode.\nAlso, it is a good practice to check if `apiRef.current.setEditCellValue()` has returned `true`.\nIt will be `false` if `preProcessEditProps()` set an error during [validation](#validation).\n\n```tsx\nconst handleChange = async (event: SelectChangeEvent) => {\n  const isValid = await apiRef.current.setEditCellValue({\n    id,\n    field,\n    value: event.target.value,\n  });\n\n  if (isValid) {\n    apiRef.current.stopCellEditMode({ id, field });\n  }\n};\n```\n\nThe following demo implements an edit component with auto-stop, based on a native [`Select`](/material-ui/react-select/) component for the **Role** column.",
        ":::warning\nAvoid using edit components with auto-stop in columns that use long-running `preProcessEditCellProps()` because the UI will freeze while waiting for `apiRef.current.setEditCellValue()`.\nInstead, use the provided interactions to exit edit mode.\n:::"
      ],
      "code_path": [
        "AutoStopEditComponent.js",
        null
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}