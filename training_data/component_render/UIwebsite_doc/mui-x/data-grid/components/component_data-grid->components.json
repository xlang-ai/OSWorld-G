{
  "name": "data-grid->components",
  "introduction": [
    "# Data Grid - Custom slots and subcomponents\n\n<p class=\"description\">Learn how to override parts of the grid.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Interacting with the Data Grid",
      "introduction": [
        "Interacting with the Data Grid\n\nThe grid exposes two hooks to help you access the Data Grid data while overriding component slots.\n\nThey can be used as below:\n\n- `useGridApiContext`: returns the `apiRef` object (more details on the [API object page](/x/react-data-grid/api-object/#inside-the-data-grid)).\n- `useGridSelector`: returns the result of a selector on the current state (more details on the [State page](/x/react-data-grid/state/#access-the-state)).\n\n```tsx\nfunction CustomPagination() {\n  const apiRef = useGridApiContext();\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\n\n  return (\n    <Pagination\n      count={pageCount}\n      page={paginationModel.page + 1}\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\n    />\n  );\n}\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Component slots",
      "introduction": [
        "Component slots\n\n:::success\n\n- See [Common concepts—Slots and subcomponents](/x/common-concepts/custom-components/) to learn how to use slots.\n- See [`GridSlotsComponent`](/x/api/data-grid/data-grid/#slots) to learn about the available slots.\n\n  :::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Columns panel",
          "introduction": [
            "Columns panel\n\nIn the following demo, the columns panel is replaced with a custom component that represents the [column groups](/x/react-data-grid/column-groups/) as a nested list."
          ],
          "code_path": [
            "CustomColumnsPanel.js"
          ],
          "children": []
        },
        {
          "name": "Column menu",
          "introduction": [
            "Column menu\n\nAs mentioned above, the column menu is a component slot that can be recomposed easily and customized on each column as in the demo below."
          ],
          "code_path": [
            "CustomColumnMenu.js"
          ],
          "children": []
        },
        {
          "name": "Toolbar",
          "introduction": [
            "Toolbar\n\nTo enable the toolbar you need to add the `toolbar: GridToolbar` to the Data Grid `slots` prop.\nThis demo showcases how this can be achieved.",
            "You can also compose your own toolbar. Each button in the toolbar is wrapped with a tooltip component.\nIn order to override some of the props corresponding to the toolbar buttons, you can use the `slotProps` prop.\n\nThe following demo shows how to override the tooltip title of the density selector and the variant of the export button.\n\n```jsx\nfunction CustomToolbar() {\n  return (\n    <GridToolbarContainer>\n      <GridToolbarColumnsButton />\n      <GridToolbarFilterButton />\n      <GridToolbarDensitySelector\n        slotProps={{ tooltip: { title: 'Change density' } }}\n      />\n      <Box sx={{ flexGrow: 1 }} />\n      <GridToolbarExport\n        slotProps={{\n          tooltip: { title: 'Export data' },\n          button: { variant: 'outlined' },\n        }}\n      />\n    </GridToolbarContainer>\n  );\n}\n```"
          ],
          "code_path": [
            "ToolbarGrid.js",
            "CustomToolbarGrid.js"
          ],
          "children": []
        },
        {
          "name": "Footer",
          "introduction": [
            "Footer\n\nThe grid exposes props to hide specific elements of the UI:\n\n- `hideFooter`: If `true`, the footer component is hidden.\n- `hideFooterRowCount`: If `true`, the row count in the footer is hidden.\n- `hideFooterSelectedRowCount`: If `true`, the selected row count in the footer is hidden.\n- `hideFooterPagination`: If `true`, the pagination component in the footer is hidden."
          ],
          "code_path": [
            "CustomFooter.js"
          ],
          "children": []
        },
        {
          "name": "Pagination",
          "introduction": [
            "Pagination\n\nThe default pagination component is exported as `GridPagination`.\nThis component is an extension of the [TablePagination](/material-ui/react-pagination/#table-pagination) component, and it renders the page size control, the number of rows in the page and also the buttons to go to the previous and next page.\nYou can replace the pagination component completely or reuse the default one.\n\nThe next demo reuses `GridPagination` but replaces the previous and next page buttons with [Pagination](/material-ui/react-pagination/), which renders a dedicated button for each page."
          ],
          "code_path": [
            "CustomPaginationGrid.js"
          ],
          "children": []
        },
        {
          "name": "Row",
          "introduction": [
            "Row\n\nThe `slotProps.row` prop can be used to pass additional props to the row component.\nOne common use case might be to listen for events not exposed by [default](/x/react-data-grid/events/#catalog-of-events).\nThe demo below shows a context menu when a row is right-clicked."
          ],
          "code_path": [
            "RowContextMenu.js"
          ],
          "children": []
        },
        {
          "name": "Cell",
          "introduction": [
            "Cell\n\nThe following demo uses the `slotProps.cell` prop to listen for specific events emitted by the cells.\nTry it by hovering a cell with the mouse and it should display the number of characters each cell has."
          ],
          "code_path": [
            "CellWithPopover.js"
          ],
          "children": []
        },
        {
          "name": "Icons",
          "introduction": [
            "Icons\n\nAs any component slot, every icon can be customized. However, it is not yet possible to use the `slotProps` with icons."
          ],
          "code_path": [
            "CustomSortIcons.js"
          ],
          "children": []
        },
        {
          "name": "Overlays",
          "introduction": [
            "Overlays\n\nSee the [Overlays](/x/react-data-grid/overlays/) documentation on how to customize the `loadingOverlay`, `noRowsOverlay`, and `noResultsOverlay`."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Custom slot props with TypeScript",
      "introduction": [
        "Custom slot props with TypeScript\n\n:::success\nThis section focuses on module augmentation.\n\nSee [Custom slots and subcomponents—Usage with TypeScript](/x/common-concepts/custom-components/#usage-with-typescript) if you don't want to use this approach.\n:::\n\nIf the custom component requires additional props to work properly, TypeScript may throw type errors.\nTo solve these type errors, use [module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) to enhance the props interface.\n\nThe naming of overridable interfaces uses a pattern like this:\n\n```js\n`${slotNameInPascalCase}PropsOverrides`;\n```\n\nFor example, for `columnMenu` slot, the interface name would be `ColumnMenuPropsOverrides`.\n\nThis [file](https://github.com/mui/mui-x/blob/-/packages/x-data-grid/src/models/gridSlotsComponentsProps.ts) lists all the interfaces for each slot that could be used for augmentation.\n\n<codeblock storageKey=\"pricing-plan\">\n\n```tsx Community\n// augment the props for the toolbar slot\ndeclare module '@mui/x-data-grid' {\n  interface ToolbarPropsOverrides {\n    someCustomString: string;\n    someCustomNumber: number;\n  }\n}\n\n<DataGrid\n  slots={{\n    // custom component passed to the toolbar slot\n    toolbar: CustomGridToolbar,\n  }}\n  slotProps={{\n    toolbar: {\n      // props used by CustomGridToolbar\n      someCustomString: 'Hello',\n      someCustomNumber: 42,\n    },\n  }}\n/>;\n```\n\n```tsx Pro\n// augment the props for the toolbar slot\ndeclare module '@mui/x-data-grid-pro' {\n  interface ToolbarPropsOverrides {\n    someCustomString: string;\n    someCustomNumber: number;\n  }\n}\n\n<DataGridPro\n  slots={{\n    // custom component passed to the toolbar slot\n    toolbar: CustomGridToolbar,\n  }}\n  slotProps={{\n    toolbar: {\n      // props used by CustomGridToolbar\n      someCustomString: 'Hello',\n      someCustomNumber: 42,\n    },\n  }}\n/>;\n```\n\n```tsx Premium\n// augment the props for the toolbar slot\ndeclare module '@mui/x-data-grid-premium' {\n  interface ToolbarPropsOverrides {\n    someCustomString: string;\n    someCustomNumber: number;\n  }\n}\n\n<DataGridPremium\n  slots={{\n    // custom component passed to the toolbar slot\n    toolbar: CustomGridToolbar,\n  }}\n  slotProps={{\n    toolbar: {\n      // props used by CustomGridToolbar\n      someCustomString: 'Hello',\n      someCustomNumber: 42,\n    },\n  }}\n/>;\n```\n\n</codeblock>\n\nThis demo below shows how to use the `slotProps` prop and module augmentation to pass a new prop `status` to the `footer` slot."
      ],
      "code_path": [
        "CustomFooter.js"
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}