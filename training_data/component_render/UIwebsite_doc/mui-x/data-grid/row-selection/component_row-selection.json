{
  "name": "row-selection",
  "introduction": [
    "# Data Grid - Row selection\n\n<p class=\"description\">Row selection allows the user to select and highlight a single or multiple rows that they can then take action on.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Single row selection",
      "introduction": [
        "Single row selection\n\nSingle row selection comes enabled by default for the MIT Data Grid component.\nYou can select a row by clicking it, or using the [keyboard shortcuts](/x/react-data-grid/accessibility/#selection).\nTo unselect a row, hold the <kbd class=\"key\">Ctrl</kbd> (<kbd class=\"key\">Cmd</kbd> on MacOS) key and click on it."
      ],
      "code_path": [
        "SingleRowSelectionGrid.js"
      ],
      "children": []
    },
    {
      "name": "Multiple row selection [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
      "introduction": [
        "Multiple row selection [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nOn the Data Grid Pro and Data Grid Premium components, you can select multiple rows in two ways:\n\n- To select multiple independent rows, hold the <kbd class=\"key\">Ctrl</kbd> (<kbd class=\"key\">Cmd</kbd> on MacOS) key while selecting rows.\n- To select a range of rows, hold the <kbd class=\"key\">Shift</kbd> key while selecting rows.\n- To disable multiple row selection, use `disableMultipleRowSelection={true}`."
      ],
      "code_path": [
        "MultipleRowSelectionGrid.js"
      ],
      "children": []
    },
    {
      "name": "Disable row selection on click",
      "introduction": [
        "Disable row selection on click\n\nYou might have interactive content in the cells and need to disable the selection of the row on click. Use the `disableRowSelectionOnClick` prop in this case."
      ],
      "code_path": [
        "DisableClickSelectionGrid.js"
      ],
      "children": []
    },
    {
      "name": "Disable selection on certain rows",
      "introduction": [
        "Disable selection on certain rows\n\nUse the `isRowSelectable` prop to indicate if a row can be selected.\nIt's called with a `GridRowParams` object and should return a boolean value.\nIf not specified, all rows are selectable.\n\nIn the demo below only rows with quantity above 50,000 can be selected:"
      ],
      "code_path": [
        "DisableRowSelection.js"
      ],
      "children": []
    },
    {
      "name": "Row selection with filtering",
      "introduction": [
        "Row selection with filtering\n\nBy default, when the rows are filtered the selection is cleared from the rows that don't meet the filter criteria.\nTo keep those rows selected even when they're not visible, set the `keepNonExistentRowsSelected` prop."
      ],
      "code_path": [
        "KeepNonExistentRowsSelected.js"
      ],
      "children": []
    },
    {
      "name": "Controlled row selection",
      "introduction": [
        "Controlled row selection\n\nUse the `rowSelectionModel` prop to control the selection.\nEach time this prop changes, the `onRowSelectionModelChange` callback is called with the new selection value."
      ],
      "code_path": [
        "ControlledSelectionGrid.js"
      ],
      "children": []
    },
    {
      "name": "Checkbox selection",
      "introduction": [
        "Checkbox selection\n\nTo activate checkbox selection set `checkboxSelection={true}`."
      ],
      "code_path": [
        "CheckboxSelectionGrid.js"
      ],
      "children": [
        {
          "name": "Custom checkbox column",
          "introduction": [
            "Custom checkbox column\n\nIf you provide a custom checkbox column to the Data Grid with the `GRID_CHECKBOX_SELECTION_FIELD` field, the Data Grid will not add its own.\n\nWe strongly recommend to use the `GRID_CHECKBOX_SELECTION_COL_DEF` variable instead of re-defining all the custom properties yourself.\n\nIn the following demo, the checkbox column has been moved to the right and its width has been increased to 100px.",
            ":::warning\nAlways set the `checkboxSelection` prop to `true` even when providing a custom checkbox column.\nOtherwise, the Data Grid might remove your column.\n:::"
          ],
          "code_path": [
            "CheckboxSelectionCustom.js",
            null
          ],
          "children": []
        },
        {
          "name": "Visible rows selection [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
          "introduction": [
            "Visible rows selection [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nBy default, when you click the \"Select All\" checkbox, all rows in the Data Grid are selected.\nIf you want to change this behavior and only select the rows that are currently visible on the page, you can use the `checkboxSelectionVisibleOnly` prop."
          ],
          "code_path": [
            "CheckboxSelectionVisibleOnlyGrid.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Usage with server-side pagination",
      "introduction": [
        "Usage with server-side pagination\n\nUsing the controlled selection with `paginationMode=\"server\"` may result in selected rows being lost when the page is changed.\nThis happens because the Data Grid cross-checks with the `rows` prop and only calls `onRowSelectionModelChange` with existing row IDs.\nDepending on your server-side implementation, when the page changes and the new value for the `rows` prop does not include previously selected rows, the Data Grid will call `onRowSelectionModelChange` with an empty value.\nTo prevent this, enable the `keepNonExistentRowsSelected` prop to keep the rows selected even if they do not exist.\n\n```tsx\n<DataGrid keepNonExistentRowsSelected />\n```\n\nBy using this approach, clicking in the **Select All** checkbox may still leave some rows selected.\nIt is up to you to clean the selection model, using the `rowSelectionModel` prop.\nThe following demo shows the prop in action:"
      ],
      "code_path": [
        "ControlledSelectionServerPaginationGrid.js"
      ],
      "children": []
    },
    {
      "name": "apiRef",
      "introduction": [
        "apiRef\n\nThe grid exposes a set of methods that enables all of these features using the imperative `apiRef`. To know more about how to use it, check the [API Object](/x/react-data-grid/api-object/) section.\n\n:::warning\nOnly use this API as the last option. Give preference to the props to control the Data Grid.\n:::"
      ],
      "code_path": [
        "RowSelectionApiNoSnap.js"
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}