{
  "name": "row-spanning",
  "introduction": [
    "# Data Grid - Row spanning ðŸ§ª\n\n<p class=\"description\">Span cells across several rows.</p>\n\nBy default, each cell in a Data Grid takes up the height of one row.\nThe row spanning feature makes it possible for a cell to fill multiple rows in a single column.\n\nTo enable, pass the `rowSpanning` prop to the Data Grid.\nThe Data Grid will automatically merge consecutive cells with repeating values in the same column, as shown in the demo belowâ€”switch off the toggle button to see the actual rows:",
    ":::info\nIn this demo, the `quantity` column has been deliberately excluded from the row spanning computation using the `colDef.rowSpanValueGetter` prop.\n\nSee the [Customizing row-spanning cells](#customizing-row-spanning-cells) section for more details.\n:::\n\n:::warning\nRow spanning works by increasing the height of the spanned cell by a factor of `rowHeight`â€”it won't work properly with a variable or dynamic height.\n:::"
  ],
  "code_path": [
    "RowSpanning.js",
    null
  ],
  "children": [
    {
      "name": "Customizing row-spanning cells",
      "introduction": [
        "Customizing row-spanning cells\n\nYou can customize how row spanning works using two props:\n\n- `colDef.rowSpanValueGetter`: Controls which values are used for row spanning\n- `colDef.valueGetter`: Controls both the row spanning logic and the cell value\n\nThis lets you prevent unwanted row spanning when there are repeating values that shouldn't be merged.\n\nIn the following example, `rowSpanValueGetter` is used to avoid merging `age` cells that don't belong to the same person."
      ],
      "code_path": [
        "RowSpanningCustom.js"
      ],
      "children": []
    },
    {
      "name": "Usage with column spanning",
      "introduction": [
        "Usage with column spanning\n\nRow spanning can be used in conjunction with column spanning to create cells that span multiple rows and columns simultaneously, as shown in the demo below:",
        ":::warning\nRow spanning works well with features like [sorting](/x/react-data-grid/sorting/) and [filtering](/x/react-data-grid/filtering/), but be sure to check that everything works as expected when using it with [column spanning](/x/react-data-grid/column-spanning/).\n:::"
      ],
      "code_path": [
        "RowSpanningClassSchedule.js",
        null
      ],
      "children": []
    },
    {
      "name": "Demo",
      "introduction": [
        "Demo\n\nThe demo below recreates the calendar from the [column spanning documentation](/x/react-data-grid/column-spanning/#function-signature) using the row spanning feature:"
      ],
      "code_path": [
        "RowSpanningCalendar.js"
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}