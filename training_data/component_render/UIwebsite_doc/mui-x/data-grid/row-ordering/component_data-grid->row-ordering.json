{
  "name": "data-grid->row-ordering",
  "introduction": [
    "# Data Grid - Row ordering [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Drag and drop your rows to reorder them.</p>\n\nRow reordering lets users rearrange rows by dragging the special reordering cell.\n\nBy default, row reordering is disabled.\nTo enable it, you need to add the `rowReordering` prop.\n\n```tsx\n<DataGridPro rowReordering />\n```",
    "To capture changes in the order of the dragged row, you can pass a callback to the `onRowOrderChange` prop. This callback is called with a `GridRowOrderChangeParams` object.\n\nIn addition, you can import the following events to customize the row reordering experience:\n\n- `rowDragStart`: emitted when dragging of a row starts.\n- `rowDragOver`: emitted when dragging a row over another row.\n- `rowDragEnd`: emitted when dragging of a row stops."
  ],
  "code_path": [
    "RowOrderingGrid.js",
    null
  ],
  "children": [
    {
      "name": "Customizing the reorder value",
      "introduction": [
        "Customizing the reorder value\n\nBy default, when you start dragging a row, the `id` is displayed in the draggable box.\nTo change this, you can give a value to the `__reorder__` field for each row.\n\n```tsx\nconst columns: GridColDef[] = [{ field: 'brand' }];\n\nconst rows: GridRowsProp = [\n  { id: 0, brand: 'Nike', __reorder__: 'Nike' },\n  { id: 1, brand: 'Adidas', __reorder__: 'Adidas' },\n  { id: 2, brand: 'Puma', __reorder__: 'Puma' },\n];\n\n<DataGridPro rows={rows} columns={columns} rowReordering />;\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Customizing the row reordering icon",
      "introduction": [
        "Customizing the row reordering icon\n\nTo change the icon used for the row reordering, you can provide a different component for the [icon slot](/x/react-data-grid/components/#icons) as follow:\n\n```tsx\n<DataGridPro\n  slots={{\n    rowReorderIcon: CustomMoveIcon,\n  }}\n/>\n```\n\nAnother way to customize is to add a column with `field: __reorder__` to your set of columns.\nThat way, you can overwrite any of the properties from the `GRID_REORDER_COL_DEF` column.\nThe grid will detect that there is already a reorder column defined and it will not add another one in the default position.\nIf you only set the `field`, then it is up to you to configure the remaining options (for example disable the column menu, filtering, sorting).\nTo start with our suggested configuration, spread `GRID_REORDER_COL_DEF` when defining the column.\n\n```tsx\n<DataGridPro\n  columns={[\n    {\n      ...GRID_REORDER_COL_DEF, // Already contains the right field\n      width: 40,\n    },\n  ]}\n/>\n```\n\nThis approach can also be used to change the location of the toggle column.\n\n:::warning\nFor now, row reordering is disabled if sorting is applied to the Data Grid.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Reordering rows with row grouping üöß",
      "introduction": [
        "Reordering rows with row grouping üöß\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\nüëç Upvote [issue #4821](https://github.com/mui/mui-x/issues/4821) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Reordering rows with tree data üöß",
      "introduction": [
        "Reordering rows with tree data üöß\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\nüëç Upvote [issue #4821](https://github.com/mui/mui-x/issues/4821) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}