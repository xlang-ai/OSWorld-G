{
  "name": "aggregation",
  "introduction": [
    "# Data Grid - Aggregation [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\n<p class=\"description\">Add aggregation functions to the Data Grid so users can combine row values.</p>\n\nYou can aggregate rows through the Data Grid interface by opening the column menu and selecting from the items under **Aggregation**.\n\nThe aggregated values are rendered in a footer row at the bottom of the Data Grid.",
    ":::info\nIf you're looking for aggregation on the server side, see [Server-side data—Aggregation](/x/react-data-grid/server-side-data/aggregation/).\n:::"
  ],
  "code_path": [
    "AggregationInitialState.js",
    null
  ],
  "children": [
    {
      "name": "Pass aggregation to the Data Grid",
      "introduction": [
        "Pass aggregation to the Data Grid"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Structure of the model",
          "introduction": [
            "Structure of the model\n\nThe aggregation model is an object.\nThe keys correspond to the columns, and the values are the name of the aggregation functions to use."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Initialize aggregation",
          "introduction": [
            "Initialize aggregation\n\nTo initialize aggregation without controlling its state, provide the model to the `initialState` prop."
          ],
          "code_path": [
            "AggregationInitialState.js"
          ],
          "children": []
        },
        {
          "name": "Controlled aggregation",
          "introduction": [
            "Controlled aggregation\n\nUse the `aggregationModel` prop to control aggregation passed to the Data Grid.\n\nUse the `onAggregationModelChange` prop to listen to changes to aggregation and update the prop accordingly."
          ],
          "code_path": [
            "AggregationControlled.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Disable aggregation",
      "introduction": [
        "Disable aggregation"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "For all columns",
          "introduction": [
            "For all columns\n\nTo disable aggregation, set the `disableAggregation` prop to `true`.\nThis will disable all features related to aggregation, even if a model is provided."
          ],
          "code_path": [
            "AggregationDisabled.js"
          ],
          "children": []
        },
        {
          "name": "For some columns",
          "introduction": [
            "For some columns\n\nTo disable aggregation on a specific column, set the `aggregable` property on its column definition (`GridColDef`) to `false`.\n\nIn the example below, the **Year** column is not aggregable since its `aggregable` property is set to `false`."
          ],
          "code_path": [
            "AggregationColDefAggregable.js"
          ],
          "children": []
        },
        {
          "name": "Aggregating non-aggregable columns programmatically",
          "introduction": [
            "Aggregating non-aggregable columns programmatically\n\nTo apply aggregation programmatically on non-aggregable columns (columns with `aggregable: false` in the [column definition](/x/api/data-grid/grid-col-def/)), you can provide aggregation model in one of the following ways:\n\n1. Pass `aggregation.model` to the `initialState` prop. This will [initialize the aggregation](/x/react-data-grid/aggregation/#initialize-aggregation) with the provided model.\n2. Provide the `aggregationModel` prop. This will [control the aggregation](/x/react-data-grid/aggregation/#controlled-aggregation) with the provided model.\n3. Call the API method `setAggregationModel`. This will set the aggregation with the provided model.\n\nIn the demo below, although the **Year** column is not aggregable, yet it's aggregated in a read-only mode by providing an initial aggregation model."
          ],
          "code_path": [
            "AggregationColDefNonAggregable.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Usage with row grouping",
      "introduction": [
        "Usage with row grouping\n\nWhen row grouping is enabled, the aggregated values will be displayed in two places:\n\n1. On the grouping rows—the Data Grid will display each group aggregated value on its grouping row.\n2. On the top-level footer—the Data Grid will add a top-level footer to aggregate all the rows, as it would with a flat row list.",
        "Use the `getAggregationPosition` prop to customize this behavior.\nThis function takes the current group node as an argument (`null` for the root group) and returns the position of the aggregated value.\nThis position must be one of the three following values:\n\n1. `\"footer\"`—the Data Grid adds a footer to the group to aggregate its rows.\n2. `\"inline\"`—the Data Grid disables aggregation on the grouping row.\n3. `null`—the Data Grid doesn't aggregate the group.\n\n```tsx\n// Will aggregate the root group on the top-level footer and the other groups on their grouping row\n// (default behavior)\ngetAggregationPosition=(groupNode) => (groupNode == null ? 'footer' : 'inline'),\n\n// Will aggregate all the groups on their grouping row\n// The root will not be aggregated\ngetAggregationPosition={(groupNode) => groupNode == null ? null : 'inline'}\n\n// Will only aggregate the company groups on the grouping row\n// Director groups and the root will not be aggregated\ngetAggregationPosition={(groupNode) => groupNode?.groupingField === 'company' ? 'inline' : null}\n\n// Will only aggregate the company group \"Universal Pictures\" on the grouping row\ngetAggregationPosition={(groupNode) =>\n(groupNode?.groupingField === 'company' &&\n  groupNode?.groupingKey === 'Universal Pictures') ? 'inline' : null\n}\n\n// Will only aggregate the root group on the top-level footer\ngetAggregationPosition={(groupNode) => groupNode == null ? 'footer' : null}\n```\n\nThe demo below shows the **SUM** aggregation on the footer of each group but not on the top-level footer:"
      ],
      "code_path": [
        "AggregationRowGrouping.js",
        "AggregationGetAggregationPosition.js"
      ],
      "children": []
    },
    {
      "name": "Usage with tree data",
      "introduction": [
        "Usage with tree data\n\nAs with row grouping, you can display the aggregated values either in the footer or in the grouping row.\n\n:::info\nIf the aggregated value is displayed in the grouping row, it always has priority over the row data.\n\nThis means that the data from groups explicitly provided in the dataset are ignored in favor of their aggregated values.\n:::\n\nThe demo below shows the **SUM** aggregation on the **Size** column and the **MAX** aggregation on the **Last modification** column:"
      ],
      "code_path": [
        "AggregationTreeData.js"
      ],
      "children": []
    },
    {
      "name": "Filtering",
      "introduction": [
        "Filtering\n\nBy default, aggregation only uses the filtered rows.\nTo use all rows, set the `aggregationRowsScope` to `\"all\"`.\n\nIn the example below, the movie _Avatar_ doesn't pass the filters but is still used for the **MAX** aggregation of the **Gross** column:"
      ],
      "code_path": [
        "AggregationFiltering.js"
      ],
      "children": []
    },
    {
      "name": "Aggregation functions",
      "introduction": [
        "Aggregation functions"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic structure",
          "introduction": [
            "Basic structure\n\nAn aggregation function is an object describing how to combine a given set of values.\n\n```ts\nconst minAgg: GridAggregationFunction<number | Date> = {\n  // Aggregates the `values` into a single value.\n  apply: ({ values }) => Math.min(...values.filter((value) => value != null)),\n  // This aggregation function is only compatible with numerical values.\n  columnTypes: ['number'],\n};\n```\n\nYou can find full typing details on the [GridAggregationFunction API page](/x/api/data-grid/grid-aggregation-function/)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Built-in functions",
          "introduction": [
            "Built-in functions\n\nThe `@mui/x-data-grid-premium` package comes with a set of built-in aggregation functions to cover the basic use cases:\n\n| Name   | Behavior                                                   | Supported column types       |\n| : | :--- |\n| `sum`  | Returns the sum of all values in the group                 | `number`                     |\n| `avg`  | Returns the non-rounded average of all values in the group | `number`                     |\n| `min`  | Returns the smallest value of the group                    | `number`, `date`, `dateTime` |\n| `max`  | Returns the largest value of the group                     | `number`, `date`, `dateTime` |\n| `size` | Returns the number of cells in the group                   | all                          |"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Remove a built-in function",
          "introduction": [
            "Remove a built-in function"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "For all columns",
              "introduction": [
                "For all columns\n\nTo remove specific aggregation functions from all columns, pass a filtered object to the `aggregationFunctions` prop.\nIn the example below, the **SUM** function has been removed:"
              ],
              "code_path": [
                "AggregationRemoveFunctionAllColumns.js"
              ],
              "children": []
            },
            {
              "name": "For one column",
              "introduction": [
                "For one column\n\nTo limit the aggregation options in a given column, pass the `availableAggregationFunctions` property to the column definition.\n\nThis lets you specify which options will be available, as shown below:\n\n```ts\nconst column = {\n  field: 'year',\n  type: 'number',\n  availableAggregationFunctions: ['max', 'min'],\n};\n```\n\nIn the example below, you can aggregate the **Year** column using the **MAX** and **MIN** functions, whereas all functions are available for the **Gross** column:"
              ],
              "code_path": [
                "AggregationRemoveFunctionOneColumn.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Create custom functions",
          "introduction": [
            "Create custom functions\n\nPass custom aggregation functions to the `aggregationFunctions` prop.\n\nAn aggregation function is an object with the following shape:\n\n```ts\nconst firstAlphabeticalAggregation: GridAggregationFunction<string, string | null> =\n  {\n    // The `apply` method takes the values to aggregate and returns the aggregated value\n    apply: (params) => {\n      if (params.values.length === 0) {\n        return null;\n      }\n\n      const sortedValue = params.values.sort((a = '', b = '') => a.localeCompare(b));\n\n      return sortedValue[0];\n    },\n    // The `label` property defines the label displayed in the column header when this aggregation is being used.\n    label: 'firstAlphabetical',\n    // The `types` property defines which type of columns can use this aggregation function.\n    // Here, we only want to propose this aggregation function for `string` columns.\n    // If not defined, aggregation will be available for all column types.\n    columnTypes: ['string'],\n  };\n```\n\nIn the example below, the Data Grid has two additional custom aggregation functions for `string` columns: `firstAlphabetical` and `lastAlphabetical`:"
          ],
          "code_path": [
            "AggregationCustomFunction.js"
          ],
          "children": []
        },
        {
          "name": "Aggregating data from multiple row fields",
          "introduction": [
            "Aggregating data from multiple row fields\n\nBy default, the `apply` method of the aggregation function receives an array of values that represent a single field value of each row.\nFor example, the `sum` aggregation function receives the values of the `gross` field.\n\nIn the example below, the values in the `profit` column are derived from the `gross` and `budget` fields of the row:\n\n```tsx\n{\n  field: 'profit',\n  type: 'number',\n  valueGetter: (value, row) => {\n    if (!row.gross || !row.budget) {\n      return null;\n    }\n    return (row.gross - row.budget) / row.budget;\n  }\n}\n```\n\nTo aggregate the `profit` column, you have to calculate the sum of the `gross` and `budget` fields separately, and then use the formula from the example above to calculate the aggregated `profit` value.\n\nTo do so, use the `getCellValue` callback on the aggregation function to transform the data that are being passed to the `apply` method:\n\n```tsx\nconst profit: GridAggregationFunction<{ gross: number; budget: number }, number> = {\n  label: 'profit',\n  getCellValue: ({ row }) => ({ budget: row.budget, gross: row.gross }),\n  apply: ({ values }) => {\n    let budget = 0;\n    let gross = 0;\n    values.forEach((value) => {\n      if (value) {\n        gross += value.gross;\n        budget += value.budget;\n      }\n    });\n    return (gross - budget) / budget;\n  },\n  columnTypes: ['number'],\n};\n```"
          ],
          "code_path": [
            "AggregationMultipleRowFields.js"
          ],
          "children": []
        },
        {
          "name": "Custom value formatter",
          "introduction": [
            "Custom value formatter\n\nBy default, the aggregated cell uses the value formatter of its column.\nBut for some columns, the format of the aggregated value may need to differ from the format of the other cell values.\n\nProvide a `valueFormatter` method to the aggregation function to override the column's default formatting:\n\n```ts\nconst aggregationFunction: GridAggregationFunction = {\n  apply: () => {\n    /* */\n  },\n  valueFormatter: (params) => {\n    /* format the aggregated value */\n  },\n};\n```"
          ],
          "code_path": [
            "AggregationValueFormatter.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Custom rendering",
      "introduction": [
        "Custom rendering\n\nIf the column used to display aggregation has a `renderCell` property, the aggregated cell calls it with a `params.aggregation` object to let you decide how you want to render it.\n\nThis object contains a `hasCellUnit` which lets you know if the current aggregation has the same unit as the rest of the column's data—for instance, if the column is in `$`, is the aggregated value is also in `$`?\n\nIn the example below, you can see that all the aggregation functions are rendered with the rating UI aside from `size`, because it's not a valid rating:"
      ],
      "code_path": [
        "AggregationRenderCell.js"
      ],
      "children": []
    },
    {
      "name": "Selectors",
      "introduction": [
        "Selectors\n\n{{\"component\": \"modules/components/SelectorsDocs.js\", \"category\": \"Aggregation\"}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)\n- [GridAggregationFunction](/x/api/data-grid/grid-aggregation-function/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}