{
  "name": "data-grid->events",
  "introduction": [
    "# Data Grid - Events\n\n<p class=\"description\">Subscribe to the events emitted by the Data Grid to trigger custom behavior.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Subscribing to events",
      "introduction": [
        "Subscribing to events\n\nYou can subscribe to one of the [events emitted](/x/react-data-grid/events/#catalog-of-events) by providing an event handler to the Data Grid.\n\nThe handler is a method that's called with three arguments:\n\n1. the parameters containing the information related to the event\n2. the `MuiEvent` containing the DOM event or the React synthetic event, when available\n3. the `GridCallbackDetails` containing the `GridApi`—only if Data Grid Pro or Data Grid Premium is being used\n\nFor example, here is an event handler for the `rowClick` event:\n\n```tsx\nconst handleEvent: GridEventListener<'rowClick'> = (\n  params, // GridRowParams\n  event, // MuiEvent<React.MouseEvent<HTMLElement>>\n  details, // GridCallbackDetails\n) => {\n  setMessage(`Movie \"${params.row.title}\" clicked`);\n};\n```\n\nYou can provide this event handler to the Data Grid in several ways:"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "With the prop of the event",
          "introduction": [
            "With the prop of the event\n\n```tsx\n<DataGrid onRowClick={handleEvent} {...other} />\n```\n\n:::info\nNot all events have a dedicated prop.\nCheck out the examples in the [Catalog of events](#catalog-of-events) below to determine if a given event has a dedicated prop.\n:::\n\nThe following demo shows how to subscribe to the `rowClick` event using the `onRowClick` prop—try it out by clicking on any row:"
          ],
          "code_path": [
            "SubscribeToEventsProp.js"
          ],
          "children": []
        },
        {
          "name": "With `useGridApiEventHandler`",
          "introduction": [
            "With `useGridApiEventHandler`\n\n```tsx\nuseGridApiEventHandler(apiRef, 'rowClick', handleEvent);\n```\n\n:::warning\nThis hook can only be used inside the scope of the Data Grid (that is inside component slots or cell renderers).\n:::\n\nThe following demo shows how to subscribe to the `rowClick` event using `useGridApiEventHandler`—try it out by clicking on any row:"
          ],
          "code_path": [
            "SubscribeToEventsHook.js"
          ],
          "children": []
        },
        {
          "name": "With `apiRef.current.subscribeEvent`",
          "introduction": [
            "With `apiRef.current.subscribeEvent`\n\n```tsx\napiRef.current.subscribeEvent('rowClick', handleEvent);\n```\n\nThe following demo shows how to subscribe to the `rowClick` event using `apiRef.current.subscribeEvent`—try it out by clicking on any row:",
            ":::warning\nThe `apiRef.current.subscribeEvent` method returns a cleaning callback that unsubscribes the given handler when called.\nFor instance, when used inside a `useEffect` hook, you should always return the cleaning callback.\nOtherwise, you will have multiple registrations of the same event handler.\n:::"
          ],
          "code_path": [
            "SubscribeToEventsApiRef.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Disabling the default behavior",
      "introduction": [
        "Disabling the default behavior\n\nDepending on the use case, it might be necessary to disable the default action taken by an event.\nThe `MuiEvent` passed to the event handler has a `defaultMuiPrevented` property to control when the default behavior can be executed or not.\nSet it to `true` to block the default handling of an event and implement your own.\n\n```tsx\n<DataGrid\n  onCellClick={(params: GridCellParams, event: MuiEvent<React.MouseEvent>) => {\n    event.defaultMuiPrevented = true;\n  }}\n/>\n```\n\nUsually, double-clicking a cell will put it into [edit mode](/x/react-data-grid/editing/).\nThe following example changes this behavior by also requiring the end user to press the <kbd class=\"key\">Ctrl</kbd> key:"
      ],
      "code_path": [
        "DoubleClickWithCtrlToEdit.js"
      ],
      "children": []
    },
    {
      "name": "Catalog of events",
      "introduction": [
        "Catalog of events\n\nExpand the rows to see how to use each event."
      ],
      "code_path": [
        "CatalogOfEventsNoSnap.js"
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}