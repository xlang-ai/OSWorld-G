{
  "name": "column-pinning",
  "introduction": [
    "# Data Grid - Column pinning [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Pin columns to keep them visible at all time.</p>\n\nPinned (or frozen, locked, or sticky) columns are columns that are visible at all time while the user scrolls the Data Grid horizontally.\nThey can be pinned either to the left or right side and cannot be reordered.\n\nTo pin a column, there are a few ways:\n\n- Using the `initialState` prop\n- [Controlling](#controlling-the-pinned-columns) the `pinnedColumns` and `onPinnedColumnsChange` props\n- Dedicated buttons in the column menu\n- Accessing the [imperative](#apiref) API"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Initializing the pinned columns",
      "introduction": [
        "Initializing the pinned columns\n\nTo set pinned columns via `initialState`, pass an object with the following shape to this prop:\n\n```ts\ninterface GridPinnedColumnFields {\n  left?: string[]; // Optional field names to pin to the left\n  right?: string[]; // Optional field names to pin to the right\n}\n```\n\nThe following demos illustrates how this approach works:",
        ":::info\nThe column pinning feature can be completely disabled with `disableColumnPinning`.\n\n```tsx\n<DataGridPro disableColumnPinning />\n```\n\n:::\n\n:::warning\nYou may encounter issues if the sum of the widths of the pinned columns is larger than the width of the Grid.\nMake sure that the Data Grid can properly accommodate these columns at a minimum.\n:::"
      ],
      "code_path": [
        "BasicColumnPinning.js",
        null
      ],
      "children": []
    },
    {
      "name": "Controlling the pinned columns",
      "introduction": [
        "Controlling the pinned columns\n\nWhile the `initialState` prop only works for setting pinned columns during the initialization, the `pinnedColumns` prop allows you to modify which columns are pinned at any time.\nThe value passed to it follows the same shape from the previous approach.\nUse it together with `onPinnedColumnsChange` to know when a column is pinned or unpinned."
      ],
      "code_path": [
        "ControlPinnedColumns.js"
      ],
      "children": []
    },
    {
      "name": "Disable column pinning",
      "introduction": [
        "Disable column pinning"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "For all columns",
          "introduction": [
            "For all columns\n\nColumn pinning is enabled by default, but you can easily disable this feature by setting the `disableColumnPinning` prop.\n\n```tsx\n<DataGridPro disableColumnPinning />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "For some columns",
          "introduction": [
            "For some columns\n\nTo disable the pinning of a single column, set the `pinnable` property in `GridColDef` to `false`.\n\n```tsx\n<DataGridPro columns={[{ field: 'id', pinnable: false }]} /> // Default is `true`.\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Pin non-pinnable columns programmatically",
          "introduction": [
            "Pin non-pinnable columns programmatically\n\nIt may be desirable to allow one or more columns to be pinned or unpinned programmatically that cannot be pinned or unpinned on the UI (that is columns for which prop `disableColumnPinning = true` or `colDef.pinnable = false`).\nThis can be done in one of the following ways.\n\n- (A) Initializing the pinned columns\n- (B) Controlling the pinned columns\n- (C) Using the API method `setPinnedColumns` to set the pinned columns\n\n```tsx\n// (A) Initializing the pinning\n<DataGridPro\n  disableColumnPinning\n  initialState={{ pinnedColumns: { left: ['name'] } }}\n/>\n\n// (B) Controlling the pinned columns\n<DataGridPro\n  disableColumnPinning\n  pinnedColumns={{ left: ['name'] }}\n/>\n\n// (C) Using the API method `setPinnedColumns` to set the pinned columns\n<React.Fragment>\n  <DataGridPro disableColumnPinning />\n  <Button onClick={() => apiRef.current.setPinnedColumns({ left: ['name'] })}>\n    Pin name column\n  </Button>\n</React.Fragment>\n```\n\nThe following demo uses method (A) to initialize the state of the pinned columns which pins a column `name` although the pinning feature is disabled.",
            ":::info\nAnother alternate option to disable pinning actions on the UI is to disable the pinning options in the column menu in one of the following ways.\n\n1. Use [`disableColumnMenu` prop](/x/react-data-grid/column-menu/#disable-column-menu) to completely disable the column menu.\n2. Use column menu API to hide the pinning options in the column menu. See [Column Menu - Hiding a menu item](/x/react-data-grid/column-menu/#hiding-a-menu-item) for more details.\n\n:::"
          ],
          "code_path": [
            "DisableColumnPinningButtons.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Pinning the checkbox selection column",
      "introduction": [
        "Pinning the checkbox selection column\n\nTo pin the checkbox column added when using `checkboxSelection`, add `GRID_CHECKBOX_SELECTION_COL_DEF.field` to the list of pinned columns."
      ],
      "code_path": [
        "ColumnPinningWithCheckboxSelection.js"
      ],
      "children": []
    },
    {
      "name": "Usage with dynamic row height",
      "introduction": [
        "Usage with dynamic row height\n\nYou can have both pinned columns and [dynamic row height](/x/react-data-grid/row-height/#dynamic-row-height) enabled at the same time.\nHowever, if the rows change their content after the initial calculation, you may need to trigger a manual recalculation to avoid incorrect measurements.\nYou can do this by calling `apiRef.current.resetRowHeights()` every time that the content changes.\n\nThe demo below contains an example of both features enabled:"
      ],
      "code_path": [
        "ColumnPinningDynamicRowHeight.js"
      ],
      "children": []
    },
    {
      "name": "apiRef",
      "introduction": [
        "apiRef\n\nThe grid exposes a set of methods that enables all of these features using the imperative `apiRef`. To know more about how to use it, check the [API Object](/x/react-data-grid/api-object/) section."
      ],
      "code_path": [
        "ColumnPinningApiNoSnap.js"
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}