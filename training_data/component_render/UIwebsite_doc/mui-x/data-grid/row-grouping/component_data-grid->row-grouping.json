{
  "name": "data-grid->row-grouping",
  "introduction": [
    "# Data Grid - Row grouping [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\n<p class=\"description\">Group your rows according to some column values.</p>\n\nFor when you need to group rows based on repeated column values, and/or custom functions.\nIn the following example, movies are grouped based on their production `company`:",
    ":::info\nIf you are looking for row grouping on the server-side, see [server-side row grouping](/x/react-data-grid/server-side-data/row-grouping/).\n:::"
  ],
  "code_path": [
    "RowGroupingBasicExample.js",
    null
  ],
  "children": [
    {
      "name": "Grouping criteria",
      "introduction": [
        "Grouping criteria"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Initialize the row grouping",
          "introduction": [
            "Initialize the row grouping\n\nThe easiest way to get started with the feature is to provide its model to the `initialState` prop:\n\n```ts\n<DataGridPremium\n  initialState={{\n    rowGrouping: {\n      model: ['company', 'director'],\n    },\n  }}\n/>\n```\n\nThe basic parameters are the columns you want to check for repeating values.\nThis example groups all the movies matching the same company name, followed by a second group matching the director's name."
          ],
          "code_path": [
            "RowGroupingInitialState.js"
          ],
          "children": []
        },
        {
          "name": "Controlled row grouping",
          "introduction": [
            "Controlled row grouping\n\nIf you need to control the state of the criteria used for grouping, use the `rowGroupingModel` prop.\nYou can use the `onRowGroupingModelChange` prop to listen to changes to the grouping criteria and update the prop accordingly."
          ],
          "code_path": [
            "RowGroupingControlled.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Grouping columns",
      "introduction": [
        "Grouping columns"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Single grouping column",
          "introduction": [
            "Single grouping column\n\nBy default, the Data Grid will display a single column holding all grouping columns.\nIf you have multiple grouping criteria, this column name will be set to \"Group.\""
          ],
          "code_path": [
            "RowGroupingSingleGroupingCol.js"
          ],
          "children": []
        },
        {
          "name": "Multiple grouping columns",
          "introduction": [
            "Multiple grouping columns\n\nTo display a column for each grouping criterion, set the `rowGroupingColumnMode` prop to `multiple`."
          ],
          "code_path": [
            "RowGroupingMultipleGroupingCol.js"
          ],
          "children": []
        },
        {
          "name": "Custom grouping column",
          "introduction": [
            "Custom grouping column\n\nTo customize the rendering of the grouping column, use the `groupingColDef` prop.\nYou can override the **headerName** or any property of the `GridColDef` interface, except the `field`, the `type`, and the properties related to inline edition.",
            "By default, when using the object format, the properties will be applied to all Grouping columns. This means that if you have `rowGroupingColumnMode` set to `multiple`, all the columns will share the same `groupingColDef` properties.\n\nIf you wish to override properties of specific grouping columns or to apply different overrides based on the current grouping criteria, you can pass a callback function to `groupingColDef`, instead of an object with its config.\nThe callback is called for each grouping column, and it receives the respective column's \"fields\" as parameter."
          ],
          "code_path": [
            "RowGroupingCustomGroupingColDefObject.js",
            "RowGroupingCustomGroupingColDefCallback.js"
          ],
          "children": []
        },
        {
          "name": "Grouping rows with custom cell renderer",
          "introduction": [
            "Grouping rows with custom cell renderer\n\nBy default, when rows are grouped by a column with a custom cell component (`GridColDef['renderCell']`), the same custom cell component is used in the grouping column.",
            "You can opt out of this default behavior by returning `params.value` in `renderCell` for grouping rows instead:\n\n```tsx\nconst ratingColDef: GridColDef = {\n  // ...\n  renderCell: (params) => {\n    if (params.rowNode.type === 'group') {\n      return params.value;\n    }\n\n    return (\n      // ...\n    );\n  },\n};\n```"
          ],
          "code_path": [
            "RowGroupingCustomCell.js",
            "RowGroupingCustomCellDefault.js"
          ],
          "children": []
        },
        {
          "name": "Show values for the leaves",
          "introduction": [
            "Show values for the leaves\n\nBy default, the grouped rows display no value on their grouping columns' cells. Those cells are called \"leaves.\"\n\nIf you want to display some value, you can provide a `leafField` property to the `groupingColDef`."
          ],
          "code_path": [
            "RowGroupingLeafWithValue.js"
          ],
          "children": []
        },
        {
          "name": "Hide the descendant count",
          "introduction": [
            "Hide the descendant count\n\nUse the `hideDescendantCount` property of the `groupingColDef` to hide the number of descendants of a grouping row."
          ],
          "code_path": [
            "RowGroupingHideDescendantCount.js"
          ],
          "children": []
        },
        {
          "name": "Hide the grouped columns",
          "introduction": [
            "Hide the grouped columns\n\nBy default, the columns used to group the rows remains visible.\nFor instance if you group by `\"director\"`, you have two columns titled **Director**:\n\n- The grouped column (the column from which you grouped the rows)\n- The grouping column on which you can toggle the groups\n\nTo automatically hide the grouped columns, use the `useKeepGroupedColumnsHidden` utility hook.\nThe hook automatically hides the columns when added to the model, and displays them when removed from it.\n\n:::warning\nThis hook is not compatible with the deprecated column property `hide`.\n\nYou can manage column visibility with `columnVisibilityModel`, `initialState`, or both together.\nTo do so, pass them to the hook parameters.\n:::\n\nBelow are two examples about how to use `columnVisibilityModel` or `initialState` with `useKeepGroupedColumnsHidden` hook.\nYou can mix the two examples to support both at the same time.\n\n```tsx\n// Usage with the initial state\nconst apiRef = useGridApiRef();\n\nconst initialState = useKeepGroupedColumnsHidden({\n  apiRef,\n  initialState: {\n    rowGrouping: {\n      model: ['company'],\n    },\n    columns: {\n      // Other hidden columns\n      columnVisibilityModel: { gross: false },\n    },\n  },\n});\n\nreturn <DataGridPremium {...data} apiRef={apiRef} initialState={initialState} />;\n```\n\n```tsx\n// Usage with the controlled model\nconst apiRef = useGridApiRef();\n\nconst [rowGroupingModel, setRowGroupingModel] = React.useState([\n  'company',\n  'director',\n]);\n\nconst initialState = useKeepGroupedColumnsHidden({\n  apiRef,\n  rowGroupingModel,\n});\n\nreturn (\n  <DataGridPremium\n    {...data}\n    apiRef={apiRef}\n    initialState={initialState}\n    rowGroupingModel={rowGroupingModel}\n  />\n);\n```"
          ],
          "code_path": [
            "RowGroupingUseKeepGroupedColumnsHidden.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Disable the row grouping",
      "introduction": [
        "Disable the row grouping"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "For all columns",
          "introduction": [
            "For all columns\n\nYou can disable row grouping by setting the `disableRowGrouping` prop to true.\n\nIt will disable all the features related to the row grouping, even if a model is provided."
          ],
          "code_path": [
            "RowGroupingDisabled.js"
          ],
          "children": []
        },
        {
          "name": "For some columns",
          "introduction": [
            "For some columns\n\nIn case you need to disable grouping on specific column(s), set the `groupable` property on the respective column definition (`GridColDef`) to `false`.\nIn the example below, the `director` column cannot be grouped. In all examples, the `title` and `gross` columns cannot be grouped."
          ],
          "code_path": [
            "RowGroupingColDefCanBeGrouped.js"
          ],
          "children": []
        },
        {
          "name": "Grouping non-groupable columns programmatically",
          "introduction": [
            "Grouping non-groupable columns programmatically\n\nTo apply row grouping programmatically on non-groupable columns (columns with `groupable: false` in the [column definition](/x/api/data-grid/grid-col-def/)), you can provide row grouping model in one of the following ways:\n\n1. Pass `rowGrouping.model` to the `initialState` prop. This will [initialize the grouping](/x/react-data-grid/row-grouping/#initialize-the-row-grouping) with the provided model.\n2. Provide the `rowGroupingModel` prop. This will [control the grouping](/x/react-data-grid/row-grouping/#controlled-row-grouping) with the provided model.\n3. Call the API method `setRowGroupingModel`. This will set the aggregation with the provided model.\n\nIn the following example, the column `company` is not groupable from the UI but the `rowGroupingModel` prop is passed to generate a read-only row group."
          ],
          "code_path": [
            "RowGroupingReadOnly.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Using `groupingValueGetter` for complex grouping value",
      "introduction": [
        "Using `groupingValueGetter` for complex grouping value\n\nThe grouping value has to be either a `string`, a `number`, `null`, or `undefined`.\nIf your cell value is more complex, pass a `groupingValueGetter` property to the column definition to convert it into a valid value.\n\n```ts\nconst columns: GridColDef[] = [\n  {\n    field: 'composer',\n    groupingValueGetter: (value) => value.name,\n  },\n  // ...\n];\n```",
        ":::info\nIf your column also has a `valueGetter` property, the value passed to the `groupingValueGetter` method will still be the row value from the `row[field]`.\n:::"
      ],
      "code_path": [
        "RowGroupingGroupingValueGetter.js",
        null
      ],
      "children": []
    },
    {
      "name": "Rows with missing groups",
      "introduction": [
        "Rows with missing groups\n\nIf the grouping key of a grouping criteria is `null` or `undefined` for a row, the Data Grid will consider that this row does not have a value for this group. and will inline it for those groups."
      ],
      "code_path": [
        "RowGroupingRowsWithMissingGroups.js"
      ],
      "children": []
    },
    {
      "name": "Group expansion",
      "introduction": [
        "Group expansion\n\nBy default, all groups are initially displayed collapsed. You can change this behavior by setting the `defaultGroupingExpansionDepth` prop to expand all the groups up to a given depth when loading the data.\nIf you want to expand the whole tree, set `defaultGroupingExpansionDepth = -1`",
        "If you want to expand groups by default according to a more complex logic, use the `isGroupExpandedByDefault` prop which is a callback receiving the node as an argument.\nWhen defined, this callback will always have priority over the `defaultGroupingExpansionDepth` prop.\n\n```tsx\nisGroupExpandedByDefault={\n  node => node.groupingField === 'company' && node.groupingKey === '20th Century Fox'\n}\n```",
        "Use the `setRowChildrenExpansion` method on `apiRef` to programmatically set the expansion of a row. Changing the expansion of a row emits a `rowExpansionChange` event, listen to it to react to the expansion change.",
        ":::warning\nThe `apiRef.current.setRowChildrenExpansion` method is not compatible with the [server-side tree data](/x/react-data-grid/server-side-data/tree-data/) and [server-side row grouping](/x/react-data-grid/server-side-data/row-grouping/). Use `apiRef.current.unstable_dataSource.fetchRows` instead.\n:::"
      ],
      "code_path": [
        "RowGroupingDefaultExpansionDepth.js",
        "RowGroupingIsGroupExpandedByDefault.js",
        "RowGroupingSetChildrenExpansion.js",
        null
      ],
      "children": [
        {
          "name": "Customize grouping cell indent",
          "introduction": [
            "Customize grouping cell indent\n\nTo change the default cell indent, you can use the `--DataGrid-cellOffsetMultiplier` CSS variable:\n\n```tsx\n<DataGridPremium\n  sx={{\n    // default value is 2\n    '--DataGrid-cellOffsetMultiplier': 6,\n  }}\n/>\n```"
          ],
          "code_path": [
            "RowGroupingCustomCellIndent.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Sorting / Filtering",
      "introduction": [
        "Sorting / Filtering"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Single grouping column",
          "introduction": [
            "Single grouping column\n\nWhen using `rowGroupingColumnMode = \"single\"`, the default behavior is to:\n\n- sort each grouping criteria using the `sortComparator` of the column\n- apply the `filterOperators` of the top-level grouping criteria\n\nIf you are rendering leaves with the `leafField` property of `groupingColDef`, the sorting and filtering will be applied on the leaves based on the `sortComparator` and `filterOperators` of their original column.\n\nYou can force the filtering to be applied on another grouping criteria with the `mainGroupingCriteria` property of `groupingColDef`"
          ],
          "code_path": [
            "RowGroupingFilteringSingleGroupingColDef.js"
          ],
          "children": []
        },
        {
          "name": "Multiple grouping columns",
          "introduction": [
            "Multiple grouping columns\n\nWhen using `rowGroupingColumnMode = \"multiple\"`, the default behavior is to apply the `sortComparator` and `filterOperators` of the grouping criteria of each grouping column.\n\nIf you are rendering leaves on one of those columns with the `leafField` property of `groupingColDef`, the sorting and filtering will be applied on the leaves for this grouping column based on the `sortComparator` and `filterOperators` of the leave's original column.\n\nIf you want to render leaves but apply the sorting and filtering on the grouping criteria of the column, you can force it by setting the `mainGroupingCriteria` property `groupingColDef` to be equal to the grouping criteria.\n\nIn the example below:\n\n- the sorting and filtering of the `company` grouping column is applied on the `company` field\n- the sorting and filtering of the `director` grouping column is applied on the `director` field even though it has leaves",
            ":::warning\nIf you are dynamically switching the `leafField` or `mainGroupingCriteria`, the sorting and filtering models will not be cleaned up automatically, and the sorting/filtering will not be re-applied.\n:::"
          ],
          "code_path": [
            "RowGroupingSortingMultipleGroupingColDef.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Automatic parents and children selection",
      "introduction": [
        "Automatic parents and children selection\n\nBy default, selecting a parent row selects all its descendants automatically.\nYou can customize this behavior by using the `rowSelectionPropagation` prop.\n\nHere's how it's structured:\n\n```ts\ntype GridRowSelectionPropagation = {\n  descendants?: boolean; // default: true\n  parents?: boolean; // default: true\n};\n```\n\nWhen `rowSelectionPropagation.descendants` is set to `true`.\n\n- Selecting a parent selects all its filtered descendants automatically.\n- Deselecting a parent row deselects all its filtered descendants automatically.\n\nWhen `rowSelectionPropagation.parents` is set to `true`.\n\n- Selecting all the filtered descendants of a parent selects the parent automatically.\n- Deselecting a descendant of a selected parent deselects the parent automatically.\n\nThe example below demonstrates the usage of the `rowSelectionPropagation` prop.",
        ":::info\nThe row selection propagation also affects the \"Select all\" checkbox like any other group checkbox.\n:::\n\n:::info\nThe selected rows that do not pass the filtering criteria are automatically deselected when the filter is applied. Row selection propagation is not applied to the unfiltered rows.\n:::\n\n:::warning\nIf `props.disableMultipleRowSelection` is set to `true`, the row selection propagation doesn't apply.\n:::\n\n:::warning\nRow selection propagation is a client-side feature and is not supported with the [server-side data source](/x/react-data-grid/server-side-data/).\n:::"
      ],
      "code_path": [
        "RowGroupingPropagateSelection.js",
        null
      ],
      "children": []
    },
    {
      "name": "Get the rows in a group",
      "introduction": [
        "Get the rows in a group\n\nYou can use the `apiRef.current.getRowGroupChildren` method to get the id of all rows contained in a group.\nIt will not contain the autogenerated rows (that is the subgroup rows or the aggregation footers).\n\n```ts\nconst rows: GridRowId[] = apiRef.current.getRowGroupChildren({\n  groupId: params.id,\n\n  // If true, the rows will be in the order displayed on screen\n  applySorting: true,\n\n  // If true, only the rows matching the current filters will be returned\n  applyFiltering: true,\n});\n```\n\nIf you want to get the row ids of a group given its grouping criteria, use `getGroupRowIdFromPath`\n\n```ts\nconst rows = apiRef.current.getRowGroupChildren({\n  groupId: getGroupRowIdFromPath([{ field: 'company', key: 'Disney Studios' }]),\n});\n```",
        ":::warning\nThe `apiRef.current.getRowGroupChildren` method is not compatible with the [server-side row grouping](/x/react-data-grid/server-side-data/row-grouping/) since all the rows might not be available to get at a given instance.\n:::"
      ],
      "code_path": [
        "RowGroupingGetRowGroupChildren.js",
        null
      ],
      "children": []
    },
    {
      "name": "Row group panel 🚧",
      "introduction": [
        "Row group panel 🚧\n\n:::warning\nThis feature isn't implemented yet. It's coming.\n\n👍 Upvote [issue #5235](https://github.com/mui/mui-x/issues/5235) if you want to see it land faster.\n\nDon't hesitate to leave a comment on the same issue to influence what gets built. Especially if you already have a use case for this component, or if you are facing a pain point with your current solution.\n:::\n\nWith this panel, your users will be able to control which columns are used for grouping just by dragging them inside the panel."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Full example",
      "introduction": [
        "Full example"
      ],
      "code_path": [
        "RowGroupingFullExample.js"
      ],
      "children": []
    },
    {
      "name": "Advanced use cases",
      "introduction": [
        "Advanced use cases\n\nSee [Row grouping recipes](/x/react-data-grid/recipes-row-grouping/) for more advanced use cases."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "apiRef",
      "introduction": [
        "apiRef\n\nThe grid exposes a set of methods that enables all of these features using the imperative `apiRef`. To know more about how to use it, check the [API Object](/x/react-data-grid/api-object/) section."
      ],
      "code_path": [
        "RowGroupingApiNoSnap.js"
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}