{
  "name": "data-grid->virtualization",
  "introduction": [
    "# Data Grid - Virtualization\n\n<p class=\"description\">The grid is high performing thanks to its rows and columns virtualization engine.</p>\n\nDOM virtualization is the feature that allows the Data Grid to handle an unlimited\\* number of rows and columns.\nThis is a built-in feature of the rendering engine and greatly improves rendering performance.\n\n_\\*unlimited: Browsers set a limit on the number of pixels a scroll container can host: 17.5 million pixels on Firefox, 33.5 million pixels on Chrome, Edge, and Safari. A [reproduction](https://codesandbox.io/s/beautiful-silence-1yifo?file=/src/App.js)._"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Row virtualization [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')",
      "introduction": [
        "Row virtualization [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\nRow virtualization is the insertion and removal of rows as the Data Grid scrolls vertically.\n\nThe grid renders some additional rows above and below the visible rows. You can use `rowBufferPx` prop to hint to the Data Grid the area to render, but this value may not be respected in certain situations, for example during high-speed scrolling.\nRow virtualization is limited to 100 rows in the Data Grid component.\n\n:::warning\nRow virtualization does not work with the `autoHeight` prop enabled.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Column virtualization",
      "introduction": [
        "Column virtualization\n\nColumn virtualization is the insertion and removal of columns as the Data Grid scrolls horizontally.\n\n- Overscanning by at least one column allows the arrow key to focus on the next (not yet visible) item.\n- Overscanning slightly can reduce or prevent a flash of empty space when a user first starts scrolling.\n- Overscanning more allows the built-in search feature of the browser to find more matching cells.\n- Overscanning too much can negatively impact performance.\n\nBy default, columns coming under 150 pixels region are rendered outside of the viewport. You can change this option with the `columnBufferPx` prop. As for `rowBufferPx`, the value may be ignored in some situations. The following demo renders 1,000 columns in total:",
        "You can disable column virtualization by calling `apiRef.current.unstable_setColumnVirtualization(false)`, or by setting the [`columnBufferPx`](/x/api/data-grid/data-grid/#data-grid-prop-columnBufferPx) to a high value.\n\n:::info\nColumn virtualization is disabled when dynamic row height is enabled.\nSee [dynamic row height and column virtualization](/x/react-data-grid/row-height/#column-virtualization) to learn more.\n:::"
      ],
      "code_path": [
        "ColumnVirtualizationGrid.js",
        null
      ],
      "children": []
    },
    {
      "name": "Disable virtualization",
      "introduction": [
        "Disable virtualization\n\nThe virtualization can be disabled completely using the `disableVirtualization` prop.\nYou may want to turn it off to be able to test the Data Grid with a headless browser, like jsdom.\n\n```tsx\n<DataGrid {...data} disableVirtualization />\n```\n\n:::warning\nDisabling the virtualization will increase the size of the DOM and drastically reduce the performance.\nUse it only for testing purposes or on small datasets.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}