{
  "name": "data-grid->api-object",
  "introduction": [
    "# Data Grid - API object\n\n<p class=\"description\">Interact with the Data Grid using its API.</p>\n\nThe API object is an interface containing the state and all the methods available to programmatically interact with the Data Grid.\n\nYou can find the list of all the API methods on the [GridApi page](/x/api/data-grid/grid-api/).\n\n:::warning\nAll methods prefixed by `unstable_` are related to experimental features and may be removed, renamed, or reworked at any time.\n:::"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "How to use the API object",
      "introduction": [
        "How to use the API object\n\nThe API object is accessible through the `apiRef` variable.\nTo access this variable, use `useGridApiContext` (inside the Data Grid) or `useGridApiRef` (outside the Data Grid)."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Inside the Data Grid",
          "introduction": [
            "Inside the Data Grid\n\nTo access the API object inside component slots or inside renders (for instance, `renderCell` or `renderHeader`), use the `useGridApiContext` hook:\n\n```tsx\nfunction CustomFooter() {\n  const apiRef = useGridApiContext();\n\n  return <Button onClick={() => apiRef.current.setPage(1)}>Go to page 1</Button>;\n}\n```\n\n:::info\nYou don't need to initialize the API object using `useGridApiRef` to be able to use it inside the Data Grid components.\n:::"
          ],
          "code_path": [
            "UseGridApiContext.js"
          ],
          "children": []
        },
        {
          "name": "Outside the Data Grid",
          "introduction": [
            "Outside the Data Grid\n\nWhen using the API object outside the Data Grid components, you need to initialize it using the `useGridApiRef` hook.\nYou can then pass it to the Data Grid's `apiRef` prop:\n\n```tsx\nfunction CustomDataGrid(props) {\n  const apiRef = useGridApiRef();\n\n  return (\n    <div>\n      <Button onClick={() => apiRef.current.setPage(1)}>Go to page 1</Button>\n      <DataGrid apiRef={apiRef} {...other} />\n    </div>\n  );\n}\n```\n\n:::warning\nThe API object is populated by the Data Grid's various plugins during the first render of the component.\nIf you try to use it in the first render of the component, it will crash because not all methods are registered yet.\n:::"
          ],
          "code_path": [
            "UseGridApiRef.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Common use cases",
      "introduction": [
        "Common use cases"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Access the disabled column features",
          "introduction": [
            "Access the disabled column features\n\nYou can control the disabled features of a column (for example hiding, sorting, filtering, pinning, grouping, etc) programmatically using `initialState`, controlled models, or the API object.\n\nIn the example below, API object is used to build a custom sorting for the _firstName_ column which is not sortable by the default grid UI (i.e `colDef.sortable` property is set to `false`).\n\n```tsx\nconst columns = [{ field: 'rating', sortable: false }, ...otherColumns];\n\nfunction CustomDataGrid(props) {\n  const apiRef = useGridApiRef();\n\n  return (\n    <div>\n      <Button onClick={() => apiRef.current.sortColumn('firstName', 'asc')}>\n        Sort by ASC\n      </Button>\n      <Button onClick={() => apiRef.current.sortColumn('firstName', 'desc')}>\n        Sort by DESC\n      </Button>\n      <Button onClick={() => apiRef.current.sortColumn('firstName', null)}>\n        Clear sort\n      </Button>\n      <DataGrid columns={columns} apiRef={apiRef} {...other} />\n    </div>\n  );\n}\n```"
          ],
          "code_path": [
            "AccessDisabledColumnFeatures.js"
          ],
          "children": []
        },
        {
          "name": "Retrieve data from the state",
          "introduction": [
            "Retrieve data from the state\n\nYou can find a detailed example on the [State page](/x/react-data-grid/state/#access-the-state)."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Listen to grid events",
          "introduction": [
            "Listen to grid events\n\nYou can find a detailed example on the [Events page](/x/react-data-grid/events/#subscribing-to-events)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [GridApi](/x/api/data-grid/grid-api/)\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}