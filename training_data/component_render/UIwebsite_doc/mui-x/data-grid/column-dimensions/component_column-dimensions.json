{
  "name": "column-dimensions",
  "introduction": [
    "# Data Grid - Column dimensions\n\n<p class=\"description\">Customize the dimensions and resizing behavior of your columns.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Column width",
      "introduction": [
        "Column width\n\nBy default, the columns have a width of 100px.\nThis is an arbitrary, easy-to-remember value.\nTo change the width of a column, use the `width` property available in `GridColDef`."
      ],
      "code_path": [
        "ColumnWidthGrid.js"
      ],
      "children": [
        {
          "name": "Minimum width",
          "introduction": [
            "Minimum width\n\nBy default, the columns have a minimum width of 50px.\nThis is an arbitrary, easy-to-remember value.\nTo change the minimum width of a column, use the `minWidth` property available in `GridColDef`."
          ],
          "code_path": [
            "ColumnMinWidthGrid.js"
          ],
          "children": []
        },
        {
          "name": "Fluid width",
          "introduction": [
            "Fluid width\n\nColumn fluidity or responsiveness can be achieved by setting the `flex` property in `GridColDef`.\n\nThe `flex` property accepts a value between 0 and âˆž.\nIt works by dividing the remaining space in the Data Grid among all flex columns in proportion to their `flex` value.\n\nFor example, consider a grid with a total width of 500px that has three columns: the first with `width: 200`; the second with `flex: 1`; and the third with `flex: 0.5`.\nThe first column will be 200px wide, leaving 300px remaining. The column with `flex: 1` is twice the size of `flex: 0.5`, which means that final sizes will be: 200px, 200px, 100px.\n\nTo set a minimum and maximum width for a `flex` column set the `minWidth` and the `maxWidth` property in `GridColDef`.\n\n:::warning\nBefore using fluid width, note that:\n\n- `flex` doesn't work together with `width`. If you set both `flex` and `width` in `GridColDef`, `flex` will override `width`.\n- `flex` doesn't work if the combined width of the columns that have `width` is more than the width of the Data Grid itself. If that is the case a scroll bar will be visible, and the columns that have `flex` will default back to their base value of 100px.\n\n:::"
          ],
          "code_path": [
            "ColumnFluidWidthGrid.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Resizing",
      "introduction": [
        "Resizing\n\nBy default, Data Grid allows all columns to be resized by dragging the right portion of the column separator.\n\nTo prevent the resizing of a column, set `resizable: false` in the `GridColDef`.\nAlternatively, to disable all columns resize, set the prop `disableColumnResize={true}`.\n\nTo restrict resizing a column under a certain width set the `minWidth` property in `GridColDef`.\n\nTo restrict resizing a column above a certain width set the `maxWidth` property in `GridColDef`.",
        "To capture changes in the width of a column there are two callbacks that are called:\n\n- `onColumnResize`: Called while a column is being resized.\n- `onColumnWidthChange`: Called after the width of a column is changed, but not during resizing."
      ],
      "code_path": [
        "ColumnSizingGrid.js",
        null
      ],
      "children": []
    },
    {
      "name": "Autosizing",
      "introduction": [
        "Autosizing\n\nData Grid allows to autosize the columns' dimensions based on their content. Autosizing is enabled by default. To turn it off, pass the `disableAutosize` prop to the Data Grid.\n\nAutosizing can be used by one of the following methods:\n\n- Adding the `autosizeOnMount` prop,\n- Double-clicking a column header separator on the grid,\n- Calling the `apiRef.current.autosizeColumns(options)` API method.\n\nYou can pass options directly to the API method when you call it. To configure autosize for the other two methods, provide the options in the `autosizeOptions` prop.\n\nNote that for the separator double-click method, the `autosizeOptions.columns` will be replaced by the respective column user double-clicked on.\n\nIn all the cases, the `colDef.minWidth` and `colDef.maxWidth` options will be respected.\n\n```tsx\n<DataGrid\n  {...otherProps}\n  autosizeOptions={{\n    columns: ['name', 'status', 'createdBy'],\n    includeOutliers: true,\n    includeHeaders: false,\n  }}\n/>\n```",
        ":::warning\nThe Data Grid can only autosize based on the currently rendered cells.\n\nDOM access is required to accurately calculate dimensions, so unmounted cells (when [virtualization](/x/react-data-grid/virtualization/) is on) cannot be sized. If you need a bigger row sample, [open an issue](https://github.com/mui/mui-x/issues) to discuss it further.\n:::"
      ],
      "code_path": [
        "ColumnAutosizing.js",
        null
      ],
      "children": [
        {
          "name": "Autosizing asynchronously",
          "introduction": [
            "Autosizing asynchronously\n\nThe `autosizeColumns` method from the `apiRef` can be used as well to adjust the column size on specified events, for example when receiving row data from the server.",
            ":::warning\nThis example uses `ReactDOM.flushSync`. If used incorrectly it can hurt the performance of your application. Please refer to the official [React docs](https://react.dev/reference/react-dom/flushSync) for further information.\n:::"
          ],
          "code_path": [
            "ColumnAutosizingAsync.js",
            null
          ],
          "children": []
        },
        {
          "name": "Autosizing with dynamic row height",
          "introduction": [
            "Autosizing with dynamic row height\n\nColumn autosizing is compatible with the [Dynamic row height](/x/react-data-grid/row-height/#dynamic-row-height) feature.",
            ":::warning\nWhen autosizing columns with long content, consider setting the `maxWidth` for the column to avoid it becoming too wide.\n:::"
          ],
          "code_path": [
            "ColumnAutosizingDynamicRowHeight.js",
            null
          ],
          "children": []
        },
        {
          "name": "Autosizing with grouped rows [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')",
          "introduction": [
            "Autosizing with grouped rows [<span class=\"plan-premium\"></span>](/x/introduction/licensing/#premium-plan 'Premium plan')\n\nWhen using [row grouping](/x/react-data-grid/row-grouping/) you can utilize the `autosizeColumns` method to adjust the column width of the expanded rows dynamically.\nThe demo below shows how you can subscribe to the `rowExpansionChange` event. The provided handler function then calls the `autosizeColumns` method from the gridApi."
          ],
          "code_path": [
            "ColumnAutosizingGroupedRows.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}