{
  "name": "data-grid->tree-data",
  "introduction": [
    "# Data Grid - Tree data [<span class=\"plan-pro\"></span>](/x/introduction/licensing/#pro-plan 'Pro plan')\n\n<p class=\"description\">Use Tree data to handle rows with parent / child relationship.</p>\n\nTo enable the Tree data, you simply have to use the `treeData` prop as well as provide a `getTreeDataPath` prop.\nThe `getTreeDataPath` function returns an array of strings which represents the path to a given row.\n\n```tsx\n// The following examples will both render the same tree\n// - Sarah\n//     - Thomas\n//         - Robert\n//         - Karen\n\nconst columns: GridColDef[] = [{ field: 'jobTitle', width: 250 }];\n\n// Without transformation\nconst rows: GridRowsProp = [\n  { path: ['Sarah'], jobTitle: 'CEO', id: 0 },\n  { path: ['Sarah', 'Thomas'], jobTitle: 'Head of Sales', id: 1 },\n  { path: ['Sarah', 'Thomas', 'Robert'], jobTitle: 'Sales Person', id: 2 },\n  { path: ['Sarah', 'Thomas', 'Karen'], jobTitle: 'Sales Person', id: 3 },\n];\n\nconst getTreeDataPath: DataGridProProps['getTreeDataPath'] = (row) => row.path;\n\n<DataGridPro\n  treeData\n  getTreeDataPath={getTreeDataPath}\n  rows={rows}\n  columns={columns}\n/>;\n\n// With transformation\nconst rows: GridRowsProp = [\n  { path: 'Sarah', jobTitle: 'CEO', id: 0 },\n  { path: 'Sarah/Thomas', jobTitle: 'Head of Sales', id: 1 },\n  { path: 'Sarah/Thomas/Robert', jobTitle: 'Sales Person', id: 2 },\n  { path: 'Sarah/Thomas/Karen', jobTitle: 'Sales Person', id: 3 },\n];\n\nconst getTreeDataPath: DataGridProProps['getTreeDataPath'] = (row) =>\n  row.path.split('/');\n\n<DataGridPro\n  treeData\n  getTreeDataPath={getTreeDataPath}\n  rows={rows}\n  columns={columns}\n/>;\n```\n\n:::warning\nThe `getTreeDataPath` prop should keep the same reference between two renders.\nIf it changes, the Data Grid will consider that the data has changed and will recompute the tree resulting in collapsing all the rows.\n:::"
  ],
  "code_path": [
    "TreeDataSimple.js"
  ],
  "children": [
    {
      "name": "Custom grouping column",
      "introduction": [
        "Custom grouping column\n\nSame behavior as for the [Row grouping](/x/react-data-grid/row-grouping/#grouping-columns) except for the `leafField` and `mainGroupingCriteria` which are not applicable for the Tree data."
      ],
      "code_path": [
        "TreeDataCustomGroupingColumn.js"
      ],
      "children": [
        {
          "name": "Accessing the grouping column field",
          "introduction": [
            "Accessing the grouping column field\n\nIf you want to access the grouping column field, for instance, to use it with column pinning, the `GRID_TREE_DATA_GROUPING_FIELD` constant is available.\n\n```tsx\n<DataGridPro\n  treeData\n  initialState={{\n    pinnedColumns: {\n      left: [GRID_TREE_DATA_GROUPING_FIELD],\n    },\n  }}\n  {...otherProps}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Group expansion",
      "introduction": [
        "Group expansion\n\nSame behavior as for the [Row grouping](/x/react-data-grid/row-grouping/#group-expansion)."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Automatic parents and children selection",
      "introduction": [
        "Automatic parents and children selection\n\nSame behavior as for the [Row grouping](/x/react-data-grid/row-grouping/#automatic-parents-and-children-selection)."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Gaps in the tree",
      "introduction": [
        "Gaps in the tree\n\nIf some entries are missing to build the full tree, the Data Grid Pro will automatically create rows to fill those gaps."
      ],
      "code_path": [
        "TreeDataWithGap.js"
      ],
      "children": []
    },
    {
      "name": "Filtering",
      "introduction": [
        "Filtering\n\nA node is included if one of the following criteria is met:\n\n- at least one of its descendants is passing the filters\n- it is passing the filters\n\nBy default, the filtering is applied to every depth of the tree.\nYou can limit the filtering to the top-level rows with the `disableChildrenFiltering` prop."
      ],
      "code_path": [
        "TreeDataDisableChildrenFiltering.js"
      ],
      "children": []
    },
    {
      "name": "Sorting",
      "introduction": [
        "Sorting\n\nBy default, the sorting is applied to every depth of the tree.\nYou can limit the sorting to the top-level rows with the `disableChildrenSorting` prop.",
        ":::warning\nIf you are using `sortingMode=\"server\"`, the children of a row must always immediately follow their parent.\nFor instance:\n\n```ts\n// ✅ The row A.A is immediately after its parent\nconst validRows = [{ path: ['A'] }, { path: ['A', 'A'] }, { path: ['B'] }];\n\n// ❌ The row A.A is not immediately after its parent\nconst invalidRows = [{ path: ['A'] }, { path: ['B'] }, { path: ['A', 'A'] }];\n```\n\n:::"
      ],
      "code_path": [
        "TreeDataDisableChildrenSorting.js",
        null
      ],
      "children": []
    },
    {
      "name": "Children lazy-loading",
      "introduction": [
        "Children lazy-loading\n\nCheck the [Server-side tree data](/x/react-data-grid/server-side-data/tree-data/) section for more information about lazy-loading tree data children."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Full example",
      "introduction": [
        "Full example"
      ],
      "code_path": [
        "TreeDataFullExample.js"
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API\n\n- [DataGrid](/x/api/data-grid/data-grid/)\n- [DataGridPro](/x/api/data-grid/data-grid-pro/)\n- [DataGridPremium](/x/api/data-grid/data-grid-premium/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}