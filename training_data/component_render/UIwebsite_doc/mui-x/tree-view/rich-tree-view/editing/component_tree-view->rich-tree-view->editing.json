{
  "name": "tree-view->rich-tree-view->editing",
  "introduction": [
    "# Rich Tree View - Label editing\n\n<p class=\"description\">Learn how to edit the label of Tree View items.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Enable label editing",
      "introduction": [
        "Enable label editing\n\nYou can use the `isItemEditable` prop to enable editing.\nIf set to `true`, this prop will enable label editing on all items:",
        ":::success\nIf an item is editable, the editing state can be toggled by double clicking on it, or by pressing <kbd class=\"key\">Enter</kbd> on the keyboard when the item is in focus.\n\nOnce an item is in editing state, the value of the label can be edited. Pressing <kbd class=\"key\">Enter</kbd> again or bluring the item will save the new value. Pressing <kbd class=\"key\">Esc</kbd> will cancel the action and restore the item to its original state.\n\n:::"
      ],
      "code_path": [
        "LabelEditingAllItems.js",
        null
      ],
      "children": []
    },
    {
      "name": "Limit editing to some items",
      "introduction": [
        "Limit editing to some items\n\nIf you pass a method to `isItemEditable`, only the items for which the method returns `true` will be editable:"
      ],
      "code_path": [
        "LabelEditingSomeItems.js"
      ],
      "children": [
        {
          "name": "Limit editing to leaves",
          "introduction": [
            "Limit editing to leaves\n\nYou can limit the editing to just the leaves of the tree."
          ],
          "code_path": [
            "EditLeaves.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Track item label change",
      "introduction": [
        "Track item label change\n\nUse the `onItemLabelChange` prop to trigger an action when the label of an item changes."
      ],
      "code_path": [
        "EditingCallback.js"
      ],
      "children": []
    },
    {
      "name": "Change the default behavior",
      "introduction": [
        "Change the default behavior\n\nBy default, blurring the Tree Item saves the new value if there is one.\nTo modify this behavior, use the `slotProps` of the Tree Item."
      ],
      "code_path": [
        "CustomBehavior.js"
      ],
      "children": []
    },
    {
      "name": "Validation",
      "introduction": [
        "Validation\n\nYou can override the event handlers of the `labelInput` and implement a custom validation logic using the interaction methods from `useTreeItemUtils`."
      ],
      "code_path": [
        "Validation.js"
      ],
      "children": []
    },
    {
      "name": "Enable editing using only icons",
      "introduction": [
        "Enable editing using only icons\n\nThe demo below shows how to entirely override the editing behavior, and implement it using icons."
      ],
      "code_path": [
        "EditWithIcons.js"
      ],
      "children": []
    },
    {
      "name": "Create a custom labelInput",
      "introduction": [
        "Create a custom labelInput\n\nThe demo below shows how to use a different component in the `labelInput` slot."
      ],
      "code_path": [
        "CustomLabelInput.js"
      ],
      "children": []
    },
    {
      "name": "Imperative API",
      "introduction": [
        "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\nWhen your component first renders, `apiRef` will be `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Change the label of an item",
          "introduction": [
            "Change the label of an item\n\nUse the `setItemExpansion` API method to change the expansion of an item.\n\n```ts\napiRef.current.updateItemLabel(\n  // The id of the item to to update\n  itemId,\n  // The new label of the item.\n  newLabel,\n);\n```"
          ],
          "code_path": [
            "ApiMethodUpdateItemLabel.js"
          ],
          "children": []
        }
      ]
    }
  ]
}