{
  "name": "tree-view->rich-tree-view->selection",
  "introduction": [
    "# Rich Tree View - Selection\n\n<p class=\"description\">Handle how users can select items.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Single selection",
      "introduction": [
        "Single selection\n\nBy default, the Tree View allows selecting a single item.",
        ":::success\nWhen the Tree View uses single selection, you can select an item by clicking it,\nor using the [keyboard shortcuts](/x/react-tree-view/accessibility/#on-single-select-trees).\n:::"
      ],
      "code_path": [
        "SingleSelectTreeView.js",
        null
      ],
      "children": []
    },
    {
      "name": "Multi selection",
      "introduction": [
        "Multi selection\n\nUse the `multiSelect` prop to enable multi-selection.",
        ":::success\nWhen the Tree View uses multi selection, you can select multiple items using the mouse in two ways:\n\n- To select multiple independent items, hold <kbd class=\"key\">Ctrl</kbd> (or <kbd class=\"key\">âŒ˜ Command</kbd> on macOS) and click the items.\n- To select a range of items, click on the first item of the range, then hold the <kbd class=\"key\">Shift</kbd> key while clicking on the last item of the range.\n\nYou can also use the [keyboard shortcuts](/x/react-tree-view/accessibility/#on-multi-select-trees) to select items.\n:::"
      ],
      "code_path": [
        "MultiSelectTreeView.js",
        null
      ],
      "children": []
    },
    {
      "name": "Disable selection",
      "introduction": [
        "Disable selection\n\nUse the `disableSelection` prop if you don't want your items to be selectable:"
      ],
      "code_path": [
        "DisableSelection.js"
      ],
      "children": []
    },
    {
      "name": "Checkbox selection",
      "introduction": [
        "Checkbox selection\n\nTo activate checkbox selection set `checkboxSelection={true}`:",
        "This is also compatible with multi selection:"
      ],
      "code_path": [
        "CheckboxSelection.js",
        "CheckboxMultiSelection.js"
      ],
      "children": []
    },
    {
      "name": "Controlled selection",
      "introduction": [
        "Controlled selection\n\nUse the `selectedItems` prop to control the selected items.\n\nYou can use the `onSelectedItemsChange` prop to listen to changes in the selected items and update the prop accordingly.",
        ":::info\n\n- The selection is **controlled** when its parent manages it by providing a `selectedItems` prop.\n- The selection is **uncontrolled** when it is managed by the component's own internal state. This state can be initialized using the `defaultSelectedItems` prop.\n\nLearn more about the _Controlled and uncontrolled_ pattern in the [React documentation](https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components).\n:::"
      ],
      "code_path": [
        "ControlledSelection.js",
        null
      ],
      "children": []
    },
    {
      "name": "Track item selection change",
      "introduction": [
        "Track item selection change\n\nUse the `onItemSelectionToggle` prop if you want to react to an item selection change:"
      ],
      "code_path": [
        "TrackItemSelectionToggle.js"
      ],
      "children": []
    },
    {
      "name": "Automatic parents and children selection",
      "introduction": [
        "Automatic parents and children selection\n\nBy default, selecting a parent item does not select its children. You can override this behavior using the `selectionPropagation` prop.\n\nHere's how it's structured:\n\n```ts\ntype TreeViewSelectionPropagation = {\n  descendants?: boolean; // default: false\n  parents?: boolean; // default: false\n};\n```\n\nWhen `selectionPropagation.descendants` is set to `true`:\n\n- Selecting a parent selects all its descendants automatically.\n- Deselecting a parent deselects all its descendants automatically.\n\nWhen `selectionPropagation.parents` is set to `true`:\n\n- Selecting all the descendants of a parent selects the parent automatically.\n- Deselecting a descendant of a selected parent deselects the parent automatically.\n\nThe example below demonstrates the usage of the `selectionPropagation` prop.",
        ":::warning\nThis feature only works when multi selection is enabled using `props.multiSelect`.\n:::"
      ],
      "code_path": [
        "SelectionPropagation.js",
        null
      ],
      "children": []
    },
    {
      "name": "Imperative API",
      "introduction": [
        "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\nWhen your component first renders, `apiRef` is `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Select or deselect an item",
          "introduction": [
            "Select or deselect an item\n\nUse the `selectItem()` API method to select or deselect an item:\n\n```ts\napiRef.current.selectItem({\n  // The DOM event that triggered the change\n  event,\n  // The id of the item to select or deselect\n  itemId,\n  // If `true`, the other already selected items will remain selected\n  // Otherwise, they will be deselected\n  // This parameter is only relevant when `multiSelect` is `true`\n  keepExistingSelection,\n  // If `true` the item will be selected\n  // If `false` the item will be deselected\n  // If not defined, the item's new selection status will be the opposite of its current one\n  shouldBeSelected,\n});\n```",
            "You can use the `keepExistingSelection` property to avoid losing the already selected items when using `multiSelect`:"
          ],
          "code_path": [
            "ApiMethodSelectItem.js",
            "ApiMethodSelectItemKeepExistingSelection.js"
          ],
          "children": []
        }
      ]
    }
  ]
}