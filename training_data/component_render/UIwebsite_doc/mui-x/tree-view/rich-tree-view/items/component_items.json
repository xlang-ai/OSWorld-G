{
  "name": "items",
  "introduction": [
    "# Rich Tree View - Items\n\n<p class=\"description\">Pass data to your Tree View.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basic usage",
      "introduction": [
        "Basic usage\n\nThe items can be defined with the `items` prop, which expects an array of objects.\n\n:::warning\nThe `items` prop should keep the same reference between two renders except if you want to apply new items.\nOtherwise, the Tree View will re-generate its entire structure.\n:::"
      ],
      "code_path": [
        "BasicRichTreeView.js"
      ],
      "children": []
    },
    {
      "name": "Item identifier",
      "introduction": [
        "Item identifier\n\nEach item must have a unique identifier.\n\nThis identifier is used internally to identify the item in the various models and to track the item across updates.\n\nBy default, the Rich Tree View component looks for a property named `id` in the data set to get that identifier:\n\n```tsx\nconst ITEMS = [{ id: 'tree-view-community' }];\n\n<RichTreeView items={ITEMS} />;\n```\n\nIf the item's identifier is not called `id`, then you need to use the `getItemId` prop to tell the Rich Tree View component where it is located.\n\nThe following demo shows how to use `getItemId` to grab the unique identifier from a property named `internalId`:\n\n```tsx\nconst ITEMS = [{ internalId: 'tree-view-community' }];\n\nfunction getItemId(item) {\n  return item.internalId;\n}\n\n<RichTreeView items={ITEMS} getItemId={getItemId} />;\n```",
        ":::warning\nJust like the `items` prop, the `getItemId` function should keep the same JavaScript reference between two renders.\nOtherwise, the Tree View will re-generate its entire structure.\n\nIt could be achieved by either defining the prop outside the component scope or by memoizing using the `React.useCallback` hook if the function reuses something from the component scope.\n:::"
      ],
      "code_path": [
        "GetItemId.js",
        null
      ],
      "children": []
    },
    {
      "name": "Item label",
      "introduction": [
        "Item label\n\nEach item must have a label which does not need to be unique.\n\nBy default, the Rich Tree View component looks for a property named `label` in the data set to get that label:\n\n```tsx\nconst ITEMS = [{ label: '@mui/x-tree-view' }];\n\n<RichTreeView items={ITEMS} />;\n```\n\nIf the item's label is not called `label`, then you need to use the `getItemLabel` prop to tell the Rich Tree View component where it's located:\n\nThe following demo shows how to use `getItemLabel` to grab the unique identifier from a property named `name`:\n\n```tsx\nconst ITEMS = [{ name: '@mui/x-tree-view' }];\n\nfunction getItemLabel(item) {\n  return item.name;\n}\n\n<RichTreeView items={ITEMS} getItemLabel={getItemLabel} />;\n```",
        ":::warning\nJust like the `items` prop, the `getItemLabel` function should keep the same JavaScript reference between two renders.\nOtherwise, the Tree View will re-generate its entire structure.\n\nIt could be achieved by either defining the prop outside the component scope or by memoizing using the `React.useCallback` hook if the function reuses something from the component scope.\n:::\n\n:::warning\nUnlike the Simple Tree View component, the Rich Tree View component only supports string labels, you cannot pass React nodes to it.\n:::"
      ],
      "code_path": [
        "GetItemLabel.js",
        null
      ],
      "children": []
    },
    {
      "name": "Disabled items",
      "introduction": [
        "Disabled items\n\nUse the `isItemDisabled` prop on the Rich Tree View to disable interaction and focus on a Tree Item:\n\n```tsx\nfunction isItemDisabled(item) {\n  return item.disabled ?? false;\n}\n\n<RichTreeView isItemDisabled={isItemDisabled} />;\n```",
        ":::warning\nJust like the `items` prop, the `isItemDisabled` function should keep the same JavaScript reference between two renders.\nOtherwise, the Tree View will re-generate its entire structure.\n\nThis can be achieved by either defining the prop outside the component scope or by memoizing using the `React.useCallback` hook if the function reuses something from the component scope.\n:::"
      ],
      "code_path": [
        "DisabledPropItem.js",
        null
      ],
      "children": [
        {
          "name": "Focus disabled items",
          "introduction": [
            "Focus disabled items\n\nUse the `disabledItemsFocusable` prop to control if disabled Tree Items can be focused.\n\nWhen this prop is set to false:\n\n- Navigating with keyboard arrow keys will not focus the disabled items, and the next non-disabled item will be focused instead.\n- Typing the first character of a disabled item's label will not move the focus to it.\n- Mouse or keyboard interaction will not expand/collapse disabled items.\n- Mouse or keyboard interaction will not select disabled items.\n- <kbd class=\"key\">Shift</kbd> + arrow keys will skip disabled items, and the next non-disabled item will be selected instead.\n- Programmatic focus will not focus disabled items.\n\nWhen it's set to true:\n\n- Navigating with keyboard arrow keys will focus disabled items.\n- Typing the first character of a disabled item's label will move focus to it.\n- Mouse or keyboard interaction will not expand/collapse disabled items.\n- Mouse or keyboard interaction will not select disabled items.\n- <kbd class=\"key\">Shift</kbd> + arrow keys will not skip disabled items, but the disabled item will not be selected.\n- Programmatic focus will focus disabled items."
          ],
          "code_path": [
            "DisabledItemsFocusable.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Track item clicks",
      "introduction": [
        "Track item clicks\n\nUse the `onItemClick` prop to track the clicked item:"
      ],
      "code_path": [
        "OnItemClick.js"
      ],
      "children": []
    },
    {
      "name": "Imperative API",
      "introduction": [
        "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <RichTreeView apiRef={apiRef} items={ITEMS}>;\n```\n\nWhen your component first renders, `apiRef` will be `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Get an item by ID",
          "introduction": [
            "Get an item by ID\n\nUse the `getItem` API method to get an item by its ID.\n\n```ts\nconst item = apiRef.current.getItem(\n  // The id of the item to retrieve\n  itemId,\n);\n```"
          ],
          "code_path": [
            "ApiMethodGetItem.js"
          ],
          "children": []
        },
        {
          "name": "Get an item's DOM element by ID",
          "introduction": [
            "Get an item's DOM element by ID\n\nUse the `getItemDOMElement()` API method to get an item's DOM element by its ID.\n\n```ts\nconst itemElement = apiRef.current.getItemDOMElement(\n  // The id of the item to get the DOM element of\n  itemId,\n);\n```"
          ],
          "code_path": [
            "ApiMethodGetItemDOMElement.js"
          ],
          "children": []
        },
        {
          "name": "Get the current item tree",
          "introduction": [
            "Get the current item tree\n\nUse the `getItemTree` API method to get the current item tree.\n\n```ts\nconst itemTree = apiRef.current.getItemTree();\n```",
            ":::info\nThis method is mostly useful when the Tree View has some internal updates on the items.\nFor now, the only features causing updates on the items is the [re-ordering](/x/react-tree-view/rich-tree-view/ordering/).\n:::"
          ],
          "code_path": [
            "ApiMethodGetItemTree.js",
            null
          ],
          "children": []
        },
        {
          "name": "Get an item's children by ID",
          "introduction": [
            "Get an item's children by ID\n\nUse the `getItemOrderedChildrenIds` API method to get an item's children by its ID.\n\n```ts\nconst childrenIds = apiRef.current.getItemOrderedChildrenIds(\n  // The id of the item to retrieve the children from\n  itemId,\n);\n```"
          ],
          "code_path": [
            "ApiMethodGetItemOrderedChildrenIds.js"
          ],
          "children": []
        }
      ]
    }
  ]
}