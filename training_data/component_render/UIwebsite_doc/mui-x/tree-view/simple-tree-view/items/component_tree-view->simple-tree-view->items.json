{
  "name": "tree-view->simple-tree-view->items",
  "introduction": [
    "# Simple Tree View - Items\n\n<p class=\"description\">Learn how to add simple data to the Tree View component.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basics",
      "introduction": [
        "Basics\n\n```jsx\nimport { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\nimport { TreeItem } from '@mui/x-tree-view/TreeItem';\n```\n\nThe Simple Tree View component receives its items directly as JSX children."
      ],
      "code_path": [
        "BasicSimpleTreeView.js"
      ],
      "children": [
        {
          "name": "Item identifier",
          "introduction": [
            "Item identifier\n\nEach Tree Item must have a unique `itemId`.\nThis is used internally to identify the item in the various models, and to track it across updates.\n\n```tsx\n<SimpleTreeView>\n  <TreeItem itemId=\"item-unique-id\" {...otherItemProps} />\n</SimpleTreeView>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Item label",
          "introduction": [
            "Item label\n\nYou must pass a `label` prop to each Tree Item component, as shown below:\n\n```tsx\n<SimpleTreeView>\n  <TreeItem label=\"Item label\" {...otherItemProps} />\n</SimpleTreeView>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Disabled items",
          "introduction": [
            "Disabled items\n\nUse the `disabled` prop on the Tree Item component to disable interaction and focus:"
          ],
          "code_path": [
            "DisabledJSXItem.js"
          ],
          "children": [
            {
              "name": "The disabledItemsFocusable prop",
              "introduction": [
                "The disabledItemsFocusable prop\n\nNote that the demo below also includes a switch.\nThis toggles the `disabledItemsFocusable` prop, which controls whether or not a disabled Tree Item can be focused.\n\nWhen this prop is set to false:\n\n- Navigating with keyboard arrow keys will not focus the disabled items, and the next non-disabled item will be focused instead.\n- Typing the first character of a disabled item's label will not move the focus to it.\n- Mouse or keyboard interaction will not expand/collapse disabled items.\n- Mouse or keyboard interaction will not select disabled items.\n- <kbd class=\"key\">Shift</kbd> + arrow keys will skip disabled items, and the next non-disabled item will be selected instead.\n- Programmatic focus will not focus disabled items.\n\nWhen it's set to true:\n\n- Navigating with keyboard arrow keys will focus disabled items.\n- Typing the first character of a disabled item's label will move focus to it.\n- Mouse or keyboard interaction will not expand/collapse disabled items.\n- Mouse or keyboard interaction will not select disabled items.\n- <kbd class=\"key\">Shift</kbd> + arrow keys will not skip disabled items, but the disabled item will not be selected.\n- Programmatic focus will focus disabled items."
              ],
              "code_path": [
                "DisabledItemsFocusable.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "Track item clicks",
      "introduction": [
        "Track item clicks\n\nUse the `onItemClick` prop to track the clicked item:"
      ],
      "code_path": [
        "OnItemClick.js"
      ],
      "children": []
    },
    {
      "name": "Imperative API",
      "introduction": [
        "Imperative API\n\n:::success\nTo use the `apiRef` object, you need to initialize it using the `useTreeViewApiRef` hook as follows:\n\n```tsx\nconst apiRef = useTreeViewApiRef();\n\nreturn <SimpleTreeView apiRef={apiRef}>{children}</SimpleTreeView>;\n```\n\nWhen your component first renders, `apiRef` is `undefined`.\nAfter this initial render, `apiRef` holds methods to interact imperatively with the Tree View.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Get an item's DOM element by ID",
          "introduction": [
            "Get an item's DOM element by ID\n\nUse the `getItemDOMElement()` API method to get an item's DOM element by its ID.\n\n```ts\nconst itemElement = apiRef.current.getItemDOMElement(\n  // The id of the item to get the DOM element of\n  itemId,\n);\n```"
          ],
          "code_path": [
            "ApiMethodGetItemDOMElement.js"
          ],
          "children": []
        }
      ]
    }
  ]
}