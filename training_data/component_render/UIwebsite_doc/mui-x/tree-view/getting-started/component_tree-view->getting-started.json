{
  "name": "tree-view->getting-started",
  "introduction": [
    "# Tree View - Getting Started\n\n<p class=\"description\">Get started with the Tree View. Install the package, configure your application and start using the components.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Installation",
      "introduction": [
        "Installation\n\nUsing your favorite package manager, install `@mui/x-tree-view-pro` for the commercial version, or `@mui/x-tree-view` for the free community version.\n\n<!-- #default-branch-switch -->\n\n{{\"component\": \"modules/components/TreeViewInstallationInstructions.js\"}}\n\nThe Tree View package has a peer dependency on `@mui/material`.\nIf you are not already using it in your project, you can install it with:\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n```bash pnpm\npnpm add @mui/material @emotion/react @emotion/styled\n```\n\n```bash yarn\nyarn add @mui/material @emotion/react @emotion/styled\n```\n\n</codeblock>\n\n<!-- #react-peer-version -->\n\nPlease note that [react](https://www.npmjs.com/package/react) and [react-dom](https://www.npmjs.com/package/react-dom) are peer dependencies too:\n\n```json\n\"peerDependencies\": {\n  \"react\": \"^17.0.0 || ^18.0.0 || ^19.0.0\",\n  \"react-dom\": \"^17.0.0 || ^18.0.0 || ^19.0.0\"\n},\n```"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Style engine",
          "introduction": [
            "Style engine\n\nMaterialÂ UI is using [Emotion](https://emotion.sh/docs/introduction) as a styling engine by default. If you want to use [`styled-components`](https://styled-components.com/) instead, run:\n\n<codeblock storageKey=\"package-manager\">\n```bash npm\nnpm install @mui/styled-engine-sc styled-components\n```\n\n```bash pnpm\npnpm add @mui/styled-engine-sc styled-components\n```\n\n```bash yarn\nyarn add @mui/styled-engine-sc styled-components\n```\n\n</codeblock>\n\nTake a look at the [Styled engine guide](/material-ui/integrations/styled-components/) for more information about how to configure `styled-components` as the style engine."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Render your first component",
      "introduction": [
        "Render your first component\n\nTo make sure that everything is set up correctly, try rendering a Simple Tree View component:"
      ],
      "code_path": [
        "FirstComponent.js"
      ],
      "children": []
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/treeview/)\n\nThe component follows the WAI-ARIA authoring practices.\n\nTo have an accessible Tree View you must use `aria-labelledby`\nor `aria-label` to reference or provide a label on the TreeView,\notherwise, screen readers will announce it as \"tree\", making it hard to understand the context of a specific tree item."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "TypeScript",
      "introduction": [
        "TypeScript\n\nIn order to benefit from the [CSS overrides](/material-ui/customization/theme-components/#theme-style-overrides) and [default prop customization](/material-ui/customization/theme-components/#theme-default-props) with the theme, TypeScript users need to import the following types.\nInternally, it uses module augmentation to extend the default theme structure.\n\n```tsx\nimport type {} from '@mui/x-tree-view/themeAugmentation';\n\nconst theme = createTheme({\n  components: {\n    MuiRichTreeView: {\n      styleOverrides: {\n        root: {\n          backgroundColor: 'red',\n        },\n      },\n    },\n  },\n});\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}