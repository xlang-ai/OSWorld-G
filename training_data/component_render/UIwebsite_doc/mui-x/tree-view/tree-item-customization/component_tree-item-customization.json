{
  "name": "tree-item-customization",
  "introduction": [
    "# Tree Item Customization\n\n<p class=\"description\">Learn how to customize the Tree Item component.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Anatomy",
      "introduction": [
        "Anatomy\n\nEach Tree Item component is shaped by a series of composable slots.\nHover over them in the demo below to see each slot.\n\n<span class=\"only-light-mode\" style=\"border: 1px solid rgb(232, 234, 238); border-radius:12px\">\n  <img src=\"/static/x/tree-view-illustrations/tree-item-light.png\" width=\"1632\" height=\"644\" alt=\"Tree Item anatomy\" loading=\"lazy\" style=\"display: block;\">\n</span>\n<span class=\"only-dark-mode\" style=\"border: 1px solid rgb(29, 33, 38); border-radius:12px\">\n  <img src=\"/static/x/tree-view-illustrations/tree-item-dark.png\" width=\"1632\" height=\"644\" alt=\"Tree Item anatomy\" loading=\"lazy\" style=\"display: block;\">\n</span>"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Content",
          "introduction": [
            "Content\n\nUse the content slot to customize the content of the Tree Item or replace it with a custom component."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Slot props",
              "introduction": [
                "Slot props\n\nThe `slotProps` prop lets you pass props to the content component.\nThe demo below shows how to pass an `sx` handler to the content of the Tree Item:"
              ],
              "code_path": [
                "ContentSlotProps.js"
              ],
              "children": []
            },
            {
              "name": "Slot",
              "introduction": [
                "Slot\n\nThe demo below shows how to replace the content slot with a custom component."
              ],
              "code_path": [
                "ContentSlot.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Label",
          "introduction": [
            "Label\n\nUse the label slot to customize the Tree Item label or replace it with a custom component."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Slot props",
              "introduction": [
                "Slot props\n\nThe `slotProps` prop lets you pass props to the label component.\nThe demo below shows how to pass an `id` attribute to the Tree Item label:"
              ],
              "code_path": [
                "LabelSlotProps.js"
              ],
              "children": []
            },
            {
              "name": "Slot",
              "introduction": [
                "Slot\n\nThe demo below shows how to replace the label slot with a custom component."
              ],
              "code_path": [
                "LabelSlot.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Checkbox",
          "introduction": [
            "Checkbox\n\nThe checkbox is present on the items when `checkboxSelection` is enabled on the Tree View."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Slot props",
              "introduction": [
                "Slot props\n\nYou can pass props to the checkbox slot using the `slotProps` on the Tree Item 2 component."
              ],
              "code_path": [
                "CheckboxSlotProps.js"
              ],
              "children": []
            },
            {
              "name": "Slot",
              "introduction": [
                "Slot\n\nThe demo below shows how to replace the checkbox slot with a custom component."
              ],
              "code_path": [
                "CheckboxSlot.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "Basics",
      "introduction": [
        "Basics"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Change nested item's indentation",
          "introduction": [
            "Change nested item's indentation\n\nUse the `itemChildrenIndentation` prop to change the indentation of the nested items.\nBy default, a nested item is indented by `12px` from its parent item.",
            ":::success\nIf you are using a custom Tree Item component, and you want to override the padding,\nthen apply the following padding to your `content` element:\n\n```ts\nconst CustomTreeItemContent = styled(TreeItemContent)(({ theme }) => ({\n  // ...other styles\n  paddingLeft:\n      `calc(${theme.spacing(1)} + var(--TreeView-itemChildrenIndentation) * var(--TreeView-itemDepth))`,\n}\n```\n\n:::"
          ],
          "code_path": [
            "ItemChildrenIndentationProp.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Hooks",
      "introduction": [
        "Hooks"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "useTreeItem",
          "introduction": [
            "useTreeItem\n\nThe `useTreeItem` hook lets you manage and customize individual Tree Items.\nYou can use it to get the properties needed for all slots, the status of any given Item, or to tap into the interactive API of the Tree View."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Slot properties",
              "introduction": [
                "Slot properties\n\nThe `useTreeItem` hook gives you granular control over an Item's layout by providing resolvers to get the appropriate props for each slot.\nThis makes it possible to build a fully custom layout for your Tree Items.\n\nThe demo below shows how to get the props needed for each slot, and how to pass them correctly.",
                "You can pass additional props to a slot—or override existing slots—by passing an object argument to the slot's props resolver, as shown below:\n\n```jsx\n<CustomTreeItemContent\n  {...getContentProps({\n    className: 'overridingClassName',\n    newProp: 'I am passing this to the content slot'\n  })}\n>\n```"
              ],
              "code_path": [
                "useTreeItemHookProperties.js",
                null
              ],
              "children": []
            },
            {
              "name": "Item status",
              "introduction": [
                "Item status\n\nThe `useTreeItem` hook also returns a `status` object that holds boolean values for each possible state of a Tree Item.\n\n```jsx\nconst {\n  status: { expanded, expandable, focused, selected, disabled, editable, editing },\n} = useTreeItem(props);\n```\n\nYou can use these statuses to apply custom styling to the item or conditionally render subcomponents."
              ],
              "code_path": [
                "useTreeItemHookStatus.js"
              ],
              "children": []
            },
            {
              "name": "Imperative API",
              "introduction": [
                "Imperative API\n\nThe `publicAPI` object provides a number of methods to programmatically interact with the Tree View.\nYou can use the `useTreeItem` hook to access the `publicAPI` object from within a Tree Item.",
                "See the **Imperative API** section on each feature page to learn more about the public API methods available on the Tree View.\n\n:::warning\nThe `publicAPI` object should not be used in the render because the item won't necessarily re-render when the returned value is updated.\n\nIf you want to access the item model, you can use the `useTreeItemModel` hook.\nSee [Tree Item Customization—useTreeItemModel](/x/react-tree-view/tree-item-customization/#usetreeitemmodel) for more details.\n:::"
              ],
              "code_path": [
                "useTreeItemHookPublicAPI.js",
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "`useTreeItemUtils`",
          "introduction": [
            "`useTreeItemUtils`\n\nThe `useTreeItemUtils` hook provides a set of interaction methods for implementing custom behaviors for the Tree View.\nIt also returns the status of the Item.\n\n```jsx\nconst { interactions, status, publicAPI } = useTreeItemUtils({\n  itemId: props.itemId,\n  children: props.children,\n});\n```\n\nTo override the Tree Item's default interactions, set `event.defaultMuiPrevented` to `true` in the event handlers and then implement your own behavior."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Selection",
              "introduction": [
                "Selection\n\nYou can select an Item in a Tree View by clicking its content slot.\nThe demo below shows how to handle selection when the user clicks on an icon."
              ],
              "code_path": [
                "HandleSelectionDemo.js"
              ],
              "children": []
            },
            {
              "name": "Checkbox selection",
              "introduction": [
                "Checkbox selection\n\nBy default, checkbox selection is skipped if an Item is disabled or if `disableSelection` is `true` on the Tree View.\nYou can create a custom handler for the `onChange` event on the checkbox slot to bypass these conditions.\nThe demo below shows how to implement custom checkbox selection behavior.",
                "Visit the [Rich Tree View](/x/react-tree-view/rich-tree-view/selection/) or [Simple Tree View](/x/react-tree-view/simple-tree-view/selection/) docs, respectively, for more details on the selection API."
              ],
              "code_path": [
                "HandleCheckboxSelectionDemo.js",
                null
              ],
              "children": []
            },
            {
              "name": "Expansion",
              "introduction": [
                "Expansion\n\nBy default, a Tree Item is expanded when the user clicks on its contents.\nYou can change the expansion trigger using the `expansionTrigger` prop on the `iconContainer`.\nFor more details, see [Expansion—Limit expansion to icon container](/x/react-tree-view/rich-tree-view/expansion/#limit-expansion-to-icon-container).\n\nUse the `handleExpansion` interaction method for deeper customization of the Item's expansion behavior.\n\nThe demo below shows how to introduce a new element that expands and collapses the Item."
              ],
              "code_path": [
                "HandleExpansionDemo.js"
              ],
              "children": []
            },
            {
              "name": "Label editing",
              "introduction": [
                "Label editing\n\nThe `useTreeItemUtils` hook provides the following interaction methods relevant to label editing behavior:\n\n```jsx\nconst {\n  interactions: {\n    toggleItemEditing,\n    handleCancelItemLabelEditing,\n    handleSaveItemLabel,\n  },\n} = useTreeItemUtils({\n  itemId: props.itemId,\n  children: props.children,\n});\n```\n\nSee [Editing—enable editing using only icons](/x/react-tree-view/rich-tree-view/editing/#enable-editing-using-only-icons) for more details on customizing this behavior."
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "`useTreeItemModel`",
          "introduction": [
            "`useTreeItemModel`\n\nThe `useTreeItemModel` hook lets you access the item model (the object passed to `props.items`):\n\n```jsx\nconst item = useTreeItemModel(itemId);\n```"
          ],
          "code_path": [
            "LabelSlot.js"
          ],
          "children": []
        }
      ]
    }
  ]
}