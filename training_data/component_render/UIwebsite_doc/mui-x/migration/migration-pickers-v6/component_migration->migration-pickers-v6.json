{
  "name": "migration->migration-pickers-v6",
  "introduction": [
    "# Migration from v6 to v7\n\n<p class=\"description\">This guide describes the changes needed to migrate the Date and Time Pickers from v6 to v7.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Introduction",
      "introduction": [
        "Introduction\n\nThis is a reference guide for upgrading `@mui/x-date-pickers` from v6 to v7.\nTo read more about the changes from the new major, check out [the blog post about the release of MUI X v7](https://mui.com/blog/mui-x-v7-beta/)."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Start using the new release",
      "introduction": [
        "Start using the new release\n\nIn `package.json`, change the version of the date pickers package to `^7.0.0`.\n\n```diff\n-\"@mui/x-date-pickers\": \"^6.0.0\",\n+\"@mui/x-date-pickers\": \"^7.0.0\",\n\n-\"@mui/x-date-pickers-pro\": \"^6.0.0\",\n+\"@mui/x-date-pickers-pro\": \"^7.0.0\",\n```\n\nSince `v7` is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features.\nDescribed below are the steps needed to migrate from v6 to v7."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Update `@mui/material` package",
      "introduction": [
        "Update `@mui/material` package\n\nTo have the option of using the latest API from `@mui/material`, the package peer dependency version has been updated to `^5.15.14`.\nIt is a change in minor version only, so it should not cause any breaking changes.\nPlease update your `@mui/material` package to this or a newer version."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Update the license package",
      "introduction": [
        "Update the license package\n\nIf you're using the commercial version of the Pickers ([Pro](/x/introduction/licensing/#pro-plan) plan), you need to update the import path:\n\n```diff\n-import { LicenseInfo } from '@mui/x-license-pro';\n+import { LicenseInfo } from '@mui/x-license';\n```\n\nIf you have `@mui/x-license-pro` in the `dependencies` section of your `package.json`, rename and update the license package to the latest version:\n\n```diff\n-\"@mui/x-license-pro\": ^6.0.0\",\n+\"@mui/x-license\": \"^7.0.0\",\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Run codemods",
      "introduction": [
        "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v7.\nYou can run `v7.0.0/pickers/preset-safe` targeting only Date and Time Pickers or `v7.0.0/preset-safe` to target other MUI X components like the Data Grid as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n<!-- #default-branch-switch -->\n\n```bash\n# Date and Time Pickers specific\nnpx @mui/x-codemod@latest v7.0.0/pickers/preset-safe <path>\n\n# Target other MUI X components as well\nnpx @mui/x-codemod@latest v7.0.0/preset-safe <path>\n```\n\n:::info\nIf you want to run the transformers one by one, check out the transformers included in the [preset-safe codemod for pickers](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/README.md#preset-safe-for-pickers-v700) for more details.\n:::\n\nBreaking changes that are handled by this codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen.\n\nIf you have already applied the `v7.0.0/pickers/preset-safe` (or `v7.0.0/preset-safe`) codemod, then you should not need to take any further action on these items.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading, cross-file dependencies, etc., the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<DatePicker {...newProps} />\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Breaking changes",
      "introduction": [
        "Breaking changes\n\nSince v7 is a major release, it contains some changes that affect the public API.\nThese changes were done for consistency, improve stability and make room for new features."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Drop the legacy bundle",
          "introduction": [
            "Drop the legacy bundle\n\nThe support for IE 11 has been removed from all MUI X packages.\nThe `legacy` bundle that used to support old browsers like IE 11 is no longer included.\n\n:::info\nIf you need support for IE 11, you will need to keep using the latest version of the `v6` release.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Drop webpack 4 support",
          "introduction": [
            "Drop webpack 4 support\n\nDropping old browsers support also means that we no longer transpile some features that are natively supported by modern browsers – like [Nullish Coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) and [Optional Chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining).\n\nThese features are not supported by webpack 4, so if you are using webpack 4, you will need to transpile these features yourself or upgrade to webpack 5.\n\nHere is an example of how you can transpile these features on webpack 4 using the `@babel/preset-env` preset:\n\n```diff\n // webpack.config.js\n\n module.exports = (env) => ({\n   // ...\n   module: {\n     rules: [\n       {\n         test: /\\.[jt]sx?$/,\n-        exclude: /node_modules/,\n+        exclude: [\n+          {\n+            test: path.resolve(__dirname, 'node_modules'),\n+            exclude: [\n+              // Covers @mui/x-date-pickers and @mui/x-date-pickers-pro\n+              path.resolve(__dirname, 'node_modules/@mui/x-date-pickers'),\n+              path.resolve(__dirname, 'node_modules/@mui/x-license'),\n+            ],\n+          },\n+        ],\n       },\n     ],\n   },\n });\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Component slots",
      "introduction": [
        "Component slots"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Rename `components` to `slots`",
          "introduction": [
            "Rename `components` to `slots`\n\nThe `components` and `componentsProps` props are renamed to `slots` and `slotProps` props respectively.\nThis is a slow and ongoing effort between all the different libraries maintained by MUI.\nTo smooth the transition, they were deprecated during the [v6](/x/migration/migration-pickers-v5/#rename-components-to-slots-optional).\nAnd are removed from the v7.\n\nIf not already done, this modification can be handled by the codemod\n\n```bash\nnpx @mui/x-codemod@latest v7.0.0/pickers/ <path>\n```\n\nTake a look at [the RFC](https://github.com/mui/material-ui/issues/33416) for more information.\n\n:::warning\nIf this codemod is applied on a component with both a `slots` and a `components` prop, the output will contain two `slots` props.\nYou are then responsible for merging those two props manually.\n\nFor example:\n\n```tsx\n// Before running the codemod\n<DatePicker\n  slots={{ textField: MyTextField }}\n  components={{ toolbar: MyToolbar }}\n/>\n\n// After running the codemod\n<DatePicker\n  slots={{ textField: MyTextField }}\n  slots={{ toolbar: MyToolbar }}\n/>\n```\n\nThe same applies to `slotProps` and `componentsProps`.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Rename slots types",
          "introduction": [
            "✅ Rename slots types\n\nThe slot interfaces have been renamed to match with `@mui/base` naming convention.\nSuffix `SlotsComponent` is replaced by `Slots` and `SlotsComponentsProps` is replaced by `SlotProps`.\nIf you are not relying on the codemod, consider checking all the renamed types in [this file](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/src/v7.0.0/pickers/rename-slots-types/index.ts).\nHere is an example on the `DateCalendar` typing.\n\n```diff\n-DateCalendarSlotsComponent\n+DateCalendarSlots\n-DateCalendarSlotsComponentsProps\n+DateCalendarSlotProps\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Add new parameters to the `shortcuts` slot `onChange` callback",
          "introduction": [
            "Add new parameters to the `shortcuts` slot `onChange` callback\n\n:::warning\nThe following breaking change only impacts you if you are overriding the `shortcuts` slot to create your own custom UI.\nIf you are just passing shortcuts to the default UI using `slotProps={{ shortcuts: [...] }}` then you can safely skip this section.\n:::\n\nThe `onChange` callback fired when selecting a shortcut now requires two new parameters (previously they were optional):\n\n- The [`changeImportance`](/x/react-date-pickers/shortcuts/#behavior-when-selecting-a-shortcut) of the shortcut.\n- The `item` containing the entire shortcut object.\n\n```diff\n const CustomShortcuts = (props) => {\n   return (\n     <React.Fragment>\n       {props.items.map(item => {\n         const value = item.getValue({ isValid: props.isValid });\n         return (\n           <button\n-            onClick={() => onChange(value)}\n+            onClick={() => onChange(value, props.changeImportance ?? 'accept', item)}\n           >\n             {value}\n           </button>\n         )\n       }}\n     </React.Fragment>\n   )\n }\n\n <DatePicker slots={{ shortcuts: CustomShortcuts }} />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Change the imports of the `calendarHeader` slot",
          "introduction": [
            "Change the imports of the `calendarHeader` slot\n\nThe imports related to the `calendarHeader` slot have been moved from `@mui/x-date-pickers/DateCalendar` to `@mui/x-date-pickers/PickersCalendarHeader`:\n\n```diff\n export {\n   pickersCalendarHeaderClasses,\n   PickersCalendarHeaderClassKey,\n   PickersCalendarHeaderClasses,\n   PickersCalendarHeader,\n   PickersCalendarHeaderProps,\n   PickersCalendarHeaderSlotsComponent,\n   PickersCalendarHeaderSlotsComponentsProps,\n   ExportedPickersCalendarHeaderProps,\n-} from '@mui/x-date-pickers/DateCalendar';\n+} from '@mui/x-date-pickers/PickersCalendarHeader';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Removed props",
      "introduction": [
        "Removed props"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Replace `shouldDisableClock` with `shouldDisableTime`",
          "introduction": [
            "Replace `shouldDisableClock` with `shouldDisableTime`\n\nThe deprecated `shouldDisableClock` prop has been removed in favor of the more flexible `shouldDisableTime` prop.\nThe `shouldDisableClock` prop received `value` as a `number` of hours, minutes, or seconds.\nInstead, the `shouldDisableTime` prop receives the date object (based on the used adapter).\nYou can read more about the deprecation of this prop in [v6 migration guide](/x/migration/migration-pickers-v5/#%E2%9C%85-rename-or-refactor-shoulddisabletime-prop).\n\n```diff\n <DateTimePicker\n-  shouldDisableClock={(timeValue, view) => view === 'hours' && timeValue < 12}\n+  shouldDisableTime={(value, view) => view === 'hours' && value.hour() < 12}\n />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Replace `defaultCalendarMonth` with `referenceDate`",
          "introduction": [
            "✅ Replace `defaultCalendarMonth` with `referenceDate`\n\nThe deprecated `defaultCalendarMonth` prop has been removed in favor of the more flexible `referenceDate` prop.\n\n:::info\nThe new `referenceDate` prop is not limited to the default month.\nIt will also impact year, day, and time.\n\nSee [Date Calendar—Choose the initial year / month](/x/react-date-pickers/date-calendar/#choose-the-initial-year-month) or [Base concepts—Reference date when no value is defined](/x/react-date-pickers/base-concepts/#reference-date-when-no-value-is-defined) for more details.\n:::\n\n```diff\n-<DateCalendar defaultCalendarMonth={dayjs('2022-04-01')};\n+<DateCalendar referenceDate={dayjs('2022-04-01')} />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Modified props",
      "introduction": [
        "Modified props"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Remove the string argument of the `dayOfWeekFormatter` prop",
          "introduction": [
            "Remove the string argument of the `dayOfWeekFormatter` prop\n\nThe string argument of the `dayOfWeekFormatter` prop has been replaced in favor of the date object to allow more flexibility.\n\n```diff\n <DateCalendar\n   // If you were still using the day string, you can get it back with your date library.\n-  dayOfWeekFormatter={dayStr => `${dayStr}.`}\n+  dayOfWeekFormatter={day => `${day.format('dd')}.`}\n\n   // If you were already using the day object, just remove the first argument.\n-  dayOfWeekFormatter={(_dayStr, day) => `${day.format('dd')}.`\n+  dayOfWeekFormatter={day => `${day.format('dd')}.`}\n />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Strict typing of the date-related props",
          "introduction": [
            "Strict typing of the date-related props\n\nAll the date-related props are now strictly typed to only accept the date format supported by your adapter\n(`Date` object for `date-fns`, `daysjs.Dayjs` object for `days-js`, etc.).\n\n:::info\nSee [Base concepts—Typing of the date](/x/react-date-pickers/base-concepts/#typing-of-the-date) for more details.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Field components",
      "introduction": [
        "Field components"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Update the format of `selectedSections`",
          "introduction": [
            "Update the format of `selectedSections`\n\nThe `selectedSections` prop no longer accepts start and end indexes.\nWhen selecting several — but not all — sections,\nthe field components were not behaving correctly, you can now only select one or all sections:\n\n```diff\n <DateField\n-  selectedSections={{ startIndex: 0, endIndex: 0 }}\n+  selectedSections={0}\n\n   // If the field has 3 sections\n-  selectedSections={{ startIndex: 0, endIndex: 2 }}\n+  selectedSections=\"all\"\n />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Replace the section `hasLeadingZeros` property",
          "introduction": [
            "Replace the section `hasLeadingZeros` property\n\n:::success\nThis only impacts you if you are using the `unstableFieldRef` prop to imperatively access the section object.\n:::\n\nThe property `hasLeadingZeros` has been removed from the sections in favor of the more precise `hasLeadingZerosInFormat` and `hasLeadingZerosInInput` properties.\nTo keep the same behavior, you can replace it by `hasLeadingZerosInFormat`\n\n```diff\n const fieldRef = React.useRef<FieldRef<FieldSection>>(null);\n\n React.useEffect(() => {\n   const firstSection = fieldRef.current!.getSections()[0];\n-  console.log(firstSection.hasLeadingZeros);\n+  console.log(firstSection.hasLeadingZerosInFormat);\n }, []);\n\n return <DateField unstableFieldRef={fieldRef} />;\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Headless fields",
          "introduction": [
            "Headless fields\n\n:::success\nThe following breaking changes only impact you if you are using hooks like `useDateField` to build a custom UI.\n\nIf you are just using the regular field components, then you can safely skip this section.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Move `inputRef` inside the props passed to the hook",
              "introduction": [
                "Move `inputRef` inside the props passed to the hook\n\nThe field hooks now only receive the props instead of an object containing both the props and the `inputRef`.\n\n```diff\n-const { inputRef, ...otherProps } = props\n-const fieldResponse = useDateField({ props: otherProps, inputRef });\n+const fieldResponse = useDateField(props);\n```\n\nIf you are using a multi input range field hook, the same applies to `startInputRef` and `endInputRef` params\n\n```diff\n- const { inputRef: startInputRef, ...otherStartTextFieldProps } = startTextFieldProps\n- const { inputRef: endInputRef, ...otherEndTextFieldProps } = endTextFieldProps\n\n  const fieldResponse = useMultiInputDateRangeField({\n    sharedProps,\n-   startTextFieldProps: otherStartTextFieldProps,\n-   endTextFieldProps: otherEndTextFieldProps,\n-   startInputRef\n-   endInputRef,\n+   startTextFieldProps,\n+   endTextFieldProps\n  });\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Rename the ref returned by the hook to `inputRef`",
              "introduction": [
                "Rename the ref returned by the hook to `inputRef`\n\nWhen used with the v6 TextField approach (where the input is an `<input />` HTML element), the field hooks return a ref that needs to be passed to the `<input />` element.\nThis ref was previously named `ref` and has been renamed `inputRef` for extra clarity.\n\n```diff\n  const fieldResponse = useDateField(props);\n\n- return <input ref={fieldResponse.ref} />\n+ return <input ref={fieldResponse.inputRef} />\n```\n\nIf you are using a multi input range field hook, the same applies to the ref in the `startDate` and `endDate` objects\n\n```diff\n  const fieldResponse = useDateField(props);\n\n  return (\n    <div>\n-     <input ref={fieldResponse.startDate.ref} />\n+     <input ref={fieldResponse.startDate.inputRef} />\n      <span>–</span>\n-     <input ref={fieldResponse.endDate.ref} />\n+     <input ref={fieldResponse.endDate.inputRef} />\n    </div>\n  )\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Restructure the API of `useClearableField`",
              "introduction": [
                "Restructure the API of `useClearableField`\n\nThe `useClearableField` hook API has been simplified to now take a `props` parameter instead of a `fieldProps`, `InputProps`, `clearable`, `onClear`, `slots` and `slotProps` parameters.\n\nYou should now be able to directly pass the returned value from your field hook (for example `useDateField`) to `useClearableField`\n\n```diff\n  const fieldResponse = useDateField(props);\n\n- const { InputProps, onClear, clearable, slots, slotProps, ...otherFieldProps } = fieldResponse\n- const { InputProps: ProcessedInputProps, fieldProps: processedFieldProps } = useClearableField({\n-   fieldProps: otherFieldProps,\n-   InputProps,\n-   clearable,\n-   onClear,\n-   slots,\n-   slotProps,\n- });\n-\n-  return <MyCustomTextField {...processedFieldProps} InputProps={ProcessedInputProps} />\n\n+ const processedFieldProps = useClearableField(fieldResponse);\n+\n+ return <MyCustomTextField {...processedFieldProps} />\n```\n\n:::info\nIf your custom field is based on one of the examples of the [Custom field](/x/react-date-pickers/custom-field/) page,\nthen you can look at the page to see all the examples improved and updated to use the new simplified API.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Do not forward the `enableAccessibleFieldDOMStructure` prop to the DOM",
              "introduction": [
                "Do not forward the `enableAccessibleFieldDOMStructure` prop to the DOM\n\nThe headless field hooks (e.g.: `useDateField`) now return a new prop called `enableAccessibleFieldDOMStructure`.\nThis is used to know if the current UI expected is built using the accessible DOM structure or not.\n\n:::info\nSee [Migration from v7 to v8—New DOM structure for the field](/x/migration/migration-pickers-v7/#new-dom-structure-for-the-field) for more details.\n:::\n\nWhen building a custom UI, you are most-likely only supporting one DOM structure, so you can remove `enableAccessibleFieldDOMStructure` before it is passed to the DOM:\n\n```diff\n  function MyCustomTextField(props) {\n    const {\n+     // Should be ignored\n+     enableAccessibleFieldDOMStructure,\n\n      // ... rest of the props you are using\n    }\n\n    return ( /* Some UI to edit the date */ )\n  }\n\n  function MyCustomField(props) {\n    const fieldResponse = useDateField<Dayjs, false, typeof textFieldProps>({\n      ...props,\n+     // If you only support one DOM structure, we advise you to hardcode it\n+     // here to avoid unwanted switches in your application.\n+     enableAccessibleFieldDOMStructure: false,\n    });\n\n    return <MyCustomTextField ref={ref} {...fieldResponse} />;\n  }\n\n  function App() {\n    return <DatePicker slots={{ field: MyCustomField }} />;\n  }\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "Date management",
      "introduction": [
        "Date management"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Use localized week with luxon",
          "introduction": [
            "Use localized week with luxon\n\nThe `AdapterLuxon` now uses the localized week when Luxon `v3.4.4` or higher is installed.\nThis improvement aligns `AdapterLuxon` with the behavior of other adapters.\n\nIf you want to keep the start of the week on Monday even if your locale says otherwise.\nYou can hardcode the week settings as follows:\n\n```ts\nimport { Settings, Info } from 'luxon';\n\nSettings.defaultWeekSettings = {\n  firstDay: 1,\n  minimalDays: Info.getMinimumDaysInFirstWeek(),\n  weekend: Info.getWeekendWeekdays(),\n};\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Remove the `monthAndYear` format",
          "introduction": [
            "Remove the `monthAndYear` format\n\nThe `monthAndYear` format has been removed.\nIt was used in the header of the calendar views.\nYou can replace it with the new `format` prop of the `calendarHeader` slot:\n\n```diff\n <LocalizationProvider\n   adapter={AdapterDayJS}\n-  formats={{ monthAndYear: 'MM/YYYY' }}\n />\n   <DatePicker\n+    slotProps={{ calendarHeader: { format: 'MM/YYYY' }}}\n   />\n   <DateRangePicker\n+    slotProps={{ calendarHeader: { format: 'MM/YYYY' }}}\n   />\n <LocalizationProvider />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Renamed variables",
      "introduction": [
        "Renamed variables"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "✅ Rename the `dayPickerClasses` variable to `dayCalendarClasses`",
          "introduction": [
            "✅ Rename the `dayPickerClasses` variable to `dayCalendarClasses`\n\nThe `dayPickerClasses` variable has been renamed `dayCalendarClasses` to be consistent with the new name of the `DayCalendar` component introduced in v6.0.0.\n\n```diff\n-import { dayPickerClasses } from '@mui/x-date-pickers/DateCalendar';\n+import { dayCalendarClasses } from '@mui/x-date-pickers/DateCalendar';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Usage with Day.js",
      "introduction": [
        "Usage with Day.js"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Use UTC with the Day.js adapter",
          "introduction": [
            "Use UTC with the Day.js adapter\n\nThe `dateLibInstance` prop of `LocalizationProvider` does not work with `AdapterDayjs` anymore.\nThis prop was used to set the pickers in UTC mode before the implementation of a proper timezone support in the components.\n\n:::info\nSee [Timezone](/x/react-date-pickers/timezone/) for more details.\n:::\n\n```diff\n // When a `value` or a `defaultValue` is provided\n <LocalizationProvider\n   adapter={AdapterDayjs}\n-  dateLibInstance={dayjs.utc}\n >\n   <DatePicker value={dayjs.utc('2022-04-17')} />\n </LocalizationProvider>\n\n // When no `value` or `defaultValue` is provided\n <LocalizationProvider\n   adapter={AdapterDayjs}\n-  dateLibInstance={dayjs.utc}\n >\n-  <DatePicker />\n+  <DatePicker timezone=\"UTC\" />\n </LocalizationProvider>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Usage with `customParseFormat`",
          "introduction": [
            "Usage with `customParseFormat`\n\nThe call to `dayjs.extend(customParseFormatPlugin)` has been moved to the `AdapterDayjs` constructor. This allows users\nto pass custom options to this plugin before the adapter uses it.\n\nIf you are using this plugin before the rendering of the first `LocalizationProvider` component and did not call\n`dayjs.extend` in your own codebase, you will need to manually extend `dayjs`:\n\n```tsx\nimport dayjs from 'dayjs';\nimport customParseFormatPlugin from 'dayjs/plugin/customParseFormat';\n\ndayjs.extend(customParseFormatPlugin);\n```\n\nThe other plugins are still added before the adapter initialization."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Remove root level `locales` export",
      "introduction": [
        "Remove root level `locales` export\n\nThe `locales` export has been removed from the root of the packages.\nIn an effort to reduce the bundle size, the locales are now only available from the `@mui/x-date-pickers/locales` or `@mui/x-date-pickers-pro/locales` paths.\nIf you were still relying on the root level export, please update your code.\n\nBefore v7, it was possible to import locales from the package root (that is `import { frFR } from '@mui/x-date-pickers'`).\n\n```diff\n-import { frFR } from '@mui/x-date-pickers';\n+import { frFR } from '@mui/x-date-pickers/locales';\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Remove `dateTimeViewRenderers` export",
      "introduction": [
        "Remove `dateTimeViewRenderers` export\n\nThe `dateTimeViewRenderers` export has been removed in favor of reusing existing time view renderers (`renderTimeViewClock`, `renderDigitalClockTimeView` and `renderMultiSectionDigitalClockTimeView`) and date view renderer (`renderDateViewCalendar`) to render the `DesktopDateTimePicker`.\n\nIf you were relying on this import, you can refer to the implementation of the `DesktopDateTimePicker` to see how to combine the renderers yourself.\n\n:::info\nThe additional side-effect of this change is that passing `renderTimeViewClock` to time view renderers will no longer revert to the old behavior of rendering only date or time view.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Adapters internal changes",
      "introduction": [
        "Adapters internal changes\n\n:::success\nThe following breaking changes only impact you if you are using the adapters outside the pickers like displayed in the following example:\n\n```tsx\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\n\nconst adapter = new AdapterDays();\nadapter.isValid(dayjs('2022-04-17T15:30'));\n```\n\nIf you are just passing an adapter to `LocalizationProvider`, then you can safely skip this section.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Removed methods",
          "introduction": [
            "Removed methods\n\n<details>\n  <summary>Show breaking changes</summary>"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Remove the `dateWithTimezone` method",
              "introduction": [
                "Remove the `dateWithTimezone` method\n\nThe `dateWithTimezone` method has been removed and its content has been moved the `date` method.\nYou can use the `date` method instead:\n\n```diff\n-adapter.dateWithTimezone(undefined, 'system');\n+adapter.date(undefined, 'system');\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `getDiff` method",
              "introduction": [
                "Remove the `getDiff` method\n\nThe `getDiff` method has been removed.\nYou can directly use your date library:\n\n```diff\n // For Day.js\n-const diff = adapter.getDiff(value, comparing, unit);\n+const diff = value.diff(comparing, unit);\n\n // For Luxon\n-const diff = adapter.getDiff(value, comparing, unit);\n+const getDiff = (value: DateTime, comparing: DateTime | string, unit?: AdapterUnits) => {\n+  const parsedComparing = typeof comparing === 'string'\n+    ? DateTime.fromJSDate(new Date(comparing))\n+    : comparing;\n+  if (unit) {\n+    return Math.floor(value.diff(comparing).as(unit));\n+  }\n+  return value.diff(comparing).as('millisecond');\n+};\n+\n+const diff = getDiff(value, comparing, unit);\n\n // For DateFns\n-const diff = adapter.getDiff(value, comparing, unit);\n+const getDiff = (value: Date, comparing: Date | string, unit?: AdapterUnits) => {\n+  const parsedComparing = typeof comparing === 'string' ? new Date(comparing) : comparing;\n+  switch (unit) {\n+    case 'years':\n+      return dateFns.differenceInYears(value, parsedComparing);\n+    case 'quarters':\n+      return dateFns.differenceInQuarters(value, parsedComparing);\n+    case 'months':\n+      return dateFns.differenceInMonths(value, parsedComparing);\n+    case 'weeks':\n+      return dateFns.differenceInWeeks(value, parsedComparing);\n+    case 'days':\n+      return dateFns.differenceInDays(value, parsedComparing);\n+    case 'hours':\n+      return dateFns.differenceInHours(value, parsedComparing);\n+    case 'minutes':\n+      return dateFns.differenceInMinutes(value, parsedComparing);\n+    case 'seconds':\n+      return dateFns.differenceInSeconds(value, parsedComparing);\n+    default: {\n+      return dateFns.differenceInMilliseconds(value, parsedComparing);\n+    }\n+  }\n+};\n+\n+const diff = getDiff(value, comparing, unit);\n\n // For Moment\n-const diff = adapter.getDiff(value, comparing, unit);\n+const diff = value.diff(comparing, unit);\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `getFormatHelperText` method",
              "introduction": [
                "Remove the `getFormatHelperText` method\n\nThe `getFormatHelperText` method has been removed.\nYou can use the `expandFormat` instead:\n\n```diff\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format);\n```\n\nAnd if you need the exact same output.\nYou can apply the following transformation:\n\n```diff\n // For Day.js\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();\n\n // For Luxon\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/(a)/g, '(a|p)m').toLocaleLowerCase();\n\n // For DateFns\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/(aaa|aa|a)/g, '(a|p)m').toLocaleLowerCase();\n\n // For Moment\n-const expandedFormat = adapter.getFormatHelperText(format);\n+const expandedFormat = adapter.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `getMeridiemText` method",
              "introduction": [
                "Remove the `getMeridiemText` method\n\nThe `getMeridiemText` method has been removed.\nYou can use the `setHours`, `date` and `format` methods to recreate its behavior:\n\n```diff\n-const meridiem = adapter.getMeridiemText('am');\n+const getMeridiemText = (meridiem: 'am' | 'pm') => {\n+  const date = adapter.setHours(adapter.date()!, meridiem === 'am' ? 2 : 14);\n+  return utils.format(date, 'meridiem');\n+};\n+\n+const meridiem = getMeridiemText('am');\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `getMonthArray` method",
              "introduction": [
                "Remove the `getMonthArray` method\n\nThe `getMonthArray` method has been removed.\nYou can use the `startOfYear` and `addMonths` methods to recreate its behavior:\n\n```diff\n-const monthArray = adapter.getMonthArray(value);\n+const getMonthArray = (year) => {\n+  const firstMonth = utils.startOfYear(year);\n+  const months = [firstMonth];\n+\n+  while (months.length < 12) {\n+    const prevMonth = months[months.length - 1];\n+    months.push(utils.addMonths(prevMonth, 1));\n+  }\n+\n+  return months;\n+}\n+\n+const monthArray = getMonthArray(value);\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `getNextMonth` method",
              "introduction": [
                "Remove the `getNextMonth` method\n\nThe `getNextMonth` method has been removed.\nYou can use the `addMonths` method instead:\n\n```diff\n-const nextMonth = adapter.getNextMonth(value);\n+const nextMonth = adapter.addMonths(value, 1);\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `getPreviousMonth` method",
              "introduction": [
                "Remove the `getPreviousMonth` method\n\nThe `getPreviousMonth` method has been removed.\nYou can use the `addMonths` method instead:\n\n```diff\n-const previousMonth = adapter.getPreviousMonth(value);\n+const previousMonth = adapter.addMonths(value, -1);\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `getWeekdays` method",
              "introduction": [
                "Remove the `getWeekdays` method\n\nThe `getWeekdays` method has been removed.\nYou can use the `startOfWeek` and `addDays` methods instead:\n\n```diff\n-const weekDays = adapter.getWeekdays(value);\n+const getWeekdays = (value) => {\n+  const start = adapter.startOfWeek(value);\n+  return [0, 1, 2, 3, 4, 5, 6].map((diff) => utils.addDays(start, diff));\n+};\n+\n+const weekDays = getWeekdays(value);\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `isNull` method",
              "introduction": [
                "Remove the `isNull` method\n\nThe `isNull` method has been removed.\nYou can replace it with a very basic check:\n\n```diff\n-const isNull = adapter.isNull(value);\n+const isNull = value === null;\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `mergeDateAndTime` method",
              "introduction": [
                "Remove the `mergeDateAndTime` method\n\nThe `mergeDateAndTime` method has been removed.\nYou can use the `setHours`, `setMinutes`, and `setSeconds` methods to recreate its behavior:\n\n```diff\n-const result = adapter.mergeDateAndTime(valueWithDate, valueWithTime);\n+const mergeDateAndTime = <TDate>(\n+   dateParam,\n+   timeParam,\n+ ) => {\n+   let mergedDate = dateParam;\n+   mergedDate = utils.setHours(mergedDate, utils.getHours(timeParam));\n+   mergedDate = utils.setMinutes(mergedDate, utils.getMinutes(timeParam));\n+   mergedDate = utils.setSeconds(mergedDate, utils.getSeconds(timeParam));\n+\n+   return mergedDate;\n+ };\n+\n+const result = mergeDateAndTime(valueWithDate, valueWithTime);\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `parseISO` method",
              "introduction": [
                "Remove the `parseISO` method\n\nThe `parseISO` method has been removed.\nYou can directly use your date library:\n\n```diff\n // For Day.js\n-const value = adapter.parseISO(isoString);\n+const value = dayjs(isoString);\n\n // For Luxon\n-const value = adapter.parseISO(isoString);\n+const value = DateTime.fromISO(isoString);\n\n // For DateFns\n-const value = adapter.parseISO(isoString);\n+const value = dateFns.parseISO(isoString);\n\n // For Moment\n-const value = adapter.parseISO(isoString);\n+const value = moment(isoString, true);\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Remove the `toISO` method",
              "introduction": [
                "Remove the `toISO` method\n\nThe `toISO` method has been removed.\nYou can directly use your date library:\n\n```diff\n // For Day.js\n-const isoString = adapter.toISO(value);\n+const isoString = value.toISOString();\n\n // For Luxon\n-const isoString = adapter.toISO(value);\n+const isoString = value.toUTC().toISO({ format: 'extended' });\n\n // For DateFns\n-const isoString = adapter.toISO(value);\n+const isoString = dateFns.formatISO(value, { format: 'extended' });\n\n // For Moment\n-const isoString = adapter.toISO(value);\n+const isoString = value.toISOString();\n```\n\nThe `getYearRange` method used to accept two params and now accepts a tuple to be consistent with the `isWithinRange` method:\n\n```diff\n-adapter.getYearRange(start, end);\n+adapter.getYearRange([start, end])\n```\n\n</details>"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Modified methods",
          "introduction": [
            "Modified methods\n\n<details>\n  <summary>Show breaking changes</summary>"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Restrict the input format of the `date` method",
              "introduction": [
                "Restrict the input format of the `date` method\n\nThe `date` method now have the behavior of the v6 `dateWithTimezone` method.\nIt no longer accept `any` as a value but only `string | null | undefined`\n\n```diff\n-adapter.date(new Date());\n+adapter.date();\n\n-adapter.date(new Date('2022-04-17');\n+adapter.date('2022-04-17');\n\n-adapter.date(new Date(2022, 3, 17, 4, 5, 34));\n+adapter.date('2022-04-17T04:05:34');\n\n-adapter.date(new Date('Invalid Date'));\n+adapter.getInvalidDate();\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Restrict the input format of the `isEqual` method",
              "introduction": [
                "Restrict the input format of the `isEqual` method\n\nThe `isEqual` method used to accept any type of value for its two input and tried to parse them before checking if they were equal.\nThe method has been simplified and now only accepts an already-parsed date or `null` (ie: the same formats used by the `value` prop in the pickers)\n\n```diff\n const adapterDayjs = new AdapterDayjs();\n const adapterLuxon = new AdapterLuxon();\n const adapterDateFns = new AdapterDateFns();\n const adapterMoment = new AdapterMoment();\n\n // Supported formats\n const isEqual = adapterDayjs.isEqual(null, null); // Same for the other adapters\n const isEqual = adapterLuxon.isEqual(DateTime.now(), DateTime.fromISO('2022-04-17'));\n const isEqual = adapterMoment.isEqual(moment(), moment('2022-04-17'));\n const isEqual = adapterDateFns.isEqual(new Date(), new Date('2022-04-17'));\n\n // Non-supported formats (JS Date)\n-const isEqual = adapterDayjs.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterDayjs.isEqual(dayjs(), dayjs('2022-04-17'));\n\n-const isEqual = adapterLuxon.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterLuxon.isEqual(DateTime.now(), DateTime.fromISO('2022-04-17'));\n\n-const isEqual = adapterMoment.isEqual(new Date(), new Date('2022-04-17'));\n+const isEqual = adapterMoment.isEqual(moment(), moment('2022-04-17'));\n\n // Non-supported formats (string)\n-const isEqual = adapterDayjs.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterDayjs.isEqual(dayjs('2022-04-17'), dayjs('2022-04-17'));\n\n-const isEqual = adapterLuxon.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterLuxon.isEqual(DateTime.fromISO('2022-04-17'), DateTime.fromISO('2022-04-17'));\n\n-const isEqual = adapterMoment.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterMoment.isEqual(moment('2022-04-17'), moment('2022-04-17'));\n\n-const isEqual = adapterDateFns.isEqual('2022-04-16', '2022-04-17');\n+const isEqual = adapterDateFns.isEqual(new Date('2022-04-17'), new Date('2022-04-17'));\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Restrict the input format of the `isValid` method",
              "introduction": [
                "Restrict the input format of the `isValid` method\n\nThe `isValid` method used to accept any type of value and tried to parse them before checking their validity.\nThe method has been simplified and now only accepts an already-parsed date or `null`.\nWhich is the same type as the one accepted by the components `value` prop.\n\n```diff\n const adapterDayjs = new AdapterDayjs();\n const adapterLuxon = new AdapterLuxon();\n const adapterDateFns = new AdapterDateFns();\n const adapterMoment = new AdapterMoment();\n\n // Supported formats\n const isValid = adapterDayjs.isValid(null); // Same for the other adapters\n const isValid = adapterLuxon.isValid(DateTime.now());\n const isValid = adapterMoment.isValid(moment());\n const isValid = adapterDateFns.isValid(new Date());\n\n // Non-supported formats (JS Date)\n-const isValid = adapterDayjs.isValid(new Date('2022-04-17'));\n+const isValid = adapterDayjs.isValid(dayjs('2022-04-17'));\n\n-const isValid = adapterLuxon.isValid(new Date('2022-04-17'));\n+const isValid = adapterLuxon.isValid(DateTime.fromISO('2022-04-17'));\n\n-const isValid = adapterMoment.isValid(new Date('2022-04-17'));\n+const isValid = adapterMoment.isValid(moment('2022-04-17'));\n\n // Non-supported formats (string)\n-const isValid = adapterDayjs.isValid('2022-04-17');\n+const isValid = adapterDayjs.isValid(dayjs('2022-04-17'));\n\n-const isValid = adapterLuxon.isValid('2022-04-17');\n+const isValid = adapterLuxon.isValid(DateTime.fromISO('2022-04-17'));\n\n-const isValid = adapterMoment.isValid('2022-04-17');\n+const isValid = adapterMoment.isValid(moment('2022-04-17'));\n\n-const isValid = adapterDateFns.isValid('2022-04-17');\n+const isValid = adapterDateFns.isValid(new Date('2022-04-17'));\n```\n\n</details>"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "Removed internal types",
      "introduction": [
        "Removed internal types\n\nThe following internal types were exported by mistake and have been removed from the public API:\n\n- `UseDateFieldDefaultizedProps`\n- `UseTimeFieldDefaultizedProps`\n- `UseDateTimeFieldDefaultizedProps`\n- `UseSingleInputDateRangeFieldComponentProps`\n- `UseSingleInputTimeRangeFieldComponentProps`\n- `UseSingleInputDateTimeRangeFieldComponentProps`"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}