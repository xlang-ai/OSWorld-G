{
  "name": "migration-tree-view-v6",
  "introduction": [
    "# Migration from v6 to v7\n\n<p class=\"description\">This guide describes the changes needed to migrate the Tree View from v6 to v7.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Introduction",
      "introduction": [
        "Introduction\n\nThis is a reference guide for upgrading `@mui/x-tree-view` from v6 to v7.\nTo read more about the changes from the new major, check out [the blog post about the release of MUI X v7](https://mui.com/blog/mui-x-v7-beta/)."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Start using the new release",
      "introduction": [
        "Start using the new release\n\nIn `package.json`, change the version of the Tree View package to `^7.0.0`.\n\n```diff\n-\"@mui/x-tree-view\": \"^6.0.0\",\n+\"@mui/x-tree-view\": \"^7.0.0\",\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Update `@mui/material` package",
      "introduction": [
        "Update `@mui/material` package\n\nTo have the option of using the latest API from `@mui/material`, the package peer dependency version has been updated to `^5.15.14`.\nIt is a change in minor version only, so it should not cause any breaking changes.\nPlease update your `@mui/material` package to this or a newer version."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Run codemods",
      "introduction": [
        "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v7.\nYou can run `v7.0.0/tree-view/preset-safe` targeting only Tree View or `v7.0.0/preset-safe` to target other MUI X components like the Data Grid as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n<!-- #default-branch-switch -->\n\n```bash\n# Tree View specific\nnpx @mui/x-codemod@latest v7.0.0/tree-view/preset-safe <path>\n\n# Target other MUI X components as well\nnpx @mui/x-codemod@latest v7.0.0/preset-safe <path>\n```\n\n:::info\nIf you want to run the codemods one by one, check out the codemods included in the [preset-safe codemod for the Tree View](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/README.md#preset-safe-for-tree-view-v700) for more details.\n:::\n\nBreaking changes that are handled by `preset-safe` codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen or next to the specific point that is handled by it.\n\nIf you have already applied the `v7.0.0/tree-view/preset-safe` (or `v7.0.0/preset-safe`) codemod, then you should not need to take any further action on these items. If there's a specific part of the breaking change that is not part of the codemod or needs some manual work, it will be listed in the end of each section.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading, cross-file dependencies, etc., the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<RichTreeView {...newProps} />\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Breaking changes",
      "introduction": [
        "Breaking changes\n\nSince `v7` is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Drop the legacy bundle",
          "introduction": [
            "Drop the legacy bundle\n\nThe support for IE 11 has been removed from all MUI X packages.\nThe `legacy` bundle that used to support old browsers like IE 11 is no longer included.\n\n:::info\nIf you need support for IE 11, you will need to keep using the latest version of the `v6` release.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Drop webpack 4 support",
          "introduction": [
            "Drop webpack 4 support\n\nDropping old browsers support also means that we no longer transpile some features that are natively supported by modern browsers – like [Nullish Coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing) and [Optional Chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining).\n\nThese features are not supported by webpack 4, so if you are using webpack 4, you will need to transpile these features yourself or upgrade to webpack 5.\n\nHere is an example of how you can transpile these features on webpack 4 using the `@babel/preset-env` preset:\n\n```diff\n // webpack.config.js\n\n module.exports = (env) => ({\n   // ...\n   module: {\n     rules: [\n       {\n         test: /\\.[jt]sx?$/,\n-        exclude: /node_modules/,\n+        exclude: [\n+          {\n+            test: path.resolve(__dirname, 'node_modules'),\n+            exclude: [path.resolve(__dirname, 'node_modules/@mui/x-tree-view')],\n+          },\n+        ],\n       },\n     ],\n   },\n });\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Rename `nodeId` to `itemId`",
          "introduction": [
            "✅ Rename `nodeId` to `itemId`\n\nThe required `nodeId` prop used by the Tree Item has been renamed to `itemId` for consistency:\n\n```diff\n <TreeView>\n-  <TreeItem label=\"Item 1\" nodeId=\"one\">\n+  <TreeItem label=\"Item 1\" itemId=\"one\">\n </TreeView>\n```\n\nThe same change has been applied to the `ContentComponent` prop:\n\n```diff\n const CustomContent = React.forwardRef((props, ref) => {\n-  const id = props.nodeId;\n+  const id = props.itemId;\n   // Render some UI\n });\n\n function App() {\n   return (\n     <SimpleTreeView>\n       <TreeItem ContentComponent={CustomContent} />\n     </SimpleTreeView>\n   )\n }\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Use Simple Tree View instead of Tree View",
          "introduction": [
            "✅ Use Simple Tree View instead of Tree View\n\nThe `<TreeView />` component has been deprecated and will be removed in the next major.\nYou can start replacing it with the new `<SimpleTreeView />` component which has exactly the same API:\n\n```diff\n-import { TreeView } from '@mui/x-tree-view';\n+import { SimpleTreeView } from '@mui/x-tree-view';\n\n-import { TreeView } from '@mui/x-tree-view/TreeView';\n+import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';\n\n   return (\n-    <TreeView>\n+    <SimpleTreeView>\n       <TreeItem itemId=\"1\" label=\"First item\" />\n-    </TreeView>\n+    </SimpleTreeView>\n   );\n```\n\nIf you were using theme augmentation, you will also need to migrate it:\n\n```diff\n const theme = createTheme({\n   components: {\n-    MuiTreeView: {\n+    MuiSimpleTreeView: {\n       styleOverrides: {\n         root: {\n           opacity: 0.5,\n         },\n       },\n     },\n   },\n });\n```\n\nIf you were using the `treeViewClasses` object, you can replace it with the new `simpleTreeViewClasses` object:\n\n```diff\n import { treeViewClasses } from '@mui/x-tree-view/TreeView';\n import { simpleTreeViewClasses } from '@mui/x-tree-view/SimpleTreeView';\n\n-const rootClass = treeViewClasses.root;\n+const rootClass = simpleTreeViewClasses.root;\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Use slots to define the item icons",
          "introduction": [
            "Use slots to define the item icons"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Define `expandIcon`",
              "introduction": [
                "Define `expandIcon`\n\nThe icon used to expand the children of an item (rendered when this item is collapsed)\nis now defined as a slot both on the `<TreeView />` and the `<TreeItem />` components.\n\nIf you were using the `ChevronRight` icon from `@mui/icons-material`,\nyou can stop passing it to your component because it is now the default value:\n\n```diff\n-import ChevronRightIcon from '@mui/icons-material/ChevronRight';\n\n <SimpleTreeView\n-  defaultExpandIcon={<ChevronRightIcon />}\n >\n   {items}\n </SimpleTreeView>\n```\n\nIf you were passing another icon to your Tree View component,\nyou need to use the new `expandIcon` slot on this component:\n\n```diff\n <SimpleTreeView\n-  defaultExpandIcon={<MyCustomExpandIcon />}\n+  slots={{ expandIcon: MyCustomExpandIcon }}\n >\n   {items}\n </SimpleTreeView>\n```\n\n:::warning\nNote that the `slots` prop expects a React component, not the JSX element returned when rendering this component.\n:::\n\nIf you were passing another icon to your `<TreeItem />` component,\nyou need to use the new `expandIcon` slot on this component:\n\n```diff\n  <SimpleTreeView>\n    <TreeItem\n      itemId=\"1\"\n      label=\"Item 1\"\n-     expandIcon={<MyCustomExpandIcon />}\n+     slots={{ expandIcon: MyCustomExpandIcon }}\n    />\n  </SimpleTreeView>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Define `collapseIcon`",
              "introduction": [
                "Define `collapseIcon`\n\nThe icon used to collapse the children of an item (rendered when this item is expanded)\nis now defined as a slot both on the `<TreeView />` and `<TreeItem />` components.\n\nIf you were using the `ExpandMore` icon from `@mui/icons-material`,\nyou can stop passing it to your component because it is now the default value:\n\n```diff\n- import ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\n  <SimpleTreeView\n-   defaultCollapseIcon={<ExpandMoreIcon />}\n  >\n    {items}\n  </SimpleTreeView>\n```\n\nIf you were passing another icon to your Tree View component,\nyou need to use the new `collapseIcon` slot on this component:\n\n```diff\n  <SimpleTreeView\n-   defaultCollapseIcon={<MyCustomCollapseIcon />}\n+   slots={{ collapseIcon: MyCustomCollapseIcon }}\n  >\n    {items}\n  </SimpleTreeView>\n```\n\n:::warning\nNote that the `slots` prop expects a React component, not the JSX element returned when rendering this component.\n:::\n\nIf you were passing another icon to your `<TreeItem />` component,\nyou need to use the new `collapseIcon` slot on this component:\n\n```diff\n  <SimpleTreeView>\n    <TreeItem\n      itemId=\"1\"\n      label=\"Item 1\"\n-     collapseIcon={<MyCustomCollapseIcon />}\n+     slots={{ collapseIcon: MyCustomCollapseIcon }}\n    />\n  </SimpleTreeView>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Replace `parentIcon`",
              "introduction": [
                "Replace `parentIcon`\n\nThe `parentIcon` prop has been removed from the Tree View components.\n\nIf you were passing an icon to your Tree View component,\nyou can achieve the same behavior\nby passing the same icon to both the `collapseIcon` and the `expandIcon` slots on this component:\n\n```diff\n  <SimpleTreeView\n-   defaultParentIcon={<MyCustomParentIcon />}\n+   slots={{ collapseIcon: MyCustomParentIcon, expandIcon: MyCustomParentIcon }}\n  >\n    {items}\n  </SimpleTreeView>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Define `endIcon`",
              "introduction": [
                "Define `endIcon`\n\nThe icon rendered next to an item without children\nis now defined as a slot both on the `<TreeView />` and `<TreeItem />` components.\n\nIf you were passing an icon to your Tree View component,\nyou need to use the new `endIcon` slot on this component:\n\n```diff\n  <SimpleTreeView\n-   defaultEndIcon={<MyCustomEndIcon />}\n+   slots={{ endIcon: MyCustomEndIcon }}\n  >\n    {items}\n  </SimpleTreeView>\n```\n\n:::warning\nNote that the `slots` prop expects a React component, not the JSX element returned when rendering this component.\n:::\n\nIf you were passing an icon to your `<TreeItem />` component,\nyou need to use the new `endIcon` slot on this component:\n\n```diff\n  <SimpleTreeView>\n    <TreeItem\n      itemId=\"1\"\n      label=\"Item 1\"\n-     endIcon={<MyCustomEndIcon />}\n+     slots={{ endIcon: MyCustomEndIcon }}\n    />\n  </SimpleTreeView>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Define `icon`",
              "introduction": [
                "Define `icon`\n\nThe icon rendered next to an item\nis now defined as a slot on the `<TreeItem />` component.\n\nIf you were passing an icon to your `<TreeItem />` component,\nyou need to use the new `icon` slot on this component:\n\n```diff\n  <SimpleTreeView>\n    <TreeItem\n      itemId=\"1\"\n      label=\"Item 1\"\n-     icon={<MyCustomIcon />}\n+     slots={{ icon: MyCustomIcon }}\n    />\n  </SimpleTreeView>\n```\n\n:::warning\nNote that the `slots` prop expects a React component, not the JSX element returned when rendering this component.\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "✅ Use slots to define the group transition",
          "introduction": [
            "✅ Use slots to define the group transition\n\nThe component used to animate the item children\nis now defined as a slot on the `<TreeItem />` component.\n\nIf you were passing a `TransitionComponent` or `TransitionProps` to your `<TreeItem />` component,\nyou need to use the new `groupTransition` slot on this component:\n\n```diff\n <SimpleTreeView>\n   <TreeItem\n     itemId=\"1\"\n     label=\"Item 1\"\n-    TransitionComponent={Fade}\n-    TransitionProps={{ timeout: 600 }}\n+    slots={{ groupTransition: Fade }}\n+    slotProps={{ groupTransition: { timeout: 600 } }}\n   />\n </SimpleTreeView>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Rename the `group` class of the Tree Item component",
          "introduction": [
            "Rename the `group` class of the Tree Item component\n\nThe `group` class of the `<TreeItem />` component has been renamed to `groupTransition` to match with its new slot name.\n\n```diff\n const StyledTreeItem = styled(TreeItem)({\n-  [`& .${treeItemClasses.group}`]: {\n+  [`& .${treeItemClasses.groupTransition}`]: {\n    marginLeft: 20,\n  },\n });\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Rename `onNodeToggle`, `expanded` and `defaultExpanded`",
          "introduction": [
            "✅ Rename `onNodeToggle`, `expanded` and `defaultExpanded`\n\nThe expansion props have been renamed to better describe their behaviors:\n\n| Old name          | New name                |\n| :- |\n| `onNodeToggle`    | `onExpandedItemsChange` |\n| `expanded`        | `expandedItems`         |\n| `defaultExpanded` | `defaultExpandedItems`  |\n\n```diff\n <TreeView\n-  onNodeToggle={handleExpansionChange}\n+  onExpandedItemsChange={handleExpansionChange}\n\n-  expanded={expandedItems}\n+  expandedItems={expandedItems}\n\n-  defaultExpanded={defaultExpandedItems}\n+  defaultExpandedItems={defaultExpandedItems}\n />\n```\n\n:::info\nIf you were using the `onNodeToggle` prop to react to the expansion or collapse of a specific item,\nyou can use the new `onItemExpansionToggle` prop which is called whenever an item is expanded or collapsed with its id and expansion status\n\n```tsx\n// It is also available on the deprecated Tree View component\n<SimpleTreeView\n  onItemExpansionToggle={(event, itemId, isExpanded) =>\n    console.log(itemId, isExpanded)\n  }\n/>\n```\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Rename `onNodeSelect`, `selected`, and `defaultSelected`",
          "introduction": [
            "✅ Rename `onNodeSelect`, `selected`, and `defaultSelected`\n\nThe selection props have been renamed to better describe their behaviors:\n\n| Old name          | New name                |\n| :- |\n| `onNodeSelect`    | `onSelectedItemsChange` |\n| `selected`        | `selectedItems`         |\n| `defaultSelected` | `defaultSelectedItems`  |\n\n```diff\n <TreeView\n-  onNodeSelect={handleSelectionChange}\n+  onSelectedItemsChange={handleSelectionChange}\n\n-  selected={selectedItems}\n+  selectedItems={selectedItems}\n\n-  defaultSelected={defaultSelectedItems}\n+  defaultSelectedItems={defaultSelectedItems}\n />\n```\n\n:::info\nIf you were using the `onNodeSelect` prop to react to the selection or deselection of a specific item,\nyou can use the new `onItemSelectionToggle` prop which is called whenever an item is selected or deselected with its id and selection status.\n\n```tsx\n// It is also available on the deprecated `<TreeView />` component\n<SimpleTreeView\n  onItemSelectionToggle={(event, itemId, isSelected) =>\n    console.log(itemId, isSelected)\n  }\n/>\n```\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Focus the Tree Item instead of the Tree View",
          "introduction": [
            "Focus the Tree Item instead of the Tree View\n\nThe focus is now applied to the Tree Item root element instead of the Tree View root element.\n\nThis change will allow new features that require the focus to be on the Tree Item,\nlike the drag and drop reordering of items.\nIt also solves several issues with focus management,\nlike the inability to scroll to the focused item when a lot of items are rendered.\n\nThis will mostly impact how you write tests to interact with the Tree View:\n\nFor example, if you were writing a test with `react-testing-library`, here is what the changes could look like:\n\n```diff\n it('test example on first item', () => {\n   const { getByRole } = render(\n     <SimpleTreeView>\n       <TreeItem itemId=\"one\" id=\"one\">One</TreeItem>\n       <TreeItem itemId=\"two\" id=\"two\">Two</TreeItem>\n    </SimpleTreeView>\n   );\n\n   // Set the focus to the item \"One\"\n-  const tree = getByRole('tree');\n+  const treeItem = getByRole('treeitem', { name: 'One' });\n   act(() => {\n-    tree.focus();\n+    treeItem.focus();\n   });\n-  fireEvent.keyDown(tree, { key: 'ArrowDown' });\n+  fireEvent.keyDown(treeItem, { key: 'ArrowDown' });\n\n  // Check if the new focused item is \"Two\"\n- expect(tree)to.have.attribute('aria-activedescendant', 'two');\n+ expect(document.activeElement).to.have.attribute('id', 'two');\n })\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Use `useTreeItemState` instead of `useTreeItem`",
          "introduction": [
            "✅ Use `useTreeItemState` instead of `useTreeItem`\n\nThe `useTreeItem` hook has been renamed `useTreeItemState`.\nThis will help create a new headless version of the Tree Item component based on a future `useTreeItem` hook.\n\n```diff\n-import { TreeItem, useTreeItem } from '@mui/x-tree-view/TreeItem';\n+import { TreeItem, useTreeItemState } from '@mui/x-tree-view/TreeItem';\n\n const CustomContent = React.forwardRef((props, ref) => {\n-  const { disabled } = useTreeItem(props.itemId);\n+  const { disabled } = useTreeItemState(props.itemId);\n\n   // Render some UI\n });\n\n function App() {\n   return (\n     <SimpleTreeView>\n       <TreeItem ContentComponent={CustomContent} />\n     </SimpleTreeView>\n   )\n }\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Rename `onNodeFocus`",
          "introduction": [
            "✅ Rename `onNodeFocus`\n\nThe `onNodeFocus` callback has been renamed to `onItemFocus` for consistency:\n\n```diff\n <SimpleTreeView\n-  onNodeFocus={onNodeFocus}\n+  onItemFocus={onItemFocus}\n />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    }
  ]
}