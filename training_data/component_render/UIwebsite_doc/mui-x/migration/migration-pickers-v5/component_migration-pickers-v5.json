{
  "name": "migration-pickers-v5",
  "introduction": [
    "# Migration from v5 to v6\n\n<p class=\"description\">This guide describes the changes needed to migrate the Date and Time Pickers from v5 to v6.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Introduction",
      "introduction": [
        "Introduction\n\nTo get started, check out [the blog post about the release of MUI X v6](https://mui.com/blog/mui-x-v6/)."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Start using the new release",
      "introduction": [
        "Start using the new release\n\nIn `package.json`, change the version of the date pickers package to `^6.0.0`.\n\n```diff\n-\"@mui/x-date-pickers\": \"^5.0.0\",\n+\"@mui/x-date-pickers\": \"^6.0.0\",\n```\n\nSince v6 is a major release, it contains changes that affect the public API.\nThese changes were done for consistency, improved stability and to make room for new features.\nDescribed below are the steps needed to migrate from v5 to v6."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Run codemods",
      "introduction": [
        "Run codemods\n\nThe `preset-safe` codemod will automatically adjust the bulk of your code to account for breaking changes in v6. You can run `v6.0.0/pickers/preset-safe` targeting only Date and Time Pickers or `v6.0.0/preset-safe` to target Data Grid as well.\n\nYou can either run it on a specific file, folder, or your entire codebase when choosing the `<path>` argument.\n\n```bash\n# Date and Time Pickers specific\nnpx @mui/x-codemod@latest v6.0.0/pickers/preset-safe <path>\n\n# Target Data Grid as well\nnpx @mui/x-codemod@latest v6.0.0/preset-safe <path>\n```\n\n:::info\nIf you want to run the transformers one by one, check out the transformers included in the [preset-safe codemod for pickers](https://github.com/mui/mui-x/blob/HEAD/packages/x-codemod/README.md#preset-safe-for-pickers-v600) for more details.\n:::\n\nBreaking changes that are handled by this codemod are denoted by a ✅ emoji in the table of contents on the right side of the screen.\n\nIf you have already applied the `v6.0.0/pickers/preset-safe` (or `v6.0.0/preset-safe`) codemod, then you should not need to take any further action on these items.\n\nAll other changes must be handled manually.\n\n:::warning\nNot all use cases are covered by codemods. In some scenarios, like props spreading, cross-file dependencies, etc., the changes are not properly identified and therefore must be handled manually.\n\nFor example, if a codemod tries to rename a prop, but this prop is hidden with the spread operator, it won't be transformed as expected.\n\n```tsx\n<DatePicker {...pickerProps} />\n```\n\nAfter running the codemods, make sure to test your application and that you don't have any console errors.\n\nFeel free to [open an issue](https://github.com/mui/mui-x/issues/new/choose) for support if you need help to proceed with your migration.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Picker components",
      "introduction": [
        "Picker components"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "✅ Rename the `inputFormat` prop",
          "introduction": [
            "✅ Rename the `inputFormat` prop\n\nThe `inputFormat` prop has been renamed to `format` on all the pickers components.\n\n```diff\n <DatePicker\n-  inputFormat=\"YYYY\"\n+  format=\"YYYY\"\n />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Update expected values in tests",
          "introduction": [
            "Update expected values in tests\n\nThe value rendered in the input might have been modified.\nIf you are using RTL or if your date contains single digits sections, non-ASCII characters will be added.\n\nIf your tests are relying on the input values, you can clean them with the following method.\n\n```ts\nexport const cleanString = (dirtyString: string) =>\n  dirtyString\n    .replace(/[\\u2066\\u2067\\u2068\\u2069]/g, '') // Remove non-ASCII characters\n    .replace(/ \\/ /g, '/'); // Remove extra spaces\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Update the format of the `value` prop",
          "introduction": [
            "Update the format of the `value` prop\n\nPreviously, it was possible to provide any format that your date management library was able to parse.\nFor instance, you could pass `value={new Date()}` when using `AdapterDayjs`.\nThis behavior brought a lot of confusion.\n\nIn v6, the format expected by the `value` prop is the same as for any other prop holding a date.\nHere is the syntax to initialize a date picker at the current date for each adapter:\n\n```tsx\n// Date-fns\n<DatePicker value={new Date()} />;\n\n// Dayjs\nimport dayjs from 'dayjs';\n<DatePicker value={dayjs()} />;\n\n// Moment\nimport moment from 'moment';\n<DatePicker value={moment()} />;\n\n// Luxon\nimport { DateTime } from 'luxon';\n<DatePicker value={DateTime.now()} />;\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Stop rendering a clock on desktop",
          "introduction": [
            "Stop rendering a clock on desktop\n\nIn desktop mode, the `DateTimePicker` and `TimePicker` components will no longer render the [`TimeClock`](/x/react-date-pickers/time-clock/) component.\nThe `TimeClock` component has been replaced with a new [`DigitalClock`](/x/react-date-pickers/digital-clock/) component instead.\nThe behavior on `Mobile` and `Static` variants is still the same.\nIf you were relying on Clock Picker in desktop mode for tests—make sure to check [testing caveats](/x/react-date-pickers/base-concepts/#testing-caveats) to choose the best replacement for it.\n\nYou can manually re-enable the previous clock component using the new `viewRenderers` prop.\nThe code below enables the `TimeClock` UI on all the `DesktopTimePicker` and `DesktopDateTimePicker` in your application.\n\nTake a look at the [default props via theme documentation](/material-ui/customization/theme-components/#theme-default-props) for more information.\n\n```tsx\nconst theme = createTheme({\n  components: {\n    MuiDesktopTimePicker: {\n      defaultProps: {\n        viewRenderers: {\n          hours: renderTimeViewClock,\n          minutes: renderTimeViewClock,\n          seconds: renderTimeViewClock,\n        },\n      },\n    },\n    MuiDesktopDateTimePicker: {\n      defaultProps: {\n        viewRenderers: {\n          hours: renderTimeViewClock,\n          minutes: renderTimeViewClock,\n          seconds: renderTimeViewClock,\n        },\n      },\n    },\n  },\n});\n```\n\n:::success\nIf you are using TypeScript, please make sure to add the [theme augmentation](/x/react-date-pickers/base-concepts/#typescript) to your project.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Remove the keyboard view",
          "introduction": [
            "Remove the keyboard view\n\nThe picker components no longer have a keyboard view to render the input inside the modal on mobile.\n\n- If your date is easier to edit with the keyboard (for example a birthdate), you can directly use the new field components:\n\n  ```diff\n   function App() {\n     return (\n  -    <DatePicker />\n  +    <DateField />\n     )\n   }\n  ```\n\n- If you want to keep the old keyboard view, you can pass a custom `Layout` component slot to re-introduce the keyboard view.",
            ":::info\nAt some point, the mobile pickers should have a prop allowing to have an editable field without opening the modal.\n:::"
          ],
          "code_path": [
            "MobileKeyboardView.js",
            null
          ],
          "children": []
        },
        {
          "name": "✅ Rename or refactor `shouldDisableTime` prop",
          "introduction": [
            "✅ Rename or refactor `shouldDisableTime` prop\n\nThe `shouldDisableTime` prop signature has been changed.\nPreviously it did receive `value` as a `number` of hours, minutes, or seconds. Now it will receive the date object (based on the used adapter).\nThis will allow more powerful usage and will be compatible with the future digital time selection view.\n\nEither rename the prop to the newly added, but deprecated `shouldDisableClock` or refactor usage to account for the change in prop type.\nThe codemod will take care of renaming the prop to keep the existing functionality but feel free to update to the new `shouldDisableTime` prop on your own.\n\n```diff\n // ℹ️ Rename and keep using the deprecated prop\n // This is the change that the codemod will apply\n <DateTimePicker\n-  shouldDisableTime={(timeValue, view) => view === 'hours' && timeValue < 12}\n+  shouldDisableClock={(timeValue, view) => view === 'hours' && timeValue < 12}\n />\n\n // ✅ Update your code to use the provided date value parameter instead of a number\n <DateTimePicker\n-  shouldDisableTime={(timeValue, view) => view === 'hours' && timeValue < 12}\n+  shouldDisableTime={(value, view) => view === 'hours' && value.hour() < 12}\n />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Change the DOM structure",
          "introduction": [
            "Change the DOM structure\n\n- The internal `CalendarOrClockPicker` component has been removed and all its element have been moved to the new `Layout` component slot.\n\n  The DOM node containing the toolbar and the view content (the `root` slot of the `CalendarOrClockPicker` component) no longer exists.\n  The closest equivalent is now the `contentWrapper` slot of the `PickersLayout` component, which do not contain the toolbar.\n  If you need a DOM node containing the toolbar and the view content, you will have to pass a [custom `Layout` component slot](/x/react-date-pickers/custom-layout/#dom-customization).\n\n  ```diff\n   const theme = createTheme({\n     components: {\n  -    MuiCalendarOrClockPicker: {\n  +    MuiPickersLayout: {\n         styleOverrides: {\n  -        root: {\n  +        contentWrapper: {\n             backgroundColor: 'red',\n           },\n         },\n       },\n     },\n   });\n  ```\n\n- The internal `PickerStaticWrapper` component has been removed and all its element have been moved to the new `Layout` component slot.\n\n  ```diff\n   const theme = createTheme({\n     components: {\n  -    MuiPickerStaticWrapper: {\n  +    MuiPickersLayout: {\n         styleOverrides: {\n           root: {\n             opacity: 0.5,\n           },\n         },\n       },\n     },\n   });\n  ```\n\n  The DOM node containing the toolbar and the view content (the `content` slot of the `PickerStaticWrapper` component) no longer exists.\n  The closest equivalent is now the `contentWrapper` slot of the `PickersLayout` component, which do not contain the toolbar.\n  If you need a DOM node containing the toolbar and the view content, you will have to pass a [custom `Layout` component slot](/x/react-date-pickers/custom-layout/#dom-customization).\n\n  ```diff\n   const theme = createTheme({\n     components: {\n  -    MuiPickerStaticWrapper: {\n  +    MuiPickersLayout: {\n         styleOverrides: {\n  -        content: {\n  +        contentWrapper: {\n             opacity: 0.5,\n           },\n         },\n       },\n     },\n   });\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Date library and adapters",
      "introduction": [
        "Date library and adapters"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "✅ Do not import adapter from `@date-io`",
          "introduction": [
            "✅ Do not import adapter from `@date-io`\n\nIn v5, it was possible to import adapters either from either `@date-io` or `@mui/x-date-pickers` which were the same.\nIn v6, the adapters are extended by `@mui/x-date-pickers` to support [fields components](/x/react-date-pickers/fields/).\nWhich means adapters cannot be imported from `@date-io` anymore. They need to be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`.\nOtherwise, some methods will be missing.\nIf you do not find the adapter you were using—there probably was a reason for it, but you can raise an issue expressing interest in it.\n\n```diff\n-import AdapterJalaali from '@date-io/jalaali';\n+import { AdapterMomentJalaali } from '@mui/x-date-pickers/AdapterMomentJalaali';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Increase Luxon minimal version",
          "introduction": [
            "Increase Luxon minimal version\n\nThe v6 `AdapterLuxon` now requires `luxon` version `3.0.2` or higher in order to work.\n\nTake a look at the [Upgrading Luxon](https://moment.github.io/luxon/#/upgrading) guide if you are using an older version."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "View components",
      "introduction": [
        "View components"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "✅ Rename components",
          "introduction": [
            "✅ Rename components\n\nThe view components allowing to pick a time, a date or parts of a date without an input have been renamed to better fit their usage:\n\n```diff\n-<CalendarPicker {...props} />\n+<DateCalendar {...props} />\n\n-<DayPicker {...props} />\n+<DayCalendar {...props} />\n\n-<CalendarPickerSkeleton {...props} />\n+<DayCalendarSkeleton {...props} />\n\n-<MonthPicker {...props} />\n+<MonthCalendar {...props} />\n\n-<YearPicker {...props} />\n+<YearCalendar {...props} />\n\n-<ClockPicker {...props} />\n+<TimeClock {...props} />\n```\n\nComponent names in the theme have changed as well:\n\n```diff\n-MuiCalendarPicker: {\n+MuiDateCalendar: {\n\n-MuiDayPicker: {\n+MuiDayCalendar: {\n\n-MuiCalendarPickerSkeleton: {\n+MuiDayCalendarSkeleton: {\n\n-MuiMonthPicker: {\n+MuiMonthCalendar: {\n\n-MuiYearPicker: {\n+MuiYearCalendar: {\n\n-MuiClockPicker: {\n+MuiTimeClock: {\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Rename `date` prop to `value`",
          "introduction": [
            "✅ Rename `date` prop to `value`\n\nThe `date` prop has been renamed to `value` on `MonthCalendar`, `YearCalendar`, `TimeClock`, and `DateCalendar` (components renamed in previous section):\n\n```diff\n-<MonthPicker date={dayjs()} />\n+<MonthCalendar value={dayjs()} />\n\n-<YearPicker date={dayjs()} />\n+<YearCalendar value={dayjs()} />\n\n-<ClockPicker date={dayjs()} />\n+<TimeClock value={dayjs()} />\n\n-<CalendarPicker date={dayjs()} />\n+<DateCalendar value={dayjs()} />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Use the 12h/24h format from the locale as the default value of the `ampm` prop on `TimeClock`",
          "introduction": [
            "Use the 12h/24h format from the locale as the default value of the `ampm` prop on `TimeClock`\n\nThe default value of the `ampm` prop changed from `false` to `utils.is12HourCycleInCurrentLocale()`.\nIt means that the `TimeClock` component will use a 12h time format for locales where the time is usually displayed with a 12h format.\n\nIf you want to keep the previous behavior, you just have to set the `ampm` prop to `false` (components renamed in previous section):\n\n```diff\n- <ClockPicker />\n+ <TimeClock ampm={false} />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Stop using the responsive classes on `PickersMonth` and `PickersYear`",
          "introduction": [
            "Stop using the responsive classes on `PickersMonth` and `PickersYear`\n\nThe `modeMobile` and `modeDesktop` classes have been removed from the `PickersMonth` and `PickersYear` internal components.\n\nIf you were using those classes on responsive components,\nyou can import `DEFAULT_DESKTOP_MODE_MEDIA_QUERY` from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro` (or use your custom media query if any):\n\n```diff\n <GlobalStyles\n   styles={{\n-    [`.${pickersYearClasses.modeDesktop}`]: {\n-      backgroundColor: 'red'\n-    }\n+    [DEFAULT_DESKTOP_MODE_MEDIA_QUERY]: {\n+      [`.${pickersYearClasses.root}`]: {\n+        backgroundColor: 'red'\n+      }\n+    }\n\n-    [`.${pickersYearClasses.modeMobile}`]: {\n-      backgroundColor: 'red'\n-    }\n+    [DEFAULT_DESKTOP_MODE_MEDIA_QUERY.replace('@media', '@media not')]: {\n+      [`.${pickersYearClasses.root}`]: {\n+        backgroundColor: 'red'\n+      }\n+    }\n   }}\n />\n```\n\n:::info\nWorks exactly the same way for `PickersMonth`\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Localization",
      "introduction": [
        "Localization"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "✅ Rename localization props",
          "introduction": [
            "✅ Rename localization props\n\nThe props used to set the text displayed in the pickers have been replaced by keys inside the `localeText` prop:\n\n| Removed prop                 | Property in the new `localText` prop                                              |\n| :----- |\n| `endText`                    | `end`                                                                             |\n| `getClockLabelText`          | `clockLabelText`                                                                  |\n| `getHoursClockNumberText`    | `hoursClockNumberText`                                                            |\n| `getMinutesClockNumberText`  | `minutesClockNumberText`                                                          |\n| `getSecondsClockNumberText`  | `secondsClockNumberText`                                                          |\n| `getViewSwitchingButtonText` | `calendarViewSwitchingButtonAriaLabel`                                            |\n| `leftArrowButtonText`        | `openPreviousView` (or `previousMonth` when the button changes the visible month) |\n| `rightArrowButtonText`       | `openNextView` (or `nextMonth` when the button changes the visible month)         |\n| `startText`                  | `start`                                                                           |\n| `getOpenDialogAriaText`      | `openDatePickerDialogue` /(or `openTimePickerDialogue` for time pickers)          |\n\nFor instance if you want to replace the `startText` / `endText`\n\n```diff\n <DateRangePicker\n-  startText=\"From\"\n-  endText=\"To\"\n+  localeText={{\n+    start: 'From',\n+    end: 'To',\n+  }}\n />\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Rename `locale` prop on `LocalizationProvider`",
          "introduction": [
            "✅ Rename `locale` prop on `LocalizationProvider`\n\nThe `locale` prop of the `LocalizationProvider` component have been renamed `adapterLocale`:\n\n```diff\n <LocalizationProvider\n   dateAdapter={AdapterDayjs}\n-  locale=\"fr\"\n+  adapterLocale=\"fr\"\n >\n   {children}\n </LocalizationProvider\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Component slots / component slot props",
      "introduction": [
        "Component slots / component slot props\n\nAll the props used to pass props to parts of the UI (for example to pass a prop to the input) have been replaced by component slot props.\nAll the props used to override parts of the UI (for example to pass a custom day renderer) have been replaced by component slots.\n\nYou can find more information about this pattern in the [Base UI documentation](https://mui.com/base-ui/getting-started/usage/#shared-props).\n\nThese changes apply to all the components that had the prop.\nFor example, the `ToolbarComponent` has been replaced by a `Toolbar` component slot on all pickers."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Input renderer (required in v5)",
          "introduction": [
            "Input renderer (required in v5)\n\n- The `renderInput` has been replaced by an `input` component slot props:\n\n  ```diff\n   <DatePicker\n  -  renderInput={(inputProps) => <TextField {...props} variant=\"outlined\" />}\n  +  slotProps={{ textField: { variant: 'outlined' } }}\n   />\n\n   <DateRangePicker\n  -  renderInput={(startProps, endProps) => (\n  -    <React.Fragment>\n  -      <TextField {...startProps} variant=\"outlined\" />\n  -      <Box sx={{ mx: 2 }}> - </Box>\n  -      <TextField {...endProps} variant=\"outlined\" />\n  -    </React.Fragment>\n  -  )}\n  +  slotProps={{ textField: { variant: 'outlined' } }}\n   />\n  ```\n\n- The Date Range Picker also have a new `fieldSeparator` component slot and component slot props to customize only this part of the UI:\n\n  ```diff\n   <DateRangePicker\n  -  renderInput={(startProps, endProps) => (\n  -    <React.Fragment>\n  -      <TextField {...startProps} />\n  -      <Box sx={{ mx: 2 }}> to </Box>\n  -      <TextField {...endProps} />\n  -    </React.Fragment>\n  -  )}\n  +  slotProps={{ fieldSeparator: { children: 'to' } }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Toolbar (`ToolbarComponent`)",
          "introduction": [
            "Toolbar (`ToolbarComponent`)\n\n- ✅ The `ToolbarComponent` has been replaced by a `toolbar` component slot:\n\n  ```diff\n   <DatePicker\n  -  ToolbarComponent={MyToolbar}\n  +  slots={{ toolbar: MyToolbar }}\n   />\n  ```\n\n- ✅ The `toolbarPlaceholder`, `toolbarFormat`, and `showToolbar` props have been moved to the `toolbar` component slot props:\n\n  ```diff\n   <DatePicker\n  -  toolbarPlaceholder=\"__\"\n  -  toolbarFormat=\"DD / MM / YYYY\"\n  -  showToolbar\n  +  slotProps={{\n  +    toolbar: {\n  +      toolbarPlaceholder: '__',\n  +      toolbarFormat: 'DD / MM / YYYY',\n  +      hidden: false,\n  +    }\n  +  }}\n   />\n  ```\n\n- ✅ The `toolbarTitle` prop has been moved to the localization object:\n\n  ```diff\n   <DatePicker\n  -  toolbarTitle=\"Title\"\n  +  localeText={{ toolbarTitle: 'Title' }}\n   />\n  ```\n\n- ✅ The toolbar related translation keys have been renamed to better fit their usage:\n\n  ```diff\n   <LocalizationProvider\n     localeText={{\n  -    datePickerDefaultToolbarTitle: 'Date Picker',\n  +    datePickerToolbarTitle: 'Date Picker',\n\n  -    timePickerDefaultToolbarTitle: 'Time Picker',\n  +    timePickerToolbarTitle: 'Time Picker',\n\n  -    dateTimePickerDefaultToolbarTitle: 'Date Time Picker',\n  +    dateTimePickerToolbarTitle: 'Date Time Picker',\n\n  -    dateRangePickerDefaultToolbarTitle: 'Date Range Picker',\n  +    dateRangePickerToolbarTitle: 'Date Range Picker',\n     }}\n   />\n  ```\n\n- The `onChange` / `openView` props on the toolbar have been renamed to `onViewChange` / `view`.\n\n  ```diff\n   const CustomToolbarComponent = props => (\n     <div>\n  -    <button onChange={() => props.onChange('day')}>Show day view</button>\n  +    <button onClick={() => props.onViewChange('day')}>Show day view</button>\n  -    <div>Current view: {props.openView}</div>\n  +    <div>Current view: {props.view}</div>\n     </div>\n   )\n\n   <DatePicker\n  -  ToolbarComponent={CustomToolbarComponent}\n  +  slots={{\n  +    toolbar: CustomToolbarComponent\n  +  }}\n   />\n  ```\n\n- The `currentlySelectingRangeEnd` / `setCurrentlySelectingRangeEnd` props on the Date Range Picker toolbar have been renamed to `rangePosition` / `onRangePositionChange`.\n\n  ```diff\n   const CustomToolbarComponent = props => (\n     <div>\n  -    <button onChange={() => props.setCurrentlySelectingRangeEnd('end')}>Edit end date</button>\n  +    <button onClick={() => props.onRangePositionChange('end')}>Edit end date</button>\n  -    <div>Is editing end date: {props.currentlySelectingRangeEnd === 'end'}</div>\n  +    <div>Is editing end date: {props.rangePosition === 'end'}</div>\n     </div>\n   )\n   <DateRangePicker\n  -  ToolbarComponent={CustomToolbarComponent}\n  +  slots={{\n  +    toolbar: CustomToolbarComponent\n  +  }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Tabs",
          "introduction": [
            "Tabs\n\n- ✅ The `hideTabs` and `timeIcon` props have been moved to `tabs` component slot props.\n  The `dateRangeIcon` prop has been renamed to `dateIcon` and moved to `tabs` component slot props:\n\n  ```diff\n   <DateTimePicker\n  -  hideTabs={false}\n  -  dateRangeIcon={<LightModeIcon />}\n  -  timeIcon={<AcUnitIcon />}\n  +  slotProps={{\n  +    tabs: {\n  +      hidden: false,\n  +      dateIcon: <LightModeIcon />,\n  +      timeIcon: <AcUnitIcon />,\n  +    }\n  +  }}\n   />\n  ```\n\n- The `onChange` prop on `DateTimePickerTabs` component has been renamed to `onViewChange` to better fit its usage:\n\n  ```diff\n   <DateTimePickerTabs\n  -  onChange={() => {}}\n  +  onViewChange={() => {}}\n   />\n  ```\n\n  ```diff\n   const CustomTabsComponent = props => (\n     <div>\n  -    <button onClick={() => props.onChange('day')}>Show day view</button>\n  +    <button onClick={() => props.onViewChange('day')}>Show day view</button>\n     </div>\n   )\n   <DateTimePicker\n     slots={{\n       tabs: CustomTabsComponent\n     }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Action bar",
          "introduction": [
            "Action bar\n\n- The `actions` prop of the `actionBar` component slot can no longer receive a callback.\n  Instead, you can pass a callback at the component slot props level\n\n  ```diff\n   <DatePicker\n  -  componentsProps={{\n  -     actionBar: {\n  -       actions: (variant) => (variant === 'desktop' ? [] : ['clear']),\n  -     },\n  -  }}\n  +  componentsProps={{\n  +     actionBar: ({ wrapperVariant }) => ({\n  +       actions: wrapperVariant === 'desktop' ? [] : ['clear'],\n  +     }),\n  +  }}\n     // or using the new `slots` prop\n  +  slotProps={{\n  +     actionBar: ({ wrapperVariant }) => ({\n  +       actions: wrapperVariant === 'desktop' ? [] : ['clear'],\n  +     }),\n  +  }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Day (`renderDay`)",
          "introduction": [
            "Day (`renderDay`)\n\n- The `renderDay` prop has been replaced by a `day` component slot:\n\n  ```diff\n   <DatePicker\n  -  renderDay={(_, dayProps) => <CustomDay {...dayProps} />}\n  +  slots={{ day: CustomDay }}\n   />\n  ```\n\n- The `Day` component slot no longer receives a `selectedDays` prop.\n  If you need to access it, you can control the value and pass it to the component slot props:\n\n  ```tsx\n  function CustomDay({ selectedDay, ...other }) {\n    // do something with 'selectedDay'\n    return <PickersDay {...other} />;\n  }\n\n  function App() {\n    const [value, setValue] = React.useState(null);\n\n    return (\n      <DatePicker\n        value={value}\n        onChange={(newValue) => setValue(newValue)}\n        slots={{ day: CustomDay }}\n        slotProps={{\n          day: { selectedDay: value },\n        }}\n      />\n    );\n  }\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Popper (`PopperProps`)",
          "introduction": [
            "✅ Popper (`PopperProps`)\n\n- The `PopperProps` prop has been replaced by a `popper` component slot props:\n\n  ```diff\n   <DatePicker\n  -  PopperProps={{ onClick: handleClick }}\n  +  slotProps={{ popper: { onClick: handleClick } }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Desktop transition (`TransitionComponent`)",
          "introduction": [
            "✅ Desktop transition (`TransitionComponent`)\n\n- The `TransitionComponent` prop has been replaced by a `desktopTransition` component slot:\n\n  ```diff\n   <DatePicker\n  -  TransitionComponent={Fade}\n  +  slots={{ desktopTransition: Fade }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Dialog (`DialogProps`)",
          "introduction": [
            "✅ Dialog (`DialogProps`)\n\n- The `DialogProps` prop has been replaced by a `dialog` component slot props:\n\n  ```diff\n   <DatePicker\n  -  DialogProps={{ backgroundColor: 'red' }}\n  +  slotProps={{ dialog: { backgroundColor: 'red' }}}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Desktop paper (`PaperProps`)",
          "introduction": [
            "✅ Desktop paper (`PaperProps`)\n\n- The `PaperProps` prop has been replaced by a `desktopPaper` component slot props:\n\n  ```diff\n   <DatePicker\n  -  PaperProps={{ backgroundColor: 'red' }}\n  +  slotProps={{ desktopPaper: { backgroundColor: 'red' } }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Desktop TrapFocus (`TrapFocusProp`)",
          "introduction": [
            "✅ Desktop TrapFocus (`TrapFocusProp`)\n\n- The `TrapFocusProps` prop has been replaced by a `desktopTrapFocus` component slot props:\n\n  ```diff\n   <DatePicker\n  -  TrapFocusProps={{ isEnabled: () => false }}\n  +  slotProps={{ desktopTrapFocus: { isEnabled: () => false } }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Paper Content",
          "introduction": [
            "Paper Content\n\n- The `PaperContent` / `paperContent` component slot and component slot props have been removed.\n\n  You can use the new [`Layout` component slot](/x/react-date-pickers/custom-layout/).\n  The main difference is that you now receive the various parts of the UI instead of a single `children` prop:\n\n  ```diff\n  +import { usePickerLayout } from '@mui/x-date-pickers/PickersLayout';\n\n   function MyCustomLayout(props) {\n  -  const { children } = props;\n  -\n  -  return (\n  -    <React.Fragment>\n  -      {children}\n  -      <div>Custom component</div>\n  -    </React.Fragment>\n  -  );\n  +  const { toolbar, tabs, content, actionBar} = usePickerLayout(props);\n  +\n  +  return (\n  +    <PickersLayoutRoot>\n  +      {toolbar}\n  +      {content}\n  +      {actionBar}\n  +      <div>Custom component</div>\n  +    </PickersLayoutRoot>\n  +  );\n   }\n\n   function App() {\n     return (\n       <DatePicker\n  -       components={{\n  -         PaperContent: MyCustomLayout,\n  -       }}\n  +       components={{\n  +         Layout: MyCustomLayout,\n  +       }}\n          // or using the new `slots` prop\n  +       slots={{\n  +         layout: MyCustomLayout,\n  +       }}\n       />\n     );\n   }\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Left arrow button",
          "introduction": [
            "✅ Left arrow button\n\n- The component slot `LeftArrowButton` has been renamed to `PreviousIconButton`:\n\n  ```diff\n   <DatePicker\n  -  components={{\n  -    LeftArrowButton: CustomButton,\n  -  }}\n  +  components={{\n  +    PreviousIconButton: CustomButton,\n  +  }}\n     // or using the new `slots` prop\n  +  slots={{\n  +    previousIconButton: CustomButton,\n  +  }}\n\n  -  componentsProps={{\n  -    leftArrowButton: {},\n  -  }}\n  +  componentsProps={{\n  +    previousIconButton: {},\n  +  }}\n     // or using the new `slotProps` prop\n  +  slotProps={{\n  +    previousIconButton: {},\n  +  }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Right arrow button",
          "introduction": [
            "✅ Right arrow button\n\n- The component slot `RightArrowButton` has been renamed to `NextIconButton`:\n\n  ```diff\n   <DatePicker\n  -  components={{\n  -    RightArrowButton: CustomButton,\n  -  }}\n  +  components={{\n  +    NextIconButton: CustomButton,\n  +  }}\n     // or using the new `slots` prop\n  +  slots={{\n  +    nextIconButton: CustomButton,\n  +  }}\n\n  -  componentsProps={{\n  -    rightArrowButton: {},\n  -  }}\n  +  componentsProps={{\n  +    nextIconButton: {},\n  +  }}\n     // or using the new `slotProps` prop\n  +  slotProps={{\n  +    nextIconButton: {},\n  +  }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Input",
          "introduction": [
            "✅ Input\n\n- The `InputProps` prop has been removed.\n  You can use the `InputProps` of the `textField` component slot props instead:\n\n  ```diff\n   <DatePicker\n  -  InputProps={{ color: 'primary' }}\n  +  slotProps={{ textField: { InputProps: { color: 'primary' } } }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Input adornment",
          "introduction": [
            "✅ Input adornment\n\n- The `InputAdornmentProps` prop has been replaced by an `inputAdornment` component slot props:\n\n  ```diff\n   <DatePicker\n  -  InputAdornmentProps={{ position: 'start' }}\n  +  slotProps={{ inputAdornment: { position: 'start' } }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "✅ Open Picker Button",
          "introduction": [
            "✅ Open Picker Button\n\n- The `OpenPickerButtonProps` prop has been replaced by an `openPickerButton` component slot props:\n\n  ```diff\n   <DatePicker\n  -  OpenPickerButtonProps={{ ref: buttonRef }}\n  +  slotProps={{ openPickerButton: { ref: buttonRef } }}\n   />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Rename remaining `private` components",
      "introduction": [
        "Rename remaining `private` components\n\nThe four components prefixed with `Private` are now stable.\nThese components were renamed:\n\n- `PrivatePickersMonth` -> `MuiPickersMonth`\n- `PrivatePickersSlideTransition` -> `MuiPickersSlideTransition`\n- `PrivatePickersToolbarText` -> `MuiPickersToolbarText`\n- `PrivatePickersYear` -> `MuiPickersYear`\n\nManual style overriding will need to use updated classes:\n\n```diff\n-.PrivatePickersMonth-root {\n+.MuiPickersMonth-root {\n\n-.PrivatePickersSlideTransition-root {\n+.MuiPickersSlideTransition-root {\n\n-.PrivatePickersToolbarText-root {\n+.MuiPickersToolbarText-root {\n\n-.PrivatePickersYear-root {\n+.MuiPickersYear-root {\n```\n\nComponent name changes are also reflected in `themeAugmentation`:\n\n```diff\n const theme = createTheme({\n   components: {\n-    PrivatePickersMonth: {\n+    MuiPickersMonth: {\n       // overrides\n     },\n-    PrivatePickersSlideTransition: {\n+    MuiPickersSlideTransition: {\n       // overrides\n     },\n-    PrivatePickersToolbarText: {\n+    MuiPickersToolbarText: {\n       // overrides\n     },\n-    PrivatePickersYear: {\n+    MuiPickersYear: {\n       // overrides\n     },\n   },\n });\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Behavior of field `onChange` props",
      "introduction": [
        "Behavior of field `onChange` props\n\nSince the masked input has been replaced by [fields](/x/react-date-pickers/fields/#fields-to-edit-a-single-element) the input value is valid most of the time.\n\nIn v5, the user had to delete a character and type in another character to update the date resulting in `onChange` being called twice.\nFirstly with deleted character, and then with the complete date again.\n\nIn v6, user can override the field section, so `onChange` is called at nearly every key pressed.\n\nIf you were relying on `onChange` to send server requests, you might be interested in debouncing it to avoid sending too many requests.\nTo do so please refer to the corresponding [docs example](/x/react-date-pickers/lifecycle/#server-interaction)."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Rename `components` to `slots` (optional)",
      "introduction": [
        "Rename `components` to `slots` (optional)\n\nThe `components` and `componentsProps` props are being renamed to `slots` and `slotProps` props respectively.\nThis is a slow and ongoing effort between all the different libraries maintained by MUI.\nTo smooth the transition, pickers support both the `components` props which are deprecated, and the new `slots` props.\n\nIf you would like to use the new API and do not want to see deprecated prop usage, consider running `rename-components-to-slots` codemod handling the prop renaming.\n\n```bash\nnpx @mui/x-codemod@latest v6.0.0/pickers/rename-components-to-slots <path>\n```\n\nTake a look at [the RFC](https://github.com/mui/material-ui/issues/33416) for more information.\n\n:::warning\nIf this codemod is applied on a component with both a `slots` and a `components` prop, the output will contain two `slots` props.\nYou are then responsible for merging those two props manually.\n\nFor example:\n\n```tsx\n// Before running the codemod\n<DatePicker\n  slots={{ textField: MyTextField }}\n  components={{ toolbar: MyToolbar }}\n/>\n\n// After running the codemod\n<DatePicker\n  slots={{ textField: MyTextField }}\n  slots={{ toolbar: MyToolbar }}\n/>\n```\n\nThe same applies to `slotProps` and `componentsProps`.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}