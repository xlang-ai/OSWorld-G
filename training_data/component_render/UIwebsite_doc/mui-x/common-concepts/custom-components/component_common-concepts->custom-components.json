{
  "name": "common-concepts->custom-components",
  "introduction": [
    "# Custom slots and subcomponents\n\n<p class=\"description\">Learn how to override parts of the MUI¬†X components.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "What is a slot?",
      "introduction": [
        "What is a slot?\n\nA slot is a part of a component that can be [overridden](/x/common-concepts/custom-components/#how-to-override-a-slot) and/or [customized](/x/common-concepts/custom-components/#how-to-customize-a-slot).\n\nSome of those slots allow you to provide your own UI primitives to the MUI¬†X components.\nThis is the role of all the `baseXXX` component on the Data Grid component (`baseButton`, `baseSelect`, ...).\nThese slots receive props that should be as generic as possible so that it is easy to interface any other design system.\n\nOther slots allow you to override parts of the MUI¬†X UI components with a custom UI built specifically for this component.\nThis is the role of slots like `calendarHeader` on the `DateCalendar` component or `item` on the Rich Tree View component.\nThese slots receive props specific to this part of the UI and will most likely not be re-use throughout your application."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Basic usage",
      "introduction": [
        "Basic usage"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "How to override a slot?",
          "introduction": [
            "How to override a slot?\n\nYou can override a slot by providing a custom component to the `slots` prop:"
          ],
          "code_path": [
            "CustomSlot.js"
          ],
          "children": []
        },
        {
          "name": "How to customize a slot?",
          "introduction": [
            "How to customize a slot?\n\nYou can pass props to any slot using the `slotProps` prop:",
            "You can also use both `slots` and `slotProps` on the same component:",
            "Most slots also support a callback version of `slotProps`.\nThis callback receives an object that contains information about the current state of the component,\nthat information can vary depending on the slot being used:"
          ],
          "code_path": [
            "CustomSlotProps.js",
            "CustomSlotAndSlotProps.js",
            "CustomSlotPropsCallback.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Correct usage",
      "introduction": [
        "Correct usage\n\nA slot is a React component; therefore, it should keep the same JavaScript reference between two renders.\nIf the JavaScript reference of component changes between two renders, React will remount it.\nYou can avoid it by not inlining the component definition in the `slots` prop.\n\nThe first two examples below are buggy because the calendar header will remount after each keystroke, leading to a loss of focus.\n\n```jsx\n// ‚ùå The `calendarHeader` slot is re-defined each time the parent component renders,\n// causing the component to remount.\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n  return (\n    <DateCalendar\n      slots={{\n        calendarHeader: () => (\n          <input value={name} onChange={(event) => setName(event.target.value)} />\n        ),\n      }}\n    />\n  );\n}\n```\n\n```jsx\n// ‚ùå The `calendarHeader` slot is re-defined each time `name` is updated,\n// causing the component to remount.\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n\n  const CustomCalendarHeader = React.useCallback(\n    () => <input value={name} onChange={(event) => setName(event.target.value)} />,\n    [name],\n  );\n\n  return <DateCalendar slots={{ calendarHeader: CustomCalendarHeader }} />;\n}\n```\n\n```jsx\n// ‚úÖ The `calendarHeader` slot is defined only once, it will never remount.\nconst CustomCalendarHeader = ({ name, setName }) => (\n  <input value={name} onChange={(event) => setName(event.target.value)} />\n);\n\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n  return (\n    <DateCalendar\n      slots={{ calendarHeader: CustomCalendarHeader }}\n      slotProps={{ calendarHeader: { name, setName } }}\n    />\n  );\n}\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Usage with TypeScript",
      "introduction": [
        "Usage with TypeScript"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Type custom slots",
          "introduction": [
            "Type custom slots\n\nIf you want to ensure type safety on your custom slot component,\nyou can declare your component using the `PropsFromSlot` interface:\n\n```tsx\nfunction CustomCalendarHeader({\n  currentMonth,\n}: PropsFromSlot<DateCalendarSlots['calendarHeader']>) {\n  return <div>{currentMonth?.format('MM-DD-YYYY')}</div>;\n}\n```\n\n:::success\nThe `PropsFromSlot` is exported from every package that supports slots:\n\n```ts\nimport { PropsFromSlot } from '@mui/x-data-grid/models';\nimport { PropsFromSlot } from '@mui/x-date-pickers/models';\n// ...\n```\n\nIt takes the slot type (as defined in the `slots` prop of your component) and returns the props that the slot receives.\n\n```ts\nimport { Dayjs } from 'dayjs';\nimport { PropsFromSlot, GridSlots } from '@mui/x-data-grid';\nimport { DateCalendarSlots } from '@mui/x-date-pickers';\n\ntype ToolbarProps = PropsFromSlot<GridSlots['toolbar']>;\n\n// Most of the picker slots interfaces need to receive the date type as a generic.\ntype CalendarHeaderProps = PropsFromSlot<DateCalendarSlots['calendarHeader']>;\n```\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Using additional props",
          "introduction": [
            "Using additional props\n\nIf you are passing additional props to your slot, you can add them to the props your custom component receives:\n\n```ts\ninterface CustomCalendarHeaderProps\n  extends PropsFromSlot<DateCalendarSlots['calendarHeader']> {\n  displayWeekNumber: boolean;\n  setDisplayWeekNumber: (displayWeekNumber: boolean) => void;\n}\n```\n\nYou can then use these props in your custom component and access both the props provided by the host component\nand the props you added:\n\n```tsx\nfunction CustomCalendarHeader({\n  displayWeekNumber,\n  setDisplayWeekNumber,\n  ...other\n}: CustomCalendarHeaderProps) {\n  return (\n    <Stack>\n      <DisplayWeekNumberToggle\n        value={displayWeekNumber}\n        onChange={setDisplayWeekNumber}\n      />\n      <PickersCalendarHeader {...other} />\n    </Stack>\n  );\n}\n```\n\nIf your custom component has a different type than the default one, you will need to cast it to the correct type.\nThis can happen if you pass additional props to your custom component using `slotProps`.\nIf we take the example of the `calendarHeader` slot, you can cast your custom component as below:\n\n```tsx\nfunction MyApp() {\n  const [displayWeekNumber, setDisplayWeekNumber] = React.useState(true);\n  return (\n    <DateCalendar\n      displayWeekNumber={displayWeekNumber}\n      slots={{\n        calendarHeader: CustomCalendarHeader as DateCalendarSlots['calendarHeader'],\n      }}\n      slotProps={{\n        calendarHeader: {\n          displayWeekNumber,\n          setDisplayWeekNumber,\n        } as DateCalendarSlotProps['calendarHeader'],\n      }}\n    />\n  );\n}\n```"
          ],
          "code_path": [
            "TypescriptCasting.js"
          ],
          "children": []
        },
        {
          "name": "Using module augmentation",
          "introduction": [
            "Using module augmentation\n\nIf you are using one of the Data Grid packages,\nyou can also use [module augmentation](/x/react-data-grid/components/#custom-slot-props-with-typescript) to let TypeScript know about your custom props:\n\n```ts\ndeclare module '@mui/x-data-grid' {\n  interface ToolbarPropsOverrides {\n    name: string;\n    setName: (name: string) => void;\n  }\n}\n```\n\nYou can then use your custom slot without any type casting:\n\n```tsx\nfunction CustomToolbar({ name, setName }: PropsFromSlot<GridSlots['toolbar']>) {\n  return <input value={name} onChange={(event) => setName(event.target.value)} />;\n}\n\nfunction MyApp() {\n  const [name, setName] = React.useState('');\n  return (\n    <DataGrid\n      rows={[]}\n      columns={[]}\n      slots={{ toolbar: CustomToolbar }}\n      slotProps={{\n        toolbar: { name, setName },\n      }}\n    />\n  );\n}\n```\n\nSee [Data Grid - Custom slots and subcomponents‚ÄîCustom slot props with TypeScript](/x/react-data-grid/components/#custom-slot-props-with-typescript) for more details.\n\n:::warning\nThe module augmentation feature isn't implemented yet for the other sets of components. It's coming.\n\n- üëç Upvote [issue 9775](https://github.com/mui/mui-x/issues/9775) if you want to see it land faster on the Date and Time Pickers.\n- üëç Upvote [issue 14063](https://github.com/mui/mui-x/issues/14063) if you want to see it land faster on the Charts.\n- üëç Upvote [issue 14062](https://github.com/mui/mui-x/issues/14062) if you want to see it land faster on the Tree View.\n\n  :::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Slots of the X components",
      "introduction": [
        "Slots of the X components\n\nYou can find the list of slots in the API documentation of each component (for example [DataGrid](/x/api/data-grid/data-grid/#slots), [DatePicker](/x/api/date-pickers/date-picker/#slots), [BarChart](/x/api/charts/bar-chart/#slots) or [RichTreeView](/x/api/tree-view/rich-tree-view/#slots)).\n\nMost of the slots have a standalone doc example to show how to use them:\n\n- [Data Grid‚ÄîCustom slots and subcomponents](/x/react-data-grid/components/)\n- [Date Picker‚ÄîCustom slots and subcomponents](/x/react-date-pickers/custom-components/)\n- [RichTreeView‚ÄîCustomization](/x/react-tree-view/rich-tree-view/customization/) / [SimpleTreeView‚ÄîCustomization](/x/react-tree-view/simple-tree-view/customization/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}