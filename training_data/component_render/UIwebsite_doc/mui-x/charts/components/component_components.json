{
  "name": "components",
  "introduction": [
    "# Charts - Custom components\n\n<p class=\"description\">Creating custom chart components is made easier by hooks.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Interact with dimensions",
      "introduction": [
        "Interact with dimensions"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Drawing area",
          "introduction": [
            "Drawing area\n\nCharts dimensions are defined by a few props:\n\n- `height` and `width` for the `<svg />` size. If not provided, those values are derived from the container.\n- `margin` for adding space between the `<svg />` border and the **drawing area**.\n\nThe term **drawing area** refers to the space available to plot data (scatter points, lines, or pie arcs).\nThe `margin` is used to leave some space for extra elements, such as the axes, the legend, or the title.\n\nYou can use the `useDrawingArea()` hook in the charts subcomponents to get the coordinates of the **drawing area**.\n\n```jsx\nimport { useDrawingArea } from '@mui/x-charts';\n\nconst { left, top, width, height } = useDrawingArea();\n```"
          ],
          "code_path": [
            "BasicScaleDemo.js"
          ],
          "children": []
        },
        {
          "name": "Scales",
          "introduction": [
            "Scales\n\nSome charts, such as line, bar, and scatter do a mapping between their series' data and the SVG coordinates.\n\nFor example, a line chart series with a value of 36,725$ on the 6th of December 2022 could be mapped to coordinates (628, 514).\nThis operation can be reversed.\nCoordinate with x=628 would be associated with the 6th of December 2022 and y=514 would be associated with value 36,725$.\n\nThose mappings depend on the dimensions of the SVG and the drawing area.\nIt also depends on the [axes' properties](/x/react-charts/axis/) such as the scale (linear, log, square root) and min/max values.\n\nAll that data is available in the [`d3-scale` objects](https://github.com/d3/d3-scale).\n\nYou can use `useXScale()` and `useYScale()` to access those scales.\nBoth accept either:\n\n- a number to select the index of the axis to select.\n- a string to select an axis by its id.\n\nThe scale object is generated such that it maps values to SVG coordinates.\nYou don't need extra work to take into account the drawing area."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Value to coordinate",
              "introduction": [
                "Value to coordinate\n\nThe `d3-scale` default method maps from values to coordinates.\nFor example, you can get the `x=0` coordinate as follows:\n\n```jsx\nconst xAxisScale = useXScale(); // get the default X scale\nconst xOrigin = xAxisScale(0);\n```"
              ],
              "code_path": [
                "OriginDemo.js"
              ],
              "children": []
            },
            {
              "name": "Coordinate to value",
              "introduction": [
                "Coordinate to value\n\nThe `d3-scale` object allows you to convert a coordinate to a data value with the `invert` method.\n\nThe next example contains two lines drawn using different y-axes.\nBy using `invert`, the value associated with the current mouse coordinate `y` can be resolved as follows:\n\n```jsx\n<text>{leftAxisScale.invert(yCoordinate).toFixed(0)}</text>\n```"
              ],
              "code_path": [
                "ScaleDemo.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "HTML components",
      "introduction": [
        "HTML components\n\nWith the introduction of the `ChartDataProvider` in v8, the chart data can be accessed from any component.\nThis allows you to create HTML components that interact with the charts data.\n\nIn the next example, notice that `MyCustomLegend` component displays the series names and colors.\nThis creates an html `table` element, which can be customized in any way.",
        ":::warning\nNote that the HTML components are not part of the SVG hierarchy.\nHence, they should be:\n\n- Outside the `<ChartsSurface />` component to avoid mixing HTML and SVG.\n- Inside the `<ChartDataProvider />` component to get access to the data.\n\n:::"
      ],
      "code_path": [
        "HtmlLegend.js",
        null
      ],
      "children": []
    }
  ]
}