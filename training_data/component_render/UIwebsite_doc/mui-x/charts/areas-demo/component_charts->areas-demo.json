{
  "name": "charts->areas-demo",
  "introduction": [
    "# Charts - Areas demonstration\n\n<p class=\"description\">This page groups demonstration using area charts.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "SimpleAreaChart",
      "introduction": [
        "SimpleAreaChart"
      ],
      "code_path": [
        "SimpleAreaChart.js"
      ],
      "children": []
    },
    {
      "name": "StackedAreaChart",
      "introduction": [
        "StackedAreaChart"
      ],
      "code_path": [
        "StackedAreaChart.js"
      ],
      "children": []
    },
    {
      "name": "TinyAreaChart",
      "introduction": [
        "TinyAreaChart"
      ],
      "code_path": [
        "TinyAreaChart.js"
      ],
      "children": []
    },
    {
      "name": "PercentAreaChart",
      "introduction": [
        "PercentAreaChart"
      ],
      "code_path": [
        "PercentAreaChart.js"
      ],
      "children": []
    },
    {
      "name": "AreaChartConnectNulls",
      "introduction": [
        "AreaChartConnectNulls"
      ],
      "code_path": [
        "AreaChartConnectNulls.js"
      ],
      "children": []
    },
    {
      "name": "AreaChartFillByValue",
      "introduction": [
        "AreaChartFillByValue\n\nTo display multiple colors in the area you can specify a gradient to fill the area (the same method can be applied on other SVG components).\n\nYou can pass this gradient definition as a children of the `<LineChart />` and use `sx` to override the area `fill` property.\nTo do so you will need to use the [`<linearGradient />`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient) and [`<stop />`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop) SVG elements.\n\nThe first part is to get the SVG total height.\nWhich can be done with the `useDrawingArea()` hook.\nIt's useful to define the `<linearGradient />` as a vector that goes from the top to the bottom of our SVG container.\n\nThen to define where the gradient should switch from one color to another, you can use the `useYScale` hook to get the y coordinate of value 0.\n\n:::info\nThe `<stop />` offset is a ratio of gradient vector.\nThat's why you need to divide the coordinate by the SVG height.\n:::"
      ],
      "code_path": [
        "AreaChartFillByValue.js"
      ],
      "children": []
    }
  ]
}