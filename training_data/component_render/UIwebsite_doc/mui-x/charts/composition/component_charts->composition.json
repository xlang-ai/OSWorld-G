{
  "name": "charts->composition",
  "introduction": [
    "# Chart composition\n\n<p class=\"description\">Creating advanced custom charts.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Overview",
      "introduction": [
        "Overview\n\nThe `@mui/x-charts` follows an architecture based on context providers.\nThe overall idea is to pass your series and axes definitions to special components.\nThis component transforms the data and makes it available to its children, which can be composed.\n\nThere are two main classes of components, which are used to create a chart."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Structural components",
          "introduction": [
            "Structural components\n\nThese are used to define the chart's structure and data."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "The Data Provider and Surface components",
              "introduction": [
                "The Data Provider and Surface components\n\nAs the name suggests, the `ChartDataProvider` provides the data to the children components.\nWhile the `ChartsSurface` renders the SVG elements.\n\n```jsx\n<ChartDataProvider\n  // The configuration of the chart\n  series={[{ type: 'bar', data: [100, 200] }]}\n  xAxis={[{ scaleType: 'band', data: ['A', 'B'] }]}\n  width={500}\n  height={300}\n>\n  <ChartsSurface\n    // Ref needs to be directly on the ChartsSurface\n    ref={mySvgRef}\n  >\n    {children}\n  </ChartsSurface>\n</ChartDataProvider>\n```\n\n:::info\nThe demos here are using the `ChartContainer` component.\nTo see demos using the separate `ChartDataProvider` and `ChartsSurface` components, check the [HTML components documentation](/x/react-charts/components/#html-components).\n:::"
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "The `ChartContainer` helper",
              "introduction": [
                "The `ChartContainer` helper\n\nThis component is a composition of the two previous components.\nIt can be used instead of them when there is no need to customize anything outside the chart's graphical elements.\n\n```jsx\n<ChartContainer\n  // The configuration of the chart\n  series={[{ type: 'bar', data: [100, 200] }]}\n  xAxis={[{ scaleType: 'band', data: ['A', 'B'] }]}\n  width={500}\n  height={300}\n  // Ref is forwarded internally to the ChartsSurface\n  ref={mySvgRef}\n>\n  {children}\n</ChartContainer>\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Graphical components",
          "introduction": [
            "Graphical components\n\nThese are any component that render the graphical elements of the chart.\nThey are the children of the **Structural components** shown above.\nThere are many of them, so they won't all be listed here.\nYou can even [create your own components](/x/react-charts/components/).\n\nSome examples of graphical components are:\n\n- `LinePlot`\n- `BarPlot`\n- `ChartsXAxis`\n- `ChartsLegend`\n- `ChartsTooltip`"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Container options",
      "introduction": [
        "Container options"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Responsive",
          "introduction": [
            "Responsive\n\nThe `<ChartContainer />` is responsive by default. The component automatically adjusts its dimensions to fit the available space defined by the parent element.\n\nTo control the dimensions of the chart, the `width` and `height` props can be provided.\nThe chart then renders with the specified dimensions.\n\n:::warning\nThe parent element must have intrinsic dimensions.\nIf the parent's dimensions rely on its content, the responsive charts will not render.\n:::\n\nThe following demo lets you switch between a chart using defined sizes, `<ChartContainer width={500} height={300} />`, and a chart without any sizes, `<ChartContainer />`, so you can see how they differ."
          ],
          "code_path": [
            "BasicComposition.js"
          ],
          "children": []
        },
        {
          "name": "Properties",
          "introduction": [
            "Properties\n\nThe chart container gets all props that are not specific to a single graphical element.\nThis includes:\n\n- The `xAxis` and `yAxis` props—find more information in the [Axis doc](/x/react-charts/axis/)\n- The `colors` prop as defined in the [color palette page](/x/react-charts/styling/#color-palette)\n- The `series` and `dataset` props"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Series",
              "introduction": [
                "Series\n\nThe `series` prop is an array of series definitions.\nYou can find an explanation about each specific series type in their respective docs page: [Line](/x/react-charts/lines/), [Bar](/x/react-charts/bars/), [Pie](/x/react-charts/pie/), and [Scatter](/x/react-charts/scatter/).\n\nWhen using a single Charts component, the library can guess which kind of series you are defining.\nFor example, the Bar Chart component assumes that `series` will be of type `'bar'`.\n\nWith composition, the chart container isn't able to guess the series type, so you must explicitly define it.\n\n```jsx\n<BarChart\n  series={[{\n    data: [1, 2, 3] // No need to specify it is a bar series\n  }]}\n/>\n\n<ChartContainer\n  series={[\n    { data: [1, 2, 3], type: 'bar' }, // This series is for the bar chart\n    { data: [3, 2, 1], type: 'line' } // This series is for the line chart\n  ]}\n>\n  <BarPlot /> {/* Will only display series with type: 'bar' */}\n  <LinePlot /> {/* Will only display series with type: 'line' */}\n</ChartContainer>\n```\n\nThose series can use the `dataset` prop the same way that a single-component chart does—see [Using a dataset](/x/react-charts/bars/#using-a-dataset) in the Bar Chart documentation for more details.\n\nIn the next demo, the chart is made by composing the `<BarPlot />` and `<LinePlot />` components.\nBy modifying the series `type` property, you can switch between rendering a line and a bar.\n\n```jsx\n<ChartContainer\n  series={[\n    { type, data: [1, 2, 3, 2, 1] },\n    { type, data: [4, 3, 1, 3, 4] },\n  ]}\n>\n  <BarPlot />\n  <LinePlot />\n  <ChartsXAxis label=\"X axis\" position=\"bottom\" axisId=\"x-axis-id\" />\n</ChartContainer>\n```"
              ],
              "code_path": [
                "SwitchSeriesType.js"
              ],
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "Subcomponents",
      "introduction": [
        "Subcomponents\n\n:::info\nThe CSS `z-index` property does not exist on SVG elements.\nElements rendered after overlap on top of elements rendered before.\nThe order of elements in composition is the only way to define how they overlap.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Plotting",
          "introduction": [
            "Plotting\n\nTo display data, you have components named `<XxxPlot />` such as `<LinePlot />`, `<AreaPlot />`, `<MarkPlot />`, `<BarPlot />`, etc."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Clipping",
          "introduction": [
            "Clipping\n\nTo ensure chart elements stay confined to the designated drawing area, use the `ChartsClipPath` component.\nThis component defines a rectangular clip path that acts as a boundary.\n\n1. **Define the Clip Path**: Use `<ChartsClipPath id={clipPathId} />` to establish the clip path for the drawing area. `clipPathId` must be a unique identifier.\n2. **Wrap the Chart**: Enclose the chart elements you want to clip within a `<g>` element. Set the `clipPath` attribute to `url(#${clipPathId})` to reference the previously defined clip path. Example: ``<g clipPath={`url(#${clipPathId})`}>``\n\n```jsx\n<ChartContainer>\n  <g clipPath={`url(#${clipPathId})`}>\n    // The plotting to clip in the drawing area.\n    <ScatterPlot />\n    <LinePlot />\n  </g>\n  <ChartsClipPath id={clipPathId} /> // Defines the clip path of the drawing area.\n</ChartContainer>\n```\n\nThe following demo allows you to toggle clipping for scatter and line plots.\nObserve how line markers extend beyond the clip area, rendering on top of the axes.",
            ":::warning\nThe provided demo is generating a unique ID with `useId()`.\n\n```js\nconst id = useId();\nconst clipPathId = `${id}-clip-path`;\n```\n\nIt's important to generate unique IDs for clip paths, especially when dealing with multiple charts on a page. Assigning a static ID like `\"my-id\"` would lead to conflicts.\n:::"
          ],
          "code_path": [
            "LimitOverflow.js",
            null
          ],
          "children": []
        },
        {
          "name": "Axis",
          "introduction": [
            "Axis\n\nTo add axes, you can use `<ChartsXAxis />` and `<ChartsYAxis />` as defined in the [axis page](/x/react-charts/axis/#composition).\n\nIt takes an `axisId` prop that indicates which axis, defined in the container, should be rendered.\nIf `axisId` is not provided it will pick the first one."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Grid",
          "introduction": [
            "Grid\n\nTo add a grid, you can use the `<ChartsGrid />` component.\n\nSee [Axis—Grid](/x/react-charts/axis/#grid) documentation for more information."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Additional information",
          "introduction": [
            "Additional information\n\nTo add a legend to your chart, you can use `<ChartsLegend />`.\n\nMost of the props are explained in the [legend page](/x/react-charts/legend/).\nThe demos use the `slotProps.legend` object, but with composition, you can pass props directly to `<ChartsLegend />`.\n\n```jsx\n// With single component chart\n<BarChart\n  slotProps={{\n    legend: {\n      direction: 'row',\n    }\n  }}\n/>\n\n// With composition\n<ChartContainer>\n  <ChartsLegend direction=\"row\" />\n</ChartContainer>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Interaction",
          "introduction": [
            "Interaction\n\nYou can also add interactive elements such as `<ChartsAxisHighlight />` and `<ChartsTooltip />`.\n\n:::info\nBy default, the container listens to mouse events to keep track of where the mouse is located on the chart.\n\nIf you are not using the axis highlight or the tooltip, consider disabling this feature with the `disableAxisListener` prop.\n\n```jsx\n<ChartContainer {...} disableAxisListener>\n```\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    }
  ]
}