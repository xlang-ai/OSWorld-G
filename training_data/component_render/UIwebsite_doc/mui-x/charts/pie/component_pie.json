{
  "name": "pie",
  "introduction": [
    "# Charts - Pie\n\n<p class=\"description\">Pie charts express portions of a whole, using arcs or angles within a circle.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basics",
      "introduction": [
        "Basics\n\nTo plot a pie chart, a series must have a data property containing an array of objects.\nThose objects should contain a property `value`.\nThey can also have a `label` property.\n\nIf you plan to update/reorder those data, you should add an `id` property which is used for `key` props."
      ],
      "code_path": [
        "BasicPie.js"
      ],
      "children": []
    },
    {
      "name": "Colors",
      "introduction": [
        "Colors\n\nThe pie colors can be customized in two ways.\n\n1. You can provide a [color palette](/x/react-charts/styling/#color-palette). Each arc of the pie will be colored according to this palette.\n2. You can provide a `color` property in `data` objects which overrides the palette.\n\n```jsx\n<PieChart\n  colors={['red', 'blue', 'green']} // Use palette\n  series={[\n    {\n      data: [\n        { value: 10, color: 'orange' }, // Use color property\n        // ...\n      ],\n    },\n  ]}\n/>\n```"
      ],
      "code_path": [
        "PieColor.js"
      ],
      "children": []
    },
    {
      "name": "Sizing",
      "introduction": [
        "Sizing\n\nPie series shape is described by multiple properties:\n\n- `innerRadius` The radius between the center and the beginning of the arc. The default is set to 0.\n- `outerRadius` The radius between the center and the end of the arc. The default is the largest value available in the drawing area.\n- `arcLabelRadius` The radius between the center and the arc label.\n- `paddingAngle` The angle (in degrees) between two arcs.\n- `cornerRadius` Similar to the CSS `border-radius`.\n- `startAngle`/`endAngle` The angle range of the pie chart. Values are given in degrees.\n- `cx`/`cy` The center of the pie charts. By default the middle of the drawing area.",
        "The following properties accept percentage string (for example `'50%'`).\n\n- `innerRadius`/`outerRadius`/`arcLabelRadius` with `'100%'` equivalent to maximal radius fitting in the drawing area.\n- `cx`, `cy` with `'100%'` equivalent to the drawing area width/height."
      ],
      "code_path": [
        "PieShapeNoSnap.js",
        null
      ],
      "children": []
    },
    {
      "name": "Labels",
      "introduction": [
        "Labels\n\nYou can display labels on the arcs.\nTo do so, the series should get `arcLabel` property.\nIt can either get a function that gets the object associated with the arc and returns the label.\nOr you can pass one of the following values:\n\n- `'value'` display the raw value of the arc.\n- `'formattedValue'` display the returned value of `valueFormatter` for the arc.\n- `'label'` display the `label` property of the arc if provided.\n\nTo avoid displaying labels on small arcs, you can provide `arcLabelMinAngle` property.\nArcs with angles smaller than the value (in deg) will not have labels."
      ],
      "code_path": [
        "PieArcLabel.js"
      ],
      "children": []
    },
    {
      "name": "Highlight",
      "introduction": [
        "Highlight\n\nPie series can get `highlightScope` property to manage element highlighting.\nIts behavior is described in the [dedicated page](/x/react-charts/highlighting/#highlighting-series).\n\nWhen elements are highlighted or faded they can be customized with dedicated CSS classes: `.MuiPieArc-faded` and `.MuiPieArc-highlighted`.\n\nCSS is well suited to modify the `color`, `stroke-width`, or `opacity`.\nHowever, to modify the size of a pie arc, you must use the `highlighted` and `faded` properties, with which you can override any of the properties `innerRadius`, `outerRadius`, and `cornerRadius` when an arc is highlighted or faded.\n\nIf you do not want to provide absolute values, you can use `additionalRadius` which will be added to the `outerRadius`.\nThis value can be negative to reduce arc size."
      ],
      "code_path": [
        "PieActiveArc.js"
      ],
      "children": []
    },
    {
      "name": "Click event",
      "introduction": [
        "Click event\n\nPie Chart provides an `onItemClick` handler for handling clicks on specific pie arcs.\nIt has the following signature.\n\n```js\nconst onItemClick = (\n  event, // The mouse event.\n  params, // An object that identifies the clicked element.\n) => {};\n```"
      ],
      "code_path": [
        "PieClickNoSnap.js"
      ],
      "children": []
    },
    {
      "name": "Animation",
      "introduction": [
        "Animation\n\nTo skip animation at the creation and update of your chart you can use the `skipAnimation` prop.\nWhen set to `true` it skips animation powered by `@react-spring/web`.\n\nCharts containers already use the `useReducedMotion()` from `@react-spring/web` to skip animation [according to user preferences](https://react-spring.dev/docs/utilities/use-reduced-motion#why-is-it-important).\n\n```jsx\n// For a single component chart\n<PieChart skipAnimation />\n\n// For a composed chart\n<ChartContainer>\n  <PiePlot skipAnimation />\n</ChartContainer>\n```"
      ],
      "code_path": [
        "PieAnimation.js"
      ],
      "children": []
    }
  ]
}