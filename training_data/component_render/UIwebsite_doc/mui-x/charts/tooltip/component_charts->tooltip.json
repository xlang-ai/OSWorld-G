{
  "name": "charts->tooltip",
  "introduction": [
    "# Charts - Tooltip\n\n<p class=\"description\">Tooltip provides extra data on charts item.</p>\n\nIn all charts components, the tooltip is accessible via the slot `tooltip`.\nIf you are using composition, you can use the `<ChartsTooltip />` component."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Tooltip trigger",
      "introduction": [
        "Tooltip trigger\n\nThe Tooltip can be triggered by two kinds of events:\n\n- `'item'`—when the user's mouse hovers over an item on the chart, the tooltip displays data about this specific item.\n- `'axis'`—the user's mouse position is associated with a value of the x-axis. The tooltip displays data about all series at this specific x value.\n- `'none'`—disable the tooltip.\n\nTo pass this trigger attribute to the tooltip use `slotProps.tooltip.trigger`."
      ],
      "code_path": [
        "Interaction.js"
      ],
      "children": []
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Formatting",
          "introduction": [
            "Formatting\n\nThe format of data rendered in the tooltip can be modified thanks to the series `valueFormatter` property.\nThe same can be applied to x values when a tooltip is triggered by the `'axis'`.\n\nHere is a demo with:\n\n- The time axis is formatted to only show the year\n- The number values are formatted in U.S. Dollars."
          ],
          "code_path": [
            "Formatting.js"
          ],
          "children": []
        },
        {
          "name": "Advanced formatting",
          "introduction": [
            "Advanced formatting\n\nThe series `valueFormatter` provides a context as its second argument containing a `dataIndex` property which you can use to calculate other data-related values.\n\nIn the demo below you can notice we use `dataIndex` to add each team's rank in the tooltip."
          ],
          "code_path": [
            "SeriesFormatter.js"
          ],
          "children": []
        },
        {
          "name": "Axis formatter",
          "introduction": [
            "Axis formatter\n\nTo modify how data is displayed in the axis use the `valueFormatter` property.\n\nIts second argument is a context that provides a `location` property with either `'tick'` or `'tooltip'`.\n\nIn this demo, you can see:\n\n- The country axis displays only the country code\n- The label displays annotated data `Country: name (code)`"
          ],
          "code_path": [
            "AxisFormatter.js"
          ],
          "children": []
        },
        {
          "name": "Label formatting",
          "introduction": [
            "Label formatting\n\nThe label text inside the tooltip can also be formatted conditionally by providing a function to the series `label` property.\n\n```jsx\n<LineChart\n  // ...\n  series={[\n    {\n      data: [ ... ],\n      label: (location) => location === 'tooltip' ? 'BR' : 'Brazil'\n    }\n  ]}\n/>\n```\n\n:::info\nSee [Label—Conditional formatting](/x/react-charts/label/#conditional-formatting) for more details.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Hiding values",
          "introduction": [
            "Hiding values\n\nYou can hide the axis value with `hideTooltip` in the `xAxis` props.\nIt removes the header showing the x-axis value from the tooltip.\n\n```jsx\n<LineChart\n  // ...\n  xAxis={[{ data: [ ... ], hideTooltip: true }]}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Overriding content",
          "introduction": [
            "Overriding content\n\nTo override tooltip content, provide a custom component to `slots.tooltip`.\nSome helper are provided, such as:\n\n- `<ChartsTooltipContainer />` which provide a tooltip with built-in open and position management.\n- `useItemTooltip()` which provides all basic information associated to the current item.\n- `useAxisTooltip()` which provides all basic information associated to the current axis.\n\nHere is the basic scheme to follow.\nExamples about helpers are provided in the composition section.\n\n```jsx\nimport { ChartsTooltipContainer } from '@mui/x-charts/ChartsTooltip';\n\nfunction CustomItemTooltipContent() {\n  const tooltipData = useItemTooltip();\n\n  if (!tooltipData) { // No data to display\n    return null;\n  }\n\n  return <div>{/** Your custom content **/}</div>;\n}\n\n<LineChart\n  slots={{ tooltip: CustomItemTooltip }}\n/>\n\n// With composition\n<ChartContainer>\n  // ...\n  <ChartsTooltipContainer trigger=\"item\">\n    <CustomItemTooltipContent />\n  </ChartsTooltipContainer>\n</ChartContainer>\n```\n\n:::warning\nDo not skip ChartsTooltipContainer rendering if the tooltip has no data to display.\nFor example the following code does not work.\n\n```jsx\nif (tooltipData === null) {\n  return null;\n}\n\nreturn (\n  <ChartsTooltipContainer trigger=\"item\">\n    {/** My content **/}\n  </ChartsTooltipContainer>\n);\n```\n\nThe ChartsTooltipContainer must render before the pointer enters the SVG because it uses this event to get the pointer type.\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Overriding placement",
          "introduction": [
            "Overriding placement\n\nTo override tooltip placement, override to the tooltip with `slots.tooltip`.\nIf you want to keep the default content, you can place the `ChartsItemTooltipContent` or `ChartsAxisTooltipContent` in your custom tooltip."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Composition",
      "introduction": [
        "Composition\n\nIf you're using composition, by default, the axis listens for mouse events to get its current x/y values.\nIf you don't need it, you can disable those listeners with the `disableAxisListener` prop.\n\nYou need those listeners if you are using [axes highlight](/x/react-charts/highlighting/#highlighting-axis) or you have a tooltip [triggered by axis](/x/react-charts/tooltip/#tooltip-trigger).\n\n```jsx\n<ChartContainer {...} disableAxisListener>\n  {/* ... */}\n</ChartContainer>\n```"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Overriding content",
          "introduction": [
            "Overriding content"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Item Tooltip",
              "introduction": [
                "Item Tooltip\n\nYou can create your own tooltip by using `useItemTooltip()`.\nThis hook returns the information about the current item user is interacting with.\nIt contains:\n\n- `identifier`: An object that identify the item. Which often contains its series type, series id, and data index.\n- `color`: The color used to display the item. This includes the impact of [color map](/x/react-charts/styling/#values-color).\n- `label`, `value`, `formattedValue`: Values computed to simplify the tooltip creation.\n\nTo follow the mouse position, you can track pointer events on the SVG thanks to `useSvgRef`."
              ],
              "code_path": [
                "CustomTooltipContent.js"
              ],
              "children": []
            },
            {
              "name": "Axis Tooltip",
              "introduction": [
                "Axis Tooltip\n\nLike in previous section, you can create your own tooltip by using `useAxisTooltip()`.\nThis hook returns the information about the current axis user is interacting with and the relevant series.\nIt contains:\n\n- `identifier`: An object that identify the axis. Which often contains its series type, series id, and data index.\n- `color`: The color used to display the item. This includes the impact of [color map](/x/react-charts/styling/#values-color).\n- `label`, `value`, `formattedValue`: Values computed to simplify the tooltip creation.\n\nTo follow the mouse position, you can track pointer events on the SVG thanks to `useSvgRef`."
              ],
              "code_path": [
                "CustomAxisTooltipContent.js"
              ],
              "children": []
            }
          ]
        },
        {
          "name": "Tooltip position",
          "introduction": [
            "Tooltip position\n\nThis demo show example about how to use additional hooks such as `useXAxis()` or `useDrawingArea()` to customize the tooltip position."
          ],
          "code_path": [
            "CustomTooltipPosition.js"
          ],
          "children": []
        }
      ]
    }
  ]
}