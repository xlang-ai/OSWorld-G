{
  "name": "gauge",
  "introduction": [
    "# Charts - Gauge\n\n<p class=\"description\">Gauge charts let the user evaluate metrics.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basics",
      "introduction": [
        "Basics\n\nThe Gauge displays a numeric value that varies within a defined range."
      ],
      "code_path": [
        "BasicGauges.js"
      ],
      "children": []
    },
    {
      "name": "Value range",
      "introduction": [
        "Value range\n\nThe Gauge's value is provided through the `value` props, which accept a value range between 0 and 100.\nTo modify it, use the `valueMin` and `valueMax` props."
      ],
      "code_path": [
        "GaugeValueRangeNoSnap.js"
      ],
      "children": []
    },
    {
      "name": "Arcs configuration",
      "introduction": [
        "Arcs configuration\n\nModify the arc shape with the following props:\n\n- `startAngle` and `endAngle`: The angle range provided in degrees\n- `innerRadius` and `outerRadius`: The arc's radii. It can be a fixed number of pixels or a percentage string, which will be a percent of the maximal available radius\n- `cornerRadius`: It can be a fixed number of pixels or a percentage string, which will be a percent of the maximal available radius",
        ":::success\nNotice that the arc position is computed to let the Gauge take as much space as possible in the drawing area.\n\nUse the `cx` and/or `cy` props to fix the coordinate of the arc center.\n:::"
      ],
      "code_path": [
        "ArcPlaygroundNoSnap.js",
        null
      ],
      "children": []
    },
    {
      "name": "Text configuration",
      "introduction": [
        "Text configuration\n\nBy default, the Gauge displays the value in the center of the arc.\nTo modify it, use the `text` prop.\n\nThis prop can be a string, or a formatter.\nIn the second case, the formatter argument contains the `value`, `valueMin` and `valueMax`.\n\nTo modify the text's layout, use the `gaugeClasses.valueText` class name."
      ],
      "code_path": [
        "TextPlaygroundNoSnap.js"
      ],
      "children": []
    },
    {
      "name": "Arc design",
      "introduction": [
        "Arc design\n\nTo customize the Gauge styles, use the `chartsGaugeClasses` export to pull class names from different parts of the component, such as `valueText`, `valueArc`, and `referenceArc`.\n\nFor a full reference list, visit the [API page](/x/api/charts/gauge/#classes)."
      ],
      "code_path": [
        "ArcDesign.js"
      ],
      "children": []
    },
    {
      "name": "Adding elements",
      "introduction": [
        "Adding elements"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Using the default Gauge",
          "introduction": [
            "Using the default Gauge\n\nTo insert more elements into the Gauge, the first option would be to add them as children, which means they will be stacked on top of the default rendering.\n\n```tsx\nimport { Gauge } from '@mui/x-charts/Gauge';\n\n<Gauge value={25} valueMax={50}>\n  <AddedElement />\n</Gauge>;\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Using the Gauge container",
          "introduction": [
            "Using the Gauge container\n\nThe second option is to make use of the following elements that are available within the Gauge module:\n\n- Gauge Reference Arc\n- Gauge Value Arc\n- Gauge Value Text\n\n```tsx\nimport {\n  GaugeContainer,\n  Gauge,\n  GaugeReferenceArc,\n  GaugeValueArc,\n} from '@mui/x-charts/Gauge';\n\n<GaugeContainer value={25} valueMax={50}>\n  <GaugeReferenceArc />\n  <GaugeValueArc />\n  <AddedElement />\n</GaugeContainer>;\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Creating your components",
          "introduction": [
            "Creating your components\n\nTo create your own components, use the `useGaugeState()` hook which provides all you need about the gauge configuration:\n\n- information about the value: `value`, `valueMin`, `valueMax`\n- information to plot the arc: `startAngle`, `endAngle`, `outerRadius`, `innerRadius`, `cornerRadius`, `cx`, and `cy`\n- computed values:\n  - `maxRadius`: the maximal radius that can fit the drawing area\n  - `valueAngle`: the angle associated with the current value"
          ],
          "code_path": [
            "CompositionExample.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\nThe MUIÂ X Gauge is compliant with the [Meter ARIA pattern](https://www.w3.org/WAI/ARIA/apg/patterns/meter/), which includes the addition of the `meter` role to the parent container and correct usage of the `aria-valuenow`, `aria-valuemin`, and `aria-valuemax` attributes."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Label",
          "introduction": [
            "Label\n\nIf a visible label is available, reference it by adding `aria-labelledby` attribute.\nOtherwise, the label can be manually provided by `aria-label`."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Presentation",
          "introduction": [
            "Presentation\n\nAssistive technologies often present the value as a percentage.\nThis can be modified by providing `aria-valuetext` attribute.\n\nFor example, a battery level indicator is better with an hour-long duration.\n\n```jsx\n<h3 id=\"battery_level_label\">\n  Battery level\n</h3>\n<Gauge\n  value={6}\n  valueMax={12}\n  aria-labelledby=\"battery_level_label\"\n  aria-valuetext=\"50% (6 hours) remaining\"\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    }
  ]
}