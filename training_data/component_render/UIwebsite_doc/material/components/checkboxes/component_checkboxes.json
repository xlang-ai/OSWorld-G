{
  "name": "checkboxes",
  "introduction": [
    "# Checkbox\n\n<p class=\"description\">Checkboxes allow the user to select one or more items from a set.</p>\n\nCheckboxes can be used to turn an option on or off.\n\nIf you have multiple options appearing in a list,\nyou can preserve space by using checkboxes instead of on/off switches.\nIf you have a single option, avoid using a checkbox and use an on/off switch instead."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basic checkboxes",
      "introduction": [
        "Basic checkboxes"
      ],
      "code_path": [
        "Checkboxes.js"
      ],
      "children": []
    },
    {
      "name": "Label",
      "introduction": [
        "Label\n\nYou can provide a label to the `Checkbox` thanks to the `FormControlLabel` component."
      ],
      "code_path": [
        "CheckboxLabels.js"
      ],
      "children": []
    },
    {
      "name": "Size",
      "introduction": [
        "Size\n\nUse the `size` prop or customize the font size of the svg icons to change the size of the checkboxes."
      ],
      "code_path": [
        "SizeCheckboxes.js"
      ],
      "children": []
    },
    {
      "name": "Color",
      "introduction": [
        "Color"
      ],
      "code_path": [
        "ColorCheckboxes.js"
      ],
      "children": []
    },
    {
      "name": "Icon",
      "introduction": [
        "Icon"
      ],
      "code_path": [
        "IconCheckboxes.js"
      ],
      "children": []
    },
    {
      "name": "Controlled",
      "introduction": [
        "Controlled\n\nYou can control the checkbox with the `checked` and `onChange` props:"
      ],
      "code_path": [
        "ControlledCheckbox.js"
      ],
      "children": []
    },
    {
      "name": "Indeterminate",
      "introduction": [
        "Indeterminate\n\nA checkbox input can only have two states in a form: checked or unchecked.\nIt either submits its value or doesn't.\nVisually, there are **three** states a checkbox can be in: checked, unchecked, or indeterminate.\n\nYou can change the indeterminate icon using the `indeterminateIcon` prop.",
        ":::warning\nWhen indeterminate is set, the value of the `checked` prop only impacts the form submitted values.\nIt has no accessibility or UX implications.\n:::"
      ],
      "code_path": [
        "IndeterminateCheckbox.js",
        null
      ],
      "children": []
    },
    {
      "name": "FormGroup",
      "introduction": [
        "FormGroup\n\n`FormGroup` is a helpful wrapper used to group selection control components."
      ],
      "code_path": [
        "CheckboxesGroup.js"
      ],
      "children": []
    },
    {
      "name": "Label placement",
      "introduction": [
        "Label placement\n\nYou can change the placement of the label:"
      ],
      "code_path": [
        "FormControlLabelPosition.js"
      ],
      "children": []
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).",
        "ðŸŽ¨ If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/checkbox-introduction--docs)."
      ],
      "code_path": [
        "CustomizedCheckbox.js",
        null
      ],
      "children": []
    },
    {
      "name": "When to use",
      "introduction": [
        "When to use\n\n- [Checkboxes vs. Radio Buttons](https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/)\n- [Checkboxes vs. Switches](https://uxplanet.org/checkbox-vs-toggle-switch-7fc6e83f10b8)"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/)\n\n- All form controls should have labels, and this includes radio buttons, checkboxes, and switches. In most cases, this is done by using the `<label>` element ([FormControlLabel](/material-ui/api/form-control-label/)).\n- When a label can't be used, it's necessary to add an attribute directly to the input component.\n  In this case, you can apply the additional attribute (for example `aria-label`, `aria-labelledby`, `title`) via the `inputProps` prop.\n\n```jsx\n<Checkbox\n  value=\"checkedA\"\n  inputProps={{\n    'aria-label': 'Checkbox A',\n  }}\n/>\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}