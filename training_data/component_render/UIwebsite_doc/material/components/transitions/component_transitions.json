{
  "name": "transitions",
  "introduction": [
    "# Transitions\n\n<p class=\"description\">Transitions help to make a UI expressive and easy to use.</p>\n\nMaterial UI provides transitions that can be used to introduce some basic [motion](https://m2.material.io/design/motion/) to your applications."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Collapse",
      "introduction": [
        "Collapse\n\nExpand from the start edge of the child element.\nUse the `orientation` prop if you need a horizontal collapse.\nThe `collapsedSize` prop can be used to set the minimum width/height when not expanded."
      ],
      "code_path": [
        "SimpleCollapse.js"
      ],
      "children": []
    },
    {
      "name": "Fade",
      "introduction": [
        "Fade\n\nFade in from transparent to opaque."
      ],
      "code_path": [
        "SimpleFade.js"
      ],
      "children": []
    },
    {
      "name": "Grow",
      "introduction": [
        "Grow\n\nExpands outwards from the center of the child element, while also fading in from transparent to opaque.\n\nThe second example demonstrates how to change the `transform-origin`, and conditionally applies\nthe `timeout` prop to change the entry speed."
      ],
      "code_path": [
        "SimpleGrow.js"
      ],
      "children": []
    },
    {
      "name": "Slide",
      "introduction": [
        "Slide\n\nSlide in from the edge of the screen.\nThe `direction` prop controls which edge of the screen the transition starts from.\n\nThe Transition component's `mountOnEnter` prop prevents the child component from being mounted\nuntil `in` is `true`.\nThis prevents the relatively positioned component from scrolling into view\nfrom its off-screen position.\nSimilarly, the `unmountOnExit` prop removes the component from the DOM after it has been transition off-screen."
      ],
      "code_path": [
        "SimpleSlide.js"
      ],
      "children": [
        {
          "name": "Slide relative to a container",
          "introduction": [
            "Slide relative to a container\n\nThe Slide component also accepts `container` prop, which is a reference to a DOM node.\nIf this prop is set, the Slide component will slide from the edge of that DOM node."
          ],
          "code_path": [
            "SlideFromContainer.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Zoom",
      "introduction": [
        "Zoom\n\nExpand outwards from the center of the child element.\n\nThis example also demonstrates how to delay the enter transition."
      ],
      "code_path": [
        "SimpleZoom.js"
      ],
      "children": []
    },
    {
      "name": "Child requirement",
      "introduction": [
        "Child requirement\n\n- **Forward the style**: To better support server rendering, Material UI provides a `style` prop to the children of some transition components (Fade, Grow, Zoom, Slide).\n  The `style` prop must be applied to the DOM for the animation to work as expected.\n- **Forward the ref**: The transition components require the first child element to forward its ref to the DOM node. For more details about ref, check out [Caveat with refs](/material-ui/guides/composition/#caveat-with-refs)\n- **Single element**: The transition components require only one child element (`React.Fragment` is not allowed).\n\n```jsx\n// The `props` object contains a `style` prop.\n// You need to provide it to the `div` element as shown here.\nconst MyComponent = React.forwardRef(function (props, ref) {\n  return (\n    <div ref={ref} {...props}>\n      Fade\n    </div>\n  );\n});\n\nexport default function Main() {\n  return (\n    <Fade>\n      {/* MyComponent must be the only child */}\n      <MyComponent />\n    </Fade>\n  );\n}\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "TransitionGroup",
      "introduction": [
        "TransitionGroup\n\nTo animate a component when it is mounted or unmounted, you can use the [`TransitionGroup`](https://reactcommunity.org/react-transition-group/transition-group/) component from _react-transition-group_.\nAs components are added or removed, the `in` prop is toggled automatically by `TransitionGroup`."
      ],
      "code_path": [
        "TransitionGroupExample.js"
      ],
      "children": []
    },
    {
      "name": "TransitionComponent prop",
      "introduction": [
        "TransitionComponent prop\n\nSome Material UI components use these transitions internally. These accept a `TransitionComponent` prop to customize the default transition.\nYou can use any of the above components or your own.\nIt should respect the following conditions:\n\n- Accepts an `in` prop. This corresponds to the open/close state.\n- Call the `onEnter` callback prop when the enter transition starts.\n- Call the `onExited` callback prop when the exit transition is completed.\n  These two callbacks allow to unmount the children when in a closed state and fully transitioned.\n\nFor more information on creating a custom transition, visit the _react-transition-group_ [`Transition` documentation](https://reactcommunity.org/react-transition-group/transition/).\nYou can also visit the dedicated sections of some of the components:\n\n- [Modal](/material-ui/react-modal/#transitions)\n- [Dialog](/material-ui/react-dialog/#transitions)\n- [Popper](/material-ui/react-popper/#transitions)\n- [Snackbar](/material-ui/react-snackbar/#transitions)\n- [Tooltip](/material-ui/react-tooltip/#transitions)"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Performance & SEO",
      "introduction": [
        "Performance & SEO\n\nThe content of transition component is mounted by default even if `in={false}`.\nThis default behavior has server-side rendering and SEO in mind.\nIf you render expensive component trees inside your transition it might be a good idea to change this default behavior by enabling the\n`unmountOnExit` prop:\n\n```jsx\n<Fade in={false} unmountOnExit />\n```\n\nAs with any performance optimization this is not a silver bullet.\nBe sure to identify bottlenecks first and then try out these optimization strategies."
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}