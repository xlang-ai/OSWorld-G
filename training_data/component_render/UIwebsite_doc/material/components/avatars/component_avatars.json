{
  "name": "avatars",
  "introduction": [
    "# Avatar\n\n<p class=\"description\">Avatars are found throughout material design with uses in everything from tables to dialog menus.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Image avatars",
      "introduction": [
        "Image avatars\n\nImage avatars can be created by passing standard `img` props `src` or `srcSet` to the component."
      ],
      "code_path": [
        "ImageAvatars.js"
      ],
      "children": []
    },
    {
      "name": "Letter avatars",
      "introduction": [
        "Letter avatars\n\nAvatars containing simple characters can be created by passing a string as `children`.",
        "You can use different background colors for the avatar.\nThe following demo generates the color based on the name of the person."
      ],
      "code_path": [
        "LetterAvatars.js",
        "BackgroundLetterAvatars.js"
      ],
      "children": []
    },
    {
      "name": "Sizes",
      "introduction": [
        "Sizes\n\nYou can change the size of the avatar with the `height` and `width` CSS properties."
      ],
      "code_path": [
        "SizeAvatars.js"
      ],
      "children": []
    },
    {
      "name": "Icon avatars",
      "introduction": [
        "Icon avatars\n\nIcon avatars are created by passing an icon as `children`."
      ],
      "code_path": [
        "IconAvatars.js"
      ],
      "children": []
    },
    {
      "name": "Variants",
      "introduction": [
        "Variants\n\nIf you need square or rounded avatars, use the `variant` prop."
      ],
      "code_path": [
        "VariantAvatars.js"
      ],
      "children": []
    },
    {
      "name": "Fallbacks",
      "introduction": [
        "Fallbacks\n\nIf there is an error loading the avatar image, the component falls back to an alternative in the following order:\n\n- the provided children\n- the first letter of the `alt` text\n- a generic avatar icon"
      ],
      "code_path": [
        "FallbackAvatars.js"
      ],
      "children": []
    },
    {
      "name": "Grouped",
      "introduction": [
        "Grouped\n\n`AvatarGroup` renders its children as a stack. Use the `max` prop to limit the number of avatars."
      ],
      "code_path": [
        "GroupAvatars.js"
      ],
      "children": [
        {
          "name": "Total avatars",
          "introduction": [
            "Total avatars\n\nIf you need to control the total number of avatars not shown, you can use the `total` prop."
          ],
          "code_path": [
            "TotalAvatars.js"
          ],
          "children": []
        },
        {
          "name": "Custom surplus",
          "introduction": [
            "Custom surplus\n\nSet the `renderSurplus` prop as a callback to customize the surplus avatar. The callback will receive the surplus number as an argument based on the children and the `max` prop, and should return a `React.ReactNode`.\n\nThe `renderSurplus` prop is useful when you need to render the surplus based on the data sent from the server."
          ],
          "code_path": [
            "CustomSurplusAvatars.js"
          ],
          "children": []
        },
        {
          "name": "Spacing",
          "introduction": [
            "Spacing\n\nYou can change the spacing between avatars using the `spacing` prop. You can use one of the presets (`\"medium\"`, the default, or `\"small\"`) or set a custom numeric value."
          ],
          "code_path": [
            "Spacing.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "With badge",
      "introduction": [
        "With badge"
      ],
      "code_path": [
        "BadgeAvatars.js"
      ],
      "children": []
    }
  ]
}