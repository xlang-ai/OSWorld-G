{
  "name": "snackbars",
  "introduction": [
    "# Snackbar\n\n<p class=\"description\">Snackbars (also known as toasts) are used for brief notifications of processes that have been or will be performed.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Introduction",
      "introduction": [
        "Introduction\n\nThe Snackbar component appears temporarily and floats above the UI to provide users with (non-critical) updates on an app's processes.\nThe demo below, inspired by Google Keep, shows a basic Snackbar with a text element and two actions:"
      ],
      "code_path": [
        "SimpleSnackbar.js"
      ],
      "children": [
        {
          "name": "Usage",
          "introduction": [
            "Usage\n\nSnackbars differ from [Alerts](/material-ui/react-alert/) in that Snackbars have a fixed position and a high z-index, so they're intended to break out of the document flow; Alerts, on the other hand, are usually part of the flowâ€”except when they're [used as children of a Snackbar](#use-with-alerts).\n\nSnackbars also from differ from [Dialogs](/material-ui/react-dialog/) in that Snackbars are not intended to convey _critical_ information or block the user from interacting with the rest of the app; Dialogs, by contrast, require input from the user in order to be dismissed."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Basics",
      "introduction": [
        "Basics"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Import",
          "introduction": [
            "Import\n\n```jsx\nimport Snackbar from '@mui/material/Snackbar';\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Position",
          "introduction": [
            "Position\n\nUse the `anchorOrigin` prop to control the Snackbar's position on the screen."
          ],
          "code_path": [
            "PositionedSnackbar.js"
          ],
          "children": []
        },
        {
          "name": "Content",
          "introduction": [
            "Content\n\n```jsx\nimport SnackbarContent from '@mui/material/SnackbarContent';\n```\n\nUse the Snackbar Content component to add text and actions to the Snackbar."
          ],
          "code_path": [
            "LongTextSnackbar.js"
          ],
          "children": []
        },
        {
          "name": "Automatic dismiss",
          "introduction": [
            "Automatic dismiss\n\nUse the `autoHideDuration` prop to automatically trigger the Snackbar's `onClose` function after a set period of time (in milliseconds).\n\nMake sure to [provide sufficient time](https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits.html) for the user to process the information displayed on it."
          ],
          "code_path": [
            "AutohideSnackbar.js"
          ],
          "children": []
        },
        {
          "name": "Transitions",
          "introduction": [
            "Transitions\n\nYou can use the `TransitionComponent` prop to change the transition of the Snackbar from [Grow](/material-ui/transitions/#grow) (the default) to others such as [Slide](/material-ui/transitions/#slide)."
          ],
          "code_path": [
            "TransitionsSnackbar.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Use with Alerts",
          "introduction": [
            "Use with Alerts\n\nUse an Alert inside a Snackbar for messages that communicate a certain severity."
          ],
          "code_path": [
            "CustomizedSnackbars.js"
          ],
          "children": []
        },
        {
          "name": "Use with Floating Action Buttons",
          "introduction": [
            "Use with Floating Action Buttons\n\nIf you're using a [Floating Action Button](/material-ui/react-floating-action-button/) on mobile, Material Design recommends positioning snackbars directly above it, as shown in the demo below:"
          ],
          "code_path": [
            "FabIntegrationSnackbar.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Common examples",
      "introduction": [
        "Common examples"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Consecutive Snackbars",
          "introduction": [
            "Consecutive Snackbars\n\nThis demo shows how to display multiple Snackbars without stacking them by using a consecutive animation."
          ],
          "code_path": [
            "ConsecutiveSnackbars.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Supplementary components",
      "introduction": [
        "Supplementary components"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "notistack",
          "introduction": [
            "notistack\n\n![stars](https://img.shields.io/github/stars/iamhosseindhv/notistack.svg?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/notistack.svg)\n\nWith an imperative API, [notistack](https://github.com/iamhosseindhv/notistack) lets you vertically stack multiple Snackbars without having to handle their open and close states.\nEven though this is discouraged in the Material Design guidelines, it is still a common pattern.",
            ":::warning\nNote that notistack prevents Snackbars from being [closed by pressing <kbd class=\"key\">Escape</kbd>](#accessibility).\n:::"
          ],
          "code_path": [
            "IntegrationNotistack.js",
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\nThe user should be able to dismiss Snackbars by pressing <kbd class=\"key\">Escape</kbd>. If there are multiple instances appearing at the same time and you want <kbd class=\"key\">Escape</kbd> to dismiss only the oldest one that's currently open, call `event.preventDefault` in the `onClose` prop.\n\n```jsx\nexport default function MyComponent() {\n  const [open, setOpen] = React.useState(true);\n\n  return (\n    <React.Fragment>\n      <Snackbar\n        open={open}\n        onClose={(event, reason) => {\n          // `reason === 'escapeKeyDown'` if `Escape` was pressed\n          setOpen(false);\n          // call `event.preventDefault` to only close one Snackbar at a time.\n        }}\n      />\n      <Snackbar open={open} onClose={() => setOpen(false)} />\n    </React.Fragment>\n  );\n}\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Anatomy",
      "introduction": [
        "Anatomy\n\nThe Snackbar component is composed of a root `<div>` that houses interior elements like the Snackbar Content and other optional components (such as buttons or decorators).\n\n```html\n<div role=\"presentation\" class=\"MuiSnackbar-root\">\n  <div class=\"MuiPaper-root MuiSnackbarContent-root\" role=\"alert\">\n    <div class=\"MuiSnackbarContent-message\">\n      <!-- Snackbar content goes here -->\n    </div>\n  </div>\n</div>\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Experimental APIs - Toolpad",
      "introduction": [
        "Experimental APIs - Toolpad"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "useNotifications",
          "introduction": [
            "useNotifications\n\nYou can create and manipulate notifications imperatively with the [`useNotifications()`](https://mui.com/toolpad/core/react-use-notifications/) API in `@toolpad/core`. This API provides state management for opening and closing snackbars. It also allows for queueing multiple notifications at once."
          ],
          "code_path": [
            "ToolpadNotificationsNoSnap.js"
          ],
          "children": []
        }
      ]
    }
  ]
}