{
  "name": "pagination",
  "introduction": [
    "# Pagination\n\n<p class=\"description\">The Pagination component enables the user to select a specific page from a range of pages.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basic pagination",
      "introduction": [
        "Basic pagination"
      ],
      "code_path": [
        "BasicPagination.js"
      ],
      "children": []
    },
    {
      "name": "Outlined pagination",
      "introduction": [
        "Outlined pagination"
      ],
      "code_path": [
        "PaginationOutlined.js"
      ],
      "children": []
    },
    {
      "name": "Rounded pagination",
      "introduction": [
        "Rounded pagination"
      ],
      "code_path": [
        "PaginationRounded.js"
      ],
      "children": []
    },
    {
      "name": "Pagination size",
      "introduction": [
        "Pagination size"
      ],
      "code_path": [
        "PaginationSize.js"
      ],
      "children": []
    },
    {
      "name": "Buttons",
      "introduction": [
        "Buttons\n\nYou can optionally enable first-page and last-page buttons, or disable the previous-page and next-page buttons."
      ],
      "code_path": [
        "PaginationButtons.js"
      ],
      "children": []
    },
    {
      "name": "Custom icons",
      "introduction": [
        "Custom icons\n\nIt's possible to customize the control icons."
      ],
      "code_path": [
        "CustomIcons.js"
      ],
      "children": []
    },
    {
      "name": "Pagination ranges",
      "introduction": [
        "Pagination ranges\n\nYou can specify how many digits to display either side of current page with the `siblingCount` prop, and adjacent to the start and end page number with the `boundaryCount` prop."
      ],
      "code_path": [
        "PaginationRanges.js"
      ],
      "children": []
    },
    {
      "name": "Controlled pagination",
      "introduction": [
        "Controlled pagination"
      ],
      "code_path": [
        "PaginationControlled.js"
      ],
      "children": []
    },
    {
      "name": "Router integration",
      "introduction": [
        "Router integration"
      ],
      "code_path": [
        "PaginationLink.js"
      ],
      "children": []
    },
    {
      "name": "`usePagination`",
      "introduction": [
        "`usePagination`\n\nFor advanced customization use cases, a headless `usePagination()` hook is exposed.\nIt accepts almost the same options as the Pagination component minus all the props\nrelated to the rendering of JSX.\nThe Pagination component is built on this hook.\n\n```jsx\nimport usePagination from '@mui/material/usePagination';\n```"
      ],
      "code_path": [
        "UsePagination.js"
      ],
      "children": []
    },
    {
      "name": "Table pagination",
      "introduction": [
        "Table pagination\n\nThe `Pagination` component was designed to paginate a list of arbitrary items when infinite loading isn't used.\nIt's preferred in contexts where SEO is important, for instance, a blog.\n\nFor the pagination of a large set of tabular data, you should use the `TablePagination` component.",
        ":::warning\nNote that the `Pagination` page prop starts at 1 to match the requirement of including the value in the URL, while the `TablePagination` page prop starts at 0 to match the requirement of zero-based JavaScript arrays that come with rendering a lot of tabular data.\n:::\n\nYou can learn more about this use case in the [table section](/material-ui/react-table/#custom-pagination-options) of the documentation."
      ],
      "code_path": [
        "TablePaginationDemo.js",
        null
      ],
      "children": []
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "ARIA",
          "introduction": [
            "ARIA\n\nThe root node has a role of \"navigation\" and aria-label \"pagination navigation\" by default. The page items have an aria-label that identifies the purpose of the item (\"go to first page\", \"go to previous page\", \"go to page 1\" etc.).\nYou can override these using the `getItemAriaLabel` prop."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Keyboard",
          "introduction": [
            "Keyboard\n\nThe pagination items are in tab order, with a tabindex of \"0\"."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    }
  ]
}