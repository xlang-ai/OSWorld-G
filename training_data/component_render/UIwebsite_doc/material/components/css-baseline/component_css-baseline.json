{
  "name": "css-baseline",
  "introduction": [
    "# CSS Baseline\n\n<p class=\"description\">The CssBaseline component helps to kickstart an elegant, consistent, and simple baseline to build upon.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Global reset",
      "introduction": [
        "Global reset\n\nYou might be familiar with [normalize.css](https://github.com/necolas/normalize.css), a collection of HTML element and attribute style-normalizations.\n\n```jsx\nimport * as React from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nexport default function MyApp() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      {/* The rest of your application */}\n    </React.Fragment>\n  );\n}\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Scoping on children",
      "introduction": [
        "Scoping on children\n\nHowever, you might be progressively migrating a website to Material UI, using a global reset might not be an option.\nIt's possible to apply the baseline only to the children by using the `ScopedCssBaseline` component.\n\n```jsx\nimport * as React from 'react';\nimport ScopedCssBaseline from '@mui/material/ScopedCssBaseline';\nimport MyApp from './MyApp';\n\nexport default function MyApp() {\n  return (\n    <ScopedCssBaseline>\n      {/* The rest of your application */}\n      <MyApp />\n    </ScopedCssBaseline>\n  );\n}\n```\n\n⚠️ Make sure you import `ScopedCssBaseline` first to avoid box-sizing conflicts as in the above example."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Approach",
      "introduction": [
        "Approach"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Page",
          "introduction": [
            "Page\n\nThe `<html>` and `<body>` elements are updated to provide better page-wide defaults. More specifically:\n\n- The margin in all browsers is removed.\n- The default Material Design background color is applied.\n  It's using [`theme.palette.background.default`](/material-ui/customization/default-theme/?expand-path=$.palette.background) for standard devices and a white background for print devices.\n- If `enableColorScheme` is provided to `CssBaseline`, native components color will be set by applying [`color-scheme`](https://web.dev/articles/color-scheme) on `<html>`.\n  The value used is provided by the theme property `theme.palette.mode`."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Layout",
          "introduction": [
            "Layout\n\n- `box-sizing` is set globally on the `<html>` element to `border-box`.\n  Every element—including `*::before` and `*::after` are declared to inherit this property,\n  which ensures that the declared width of the element is never exceeded due to padding or border."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Scrollbars",
          "introduction": [
            "Scrollbars\n\n:::error\nThis API is deprecated.\nConsider using [color-scheme](#color-scheme) instead.\n:::\n\nThe colors of the scrollbars can be customized to improve the contrast (especially on Windows). Add this code to your theme (for dark mode).\n\n```jsx\nimport darkScrollbar from '@mui/material/darkScrollbar';\n\nconst theme = createTheme({\n  components: {\n    MuiCssBaseline: {\n      styleOverrides: (themeParam) => ({\n        body: themeParam.palette.mode === 'dark' ? darkScrollbar() : null,\n      }),\n    },\n  },\n});\n```\n\nBe aware, however, that using this utility (and customizing `-webkit-scrollbar`) forces macOS to always show the scrollbar."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Color scheme",
          "introduction": [
            "Color scheme\n\nThis API is introduced in @mui/material (v5.1.0) for switching between `\"light\"` and `\"dark\"` modes of native components such as scrollbar, using the `color-scheme` CSS property.\nTo enable it, you can set `enableColorScheme=true` as follows:\n\n```jsx\n<CssBaseline enableColorScheme />\n\n// or\n\n<ScopedCssBaseline enableColorScheme >\n  {/* The rest of your application using color-scheme*/}\n</ScopedCssBaseline>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Typography",
          "introduction": [
            "Typography\n\n- No base font-size is declared on the `<html>`, but 16px is assumed (the browser default).\n  You can learn more about the implications of changing the `<html>` default font size in [the theme documentation](/material-ui/customization/typography/#html-font-size) page.\n- Set the `theme.typography.body1` style on the `<body>` element.\n- Set the font-weight to `theme.typography.fontWeightBold` for the `<b>` and `<strong>` elements.\n- Custom font-smoothing is enabled for better display of the Roboto font."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nHead to the [global customization](/material-ui/customization/how-to-customize/#4-global-css-override) section of the documentation to change the output of these components."
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}