{
  "name": "dialogs",
  "introduction": [
    "# Dialog\n\n<p class=\"description\">Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.</p>\n\nA Dialog is a type of [modal](/material-ui/react-modal/) window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken.\n\nDialogs are purposefully interruptive, so they should be used sparingly."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Introduction",
      "introduction": [
        "Introduction\n\nDialogs are implemented using a collection of related components:\n\n- Dialog: the parent component that renders the modal.\n- Dialog Title: a wrapper used for the title of a Dialog.\n- Dialog Actions: an optional container for a Dialog's Buttons.\n- Dialog Content: an optional container for displaying the Dialog's content.\n- Dialog Content Text: a wrapper for text inside of `<DialogContent />`.\n- Slide: optional [Transition](/material-ui/transitions/#slide) used to slide the Dialog in from the edge of the screen."
      ],
      "code_path": [
        "SimpleDialogDemo.js"
      ],
      "children": []
    },
    {
      "name": "Basics",
      "introduction": [
        "Basics\n\n```jsx\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Alerts",
      "introduction": [
        "Alerts\n\nAlerts are urgent interruptions, requiring acknowledgement, that inform the user about a situation.\n\nMost alerts don't need titles.\nThey summarize a decision in a sentence or two by either:\n\n- Asking a question (for example \"Delete this conversation?\")\n- Making a statement related to the action buttons\n\nUse title bar alerts only for high-risk situations, such as the potential loss of connectivity.\nUsers should be able to understand the choices based on the title and button text alone.\n\nIf a title is required:\n\n- Use a clear question or statement with an explanation in the content area, such as \"Erase USB storage?\".\n- Avoid apologies, ambiguity, or questions, such as \"Warning!\" or \"Are you sure?\""
      ],
      "code_path": [
        "AlertDialog.js"
      ],
      "children": []
    },
    {
      "name": "Transitions",
      "introduction": [
        "Transitions\n\nYou can also swap out the transition, the next example uses `Slide`."
      ],
      "code_path": [
        "AlertDialogSlide.js"
      ],
      "children": []
    },
    {
      "name": "Form dialogs",
      "introduction": [
        "Form dialogs\n\nForm dialogs allow users to fill out form fields within a dialog.\nFor example, if your site prompts for potential subscribers to fill in their email address, they can fill out the email field and touch 'Submit'."
      ],
      "code_path": [
        "FormDialog.js"
      ],
      "children": []
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).\n\nThe dialog has a close button added to aid usability."
      ],
      "code_path": [
        "CustomizedDialogs.js"
      ],
      "children": []
    },
    {
      "name": "Full-screen dialogs",
      "introduction": [
        "Full-screen dialogs"
      ],
      "code_path": [
        "FullScreenDialog.js"
      ],
      "children": []
    },
    {
      "name": "Optional sizes",
      "introduction": [
        "Optional sizes\n\nYou can set a dialog maximum width by using the `maxWidth` enumerable in combination with the `fullWidth` boolean.\nWhen the `fullWidth` prop is true, the dialog will adapt based on the `maxWidth` value."
      ],
      "code_path": [
        "MaxWidthDialog.js"
      ],
      "children": []
    },
    {
      "name": "Responsive full-screen",
      "introduction": [
        "Responsive full-screen\n\nYou may make a dialog responsively full screen using [`useMediaQuery`](/material-ui/react-use-media-query/).\n\n```jsx\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n\n  return <Dialog fullScreen={fullScreen} />;\n}\n```"
      ],
      "code_path": [
        "ResponsiveDialog.js"
      ],
      "children": []
    },
    {
      "name": "Confirmation dialogs",
      "introduction": [
        "Confirmation dialogs\n\nConfirmation dialogs require users to explicitly confirm their choice before an option is committed.\nFor example, users can listen to multiple ringtones but only make a final selection upon touching \"OK\".\n\nTouching \"Cancel\" in a confirmation dialog, cancels the action, discards any changes, and closes the dialog."
      ],
      "code_path": [
        "ConfirmationDialog.js"
      ],
      "children": []
    },
    {
      "name": "Non-modal dialog",
      "introduction": [
        "Non-modal dialog\n\nDialogs can also be non-modal, meaning they don't interrupt user interaction behind it.\nVisit [the Nielsen Norman Group article](https://www.nngroup.com/articles/modal-nonmodal-dialog/) for more in-depth guidance about modal vs. non-modal dialog usage.\n\nThe demo below shows a persistent cookie banner, a common non-modal dialog use case."
      ],
      "code_path": [
        "CookiesBanner.js"
      ],
      "children": []
    },
    {
      "name": "Draggable dialog",
      "introduction": [
        "Draggable dialog\n\nYou can create a draggable dialog by using [react-draggable](https://github.com/react-grid-layout/react-draggable).\nTo do so, you can pass the imported `Draggable` component as the `PaperComponent` of the `Dialog` component.\nThis will make the entire dialog draggable."
      ],
      "code_path": [
        "DraggableDialog.js"
      ],
      "children": []
    },
    {
      "name": "Scrolling long content",
      "introduction": [
        "Scrolling long content\n\nWhen dialogs become too long for the user's viewport or device, they scroll.\n\n- `scroll=paper` the content of the dialog scrolls within the paper element.\n- `scroll=body` the content of the dialog scrolls within the body element.\n\nTry the demo below to see what we mean:"
      ],
      "code_path": [
        "ScrollDialog.js"
      ],
      "children": []
    },
    {
      "name": "Performance",
      "introduction": [
        "Performance\n\nFollow the [Modal performance section](/material-ui/react-modal/#performance)."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Limitations",
      "introduction": [
        "Limitations\n\nFollow the [Modal limitations section](/material-ui/react-modal/#limitations)."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Supplementary projects",
      "introduction": [
        "Supplementary projects\n\nFor more advanced use cases you might be able to take advantage of:"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "material-ui-confirm",
          "introduction": [
            "material-ui-confirm\n\n![stars](https://img.shields.io/github/stars/jonatanklosko/material-ui-confirm?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/material-ui-confirm.svg)\n\nThe package [`material-ui-confirm`](https://github.com/jonatanklosko/material-ui-confirm/) provides dialogs for confirming user actions without writing boilerplate code."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\nFollow the [Modal accessibility section](/material-ui/react-modal/#accessibility)."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Toolpad (Beta)",
      "introduction": [
        "Toolpad (Beta)"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "useDialogs",
          "introduction": [
            "useDialogs\n\nYou can create and manipulate dialogs imperatively with the [`useDialogs()`](https://mui.com/toolpad/core/react-use-dialogs/) API in `@toolpad/core`. This hook handles\n\n- state management for opening and closing dialogs\n- passing data to dialogs and receiving results back from them\n- stacking multiple dialogs\n- themed, asynchronous versions of `window.alert()`, `window.confirm()` and `window.prompt()`\n\nThe following example demonstrates some of these features:",
            "```tsx\nconst handleDelete = async () => {\n  const id = await dialogs.prompt('Enter the ID to delete', {\n    okText: 'Delete',\n    cancelText: 'Cancel',\n  });\n\n  if (id) {\n    const deleteConfirmed = await dialogs.confirm(\n      `Are you sure you want to delete \"${id}\"?`,\n    );\n    if (deleteConfirmed) {\n      try {\n        setIsDeleting(true);\n        await mockApiDelete(id);\n        dialogs.alert('Deleted!');\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'Unknown error';\n        await dialogs.open(MyCustomDialog, { id, error: message });\n      } finally {\n        setIsDeleting(false);\n      }\n    }\n  }\n};\n```"
          ],
          "code_path": [
            "ToolpadDialogsNoSnap.js",
            null
          ],
          "children": []
        }
      ]
    }
  ]
}