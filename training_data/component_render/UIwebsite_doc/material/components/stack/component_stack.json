{
  "name": "stack",
  "introduction": [
    "# Stack\n\n<p class=\"description\">Stack is a container component for arranging elements vertically or horizontally.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Introduction",
      "introduction": [
        "Introduction\n\nThe Stack component manages the layout of its immediate children along the vertical or horizontal axis, with optional spacing and dividers between each child.\n\n:::info\nStack is ideal for one-dimensional layouts, while Grid is preferable when you need both vertical _and_ horizontal arrangement.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Basics",
      "introduction": [
        "Basics\n\n```jsx\nimport Stack from '@mui/material/Stack';\n```\n\nThe Stack component acts as a generic container, wrapping around the elements to be arranged.\n\nUse the `spacing` prop to control the space between children.\nThe spacing value can be any number, including decimals, or a string.\n(The prop is converted into a CSS property using the [`theme.spacing()`](/material-ui/customization/spacing/) helper.)"
      ],
      "code_path": [
        "BasicStack.js"
      ],
      "children": [
        {
          "name": "Stack vs. Grid",
          "introduction": [
            "Stack vs. Grid\n\n`Stack` is concerned with one-dimensional layouts, while [Grid](/material-ui/react-grid/) handles two-dimensional layouts. The default direction is `column` which stacks children vertically."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Direction",
      "introduction": [
        "Direction\n\nBy default, Stack arranges items vertically in a column.\nUse the `direction` prop to position items horizontally in a row:"
      ],
      "code_path": [
        "DirectionStack.js"
      ],
      "children": []
    },
    {
      "name": "Dividers",
      "introduction": [
        "Dividers\n\nUse the `divider` prop to insert an element between each child.\nThis works particularly well with the [Divider](/material-ui/react-divider/) component, as shown below:"
      ],
      "code_path": [
        "DividerStack.js"
      ],
      "children": []
    },
    {
      "name": "Responsive values",
      "introduction": [
        "Responsive values\n\nYou can switch the `direction` or `spacing` values based on the active breakpoint."
      ],
      "code_path": [
        "ResponsiveStack.js"
      ],
      "children": []
    },
    {
      "name": "Flexbox gap",
      "introduction": [
        "Flexbox gap\n\nTo use [flexbox `gap`](https://developer.mozilla.org/en-US/docs/Web/CSS/gap) for the spacing implementation, set the `useFlexGap` prop to true.\n\nIt removes the [known limitations](#limitations) of the default implementation that uses CSS nested selector. However, CSS flexbox gap is not fully supported in some browsers.\n\nWe recommend checking the [support percentage](https://caniuse.com/?search=flex%20gap) before using it.",
        "To set the prop to all stack instances, create a theme with default props:\n\n```js\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\n\nconst theme = createTheme({\n  components: {\n    MuiStack: {\n      defaultProps: {\n        useFlexGap: true,\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Stack>â€¦</Stack> {/* uses flexbox gap by default */}\n    </ThemeProvider>\n  );\n}\n```"
      ],
      "code_path": [
        "FlexboxGapStack.js",
        null
      ],
      "children": []
    },
    {
      "name": "Interactive demo",
      "introduction": [
        "Interactive demo\n\nBelow is an interactive demo that lets you explore the visual results of the different settings:"
      ],
      "code_path": [
        "InteractiveStack.js"
      ],
      "children": []
    },
    {
      "name": "System props",
      "introduction": [
        "System props\n\n:::info\nSystem props are deprecated and will be removed in the next major release. Please use the `sx` prop instead.\n\n```diff\n- <Stack mt={2} />\n+ <Stack sx={{ mt: 2 }} />\n```\n\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Limitations",
      "introduction": [
        "Limitations"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Margin on the children",
          "introduction": [
            "Margin on the children\n\nCustomizing the margin on the children is not supported by default.\n\nFor instance, the top-margin on the `Button` component below will be ignored.\n\n```jsx\n<Stack>\n  <Button sx={{ marginTop: '30px' }}>...</Button>\n</Stack>\n```\n\n:::success\nTo overcome this limitation, set [`useFlexGap`](#flexbox-gap) prop to true to switch to CSS flexbox gap implementation.\n\nYou can learn more about this limitation by visiting this [RFC](https://github.com/mui/material-ui/issues/33754).\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "white-space: nowrap",
          "introduction": [
            "white-space: nowrap\n\nThe initial setting on flex items is `min-width: auto`.\nThis causes a positioning conflict when children use `white-space: nowrap;`.\nYou can reproduce the issue with:\n\n```jsx\n<Stack direction=\"row\">\n  <Typography noWrap>\n```\n\nIn order for the item to stay within the container you need to set `min-width: 0`.\n\n```jsx\n<Stack direction=\"row\" sx={{ minWidth: 0 }}>\n  <Typography noWrap>\n```"
          ],
          "code_path": [
            "ZeroWidthStack.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Anatomy",
      "introduction": [
        "Anatomy\n\nThe Stack component is composed of a single root `<div>` element:\n\n```html\n<div class=\"MuiStack-root\">\n  <!-- Stack contents -->\n</div>\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}