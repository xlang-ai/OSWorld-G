{
  "name": "tabs",
  "introduction": [
    "# Tabs\n\n<p class=\"description\">Tabs make it easy to explore and switch between different views.</p>\n\nTabs organize and allow navigation between groups of content that are related and at the same level of hierarchy."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Introduction",
      "introduction": [
        "Introduction\n\nTabs are implemented using a collection of related components:\n\n- `<Tab />` - the tab element itself. Clicking on a tab displays its corresponding panel.\n- `<Tabs />` - the container that houses the tabs. Responsible for handling focus and keyboard navigation between tabs."
      ],
      "code_path": [
        "BasicTabs.js"
      ],
      "children": []
    },
    {
      "name": "Basics",
      "introduction": [
        "Basics\n\n```jsx\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Experimental API",
      "introduction": [
        "Experimental API\n\n`@mui/lab` offers utility components that inject props to implement accessible tabs\nfollowing [WAI-ARIA Authoring Practices](https://www.w3.org/WAI/ARIA/apg/patterns/tabs/):\n\n- `<TabList />` - the container that houses the tabs. Responsible for handling focus and keyboard navigation between tabs.\n- `<TabPanel />` - the card that hosts the content associated with a tab.\n- `<TabContext />` - the top-level component that wraps the Tab List and Tab Panel components."
      ],
      "code_path": [
        "LabTabs.js"
      ],
      "children": []
    },
    {
      "name": "Wrapped labels",
      "introduction": [
        "Wrapped labels\n\nLong labels will automatically wrap on tabs.\nIf the label is too long for the tab, it will overflow, and the text will not be visible."
      ],
      "code_path": [
        "TabsWrappedLabel.js"
      ],
      "children": []
    },
    {
      "name": "Colored tab",
      "introduction": [
        "Colored tab"
      ],
      "code_path": [
        "ColorTabs.js"
      ],
      "children": []
    },
    {
      "name": "Disabled tab",
      "introduction": [
        "Disabled tab\n\nA tab can be disabled by setting the `disabled` prop."
      ],
      "code_path": [
        "DisabledTabs.js"
      ],
      "children": []
    },
    {
      "name": "Fixed tabs",
      "introduction": [
        "Fixed tabs\n\nFixed tabs should be used with a limited number of tabs, and when a consistent placement will aid muscle memory."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Full width",
          "introduction": [
            "Full width\n\nThe `variant=\"fullWidth\"` prop should be used for smaller views."
          ],
          "code_path": [
            "FullWidthTabs.js"
          ],
          "children": []
        },
        {
          "name": "Centered",
          "introduction": [
            "Centered\n\nThe `centered` prop should be used for larger views."
          ],
          "code_path": [
            "CenteredTabs.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Scrollable tabs",
      "introduction": [
        "Scrollable tabs"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Automatic scroll buttons",
          "introduction": [
            "Automatic scroll buttons\n\nUse the `variant=\"scrollable\"` and `scrollButtons=\"auto\"` props to display left and right scroll buttons on desktop that are hidden on mobile:"
          ],
          "code_path": [
            "ScrollableTabsButtonAuto.js"
          ],
          "children": []
        },
        {
          "name": "Forced scroll buttons",
          "introduction": [
            "Forced scroll buttons\n\nApply `scrollButtons={true}` and the `allowScrollButtonsMobile` prop to display the left and right scroll buttons on all viewports:",
            "If you want to make sure the buttons are always visible, you should customize the opacity.\n\n```css\n.MuiTabs-scrollButtons.Mui-disabled {\n  opacity: 0.3;\n}\n```"
          ],
          "code_path": [
            "ScrollableTabsButtonForce.js",
            "ScrollableTabsButtonVisible.js"
          ],
          "children": []
        },
        {
          "name": "Prevent scroll buttons",
          "introduction": [
            "Prevent scroll buttons\n\nLeft and right scroll buttons are never be presented with `scrollButtons={false}`.\nAll scrolling must be initiated through user agent scrolling mechanisms (for example left/right swipe, shift mouse wheel, etc.)"
          ],
          "code_path": [
            "ScrollableTabsButtonPrevent.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).",
        "ðŸŽ¨ If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/tabs-introduction--docs)."
      ],
      "code_path": [
        "CustomizedTabs.js",
        null
      ],
      "children": []
    },
    {
      "name": "Vertical tabs",
      "introduction": [
        "Vertical tabs\n\nTo make vertical tabs instead of default horizontal ones, there is `orientation=\"vertical\"`:",
        "Note that you can restore the scrollbar with `visibleScrollbar`."
      ],
      "code_path": [
        "VerticalTabs.js",
        null
      ],
      "children": []
    },
    {
      "name": "Nav tabs",
      "introduction": [
        "Nav tabs\n\nBy default, tabs use a `button` element, but you can provide your custom tag or component. Here's an example of implementing tabbed navigation:"
      ],
      "code_path": [
        "NavTabs.js"
      ],
      "children": [
        {
          "name": "Third-party routing library",
          "introduction": [
            "Third-party routing library\n\nOne frequent use case is to perform navigation on the client only, without an HTTP round-trip to the server.\nThe `Tab` component provides the `component` prop to handle this use case.\nHere is a [more detailed guide](/material-ui/integrations/routing/#tabs)."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Icon tabs",
      "introduction": [
        "Icon tabs\n\nTab labels may be either all icons or all text.",
        ""
      ],
      "code_path": [
        "IconTabs.js",
        "IconLabelTabs.js"
      ],
      "children": []
    },
    {
      "name": "Icon position",
      "introduction": [
        "Icon position\n\nBy default, the icon is positioned at the `top` of a tab. Other supported positions are `start`, `end`, `bottom`."
      ],
      "code_path": [
        "IconPositionTabs.js"
      ],
      "children": []
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/tabs/)\n\nThe following steps are needed in order to provide necessary information for assistive technologies:\n\n1. Label `Tabs` via `aria-label` or `aria-labelledby`.\n2. `Tab`s need to be connected to their\n   corresponding `[role=\"tabpanel\"]` by setting the correct `id`, `aria-controls` and `aria-labelledby`.\n\nAn example for the current implementation can be found in the demos on this page. We've also published [an experimental API](#experimental-api) in `@mui/lab` that does not require\nextra work."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Keyboard navigation",
          "introduction": [
            "Keyboard navigation\n\nThe components implement keyboard navigation using the \"manual activation\" behavior.\nIf you want to switch to the \"selection automatically follows focus\" behavior you have to pass `selectionFollowsFocus` to the `Tabs` component.\nThe WAI-ARIA authoring practices have a detailed guide on [how to decide when to make selection automatically follow focus](https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#x6-4-deciding-when-to-make-selection-automatically-follow-focus)."
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Demo",
              "introduction": [
                "Demo\n\nThe following two demos only differ in their keyboard navigation behavior.\nFocus a tab and navigate with arrow keys to notice the difference, for example <kbd class=\"key\">Arrow Left</kbd>.\n\n```jsx\n/* Tabs where selection follows focus */\n<Tabs selectionFollowsFocus />\n```",
                "```jsx\n/* Tabs where each tab needs to be selected manually */\n<Tabs />\n```"
              ],
              "code_path": [
                "AccessibleTabs1.js",
                "AccessibleTabs2.js"
              ],
              "children": []
            }
          ]
        }
      ]
    }
  ]
}