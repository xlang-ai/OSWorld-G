{
  "name": "skeleton",
  "introduction": [
    "# Skeleton\n\n<p class=\"description\">Display a placeholder preview of your content before the data gets loaded to reduce load-time frustration.</p>\n\nThe data for your components might not be immediately available. You can improve the perceived responsiveness of the page by using skeletons. It feels like things are happening immediately, then the information is incrementally displayed on the screen (Cf. [Avoid The Spinner](https://www.lukew.com/ff/entry.asp?1797))."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Usage",
      "introduction": [
        "Usage\n\nThe component is designed to be used **directly in your components**.\nFor instance:\n\n```jsx\n{\n  item ? (\n    <img\n      style={{\n        width: 210,\n        height: 118,\n      }}\n      alt={item.title}\n      src={item.src}\n    />\n  ) : (\n    <Skeleton variant=\"rectangular\" width={210} height={118} />\n  );\n}\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Variants",
      "introduction": [
        "Variants\n\nThe component supports 4 shape variants:\n\n- `text` (default): represents a single line of text (you can adjust the height via font size).\n- `circular`, `rectangular`, and `rounded`: come with different border radius to let you take control of the size."
      ],
      "code_path": [
        "Variants.js"
      ],
      "children": []
    },
    {
      "name": "Animations",
      "introduction": [
        "Animations\n\nBy default, the skeleton pulsates, but you can change the animation to a wave or disable it entirely."
      ],
      "code_path": [
        "Animations.js"
      ],
      "children": [
        {
          "name": "Pulsate example",
          "introduction": [
            "Pulsate example\n\n{{\"demo\": \"YouTube.js\", \"defaultCodeOpen\": false}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Wave example",
          "introduction": [
            "Wave example\n\n{{\"demo\": \"Facebook.js\", \"defaultCodeOpen\": false, \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Inferring dimensions",
      "introduction": [
        "Inferring dimensions\n\nIn addition to accepting `width` and `height` props, the component can also infer the dimensions.\n\nIt works well when it comes to typography as its height is set using `em` units.\n\n```jsx\n<Typography variant=\"h1\">{loading ? <Skeleton /> : 'h1'}</Typography>\n```\n\n{{\"demo\": \"SkeletonTypography.js\", \"defaultCodeOpen\": false}}\n\nBut when it comes to other components, you may not want to repeat the width and\nheight. In these instances, you can pass `children` and it will\ninfer its width and height from them.\n\n```jsx\nloading ? (\n  <Skeleton variant=\"circular\">\n    <Avatar />\n  </Skeleton>\n) : (\n  <Avatar src={data.avatar} />\n);\n```\n\n{{\"demo\": \"SkeletonChildren.js\", \"defaultCodeOpen\": false}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Color",
      "introduction": [
        "Color\n\nThe color of the component can be customized by changing its `background-color` CSS property.\nThis is especially useful when on a black background (as the skeleton will otherwise be invisible).\n\n{{\"demo\": \"SkeletonColor.js\", \"bg\": \"inline\"}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\nSkeleton screens provide an alternative to the traditional spinner method.\nRather than showing an abstract widget, skeleton screens create anticipation of what is to come and reduce cognitive load.\n\nThe background color of the skeleton uses the least amount of luminance to be visible in good conditions (good ambient light, good screen, no visual impairments)."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "ARIA",
          "introduction": [
            "ARIA\n\nNone."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Keyboard",
          "introduction": [
            "Keyboard\n\nThe skeleton is not focusable."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    }
  ]
}