{
  "name": "drawers",
  "introduction": [
    "# Drawer\n\n<p class=\"description\">The navigation drawers (or \"sidebars\") provide ergonomic access to destinations in a site or app functionality such as switching accounts.</p>\n\nA navigation drawer can either be permanently on-screen or controlled by a navigation menu icon.\n\n[Side sheets](https://m2.material.io/components/sheets-side) are supplementary surfaces primarily used on tablet and desktop."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Temporary drawer",
      "introduction": [
        "Temporary drawer\n\nTemporary navigation drawers can toggle open or closed. Closed by default, the drawer opens temporarily above all other content until a section is selected.\n\nThe Drawer can be cancelled by clicking the overlay or pressing the Esc key.\nIt closes when an item is selected, handled by controlling the `open` prop."
      ],
      "code_path": [
        "TemporaryDrawer.js"
      ],
      "children": [
        {
          "name": "Anchor",
          "introduction": [
            "Anchor\n\nUse the `anchor` prop to specify which side of the screen the Drawer should originate from.\n\nThe default value is `left`."
          ],
          "code_path": [
            "AnchorTemporaryDrawer.js"
          ],
          "children": []
        },
        {
          "name": "Swipeable",
          "introduction": [
            "Swipeable\n\nYou can make the drawer swipeable with the `SwipeableDrawer` component.\n\nThis component comes with a 2 kB gzipped payload overhead.\nSome low-end mobile devices won't be able to follow the fingers at 60 FPS.\nYou can use the `disableBackdropTransition` prop to help.",
            "The following properties are used in this documentation website for optimal usability of the component:\n\n- iOS is hosted on high-end devices.\n  The backdrop transition can be enabled without dropping frames.\n  The performance will be good enough.\n- iOS has a \"swipe to go back\" feature that interferes\n  with the discovery feature, so discovery has to be disabled.\n\n```jsx\nconst iOS =\n  typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n<SwipeableDrawer disableBackdropTransition={!iOS} disableDiscovery={iOS} />;\n```"
          ],
          "code_path": [
            "SwipeableTemporaryDrawer.js",
            null
          ],
          "children": []
        },
        {
          "name": "Swipeable edge",
          "introduction": [
            "Swipeable edge\n\nYou can configure the `SwipeableDrawer` to have a visible edge when closed.\n\nIf you are on a desktop, you can toggle the drawer with the \"OPEN\" button.\nIf you are on mobile, you can open the demo in CodeSandbox (\"edit\" icon) and swipe.\n\n{{\"demo\": \"SwipeableEdgeDrawer.js\", \"iframe\": true, \"disableLiveEdit\": true, \"height\": 400, \"maxWidth\": 300}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Keep mounted",
          "introduction": [
            "Keep mounted\n\nThe Modal used internally by the Swipeable Drawer has the `keepMounted` prop set by default.\nThis means that the contents of the drawer are always present in the DOM.\n\nYou can change this default behavior with the `ModalProps` prop, but you may encounter issues with `keepMounted: false` in React 18.\n\n```jsx\n<Drawer\n  variant=\"temporary\"\n  ModalProps={{\n    keepMounted: false,\n  }}\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Responsive drawer",
      "introduction": [
        "Responsive drawer\n\nYou can use the `temporary` variant to display a drawer for small screens and `permanent` for a drawer for wider screens.\n\n{{\"demo\": \"ResponsiveDrawer.js\", \"iframe\": true, \"disableLiveEdit\": true}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Persistent drawer",
      "introduction": [
        "Persistent drawer\n\nPersistent navigation drawers can toggle open or closed.\nThe drawer sits on the same surface elevation as the content.\nIt is closed by default and opens by selecting the menu icon, and stays open until closed by the user.\nThe state of the drawer is remembered from action to action and session to session.\n\nWhen the drawer is outside of the page grid and opens, the drawer forces other content to change size and adapt to the smaller viewport.\n\nPersistent navigation drawers are acceptable for all sizes larger than mobile.\nThey are not recommended for apps with multiple levels of hierarchy that require using an up arrow for navigation.\n\n{{\"demo\": \"PersistentDrawerLeft.js\", \"iframe\": true}}\n\n{{\"demo\": \"PersistentDrawerRight.js\", \"iframe\": true}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Mini variant drawer",
      "introduction": [
        "Mini variant drawer\n\nIn this variation, the persistent navigation drawer changes its width.\nIts resting state is as a mini-drawer at the same elevation as the content, clipped by the app bar.\nWhen expanded, it appears as the standard persistent navigation drawer.\n\nThe mini variant is recommended for apps sections that need quick selection access alongside content.\n\n{{\"demo\": \"MiniDrawer.js\", \"iframe\": true}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Permanent drawer",
      "introduction": [
        "Permanent drawer\n\nPermanent navigation drawers are always visible and pinned to the left edge, at the same elevation as the content or background. They cannot be closed.\n\nPermanent navigation drawers are the **recommended default for desktop**."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Full-height navigation",
          "introduction": [
            "Full-height navigation\n\nApps focused on information consumption that use a left-to-right hierarchy.\n\n{{\"demo\": \"PermanentDrawerLeft.js\", \"iframe\": true}}\n\n{{\"demo\": \"PermanentDrawerRight.js\", \"iframe\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Clipped under the app bar",
          "introduction": [
            "Clipped under the app bar\n\nApps focused on productivity that require balance across the screen.\n\n{{\"demo\": \"ClippedDrawer.js\", \"iframe\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Toolpad (Beta)",
      "introduction": [
        "Toolpad (Beta)"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Dashboard Layout",
          "introduction": [
            "Dashboard Layout\n\nThe [DashboardLayout](https://mui.com/toolpad/core/react-dashboard-layout/) component from `@toolpad/core` is the starting point for dashboarding applications. It takes care of application layout, theming, navigation, and more. An example usage of this component:\n\n{{\"demo\": \"../app-bar/DashboardLayoutBasic.js\", \"height\": 400, \"iframe\": true, \"bg\": \"inline\", \"defaultExpanded\": false}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    }
  ]
}