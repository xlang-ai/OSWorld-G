{
  "name": "typography",
  "introduction": [
    "# Typography\n\n<p class=\"description\">Use typography to present your design and content as clearly and efficiently as possible.</p>"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Roboto font",
      "introduction": [
        "Roboto font\n\nMaterial UI uses the [Roboto](https://fonts.google.com/specimen/Roboto) font by default.\nAdd it to your project via Fontsource, or with the Google Fonts CDN.\n\n<codeblock storageKey=\"package-manager\">\n\n```bash npm\nnpm install @fontsource/roboto\n```\n\n```bash pnpm\npnpm add @fontsource/roboto\n```\n\n```bash yarn\nyarn add @fontsource/roboto\n```\n\n</codeblock>\n\nThen you can import it in your entry point like this:\n\n```tsx\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n```\n\n:::info\nFontsource can be configured to load specific subsets, weights, and styles. Material UI's default typography configuration relies only on the 300, 400, 500, and 700 font weights.\n:::"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Google Web Fonts",
          "introduction": [
            "Google Web Fonts\n\nTo install Roboto through the Google Web Fonts CDN, add the following code inside your project's `<head />` tag:\n\n```html\n<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n<link\n  rel=\"stylesheet\"\n  href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\"\n/>\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Component",
      "introduction": [
        "Component"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Usage",
          "introduction": [
            "Usage\n\nThe Typography component follows the [Material Design typographic scale](https://m2.material.io/design/typography/#type-scale) that provides a limited set of type sizes that work well together for a consistent layout."
          ],
          "code_path": [
            "Types.js"
          ],
          "children": []
        },
        {
          "name": "Theme keys",
          "introduction": [
            "Theme keys\n\nIn some situations you might not be able to use the Typography component.\nHopefully, you might be able to take advantage of the [`typography`](/material-ui/customization/default-theme/?expand-path=$.typography) keys of the theme."
          ],
          "code_path": [
            "TypographyTheme.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Adding & disabling variants",
          "introduction": [
            "Adding & disabling variants\n\nIn addition to using the default typography variants, you can add custom ones, or disable any you don't need. See the [Adding & disabling variants](/material-ui/customization/typography/#adding-amp-disabling-variants) page for more info."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Changing the semantic element",
          "introduction": [
            "Changing the semantic element\n\nThe Typography component uses the `variantMapping` prop to associate a UI variant with a semantic element.\nIt's important to realize that the style of a typography component is independent from the semantic underlying element.\n\nTo change the underlying element for a one-off situation, like avoiding two `h1` elements in your page, use the `component` prop:\n\n```jsx\n<Typography variant=\"h1\" component=\"h2\">\n  h1. Heading\n</Typography>\n```\n\nTo change the typography element mapping globally, [use the theme](/material-ui/customization/typography/#adding-amp-disabling-variants):\n\n```js\nconst theme = createTheme({\n  components: {\n    MuiTypography: {\n      defaultProps: {\n        variantMapping: {\n          h1: 'h2',\n          h2: 'h2',\n          h3: 'h2',\n          h4: 'h2',\n          h5: 'h2',\n          h6: 'h2',\n          subtitle1: 'h2',\n          subtitle2: 'h2',\n          body1: 'span',\n          body2: 'span',\n        },\n      },\n    },\n  },\n});\n```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "System props",
          "introduction": [
            "System props\n\n:::info\nSystem props are deprecated and will be removed in the next major release. Please use the `sx` prop instead.\n\n```diff\n- <Typography mt={2} />\n+ <Typography sx={{ mt: 2 }} />\n```\n\n:::"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\nKey factors to follow for an accessible typography:\n\n- **Color**. Provide enough contrast between text and its background, check out the minimum recommended [WCAG 2.0 color contrast ratio](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (4.5:1).\n- **Font size**. Use [relative units (rem)](/material-ui/customization/typography/#font-size), instead of pixels, to accommodate the user's browser settings.\n- **Heading hierarchy**. Based on [the W3 guidelines](https://www.w3.org/WAI/tutorials/page-structure/headings/), don't skip heading levels. Make sure to [separate the semantics from the style](#changing-the-semantic-element)."
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}