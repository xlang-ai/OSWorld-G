{
  "name": "toggle-button",
  "introduction": [
    "# Toggle Button\n\n<p class=\"description\">A Toggle Button can be used to group related options.</p>\n\nTo emphasize groups of related Toggle buttons,\na group should share a common container.\nThe `ToggleButtonGroup` controls the selected state of its child buttons when given its own `value` prop."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Exclusive selection",
      "introduction": [
        "Exclusive selection\n\nWith exclusive selection, selecting one option deselects any other.\n\nIn this example, text justification toggle buttons present options for left, center, right, and fully justified text (disabled), with only one item available for selection at a time.\n\n**Note**: Exclusive selection does not enforce that a button must be active. For that effect see [enforce value set](#enforce-value-set)."
      ],
      "code_path": [
        "ToggleButtons.js"
      ],
      "children": []
    },
    {
      "name": "Multiple selection",
      "introduction": [
        "Multiple selection\n\nMultiple selection allows for logically-grouped options, like bold, italic, and underline, to have multiple options selected."
      ],
      "code_path": [
        "ToggleButtonsMultiple.js"
      ],
      "children": []
    },
    {
      "name": "Size",
      "introduction": [
        "Size\n\nFor larger or smaller buttons, use the `size` prop."
      ],
      "code_path": [
        "ToggleButtonSizes.js"
      ],
      "children": []
    },
    {
      "name": "Color",
      "introduction": [
        "Color"
      ],
      "code_path": [
        "ColorToggleButton.js"
      ],
      "children": []
    },
    {
      "name": "Vertical buttons",
      "introduction": [
        "Vertical buttons\n\nThe buttons can be stacked vertically with the `orientation` prop set to \"vertical\"."
      ],
      "code_path": [
        "VerticalToggleButtons.js"
      ],
      "children": []
    },
    {
      "name": "Enforce value set",
      "introduction": [
        "Enforce value set\n\nIf you want to enforce that at least one button must be active, you can adapt your handleChange function.\n\n```jsx\nconst handleAlignment = (event, newAlignment) => {\n  if (newAlignment !== null) {\n    setAlignment(newAlignment);\n  }\n};\n\nconst handleDevices = (event, newDevices) => {\n  if (newDevices.length) {\n    setDevices(newDevices);\n  }\n};\n```"
      ],
      "code_path": [
        "ToggleButtonNotEmpty.js"
      ],
      "children": []
    },
    {
      "name": "Standalone toggle button",
      "introduction": [
        "Standalone toggle button"
      ],
      "code_path": [
        "StandaloneToggleButton.js"
      ],
      "children": []
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
      ],
      "code_path": [
        "CustomizedDividers.js"
      ],
      "children": []
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "ARIA",
          "introduction": [
            "ARIA\n\n- ToggleButtonGroup has `role=\"group\"`. You should provide an accessible label with `aria-label=\"label\"`, `aria-labelledby=\"id\"` or `<label>`.\n- ToggleButton sets `aria-pressed=\"<bool>\"` according to the button state. You should label each button with `aria-label`."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Keyboard",
          "introduction": [
            "Keyboard\n\nAt present, toggle buttons are in DOM order. Navigate between them with the tab key. The button behavior follows standard keyboard semantics."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    }
  ]
}