{
  "name": "table",
  "introduction": [
    "# Table\n\n<p class=\"description\">Tables display sets of data. They can be fully customized.</p>\n\nTables display information in a way that's easy to scan, so that users can look for patterns and insights. They can be embedded in primary content, such as cards. They can include:\n\n- A corresponding visualization\n- Navigation\n- Tools to query and manipulate data"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Introduction",
      "introduction": [
        "Introduction\n\nTables are implemented using a collection of related components:\n\n- `<TableContainer />`: A wrapper that provides horizontally scrolling behavior for the `<Table />` component.\n- `<Table />`: The main component for the table element. Renders as a `<table>` by default.\n- `<TableHead />`: The container for the header row(s) of `<Table />`. Renders as a `<thead>` by default.\n- `<TableBody />`: The container for the body rows of `<Table />`. Renders as a `<tbody>` by default.\n- `<TableRow />`: A row in a table. Can be used in `<TableHead />`, `<TableBody />`, or `<TableFooter />`. Renders as a `<tr>` by default.\n- `<TableCell />`: A cell in a table. Can be used in `<TableRow />` . Renders as a `<th>` in `<TableHead />` and `<td>` in `<TableBody />` by default.\n- `<TableFooter />`: An optional container for the footer row(s) of the table. Renders as a `<tfoot>` by default.\n- `<TablePagination />`: A component that provides controls for paginating table data. See the ['Sorting & selecting' example](#sorting-amp-selecting) and ['Custom Table Pagination Action' example](#custom-pagination-actions).\n- `<TableSortLabel />`: A component used to display sorting controls for column headers, allowing users to sort data in ascending or descending order. See the ['Sorting & selecting' example](#sorting-amp-selecting)."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Basic table",
      "introduction": [
        "Basic table\n\nA simple example with no frills."
      ],
      "code_path": [
        "BasicTable.js"
      ],
      "children": []
    },
    {
      "name": "Data table",
      "introduction": [
        "Data table\n\nThe `Table` component has a close mapping to the native `<table>` elements.\nThis constraint makes building rich data tables challenging.\n\nThe [`DataGrid` component](/x/react-data-grid/) is designed for use-cases that are focused on handling large amounts of tabular data.\nWhile it comes with a more rigid structure, in exchange, you gain more powerful features."
      ],
      "code_path": [
        "DataTable.js"
      ],
      "children": []
    },
    {
      "name": "Dense table",
      "introduction": [
        "Dense table\n\nA simple example of a dense table with no frills."
      ],
      "code_path": [
        "DenseTable.js"
      ],
      "children": []
    },
    {
      "name": "Sorting & selecting",
      "introduction": [
        "Sorting & selecting\n\nThis example demonstrates the use of `Checkbox` and clickable rows for selection, with a custom `Toolbar`. It uses the `TableSortLabel` component to help style column headings.\n\nThe Table has been given a fixed width to demonstrate horizontal scrolling. In order to prevent the pagination controls from scrolling, the TablePagination component is used outside of the Table. (The ['Custom Table Pagination Action' example](#custom-pagination-actions) below shows the pagination within the TableFooter.)"
      ],
      "code_path": [
        "EnhancedTable.js"
      ],
      "children": []
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
      ],
      "code_path": [
        "CustomizedTables.js"
      ],
      "children": [
        {
          "name": "Custom pagination options",
          "introduction": [
            "Custom pagination options\n\nIt's possible to customize the options shown in the \"Rows per page\" select using the `rowsPerPageOptions` prop.\nYou should either provide an array of:\n\n- **numbers**, each number will be used for the option's label and value.\n\n  ```jsx\n  <TablePagination rowsPerPageOptions={[10, 50]} />\n  ```\n\n- **objects**, the `value` and `label` keys will be used respectively for the value and label of the option (useful for language strings such as 'All').\n\n  ```jsx\n  <TablePagination rowsPerPageOptions={[10, 50, { value: -1, label: 'All' }]} />\n  ```"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Custom pagination actions",
          "introduction": [
            "Custom pagination actions\n\nThe `ActionsComponent` prop of the `TablePagination` component allows the implementation of custom actions."
          ],
          "code_path": [
            "CustomPaginationActionsTable.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Sticky header",
      "introduction": [
        "Sticky header\n\nHere is an example of a table with scrollable rows and fixed column headers.\nIt leverages the `stickyHeader` prop."
      ],
      "code_path": [
        "StickyHeadTable.js"
      ],
      "children": []
    },
    {
      "name": "Column grouping",
      "introduction": [
        "Column grouping\n\nYou can group column headers by rendering multiple table rows inside a table head:\n\n```jsx\n<TableHead>\n  <TableRow />\n  <TableRow />\n</TableHead>\n```"
      ],
      "code_path": [
        "ColumnGroupingTable.js"
      ],
      "children": []
    },
    {
      "name": "Collapsible table",
      "introduction": [
        "Collapsible table\n\nAn example of a table with expandable rows, revealing more information.\nIt utilizes the [`Collapse`](/material-ui/api/collapse/) component."
      ],
      "code_path": [
        "CollapsibleTable.js"
      ],
      "children": []
    },
    {
      "name": "Spanning table",
      "introduction": [
        "Spanning table\n\nA simple example with spanning rows & columns."
      ],
      "code_path": [
        "SpanningTable.js"
      ],
      "children": []
    },
    {
      "name": "Virtualized table",
      "introduction": [
        "Virtualized table\n\nIn the following example, we demonstrate how to use [react-virtuoso](https://github.com/petyosi/react-virtuoso) with the `Table` component.\nIt renders 200 rows and can easily handle more.\nVirtualization helps with performance issues."
      ],
      "code_path": [
        "ReactVirtualizedTable.js"
      ],
      "children": []
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\n(WAI tutorial: <https://www.w3.org/WAI/tutorials/tables/>)"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Caption",
          "introduction": [
            "Caption\n\nA caption functions like a heading for a table. Most screen readers announce the content of captions. Captions help users to find a table and understand what it's about and decide if they want to read it."
          ],
          "code_path": [
            "AccessibleTable.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Unstyled",
      "introduction": [
        "Unstyled\n\nIf you would like to use an unstyled Table, you can use the primitive HTML elements and enhance the table with the TablePaginationUnstyled component.\nSee the demos in the [unstyled table pagination docs](/base-ui/react-table-pagination/)"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}