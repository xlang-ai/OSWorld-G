{
  "name": "use-media-query",
  "introduction": [
    "# useMediaQuery\n\n<p class=\"description\">This React hook listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.</p>\n\nSome of the key features:\n\n- ‚öõÔ∏è It has an idiomatic React API.\n- üöÄ It's performant, it observes the document to detect when its media queries change, instead of polling the values periodically.\n- üì¶ [1.1 kB gzipped](https://bundlephobia.com/package/@mui/material).\n- ü§ñ It supports server-side rendering."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basic media query",
      "introduction": [
        "Basic media query\n\nYou should provide a media query to the first argument of the hook.\nThe media query string can be any valid CSS media query, for example [`'(prefers-color-scheme: dark)'`](/material-ui/customization/dark-mode/#system-preference).",
        "‚ö†Ô∏è You can't use `'print'` per browsers limitation, for example [Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=774398)."
      ],
      "code_path": [
        "SimpleMediaQuery.js",
        null
      ],
      "children": []
    },
    {
      "name": "Using breakpoint helpers",
      "introduction": [
        "Using breakpoint helpers\n\nYou can use Material¬†UI's [breakpoint helpers](/material-ui/customization/breakpoints/) as follows:\n\n```jsx\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```",
        "Alternatively, you can use a callback function, accepting the theme as a first argument:\n\n```jsx\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQuery((theme) => theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n```\n\n‚ö†Ô∏è There is **no default** theme support, you have to inject it in a parent theme provider."
      ],
      "code_path": [
        "ThemeHelper.js",
        null
      ],
      "children": []
    },
    {
      "name": "Using JavaScript syntax",
      "introduction": [
        "Using JavaScript syntax\n\nYou can use [json2mq](https://github.com/akiran/json2mq) to generate media query string from a JavaScript object."
      ],
      "code_path": [
        "JavaScriptMedia.js"
      ],
      "children": []
    },
    {
      "name": "Testing",
      "introduction": [
        "Testing\n\nYou need an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your test environment.\n\nFor instance, [jsdom doesn't support it yet](https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom). You should polyfill it.\nUsing [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate it is recommended.\n\n```js\nimport mediaQuery from 'css-mediaquery';\n\nfunction createMatchMedia(width) {\n  return (query) => ({\n    matches: mediaQuery.match(query, {\n      width,\n    }),\n    addEventListener: () => {},\n    removeEventListener: () => {},\n  });\n}\n\ndescribe('MyTests', () => {\n  beforeAll(() => {\n    window.matchMedia = createMatchMedia(window.innerWidth);\n  });\n});\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Client-side only rendering",
      "introduction": [
        "Client-side only rendering\n\nTo perform the server-side hydration, the hook needs to render twice.\nA first time with `defaultMatches`, the value of the server, and a second time with the resolved value.\nThis double pass rendering cycle comes with a drawback: it's slower.\nYou can set the `noSsr` option to `true` if you use the returned value **only** client-side.\n\n```js\nconst matches = useMediaQuery('(min-width:600px)', { noSsr: true });\n```\n\nor it can turn it on globally with the theme:\n\n```js\nconst theme = createTheme({\n  components: {\n    MuiUseMediaQuery: {\n      defaultProps: {\n        noSsr: true,\n      },\n    },\n  },\n});\n```\n\n:::info\nNote that `noSsr` has no effects when using the `createRoot()` API (the client-side only API introduced in React 18).\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Server-side rendering",
      "introduction": [
        "Server-side rendering\n\n:::warning\nServer-side rendering and client-side media queries are fundamentally at odds.\nBe aware of the tradeoff. The support can only be partial.\n:::\n\nTry relying on client-side CSS media queries first.\nFor instance, you could use:\n\n- [`<Box display>`](/system/display/#hiding-elements)\n- [`themes.breakpoints.up(x)`](/material-ui/customization/breakpoints/#css-media-queries)\n- or [`sx prop`](/system/getting-started/the-sx-prop/)\n\nIf none of the above alternatives are an option, you can proceed reading this section of the documentation.\n\nFirst, you need to guess the characteristics of the client request, from the server.\nYou have the choice between using:\n\n- **User agent**. Parse the user agent string of the client to extract information. Using [ua-parser-js](https://github.com/faisalman/ua-parser-js) to parse the user agent is recommended.\n- **Client hints**. Read the hints the client is sending to the server. Be aware that this feature is [not supported everywhere](https://caniuse.com/#search=client%20hint).\n\nFinally, you need to provide an implementation of [matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) to the `useMediaQuery` with the previously guessed characteristics.\nUsing [css-mediaquery](https://github.com/ericf/css-mediaquery) to emulate matchMedia is recommended.\n\nFor instance on the server-side:\n\n```js\nimport * as ReactDOMServer from 'react-dom/server';\nimport parser from 'ua-parser-js';\nimport mediaQuery from 'css-mediaquery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nfunction handleRender(req, res) {\n  const deviceType = parser(req.headers['user-agent']).device.type || 'desktop';\n  const ssrMatchMedia = (query) => ({\n    matches: mediaQuery.match(query, {\n      // The estimated CSS width of the browser.\n      width: deviceType === 'mobile' ? '0px' : '1024px',\n    }),\n  });\n\n  const theme = createTheme({\n    components: {\n      // Change the default options of useMediaQuery\n      MuiUseMediaQuery: {\n        defaultProps: {\n          ssrMatchMedia,\n        },\n      },\n    },\n  });\n\n  const html = ReactDOMServer.renderToString(\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>,\n  );\n\n  // ‚Ä¶\n}\n```",
        "Make sure you provide the same custom match media implementation to the client-side to guarantee a hydration match."
      ],
      "code_path": [
        "ServerSide.js",
        null
      ],
      "children": []
    },
    {
      "name": "Migrating from `withWidth()`",
      "introduction": [
        "Migrating from `withWidth()`\n\nThe `withWidth()` higher-order component injects the screen width of the page.\nYou can reproduce the same behavior with a `useWidth` hook:"
      ],
      "code_path": [
        "UseWidth.js"
      ],
      "children": []
    },
    {
      "name": "API",
      "introduction": [
        "API"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "`useMediaQuery(query, [options]) => matches`",
          "introduction": [
            "`useMediaQuery(query, [options]) => matches`"
          ],
          "code_path": [
            null
          ],
          "children": [
            {
              "name": "Arguments",
              "introduction": [
                "Arguments\n\n1. `query` (_string_ | _func_): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.\n2. `options` (_object_ [optional]):\n\n- `options.defaultMatches` (_bool_ [optional]):\n  As `window.matchMedia()` is unavailable on the server,\n  it returns a default matches during the first mount. The default value is `false`.\n- `options.matchMedia` (_func_ [optional]): You can provide your own implementation of _matchMedia_. This can be used for handling an iframe content window.\n- `options.noSsr` (_bool_ [optional]): Defaults to `false`.\n  To perform the server-side hydration, the hook needs to render twice.\n  A first time with `defaultMatches`, the value of the server, and a second time with the resolved value.\n  This double pass rendering cycle comes with a drawback: it's slower.\n  You can set this option to `true` if you use the returned value **only** client-side.\n- `options.ssrMatchMedia` (_func_ [optional]): You can provide your own implementation of _matchMedia_, it's used when rendering server-side.\n\nNote: You can change the default options using the [`default props`](/material-ui/customization/theme-components/#theme-default-props) feature of the theme with the `MuiUseMediaQuery` key."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Returns",
              "introduction": [
                "Returns\n\n`matches`: Matches is `true` if the document currently matches the media query and `false` when it does not."
              ],
              "code_path": [
                null
              ],
              "children": []
            },
            {
              "name": "Examples",
              "introduction": [
                "Examples\n\n```jsx\nimport * as React from 'react';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\n}\n```"
              ],
              "code_path": [
                null
              ],
              "children": []
            }
          ]
        }
      ]
    }
  ]
}