{
  "name": "slider",
  "introduction": [
    "# Slider\n\n<p class=\"description\">Sliders allow users to make selections from a range of values.</p>\n\nSliders reflect a range of values along a bar, from which users may select a single value. They are ideal for adjusting settings such as volume, brightness, or applying image filters."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Continuous sliders",
      "introduction": [
        "Continuous sliders\n\nContinuous sliders allow users to select a value along a subjective range."
      ],
      "code_path": [
        "ContinuousSlider.js"
      ],
      "children": []
    },
    {
      "name": "Sizes",
      "introduction": [
        "Sizes\n\nFor smaller slider, use the prop `size=\"small\"`."
      ],
      "code_path": [
        "SliderSizes.js"
      ],
      "children": []
    },
    {
      "name": "Discrete sliders",
      "introduction": [
        "Discrete sliders\n\nDiscrete sliders can be adjusted to a specific value by referencing its value indicator.\nYou can generate a mark for each step with `marks={true}`."
      ],
      "code_path": [
        "DiscreteSlider.js"
      ],
      "children": [
        {
          "name": "Small steps",
          "introduction": [
            "Small steps\n\nYou can change the default step increment.\nMake sure to adjust the `shiftStep` prop (the granularity with which the slider can step when using Page Up/Down or Shift + Arrow Up/Down) to a value divadable with the `step`."
          ],
          "code_path": [
            "DiscreteSliderSteps.js"
          ],
          "children": []
        },
        {
          "name": "Custom marks",
          "introduction": [
            "Custom marks\n\nYou can have custom marks by providing a rich array to the `marks` prop."
          ],
          "code_path": [
            "DiscreteSliderMarks.js"
          ],
          "children": []
        },
        {
          "name": "Restricted values",
          "introduction": [
            "Restricted values\n\nYou can restrict the selectable values to those provided with the `marks` prop with `step={null}`."
          ],
          "code_path": [
            "DiscreteSliderValues.js"
          ],
          "children": []
        },
        {
          "name": "Label always visible",
          "introduction": [
            "Label always visible\n\nYou can force the thumb label to be always visible with `valueLabelDisplay=\"on\"`."
          ],
          "code_path": [
            "DiscreteSliderLabel.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Range slider",
      "introduction": [
        "Range slider\n\nThe slider can be used to set the start and end of a range by supplying an array of values to the `value` prop."
      ],
      "code_path": [
        "RangeSlider.js"
      ],
      "children": [
        {
          "name": "Minimum distance",
          "introduction": [
            "Minimum distance\n\nYou can enforce a minimum distance between values in the `onChange` event handler.\nBy default, when you move the pointer over a thumb while dragging another thumb, the active thumb will swap to the hovered thumb. You can disable this behavior with the `disableSwap` prop.\nIf you want the range to shift when reaching minimum distance, you can utilize the `activeThumb` parameter in `onChange`."
          ],
          "code_path": [
            "MinimumDistanceSlider.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Slider with input field",
      "introduction": [
        "Slider with input field\n\nIn this example, an input allows a discrete value to be set."
      ],
      "code_path": [
        "InputSlider.js"
      ],
      "children": []
    },
    {
      "name": "Color",
      "introduction": [
        "Color"
      ],
      "code_path": [
        "ColorSlider.js"
      ],
      "children": []
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/)."
      ],
      "code_path": [
        "CustomizedSlider.js"
      ],
      "children": [
        {
          "name": "Music player",
          "introduction": [
            "Music player"
          ],
          "code_path": [
            "MusicPlayerSlider.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Vertical sliders",
      "introduction": [
        "Vertical sliders\n\nSet the `orientation` prop to `\"vertical\"` to create vertical sliders. The thumb will track vertical movement instead of horizontal movement.",
        ":::warning\nChrome versions below 124 implement `aria-orientation` incorrectly for vertical sliders and expose them as `'horizontal'` in the accessibility tree. ([Chromium issue #40736841](https://issues.chromium.org/issues/40736841))\n\nThe `-webkit-appearance: slider-vertical` CSS property can be used to correct this for these older versions, with the trade-off of causing a console warning in newer Chrome versions:\n\n```css\n.MuiSlider-thumb input {\n  -webkit-appearance: slider-vertical;\n}\n```\n\n:::"
      ],
      "code_path": [
        "VerticalSlider.js",
        null
      ],
      "children": []
    },
    {
      "name": "Marks placement",
      "introduction": [
        "Marks placement\n\nYou can customize your slider by adding and repositioning marks for minimum and maximum values."
      ],
      "code_path": [
        "CustomMarks.js"
      ],
      "children": []
    },
    {
      "name": "Track",
      "introduction": [
        "Track\n\nThe track shows the range available for user selection."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Removed track",
          "introduction": [
            "Removed track\n\nThe track can be turned off with `track={false}`."
          ],
          "code_path": [
            "TrackFalseSlider.js"
          ],
          "children": []
        },
        {
          "name": "Inverted track",
          "introduction": [
            "Inverted track\n\nThe track can be inverted with `track=\"inverted\"`."
          ],
          "code_path": [
            "TrackInvertedSlider.js"
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Non-linear scale",
      "introduction": [
        "Non-linear scale\n\nYou can use the `scale` prop to represent the `value` on a different scale.\n\nIn the following demo, the value _x_ represents the value _2^x_.\nIncreasing _x_ by one increases the represented value by factor _2_."
      ],
      "code_path": [
        "NonLinearSlider.js"
      ],
      "children": []
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\n(WAI-ARIA: https://www.w3.org/WAI/ARIA/apg/patterns/slider-multithumb/)\n\nThe component handles most of the work necessary to make it accessible.\nHowever, you need to make sure that:\n\n- Each thumb has a user-friendly label (`aria-label`, `aria-labelledby` or `getAriaLabel` prop).\n- Each thumb has a user-friendly text for its current value.\n  This is not required if the value matches the semantics of the label.\n  You can change the name with the `getAriaValueText` or `aria-valuetext` prop."
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}