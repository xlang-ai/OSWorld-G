{
  "name": "grid",
  "introduction": [
    "# Grid\n\n<p class=\"description\">The Material Design responsive layout grid adapts to screen size and orientation, ensuring consistency across layouts.</p>\n\nThe [grid](https://m2.material.io/design/layout/responsive-layout-grid.html) creates visual consistency between layouts while allowing flexibility across a wide variety of designs.\nMaterial Design's responsive UI is based on a 12-column grid layout.\n\n\n\n:::warning\nThe `Grid` component shouldn't be confused with a data grid; it is closer to a layout grid. For a data grid head to [the `DataGrid` component](/x/react-data-grid/).\n:::\n\n:::warning\nThe `Grid` component has been deprecated. Please use [Grid v2](/material-ui/react-grid2/) instead. See how to migrate in the [Grid v2 migration guide](/material-ui/migration/migration-grid-v2/) and [Material UI v6 upgrade guide](/material-ui/migration/upgrade-to-v6/).\n:::"
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "How it works",
      "introduction": [
        "How it works\n\nThe grid system is implemented with the `Grid` component:\n\n- It uses [CSS's Flexible Box module](https://www.w3.org/TR/css-flexbox-1/) for high flexibility.\n- There are two types of layout: _containers_ and _items_.\n- Item widths are set in percentages, so they're always fluid and sized relative to their parent element.\n- Items have padding to create the spacing between individual items.\n- There are five grid breakpoints: xs, sm, md, lg, and xl.\n- Integer values can be given to each breakpoint, indicating how many of the 12 available columns are occupied by the component when the viewport width satisfies the [breakpoint constraints](/material-ui/customization/breakpoints/#default-breakpoints).\n\nIf you are **new to or unfamiliar with flexbox**, we encourage you to read this [CSS-Tricks flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) guide."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Fluid grids",
      "introduction": [
        "Fluid grids\n\nFluid grids use columns that scale and resize content. A fluid grid's layout can use breakpoints to determine if the layout needs to change dramatically."
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Basic grid",
          "introduction": [
            "Basic grid\n\nColumn widths are integer values between 1 and 12; they apply at any breakpoint and indicate how many columns are occupied by the component.\n\nA value passed to any given breakpoint also applies to all wider breakpoints (if they have no values explicitly defined).\nFor example, `xs={12}` sizes a component to occupy the full width of its parent container, regardless of the viewport size.\n\n{{\"demo\": \"BasicGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "Grid with multiple breakpoints",
          "introduction": [
            "Grid with multiple breakpoints\n\nComponents may have multiple widths defined, causing the layout to change at the defined breakpoint. Width values given to larger breakpoints override those given to smaller breakpoints.\n\nFor example, `xs={12} sm={6}` sizes a component to occupy half of the viewport width (6 columns) when viewport width is [600 or more pixels](/material-ui/customization/breakpoints/#default-breakpoints). For smaller viewports, the component fills all 12 available columns.\n\n{{\"demo\": \"FullWidthGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Spacing",
      "introduction": [
        "Spacing\n\nTo control space between children, use the `spacing` prop.\nThe spacing value can be any positive number, including decimals and any string.\nThe prop is converted into a CSS property using the [`theme.spacing()`](/material-ui/customization/spacing/) helper.\n\n{{\"demo\": \"SpacingGrid.js\", \"bg\": true}}"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Row & column spacing",
          "introduction": [
            "Row & column spacing\n\nThe `rowSpacing` and `columnSpacing` props allow for specifying the row and column gaps independently.\nIt's similar to the `row-gap` and `column-gap` properties of [CSS Grid](/system/grid/#row-gap-amp-column-gap).\n\n{{\"demo\": \"RowAndColumnSpacing.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Responsive values",
      "introduction": [
        "Responsive values\n\nYou can switch the props' value based on the active breakpoint.\nFor instance, we can implement the [\"recommended\"](https://m2.material.io/design/layout/responsive-layout-grid.html) responsive layout grid of Material Design.\n\n{{\"demo\": \"ResponsiveGrid.js\", \"bg\": true}}\n\nResponsive values is supported by:\n\n- `columns`\n- `columnSpacing`\n- `direction`\n- `rowSpacing`\n- `spacing`\n- all the [other props](#system-props) of MUI System\n\n:::warning\nWhen using a responsive `columns` prop, each grid item needs its corresponding breakpoint.\nFor instance, this is not working. The grid item misses the value for `md`:\n\n```jsx\n<Grid container columns={{ xs: 4, md: 12 }}>\n  <Grid item xs={2} />\n</Grid>\n```\n\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Interactive",
      "introduction": [
        "Interactive\n\nBelow is an interactive demo that lets you explore the visual results of the different settings:\n\n{{\"demo\": \"InteractiveGrid.js\", \"hideToolbar\": true, \"bg\": true}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Auto-layout",
      "introduction": [
        "Auto-layout\n\nThe Auto-layout makes the _items_ equitably share the available space.\nThat also means you can set the width of one _item_ and the others will automatically resize around it.\n\n{{\"demo\": \"AutoGrid.js\", \"bg\": true}}"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Variable width content",
          "introduction": [
            "Variable width content\n\nSet one of the size breakpoint props to `\"auto\"` instead of `true` / a `number` to size\na column based on the natural width of its content.\n\n{{\"demo\": \"VariableWidthGrid.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "Complex Grid",
      "introduction": [
        "Complex Grid\n\nThe following demo doesn't follow the Material Design guidelines, but illustrates how the grid can be used to build complex layouts.\n\n{{\"demo\": \"ComplexGrid.js\", \"bg\": true}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Nested Grid",
      "introduction": [
        "Nested Grid\n\nThe `container` and `item` props are two independent booleans; they can be combined to allow a Grid component to be both a flex container and child.\n\n:::info\nA flex **container** is the box generated by an element with a computed display of `flex` or `inline-flex`. In-flow children of a flex container are called flex **items** and are laid out using the flex layout model.\n:::\n\nhttps://www.w3.org/TR/css-flexbox-1/#box-model\n\n{{\"demo\": \"NestedGrid.js\", \"bg\": true}}\n\n⚠️ Defining an explicit width to a Grid element that is flex container, flex item, and has spacing at the same time leads to unexpected behavior, avoid doing it:\n\n```jsx\n<Grid spacing={1} container item xs={12}>\n```\n\nIf you need to do such, remove one of the props."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Columns",
      "introduction": [
        "Columns\n\nYou can change the default number of columns (12) with the `columns` prop.\n\n{{\"demo\": \"ColumnsGrid.js\", \"bg\": true}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Limitations",
      "introduction": [
        "Limitations"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "Negative margin",
          "introduction": [
            "Negative margin\n\nThe spacing between items is implemented with a negative margin. This might lead to unexpected behaviors. For instance, to apply a background color, you need to apply `display: flex;` to the parent."
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "white-space: nowrap",
          "introduction": [
            "white-space: nowrap\n\nThe initial setting on flex items is `min-width: auto`.\nThis causes a positioning conflict when children use `white-space: nowrap;`.\nYou can reproduce the issue with:\n\n```jsx\n<Grid item xs>\n  <Typography noWrap>\n```\n\nIn order for the item to stay within the container you need to set `min-width: 0`.\nIn practice, you can set the `zeroMinWidth` prop:\n\n```jsx\n<Grid item xs zeroMinWidth>\n  <Typography noWrap>\n```\n\n{{\"demo\": \"AutoGridNoWrap.js\", \"bg\": true}}"
          ],
          "code_path": [
            null
          ],
          "children": []
        },
        {
          "name": "direction: column | column-reverse",
          "introduction": [
            "direction: column | column-reverse\n\nThe `xs`, `sm`, `md`, `lg`, and `xl` props are **not supported** within `direction=\"column\"` and `direction=\"column-reverse\"` containers.\n\nThey define the number of grids the component will use for a given breakpoint. They are intended to control **width** using `flex-basis` in `row` containers but they will impact height in `column` containers.\nIf used, these props may have undesirable effects on the height of the `Grid` item elements."
          ],
          "code_path": [
            null
          ],
          "children": []
        }
      ]
    },
    {
      "name": "CSS Grid Layout",
      "introduction": [
        "CSS Grid Layout\n\nThe `Grid` component is using CSS flexbox internally.\nBut as seen below, you can easily use [MUI System](/system/grid/) and CSS Grid to layout your pages.\n\n{{\"demo\": \"CSSGrid.js\", \"bg\": true}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "System props",
      "introduction": [
        "System props\n\n:::info\nSystem props are deprecated and will be removed in the next major release. Please use the `sx` prop instead.\n\n```diff\n- <Grid item p={2} />\n+ <Grid item sx={{ p: 2 }} />\n```\n\n:::"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}