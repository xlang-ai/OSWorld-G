{
  "name": "switches",
  "introduction": [
    "# Switch\n\n<p class=\"description\">Switches toggle the state of a single setting on or off.</p>\n\nSwitches are the preferred way to adjust settings on mobile.\nThe option that the switch controls, as well as the state it's in,\nshould be made clear from the corresponding inline label."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basic switches",
      "introduction": [
        "Basic switches"
      ],
      "code_path": [
        "BasicSwitches.js"
      ],
      "children": []
    },
    {
      "name": "Label",
      "introduction": [
        "Label\n\nYou can provide a label to the `Switch` thanks to the `FormControlLabel` component."
      ],
      "code_path": [
        "SwitchLabels.js"
      ],
      "children": []
    },
    {
      "name": "Size",
      "introduction": [
        "Size\n\nUse the `size` prop to change the size of the switch."
      ],
      "code_path": [
        "SwitchesSize.js"
      ],
      "children": []
    },
    {
      "name": "Color",
      "introduction": [
        "Color"
      ],
      "code_path": [
        "ColorSwitches.js"
      ],
      "children": []
    },
    {
      "name": "Controlled",
      "introduction": [
        "Controlled\n\nYou can control the switch with the `checked` and `onChange` props:"
      ],
      "code_path": [
        "ControlledSwitches.js"
      ],
      "children": []
    },
    {
      "name": "Switches with FormGroup",
      "introduction": [
        "Switches with FormGroup\n\n`FormGroup` is a helpful wrapper used to group selection controls components that provides an easier API.\nHowever, you are encouraged to use [Checkboxes](/material-ui/react-checkbox/) instead if multiple related controls are required. (See: [When to use](#when-to-use))."
      ],
      "code_path": [
        "SwitchesGroup.js"
      ],
      "children": []
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nHere are some examples of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).",
        "ðŸŽ¨ If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/switch-introduction--docs)."
      ],
      "code_path": [
        "CustomizedSwitches.js",
        null
      ],
      "children": []
    },
    {
      "name": "Label placement",
      "introduction": [
        "Label placement\n\nYou can change the placement of the label:"
      ],
      "code_path": [
        "FormControlLabelPosition.js"
      ],
      "children": []
    },
    {
      "name": "When to use",
      "introduction": [
        "When to use\n\n- [Checkboxes vs. Switches](https://uxplanet.org/checkbox-vs-toggle-switch-7fc6e83f10b8)"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Accessibility",
      "introduction": [
        "Accessibility\n\n- It will render an element with the `checkbox` role not `switch` role since this\n  role isn't widely supported yet. Please test first if assistive technology of your\n  target audience supports this role properly. Then you can change the role with\n  `<Switch inputProps={{ role: 'switch' }}>`\n- All form controls should have labels, and this includes radio buttons, checkboxes, and switches. In most cases, this is done by using the `<label>` element ([FormControlLabel](/material-ui/api/form-control-label/)).\n- When a label can't be used, it's necessary to add an attribute directly to the input component.\n  In this case, you can apply the additional attribute (for example `aria-label`, `aria-labelledby`, `title`) via the `inputProps` prop.\n\n```jsx\n<Switch value=\"checkedA\" inputProps={{ 'aria-label': 'Switch A' }} />\n```"
      ],
      "code_path": [
        null
      ],
      "children": []
    }
  ]
}