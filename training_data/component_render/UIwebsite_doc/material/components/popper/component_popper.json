{
  "name": "popper",
  "introduction": [
    "# Popper\n\n<p class=\"description\">A Popper can be used to display some content on top of another. It's an alternative to react-popper.</p>\n\nSome important features of the Popper component:\n\n- ðŸ•· Popper relies on the 3rd party library ([Popper.js](https://popper.js.org/)) for perfect positioning.\n- ðŸ’„ It's an alternative API to react-popper. It aims for simplicity.\n- Its child element is a [BaseÂ UI Portal](/base-ui/react-portal/) on the body of the document to avoid rendering problems.\n  You can disable this behavior with `disablePortal`.\n- The scroll isn't blocked like with the [Popover](/material-ui/react-popover/) component.\n  The placement of the popper updates with the available area in the viewport.\n- Clicking away does not hide the Popper component.\n  If you need this behavior, you can use the [BaseÂ UI Click-Away Listener](/base-ui/react-click-away-listener/) - see the example in the [menu documentation section](/material-ui/react-menu/#composition-with-menu-list).\n- The `anchorEl` is passed as the reference object to create a new `Popper.js` instance."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Basic Popper",
      "introduction": [
        "Basic Popper"
      ],
      "code_path": [
        "SimplePopper.js"
      ],
      "children": []
    },
    {
      "name": "Transitions",
      "introduction": [
        "Transitions\n\nThe open/close state of the popper can be animated with a render prop child and a transition component.\nThis component should respect the following conditions:\n\n- Be a direct child descendent of the popper.\n- Call the `onEnter` callback prop when the enter transition starts.\n- Call the `onExited` callback prop when the exit transition is completed.\n  These two callbacks allow the popper to unmount the child content when closed and fully transitioned.\n\nPopper has built-in support for [react-transition-group](https://github.com/reactjs/react-transition-group).",
        "Alternatively, you can use [react-spring](https://github.com/pmndrs/react-spring)."
      ],
      "code_path": [
        "TransitionsPopper.js",
        "SpringPopper.js"
      ],
      "children": []
    },
    {
      "name": "Positioned popper",
      "introduction": [
        "Positioned popper"
      ],
      "code_path": [
        "PositionedPopper.js"
      ],
      "children": []
    },
    {
      "name": "Scroll playground",
      "introduction": [
        "Scroll playground\n\n{{\"demo\": \"ScrollPlayground.js\", \"hideToolbar\": true, \"bg\": true}}"
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Virtual element",
      "introduction": [
        "Virtual element\n\nThe value of the `anchorEl` prop can be a reference to a fake DOM element.\nYou need to create an object shaped like the [`VirtualElement`](https://popper.js.org/docs/v2/virtual-elements/).\n\nHighlight part of the text to see the popper:"
      ],
      "code_path": [
        "VirtualElementPopper.js"
      ],
      "children": []
    },
    {
      "name": "Supplementary projects",
      "introduction": [
        "Supplementary projects\n\nFor more advanced use cases you might be able to take advantage of:"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "material-ui-popup-state",
          "introduction": [
            "material-ui-popup-state\n\n![stars](https://img.shields.io/github/stars/jcoreio/material-ui-popup-state?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/material-ui-popup-state.svg)\n\nThe package [`material-ui-popup-state`](https://github.com/jcoreio/material-ui-popup-state) that takes care of popper state for you in most cases."
          ],
          "code_path": [
            "PopperPopupState.js"
          ],
          "children": []
        }
      ]
    }
  ]
}