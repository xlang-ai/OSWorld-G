{
  "name": "menus",
  "introduction": [
    "# Menu\n\n<p class=\"description\">Menus display a list of choices on temporary surfaces.</p>\n\nA menu displays a list of choices on a temporary surface. It appears when the user interacts with a button, or other control."
  ],
  "code_path": [
    null
  ],
  "children": [
    {
      "name": "Introduction",
      "introduction": [
        "Introduction\n\nMenus are implemented using a collection of related components:\n\n- Menu: The container/surface of the menu.\n- Menu Item: An option for users to select from the menu.\n- Menu List (optional): Alternative composable container for Menu Itemsâ€”see [Composition with Menu List](#composition-with-menu-list) for details."
      ],
      "code_path": [
        null
      ],
      "children": []
    },
    {
      "name": "Basic menu",
      "introduction": [
        "Basic menu\n\nA basic menu opens over the anchor element by default (this option can be [changed](#menu-positioning) via props). When close to a screen edge, a basic menu vertically realigns to make sure that all menu items are completely visible.\n\nYou should configure the component so that selecting an option immediately confirms it and closes the menu, as shown in the demo below."
      ],
      "code_path": [
        "BasicMenu.js"
      ],
      "children": []
    },
    {
      "name": "Icon menu",
      "introduction": [
        "Icon menu\n\nIn desktop viewport, padding is increased to give more space to the menu."
      ],
      "code_path": [
        "IconMenu.js"
      ],
      "children": []
    },
    {
      "name": "Dense menu",
      "introduction": [
        "Dense menu\n\nFor the menu that has long list and long text, you can use the `dense` prop to reduce the padding and text size."
      ],
      "code_path": [
        "DenseMenu.js"
      ],
      "children": []
    },
    {
      "name": "Selected menu",
      "introduction": [
        "Selected menu\n\nIf used for item selection, when opened, simple menus places the initial focus on the selected menu item.\nThe currently selected menu item is set using the `selected` prop (from [ListItem](/material-ui/api/list-item/)).\nTo use a selected menu item without impacting the initial focus, set the `variant` prop to \"menu\"."
      ],
      "code_path": [
        "SimpleListMenu.js"
      ],
      "children": []
    },
    {
      "name": "Positioned menu",
      "introduction": [
        "Positioned menu\n\nBecause the `Menu` component uses the `Popover` component to position itself, you can use the same [positioning props](/material-ui/react-popover/#anchor-playground) to position it.\nFor instance, you can display the menu on top of the anchor:"
      ],
      "code_path": [
        "PositionedMenu.js"
      ],
      "children": []
    },
    {
      "name": "Composition with Menu List",
      "introduction": [
        "Composition with Menu List\n\nThe Menu component uses the Popover component internally.\nBut you might want to use a different positioning strategy, or prefer not to block scrolling, for example.\n\nThe Menu List component lets you compose your own menu for these kinds of use casesâ€”its primary purpose is to handle focus.\nSee the demo below for an example of composition that uses Menu List and replaces the Menu's default Popover with a Popper component instead:"
      ],
      "code_path": [
        "MenuListComposition.js"
      ],
      "children": []
    },
    {
      "name": "Account menu",
      "introduction": [
        "Account menu\n\n`Menu` content can be mixed with other components like `Avatar`."
      ],
      "code_path": [
        "AccountMenu.js"
      ],
      "children": []
    },
    {
      "name": "Customization",
      "introduction": [
        "Customization\n\nHere is an example of customizing the component.\nYou can learn more about this in the [overrides documentation page](/material-ui/customization/how-to-customize/).",
        "The `MenuItem` is a wrapper around `ListItem` with some additional styles.\nYou can use the same list composition features with the `MenuItem` component:\n\nðŸŽ¨ If you are looking for inspiration, you can check [MUI Treasury's customization examples](https://mui-treasury.com/?path=/docs/menu-introduction--docs)."
      ],
      "code_path": [
        "CustomizedMenus.js",
        null
      ],
      "children": []
    },
    {
      "name": "Max height menu",
      "introduction": [
        "Max height menu\n\nIf the height of a menu prevents all menu items from being displayed, the menu can scroll internally."
      ],
      "code_path": [
        "LongMenu.js"
      ],
      "children": []
    },
    {
      "name": "Limitations",
      "introduction": [
        "Limitations\n\nThere is [a flexbox bug](https://issues.chromium.org/issues/40344463) that prevents `text-overflow: ellipsis` from working in a flexbox layout.\nYou can use the `Typography` component with `noWrap` to workaround this issue:"
      ],
      "code_path": [
        "TypographyMenu.js"
      ],
      "children": []
    },
    {
      "name": "Change transition",
      "introduction": [
        "Change transition\n\nUse a different transition."
      ],
      "code_path": [
        "FadeMenu.js"
      ],
      "children": []
    },
    {
      "name": "Context menu",
      "introduction": [
        "Context menu\n\nHere is an example of a context menu. (Right click to open.)"
      ],
      "code_path": [
        "ContextMenu.js"
      ],
      "children": []
    },
    {
      "name": "Supplementary projects",
      "introduction": [
        "Supplementary projects\n\nFor more advanced use cases you might be able to take advantage of:"
      ],
      "code_path": [
        null
      ],
      "children": [
        {
          "name": "material-ui-popup-state",
          "introduction": [
            "material-ui-popup-state\n\n![stars](https://img.shields.io/github/stars/jcoreio/material-ui-popup-state?style=social&label=Star)\n![npm downloads](https://img.shields.io/npm/dm/material-ui-popup-state.svg)\n\nThe package [`material-ui-popup-state`](https://github.com/jcoreio/material-ui-popup-state) that takes care of menu state for you in most cases."
          ],
          "code_path": [
            "MenuPopupState.js"
          ],
          "children": []
        }
      ]
    }
  ]
}